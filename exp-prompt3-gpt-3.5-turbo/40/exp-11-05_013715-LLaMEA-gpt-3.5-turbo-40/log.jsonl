{"id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            velocity = np.random.uniform(0, 1, size=self.dim) * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient black box optimization.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 32, in __call__\n  File \"<string>\", line 17, in pso_update\nUnboundLocalError: local variable 'velocity' referenced before assignment\n.", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 32, in __call__\n  File \"<string>\", line 17, in pso_update\nUnboundLocalError: local variable 'velocity' referenced before assignment\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "83f6da88-11d9-46db-b951-65ba741394be", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            nonlocal velocity\n            inertia_weight = 0.4 + 0.5 * (self.max_iterations - _) / self.max_iterations\n            velocity = inertia_weight * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "Enhancing the Particle Swarm Optimization (PSO) update step with inertia weight adaptation to improve convergence and exploration balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {}, "mutation_prompt": null}
{"id": "35627f4a-6696-457e-b0b0-d3289c45f397", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            velocity = np.random.uniform(0, 1, size=self.dim) * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {}, "mutation_prompt": null}
{"id": "f12e5e81-49de-46cf-9af1-d17a17e75c77", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            velocity = np.random.uniform(0, 1, size=self.dim) * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {}, "mutation_prompt": null}
{"id": "1ed6c42f-efb1-42b6-8824-bfb9485e31f5", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            velocity = np.random.uniform(0, 1, size=self.dim) * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {}, "mutation_prompt": null}
{"id": "4eb82cca-2115-44d3-a677-90ad49a40d71", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            velocity = np.random.uniform(0, 1, size=self.dim) * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {}, "mutation_prompt": null}
{"id": "d017476b-c5fe-49ea-b31a-4923c88c7600", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            velocity = np.random.uniform(0, 1, size=self.dim) * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {}, "mutation_prompt": null}
{"id": "e9cec5df-5572-4607-82fa-1628fe6a5b9d", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, w=0.7, c1=1.5, c2=1.5):\n            velocity = np.random.uniform(0, 1, size=self.dim) * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + velocity, -5.0, 5.0)\n            return x_new, velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial = pso_update(population[i], pbest[i], gbest)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {}, "mutation_prompt": null}
{"id": "a6169cef-0b77-4fcb-a3b5-33d398ee03c2", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, velocity, w=0.7, c1=1.5, c2=1.5):\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial, new_velocity = pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "Improved Adaptive Hybrid Metaheuristic algorithm that fixes the UnboundLocalError by initializing velocity properly and enhances the optimization process.", "configspace": "", "generation": 8, "fitness": 0.21164968092336756, "feedback": "The algorithm AdaptiveHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "03b9f2b5-18a5-47ba-a630-4f3e0c60e905", "metadata": {"aucs": [0.7164666404485268, 0.8971748694720489, 0.9571328756754927, 0.5975638719234944, 0.9766567716514869, 0.8586685973679484, 0.7109461372994652, 0.8011992790770432, 0.36964944263670296, 0.29613738232788733, 0.4362786640056696, 0.13232019309159804, 0.1455307929302, 0.0583427590036677, 0.3914243741510278, 0.301212334545678, 0.6370256676859443, 9.999999999998899e-05, 0.08493035047293374, 0.06368154378169288, 0.03285975537801311, 0.10878349925128572, 0.06337858504270644, 0.12906076935862365, 0.049425180025916005, 0.06955600579387755, 0.1150769136588391, 0.07173736281347343, 0.07149128424245577, 0.12046208652020818, 0.08810955332363068, 0.10362757018861779, 0.0915715711116325, 0.09401907188649017, 0.11413864801245799, 0.06495408115316936, 0.6736845598030035, 0.9749904986421465, 0.9191239192408057, 0.9233420621692491, 0.9525579686750549, 0.947536658793514, 0.9578506483479029, 0.8150960452188103, 0.9452735683606659, 0.15712575729898925, 0.06046879479631828, 0.0789307290006327, 0.21107333182589305, 0.22328356658291448, 0.11255521309451488, 0.17016128075601045, 0.06252302850501634, 0.28764887846797926, 0.1890049437587651, 0.07067142596809595, 0.13284115499717575, 0.1708079183263157, 0.9710678357351786, 0.06087187185048826, 0.08536086199716997, 0.13060476910041796, 0.049946039905146566, 0.26894709834366404, 0.19523766783586338, 0.1570431158190344, 0.14993079144597743, 0.15384435755175185, 9.999999999998899e-05, 0.16343145910706058, 0.01609867370310092, 0.13363320919039923, 0.13963497677559877, 0.06485375451899322, 0.14616090026037398, 0.16830219923600964, 0.13882922962669275, 0.2770556216152269, 0.14346349726808205, 9.999999999998899e-05, 0.16655457273668695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05063311111344304, 0.027337723242865875, 0.0736306179939975, 0.05486984310352605, 0.029521171425583304, 0.0013650501874628018, 0.16851241560903107, 0.052238789082277415, 0.043586647802667744, 9.999999999998899e-05, 0.07504298918177732, 0.12550993364225393, 0.09767921900534415, 0.21896532986389594, 0.20891171069032888, 0.14002847515316585, 0.11446004836916035, 9.999999999998899e-05, 0.15084019496059864, 0.06088006706737392, 0.14429224792641637, 9.999999999998899e-05, 0.09453165088871374, 0.03140496612828281, 0.08722210841025557, 0.014299332749373006, 0.12403603697253751, 0.3416385238277355, 0.38004465838480384, 0.41901752234305567, 0.3436651267744891, 0.31965638077825487, 0.4151410424325158, 0.4194464331406108, 0.4271941972418576, 0.3723241576442602, 0.06819197162038892, 0.0839842457349792, 0.036585755670578535, 0.06153117839220468, 0.1104623876141172, 0.09086556514358402, 0.08186417693650294, 0.0866042754559001, 0.07871748803577217, 0.277836604609642, 0.23585233933391414, 0.13401492580167484, 0.23280719212749001, 0.14048268289589727, 0.11333323188566213, 0.33925697232256313, 0.18265705051219672, 0.18597018640168184, 0.1587622398486006, 0.2218798005846282, 0.1319172968437884, 0.16276529515411786, 0.2338941761666099, 0.1708686477744965, 0.14714605683032334, 0.23773895826522295, 0.15204279386369146, 0.14999910519448334, 0.18988427213989245, 0.13172105615017138, 0.1360997359466295, 0.13458535703490537, 0.11858139963644376, 0.09546518014869743, 0.20881595626476257, 0.07224974087131941, 0.19606993664907824, 0.2143710457430522, 0.17868855464484512, 0.19772800923104905, 0.192948405747574, 0.22497833935044464, 0.2752073284004918, 0.15399893595904146, 0.19064515666686377, 0.18923445149338236, 0.1686647496349013, 0.1724334296487967, 0.1889220200919608, 0.21596690568962085, 0.18396017990101832, 0.17419569547916436, 0.1825952657273281, 0.18856819842604422, 0.5030243004336475, 0.12646042542438385, 0.15471946642754775, 0.7095800508240664, 0.20230568143926375, 0.19861706872169493, 0.10019694999857387, 0.17071842984786767, 0.16402487987829772, 0.08351015884770674, 0.21121499882424621, 0.09260136122774287, 0.10543882127131088, 0.2298803955075479, 0.21345757021747047, 0.10562380459183474, 0.3242903379754364, 0.1513231583765835, 0.2792337984706661, 0.21563225227653549, 0.2139383763106827, 0.19618150409030444, 0.2104864459494875, 0.20388659276950294, 0.20082479432994638, 0.22699098255523353, 0.24147489038162628, 0.10582949759163673, 0.12678895175133997, 0.07407172568686182, 0.0693526089971761, 0.0803870471954955, 0.06109716587115477, 0.078489586319469, 0.07139433400726358, 0.061224092659084794]}, "mutation_prompt": null}
{"id": "8c859277-7c88-42c6-814a-4973455d027b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def cauchy_mutate(x, pop, beta=0.1):\n            candidates = pop[np.random.choice(len(pop), 2, replace=False)]\n            mutant = x + beta * (np.arctan(candidates[0] - x) / np.pi + 0.5) * (candidates[1] - x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, velocity, w=0.7, c1=1.5, c2=1.5):\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = cauchy_mutate(population[i], population)\n                trial, new_velocity = pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedAdaptiveHybridMetaheuristic", "description": "Enhancing the diversity of the population through a novel mutation strategy called Cauchy Mutation to escape local optima in the optimization process.", "configspace": "", "generation": 9, "fitness": 0.21164968092336756, "feedback": "The algorithm EnhancedAdaptiveHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "a6169cef-0b77-4fcb-a3b5-33d398ee03c2", "metadata": {"aucs": [0.7164666404485268, 0.8971748694720489, 0.9571328756754927, 0.5975638719234944, 0.9766567716514869, 0.8586685973679484, 0.7109461372994652, 0.8011992790770432, 0.36964944263670296, 0.29613738232788733, 0.4362786640056696, 0.13232019309159804, 0.1455307929302, 0.0583427590036677, 0.3914243741510278, 0.301212334545678, 0.6370256676859443, 9.999999999998899e-05, 0.08493035047293374, 0.06368154378169288, 0.03285975537801311, 0.10878349925128572, 0.06337858504270644, 0.12906076935862365, 0.049425180025916005, 0.06955600579387755, 0.1150769136588391, 0.07173736281347343, 0.07149128424245577, 0.12046208652020818, 0.08810955332363068, 0.10362757018861779, 0.0915715711116325, 0.09401907188649017, 0.11413864801245799, 0.06495408115316936, 0.6736845598030035, 0.9749904986421465, 0.9191239192408057, 0.9233420621692491, 0.9525579686750549, 0.947536658793514, 0.9578506483479029, 0.8150960452188103, 0.9452735683606659, 0.15712575729898925, 0.06046879479631828, 0.0789307290006327, 0.21107333182589305, 0.22328356658291448, 0.11255521309451488, 0.17016128075601045, 0.06252302850501634, 0.28764887846797926, 0.1890049437587651, 0.07067142596809595, 0.13284115499717575, 0.1708079183263157, 0.9710678357351786, 0.06087187185048826, 0.08536086199716997, 0.13060476910041796, 0.049946039905146566, 0.26894709834366404, 0.19523766783586338, 0.1570431158190344, 0.14993079144597743, 0.15384435755175185, 9.999999999998899e-05, 0.16343145910706058, 0.01609867370310092, 0.13363320919039923, 0.13963497677559877, 0.06485375451899322, 0.14616090026037398, 0.16830219923600964, 0.13882922962669275, 0.2770556216152269, 0.14346349726808205, 9.999999999998899e-05, 0.16655457273668695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05063311111344304, 0.027337723242865875, 0.0736306179939975, 0.05486984310352605, 0.029521171425583304, 0.0013650501874628018, 0.16851241560903107, 0.052238789082277415, 0.043586647802667744, 9.999999999998899e-05, 0.07504298918177732, 0.12550993364225393, 0.09767921900534415, 0.21896532986389594, 0.20891171069032888, 0.14002847515316585, 0.11446004836916035, 9.999999999998899e-05, 0.15084019496059864, 0.06088006706737392, 0.14429224792641637, 9.999999999998899e-05, 0.09453165088871374, 0.03140496612828281, 0.08722210841025557, 0.014299332749373006, 0.12403603697253751, 0.3416385238277355, 0.38004465838480384, 0.41901752234305567, 0.3436651267744891, 0.31965638077825487, 0.4151410424325158, 0.4194464331406108, 0.4271941972418576, 0.3723241576442602, 0.06819197162038892, 0.0839842457349792, 0.036585755670578535, 0.06153117839220468, 0.1104623876141172, 0.09086556514358402, 0.08186417693650294, 0.0866042754559001, 0.07871748803577217, 0.277836604609642, 0.23585233933391414, 0.13401492580167484, 0.23280719212749001, 0.14048268289589727, 0.11333323188566213, 0.33925697232256313, 0.18265705051219672, 0.18597018640168184, 0.1587622398486006, 0.2218798005846282, 0.1319172968437884, 0.16276529515411786, 0.2338941761666099, 0.1708686477744965, 0.14714605683032334, 0.23773895826522295, 0.15204279386369146, 0.14999910519448334, 0.18988427213989245, 0.13172105615017138, 0.1360997359466295, 0.13458535703490537, 0.11858139963644376, 0.09546518014869743, 0.20881595626476257, 0.07224974087131941, 0.19606993664907824, 0.2143710457430522, 0.17868855464484512, 0.19772800923104905, 0.192948405747574, 0.22497833935044464, 0.2752073284004918, 0.15399893595904146, 0.19064515666686377, 0.18923445149338236, 0.1686647496349013, 0.1724334296487967, 0.1889220200919608, 0.21596690568962085, 0.18396017990101832, 0.17419569547916436, 0.1825952657273281, 0.18856819842604422, 0.5030243004336475, 0.12646042542438385, 0.15471946642754775, 0.7095800508240664, 0.20230568143926375, 0.19861706872169493, 0.10019694999857387, 0.17071842984786767, 0.16402487987829772, 0.08351015884770674, 0.21121499882424621, 0.09260136122774287, 0.10543882127131088, 0.2298803955075479, 0.21345757021747047, 0.10562380459183474, 0.3242903379754364, 0.1513231583765835, 0.2792337984706661, 0.21563225227653549, 0.2139383763106827, 0.19618150409030444, 0.2104864459494875, 0.20388659276950294, 0.20082479432994638, 0.22699098255523353, 0.24147489038162628, 0.10582949759163673, 0.12678895175133997, 0.07407172568686182, 0.0693526089971761, 0.0803870471954955, 0.06109716587115477, 0.078489586319469, 0.07139433400726358, 0.061224092659084794]}, "mutation_prompt": null}
{"id": "b45d2f6d-909b-4c9d-940c-67258cf13585", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, velocity, w=0.7, c1=1.5, c2=1.5):\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial, new_velocity = pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "Improved Adaptive Hybrid Metaheuristic algorithm that fixes the UnboundLocalError by initializing velocity properly and enhances the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a6169cef-0b77-4fcb-a3b5-33d398ee03c2", "metadata": {"aucs": [0.7164666404485268, 0.8971748694720489, 0.9571328756754927, 0.5975638719234944, 0.9766567716514869, 0.8586685973679484, 0.7109461372994652, 0.8011992790770432, 0.36964944263670296, 0.29613738232788733, 0.4362786640056696, 0.13232019309159804, 0.1455307929302, 0.0583427590036677, 0.3914243741510278, 0.301212334545678, 0.6370256676859443, 9.999999999998899e-05, 0.08493035047293374, 0.06368154378169288, 0.03285975537801311, 0.10878349925128572, 0.06337858504270644, 0.12906076935862365, 0.049425180025916005, 0.06955600579387755, 0.1150769136588391, 0.07173736281347343, 0.07149128424245577, 0.12046208652020818, 0.08810955332363068, 0.10362757018861779, 0.0915715711116325, 0.09401907188649017, 0.11413864801245799, 0.06495408115316936, 0.6736845598030035, 0.9749904986421465, 0.9191239192408057, 0.9233420621692491, 0.9525579686750549, 0.947536658793514, 0.9578506483479029, 0.8150960452188103, 0.9452735683606659, 0.15712575729898925, 0.06046879479631828, 0.0789307290006327, 0.21107333182589305, 0.22328356658291448, 0.11255521309451488, 0.17016128075601045, 0.06252302850501634, 0.28764887846797926, 0.1890049437587651, 0.07067142596809595, 0.13284115499717575, 0.1708079183263157, 0.9710678357351786, 0.06087187185048826, 0.08536086199716997, 0.13060476910041796, 0.049946039905146566, 0.26894709834366404, 0.19523766783586338, 0.1570431158190344, 0.14993079144597743, 0.15384435755175185, 9.999999999998899e-05, 0.16343145910706058, 0.01609867370310092, 0.13363320919039923, 0.13963497677559877, 0.06485375451899322, 0.14616090026037398, 0.16830219923600964, 0.13882922962669275, 0.2770556216152269, 0.14346349726808205, 9.999999999998899e-05, 0.16655457273668695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05063311111344304, 0.027337723242865875, 0.0736306179939975, 0.05486984310352605, 0.029521171425583304, 0.0013650501874628018, 0.16851241560903107, 0.052238789082277415, 0.043586647802667744, 9.999999999998899e-05, 0.07504298918177732, 0.12550993364225393, 0.09767921900534415, 0.21896532986389594, 0.20891171069032888, 0.14002847515316585, 0.11446004836916035, 9.999999999998899e-05, 0.15084019496059864, 0.06088006706737392, 0.14429224792641637, 9.999999999998899e-05, 0.09453165088871374, 0.03140496612828281, 0.08722210841025557, 0.014299332749373006, 0.12403603697253751, 0.3416385238277355, 0.38004465838480384, 0.41901752234305567, 0.3436651267744891, 0.31965638077825487, 0.4151410424325158, 0.4194464331406108, 0.4271941972418576, 0.3723241576442602, 0.06819197162038892, 0.0839842457349792, 0.036585755670578535, 0.06153117839220468, 0.1104623876141172, 0.09086556514358402, 0.08186417693650294, 0.0866042754559001, 0.07871748803577217, 0.277836604609642, 0.23585233933391414, 0.13401492580167484, 0.23280719212749001, 0.14048268289589727, 0.11333323188566213, 0.33925697232256313, 0.18265705051219672, 0.18597018640168184, 0.1587622398486006, 0.2218798005846282, 0.1319172968437884, 0.16276529515411786, 0.2338941761666099, 0.1708686477744965, 0.14714605683032334, 0.23773895826522295, 0.15204279386369146, 0.14999910519448334, 0.18988427213989245, 0.13172105615017138, 0.1360997359466295, 0.13458535703490537, 0.11858139963644376, 0.09546518014869743, 0.20881595626476257, 0.07224974087131941, 0.19606993664907824, 0.2143710457430522, 0.17868855464484512, 0.19772800923104905, 0.192948405747574, 0.22497833935044464, 0.2752073284004918, 0.15399893595904146, 0.19064515666686377, 0.18923445149338236, 0.1686647496349013, 0.1724334296487967, 0.1889220200919608, 0.21596690568962085, 0.18396017990101832, 0.17419569547916436, 0.1825952657273281, 0.18856819842604422, 0.5030243004336475, 0.12646042542438385, 0.15471946642754775, 0.7095800508240664, 0.20230568143926375, 0.19861706872169493, 0.10019694999857387, 0.17071842984786767, 0.16402487987829772, 0.08351015884770674, 0.21121499882424621, 0.09260136122774287, 0.10543882127131088, 0.2298803955075479, 0.21345757021747047, 0.10562380459183474, 0.3242903379754364, 0.1513231583765835, 0.2792337984706661, 0.21563225227653549, 0.2139383763106827, 0.19618150409030444, 0.2104864459494875, 0.20388659276950294, 0.20082479432994638, 0.22699098255523353, 0.24147489038162628, 0.10582949759163673, 0.12678895175133997, 0.07407172568686182, 0.0693526089971761, 0.0803870471954955, 0.06109716587115477, 0.078489586319469, 0.07139433400726358, 0.061224092659084794]}, "mutation_prompt": null}
{"id": "b9efd6cc-4428-4d90-a6ef-cbd85c1451f6", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def de_mutate(x, pop, f=0.5):\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest, velocity, w=0.7, c1=1.5, c2=1.5):\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = de_mutate(population[i], population)\n                trial, new_velocity = pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdaptiveHybridMetaheuristic", "description": "Improved Adaptive Hybrid Metaheuristic algorithm that fixes the UnboundLocalError by initializing velocity properly and enhances the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a6169cef-0b77-4fcb-a3b5-33d398ee03c2", "metadata": {"aucs": [0.7164666404485268, 0.8971748694720489, 0.9571328756754927, 0.5975638719234944, 0.9766567716514869, 0.8586685973679484, 0.7109461372994652, 0.8011992790770432, 0.36964944263670296, 0.29613738232788733, 0.4362786640056696, 0.13232019309159804, 0.1455307929302, 0.0583427590036677, 0.3914243741510278, 0.301212334545678, 0.6370256676859443, 9.999999999998899e-05, 0.08493035047293374, 0.06368154378169288, 0.03285975537801311, 0.10878349925128572, 0.06337858504270644, 0.12906076935862365, 0.049425180025916005, 0.06955600579387755, 0.1150769136588391, 0.07173736281347343, 0.07149128424245577, 0.12046208652020818, 0.08810955332363068, 0.10362757018861779, 0.0915715711116325, 0.09401907188649017, 0.11413864801245799, 0.06495408115316936, 0.6736845598030035, 0.9749904986421465, 0.9191239192408057, 0.9233420621692491, 0.9525579686750549, 0.947536658793514, 0.9578506483479029, 0.8150960452188103, 0.9452735683606659, 0.15712575729898925, 0.06046879479631828, 0.0789307290006327, 0.21107333182589305, 0.22328356658291448, 0.11255521309451488, 0.17016128075601045, 0.06252302850501634, 0.28764887846797926, 0.1890049437587651, 0.07067142596809595, 0.13284115499717575, 0.1708079183263157, 0.9710678357351786, 0.06087187185048826, 0.08536086199716997, 0.13060476910041796, 0.049946039905146566, 0.26894709834366404, 0.19523766783586338, 0.1570431158190344, 0.14993079144597743, 0.15384435755175185, 9.999999999998899e-05, 0.16343145910706058, 0.01609867370310092, 0.13363320919039923, 0.13963497677559877, 0.06485375451899322, 0.14616090026037398, 0.16830219923600964, 0.13882922962669275, 0.2770556216152269, 0.14346349726808205, 9.999999999998899e-05, 0.16655457273668695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05063311111344304, 0.027337723242865875, 0.0736306179939975, 0.05486984310352605, 0.029521171425583304, 0.0013650501874628018, 0.16851241560903107, 0.052238789082277415, 0.043586647802667744, 9.999999999998899e-05, 0.07504298918177732, 0.12550993364225393, 0.09767921900534415, 0.21896532986389594, 0.20891171069032888, 0.14002847515316585, 0.11446004836916035, 9.999999999998899e-05, 0.15084019496059864, 0.06088006706737392, 0.14429224792641637, 9.999999999998899e-05, 0.09453165088871374, 0.03140496612828281, 0.08722210841025557, 0.014299332749373006, 0.12403603697253751, 0.3416385238277355, 0.38004465838480384, 0.41901752234305567, 0.3436651267744891, 0.31965638077825487, 0.4151410424325158, 0.4194464331406108, 0.4271941972418576, 0.3723241576442602, 0.06819197162038892, 0.0839842457349792, 0.036585755670578535, 0.06153117839220468, 0.1104623876141172, 0.09086556514358402, 0.08186417693650294, 0.0866042754559001, 0.07871748803577217, 0.277836604609642, 0.23585233933391414, 0.13401492580167484, 0.23280719212749001, 0.14048268289589727, 0.11333323188566213, 0.33925697232256313, 0.18265705051219672, 0.18597018640168184, 0.1587622398486006, 0.2218798005846282, 0.1319172968437884, 0.16276529515411786, 0.2338941761666099, 0.1708686477744965, 0.14714605683032334, 0.23773895826522295, 0.15204279386369146, 0.14999910519448334, 0.18988427213989245, 0.13172105615017138, 0.1360997359466295, 0.13458535703490537, 0.11858139963644376, 0.09546518014869743, 0.20881595626476257, 0.07224974087131941, 0.19606993664907824, 0.2143710457430522, 0.17868855464484512, 0.19772800923104905, 0.192948405747574, 0.22497833935044464, 0.2752073284004918, 0.15399893595904146, 0.19064515666686377, 0.18923445149338236, 0.1686647496349013, 0.1724334296487967, 0.1889220200919608, 0.21596690568962085, 0.18396017990101832, 0.17419569547916436, 0.1825952657273281, 0.18856819842604422, 0.5030243004336475, 0.12646042542438385, 0.15471946642754775, 0.7095800508240664, 0.20230568143926375, 0.19861706872169493, 0.10019694999857387, 0.17071842984786767, 0.16402487987829772, 0.08351015884770674, 0.21121499882424621, 0.09260136122774287, 0.10543882127131088, 0.2298803955075479, 0.21345757021747047, 0.10562380459183474, 0.3242903379754364, 0.1513231583765835, 0.2792337984706661, 0.21563225227653549, 0.2139383763106827, 0.19618150409030444, 0.2104864459494875, 0.20388659276950294, 0.20082479432994638, 0.22699098255523353, 0.24147489038162628, 0.10582949759163673, 0.12678895175133997, 0.07407172568686182, 0.0693526089971761, 0.0803870471954955, 0.06109716587115477, 0.078489586319469, 0.07139433400726358, 0.061224092659084794]}, "mutation_prompt": null}
{"id": "e055cf0a-5616-4f75-9e7b-d2017ab00626", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def adaptive_de_mutate(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + np.random.rand() * (f_max - f_min)\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_de_mutate(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedAdaptiveHybridMetaheuristic", "description": "Enhancing diversity through dynamic mutation strategy and adaptive particle swarm optimization to improve convergence speed and solution accuracy.", "configspace": "", "generation": 12, "fitness": 0.22173735345057238, "feedback": "The algorithm EnhancedAdaptiveHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.24.", "error": "", "parent_id": "a6169cef-0b77-4fcb-a3b5-33d398ee03c2", "metadata": {"aucs": [0.9723037008655039, 0.9588030491975056, 0.8226822852905917, 0.5380760823248386, 0.953101118539682, 0.6991707164770282, 0.9740838545504116, 0.9597181429664554, 0.9739121582277209, 0.5260918495763568, 0.5448974100300845, 0.0643375896107542, 0.39125978528622596, 0.5691804255998303, 0.45570315900347, 0.12728453214496294, 0.23442161812088091, 0.2081791221428435, 0.09139588712735969, 0.0656217611293548, 0.05998329660903057, 0.08184259849392128, 0.13835609410302296, 0.05089166702339554, 0.06571989045756055, 0.16867750915151225, 0.13901697114401212, 0.08457428173806858, 0.09893121760489343, 0.058215644836764335, 0.09528500471059942, 0.08474895750127975, 0.04549589433923307, 0.03663123491012232, 0.09948806826349899, 0.08184790822717136, 0.975211285952166, 0.9752622183688643, 0.9743283334155913, 0.9592237997246714, 0.978045516754019, 0.9263582213617395, 0.9753988121388788, 0.9820562358899164, 0.9434444185811022, 0.1265171141408058, 0.1448504415099997, 0.12722873546238733, 0.23440477815978966, 0.06593932760265164, 0.11371235925886414, 0.1954714427351676, 0.06679398151789062, 0.15518432040685148, 0.14730183713046918, 0.08351672144671507, 0.06301195545979976, 0.21468661055632643, 0.17503646106352477, 0.2852798012348938, 0.06484288781127234, 0.15539526560746142, 0.22269261795004158, 0.1800059162799258, 0.13563784501632214, 9.999999999998899e-05, 0.14906015791457705, 0.13414768343668693, 0.15407744979224658, 0.18573630459630153, 0.13522616220882122, 0.15847806825286093, 0.15729413740370857, 9.999999999998899e-05, 9.999999999998899e-05, 0.18895826758952483, 0.13339799168189548, 0.05550803739666321, 0.18521639972616333, 0.12364709166454335, 0.06686184886376267, 9.999999999998899e-05, 9.999999999998899e-05, 0.000939974969664914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733197724630631, 0.026633507982099625, 0.05822033202650634, 0.07536962862324359, 9.999999999998899e-05, 0.03537836248077053, 0.11877154619939101, 0.04239594400686164, 0.030211182603683162, 0.055585548146712016, 0.13718147796966373, 0.20418845029645216, 0.14095686209077307, 0.12173089681783311, 0.3316323902980105, 0.3007547958139688, 0.08306684212666382, 0.11145943851668749, 0.1779960191354698, 0.03120256518801967, 0.10044404907778148, 0.0791141768566469, 0.0313419035562007, 0.017485537078870017, 0.0770836141538952, 0.1928233715951282, 0.1041326559516067, 0.42176970653399737, 0.4914002789391263, 0.40257247181067934, 0.4434377353432154, 0.48201964213094883, 0.2296829078695357, 0.4533296295279665, 0.44030414941332496, 0.47144959766883876, 0.05424529763729369, 0.09913625976800344, 0.04081319223847346, 0.06782784132777309, 0.07182564356455023, 0.09512714876459427, 0.06372881205111447, 0.067518544318382, 0.0882268585358299, 0.15326909073719452, 0.17044091693348506, 0.18002582323750027, 0.17849283819609685, 0.23592398385304958, 0.15856411100867573, 0.22848611030122024, 0.10977929467419412, 0.36038155381735537, 0.18430131145292694, 0.17065745545357824, 0.16211596864736966, 0.2684139329438264, 0.19215514661133526, 0.13390636307800163, 0.1870349851255665, 0.23880752998570887, 0.1288876322925313, 0.08655275199934387, 0.11499200309399515, 0.16972453894685513, 0.12048777634453067, 0.08569297304430779, 0.12421058786152739, 0.1904156393665276, 0.21678768386488867, 0.08653952854977165, 0.19395927111433175, 0.22883164059893657, 0.2086860399862558, 0.20951506504554085, 0.19445087587042464, 0.2041344335320453, 0.24419848345609285, 0.17755805241943923, 0.1873728723245608, 0.1691020247894225, 0.2602549609988881, 0.1759457055941095, 0.21566519045455157, 0.15933834240593714, 0.21616840476565968, 0.16160013079939906, 0.21508130892441546, 0.1687786055923196, 0.07145974448516923, 0.1194086669952692, 0.15463805892078886, 0.7664665432438287, 0.2024415944293857, 0.20211793338765738, 0.1244742350851078, 0.1702977462458215, 0.16421661499116802, 0.5700238130516584, 0.1701379894711097, 0.05130727394930723, 0.1055486299382068, 0.11301745572328781, 0.4828682493434956, 0.10560202259898488, 0.09430907188994275, 0.18034098356095074, 0.2058121610309519, 0.2176363197761222, 0.181892280690098, 0.21315203830551022, 0.19445393942397216, 0.19708809404068484, 0.2159857126421333, 0.24096102411282705, 0.20369455762057453, 0.11874036901874185, 0.07332711865555908, 0.07567720577559667, 0.06125151892338121, 0.08994776826611961, 0.0680840474244283, 0.05868800472700186, 0.08058240339075196, 0.0825123002332171]}, "mutation_prompt": null}
{"id": "df8047fb-8e6a-46fd-a864-52df5574c77b", "solution": "import numpy as np\n\nclass OpposedEnhancedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition(x):\n            return -x\n\n        def adaptive_de_mutate(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + np.random.rand() * (f_max - f_min)\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_de_mutate(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n                # Opposition-based learning\n                opposition_trial = opposition(trial)\n                opposition_trial_fitness = func(opposition_trial)\n                if opposition_trial_fitness < gbest_fitness:\n                    gbest = opposition_trial\n                    gbest_fitness = opposition_trial_fitness\n\n        return gbest", "name": "OpposedEnhancedAdaptiveHybridMetaheuristic", "description": "Improving exploration by incorporating a novel opposition-based learning mechanism to enhance solution diversity and global search capabilities.", "configspace": "", "generation": 13, "fitness": 0.22741607763070895, "feedback": "The algorithm OpposedEnhancedAdaptiveHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "e055cf0a-5616-4f75-9e7b-d2017ab00626", "metadata": {"aucs": [0.9465571212680447, 0.9195769171552207, 0.9362037515906068, 0.5271146432639872, 0.9081871681698213, 0.6793077951721207, 0.9501448689411729, 0.9214049013808123, 0.9497872968438466, 0.48820344515984126, 0.6041693941019152, 0.32852738691292493, 0.6498326172776163, 0.5028492885517502, 0.397498954927604, 0.1235578545245869, 0.22772506910037793, 0.20076508920898606, 0.08442638272626335, 0.06528945987618429, 0.056637005159834164, 0.0811534214871823, 0.13690461189391157, 0.050704809550349506, 0.0654730180142038, 0.1675127951129456, 0.1382242549812026, 0.08363044862877811, 0.06302045552892122, 0.0575634056766845, 0.09457384811510305, 0.08397952721371116, 0.10221984371172443, 0.03637041011953002, 0.09887709647275611, 0.08116710358988999, 0.9524340327495553, 0.9525603151655065, 0.9506789021658005, 0.9204696708665556, 0.9580993516427919, 0.8547562718927991, 0.9528237064080415, 0.966116576638569, 0.8889343982390944, 0.12388533603814356, 0.13570685074438005, 0.12405168482069162, 0.23095638995727408, 0.06496770339788127, 0.10959039244369828, 0.18643678765719607, 0.05805222633499885, 0.1515328927458186, 0.14715771114707699, 0.08329200342204601, 0.22256453788048558, 0.2136933993690845, 0.17436236630365365, 0.2836808807440614, 0.0646854107182191, 0.15523742202516444, 0.22108663228506276, 0.1537643316160202, 0.14572713931804115, 9.999999999998899e-05, 0.14404516898934194, 0.1331623545545404, 0.15200569167111666, 0.1844856401161008, 0.13219003989992473, 0.15621818906913854, 0.12263079692696266, 0.14976782676501554, 0.19435107878362723, 0.17296308808510985, 0.17233190175552915, 0.3306592418632308, 0.12867567657690815, 0.10858134121692742, 0.063172688458208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056138494356474666, 0.02604342312092356, 0.056592745313794324, 0.07076979758063828, 0.05171736865646048, 0.020726568165708836, 0.10986913980480273, 0.030616629372711368, 0.0297262360073568, 0.12807929034584054, 0.13403275863421116, 0.198850087381933, 0.1366916208173936, 0.11865275842355882, 0.3088911753902924, 0.28743053428548115, 0.08093480886823379, 0.10776880976902625, 0.17398475747588404, 0.030318169260235117, 0.09692526419690517, 0.06866698623465894, 0.03090401051637548, 0.01681213866715403, 0.07584772943232454, 0.18855992275506428, 0.10249015725705335, 0.41682695506337275, 0.48488043125734115, 0.3993148590248701, 0.43292478219219166, 0.4761004981070923, 0.22762309453894936, 0.4481224267434908, 0.43625298501767773, 0.46545700542416957, 0.0538697611828346, 0.09819483965913622, 0.029589783517563806, 0.06735574553951051, 0.07136714600729444, 0.09454006371027823, 0.06346333505332535, 0.06709501088949588, 0.08769391592662812, 0.18693862281613205, 0.19043516394351168, 0.1782235898294504, 0.17711576425588083, 0.2273058211405311, 0.18731198829211637, 0.22543042573938465, 0.3253843290179289, 0.160496699108012, 0.18388923187134865, 0.2101628292466703, 0.16157488599258052, 0.21242662500062393, 0.1916683241936712, 0.1357776201898543, 0.18558602302359295, 0.23810840152547774, 0.12774027038121527, 0.08623925730093052, 0.11434362932805875, 0.16861330813533548, 0.11548993713335476, 0.08549592954781216, 0.20189762924892252, 0.1871833311791231, 0.21549116259109458, 0.19169899810531976, 0.25527122933039526, 0.19258478898255127, 0.20605346674965153, 0.20504205106991336, 0.1934655197253342, 0.2440403141790778, 0.26690778977412666, 0.21202650455202376, 0.18324059318435515, 0.16857621487451724, 0.2584398157509601, 0.1777815700520774, 0.21453557991161487, 0.15775151716948366, 0.21539725716706626, 0.16075792436526504, 0.21324001926326897, 0.16878492054068228, 0.18734127716194604, 0.11897566566994011, 0.1538208361773935, 0.7503302053632642, 0.20185891406423273, 0.2013301311060537, 0.191522834084916, 0.16956408774609621, 0.16904043051707318, 0.565642095287694, 0.16747798470002895, 0.2527368691612617, 0.18866971200319493, 0.11272919274338766, 0.1697697321447006, 0.22095737653543812, 0.29465457446968635, 0.1784831185652772, 0.20186842047350895, 0.18034773071838484, 0.19523448529632115, 0.18674353563596446, 0.19059172584355788, 0.190985424585435, 0.18039923921817758, 0.2050203505970153, 0.20213610418142902, 0.12829330739713407, 0.07211785809087723, 0.07866413756111301, 0.06051688338193695, 0.0930714170995014, 0.11373105994646682, 0.05617313096468146, 0.08412809387372544, 0.0796164192604929]}, "mutation_prompt": null}
{"id": "f9865c2a-df77-402a-9f48-0a42e061d569", "solution": "import numpy as np\n\nclass OpposedEnhancedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition(x):\n            return -x\n\n        def adaptive_de_mutate(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + np.random.rand() * (f_max - f_min)\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_de_mutate(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n                # Opposition-based learning\n                opposition_trial = opposition(trial)\n                opposition_trial_fitness = func(opposition_trial)\n                if opposition_trial_fitness < gbest_fitness:\n                    gbest = opposition_trial\n                    gbest_fitness = opposition_trial_fitness\n\n        return gbest", "name": "OpposedEnhancedAdaptiveHybridMetaheuristic", "description": "Improving exploration by incorporating a novel opposition-based learning mechanism to enhance solution diversity and global search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df8047fb-8e6a-46fd-a864-52df5574c77b", "metadata": {"aucs": [0.9465571212680447, 0.9195769171552207, 0.9362037515906068, 0.5271146432639872, 0.9081871681698213, 0.6793077951721207, 0.9501448689411729, 0.9214049013808123, 0.9497872968438466, 0.48820344515984126, 0.6041693941019152, 0.32852738691292493, 0.6498326172776163, 0.5028492885517502, 0.397498954927604, 0.1235578545245869, 0.22772506910037793, 0.20076508920898606, 0.08442638272626335, 0.06528945987618429, 0.056637005159834164, 0.0811534214871823, 0.13690461189391157, 0.050704809550349506, 0.0654730180142038, 0.1675127951129456, 0.1382242549812026, 0.08363044862877811, 0.06302045552892122, 0.0575634056766845, 0.09457384811510305, 0.08397952721371116, 0.10221984371172443, 0.03637041011953002, 0.09887709647275611, 0.08116710358988999, 0.9524340327495553, 0.9525603151655065, 0.9506789021658005, 0.9204696708665556, 0.9580993516427919, 0.8547562718927991, 0.9528237064080415, 0.966116576638569, 0.8889343982390944, 0.12388533603814356, 0.13570685074438005, 0.12405168482069162, 0.23095638995727408, 0.06496770339788127, 0.10959039244369828, 0.18643678765719607, 0.05805222633499885, 0.1515328927458186, 0.14715771114707699, 0.08329200342204601, 0.22256453788048558, 0.2136933993690845, 0.17436236630365365, 0.2836808807440614, 0.0646854107182191, 0.15523742202516444, 0.22108663228506276, 0.1537643316160202, 0.14572713931804115, 9.999999999998899e-05, 0.14404516898934194, 0.1331623545545404, 0.15200569167111666, 0.1844856401161008, 0.13219003989992473, 0.15621818906913854, 0.12263079692696266, 0.14976782676501554, 0.19435107878362723, 0.17296308808510985, 0.17233190175552915, 0.3306592418632308, 0.12867567657690815, 0.10858134121692742, 0.063172688458208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056138494356474666, 0.02604342312092356, 0.056592745313794324, 0.07076979758063828, 0.05171736865646048, 0.020726568165708836, 0.10986913980480273, 0.030616629372711368, 0.0297262360073568, 0.12807929034584054, 0.13403275863421116, 0.198850087381933, 0.1366916208173936, 0.11865275842355882, 0.3088911753902924, 0.28743053428548115, 0.08093480886823379, 0.10776880976902625, 0.17398475747588404, 0.030318169260235117, 0.09692526419690517, 0.06866698623465894, 0.03090401051637548, 0.01681213866715403, 0.07584772943232454, 0.18855992275506428, 0.10249015725705335, 0.41682695506337275, 0.48488043125734115, 0.3993148590248701, 0.43292478219219166, 0.4761004981070923, 0.22762309453894936, 0.4481224267434908, 0.43625298501767773, 0.46545700542416957, 0.0538697611828346, 0.09819483965913622, 0.029589783517563806, 0.06735574553951051, 0.07136714600729444, 0.09454006371027823, 0.06346333505332535, 0.06709501088949588, 0.08769391592662812, 0.18693862281613205, 0.19043516394351168, 0.1782235898294504, 0.17711576425588083, 0.2273058211405311, 0.18731198829211637, 0.22543042573938465, 0.3253843290179289, 0.160496699108012, 0.18388923187134865, 0.2101628292466703, 0.16157488599258052, 0.21242662500062393, 0.1916683241936712, 0.1357776201898543, 0.18558602302359295, 0.23810840152547774, 0.12774027038121527, 0.08623925730093052, 0.11434362932805875, 0.16861330813533548, 0.11548993713335476, 0.08549592954781216, 0.20189762924892252, 0.1871833311791231, 0.21549116259109458, 0.19169899810531976, 0.25527122933039526, 0.19258478898255127, 0.20605346674965153, 0.20504205106991336, 0.1934655197253342, 0.2440403141790778, 0.26690778977412666, 0.21202650455202376, 0.18324059318435515, 0.16857621487451724, 0.2584398157509601, 0.1777815700520774, 0.21453557991161487, 0.15775151716948366, 0.21539725716706626, 0.16075792436526504, 0.21324001926326897, 0.16878492054068228, 0.18734127716194604, 0.11897566566994011, 0.1538208361773935, 0.7503302053632642, 0.20185891406423273, 0.2013301311060537, 0.191522834084916, 0.16956408774609621, 0.16904043051707318, 0.565642095287694, 0.16747798470002895, 0.2527368691612617, 0.18866971200319493, 0.11272919274338766, 0.1697697321447006, 0.22095737653543812, 0.29465457446968635, 0.1784831185652772, 0.20186842047350895, 0.18034773071838484, 0.19523448529632115, 0.18674353563596446, 0.19059172584355788, 0.190985424585435, 0.18039923921817758, 0.2050203505970153, 0.20213610418142902, 0.12829330739713407, 0.07211785809087723, 0.07866413756111301, 0.06051688338193695, 0.0930714170995014, 0.11373105994646682, 0.05617313096468146, 0.08412809387372544, 0.0796164192604929]}, "mutation_prompt": null}
{"id": "5c1fd80c-bb32-4cab-95d8-2d56a48119ee", "solution": "import numpy as np\n\nclass OpposedEnhancedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition(x):\n            return -x\n\n        def adaptive_de_mutate(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + np.random.rand() * (f_max - f_min)\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_de_mutate(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n                # Opposition-based learning\n                opposition_trial = opposition(trial)\n                opposition_trial_fitness = func(opposition_trial)\n                if opposition_trial_fitness < gbest_fitness:\n                    gbest = opposition_trial\n                    gbest_fitness = opposition_trial_fitness\n\n        return gbest", "name": "OpposedEnhancedAdaptiveHybridMetaheuristic", "description": "Improving exploration by incorporating a novel opposition-based learning mechanism to enhance solution diversity and global search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df8047fb-8e6a-46fd-a864-52df5574c77b", "metadata": {"aucs": [0.9465571212680447, 0.9195769171552207, 0.9362037515906068, 0.5271146432639872, 0.9081871681698213, 0.6793077951721207, 0.9501448689411729, 0.9214049013808123, 0.9497872968438466, 0.48820344515984126, 0.6041693941019152, 0.32852738691292493, 0.6498326172776163, 0.5028492885517502, 0.397498954927604, 0.1235578545245869, 0.22772506910037793, 0.20076508920898606, 0.08442638272626335, 0.06528945987618429, 0.056637005159834164, 0.0811534214871823, 0.13690461189391157, 0.050704809550349506, 0.0654730180142038, 0.1675127951129456, 0.1382242549812026, 0.08363044862877811, 0.06302045552892122, 0.0575634056766845, 0.09457384811510305, 0.08397952721371116, 0.10221984371172443, 0.03637041011953002, 0.09887709647275611, 0.08116710358988999, 0.9524340327495553, 0.9525603151655065, 0.9506789021658005, 0.9204696708665556, 0.9580993516427919, 0.8547562718927991, 0.9528237064080415, 0.966116576638569, 0.8889343982390944, 0.12388533603814356, 0.13570685074438005, 0.12405168482069162, 0.23095638995727408, 0.06496770339788127, 0.10959039244369828, 0.18643678765719607, 0.05805222633499885, 0.1515328927458186, 0.14715771114707699, 0.08329200342204601, 0.22256453788048558, 0.2136933993690845, 0.17436236630365365, 0.2836808807440614, 0.0646854107182191, 0.15523742202516444, 0.22108663228506276, 0.1537643316160202, 0.14572713931804115, 9.999999999998899e-05, 0.14404516898934194, 0.1331623545545404, 0.15200569167111666, 0.1844856401161008, 0.13219003989992473, 0.15621818906913854, 0.12263079692696266, 0.14976782676501554, 0.19435107878362723, 0.17296308808510985, 0.17233190175552915, 0.3306592418632308, 0.12867567657690815, 0.10858134121692742, 0.063172688458208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056138494356474666, 0.02604342312092356, 0.056592745313794324, 0.07076979758063828, 0.05171736865646048, 0.020726568165708836, 0.10986913980480273, 0.030616629372711368, 0.0297262360073568, 0.12807929034584054, 0.13403275863421116, 0.198850087381933, 0.1366916208173936, 0.11865275842355882, 0.3088911753902924, 0.28743053428548115, 0.08093480886823379, 0.10776880976902625, 0.17398475747588404, 0.030318169260235117, 0.09692526419690517, 0.06866698623465894, 0.03090401051637548, 0.01681213866715403, 0.07584772943232454, 0.18855992275506428, 0.10249015725705335, 0.41682695506337275, 0.48488043125734115, 0.3993148590248701, 0.43292478219219166, 0.4761004981070923, 0.22762309453894936, 0.4481224267434908, 0.43625298501767773, 0.46545700542416957, 0.0538697611828346, 0.09819483965913622, 0.029589783517563806, 0.06735574553951051, 0.07136714600729444, 0.09454006371027823, 0.06346333505332535, 0.06709501088949588, 0.08769391592662812, 0.18693862281613205, 0.19043516394351168, 0.1782235898294504, 0.17711576425588083, 0.2273058211405311, 0.18731198829211637, 0.22543042573938465, 0.3253843290179289, 0.160496699108012, 0.18388923187134865, 0.2101628292466703, 0.16157488599258052, 0.21242662500062393, 0.1916683241936712, 0.1357776201898543, 0.18558602302359295, 0.23810840152547774, 0.12774027038121527, 0.08623925730093052, 0.11434362932805875, 0.16861330813533548, 0.11548993713335476, 0.08549592954781216, 0.20189762924892252, 0.1871833311791231, 0.21549116259109458, 0.19169899810531976, 0.25527122933039526, 0.19258478898255127, 0.20605346674965153, 0.20504205106991336, 0.1934655197253342, 0.2440403141790778, 0.26690778977412666, 0.21202650455202376, 0.18324059318435515, 0.16857621487451724, 0.2584398157509601, 0.1777815700520774, 0.21453557991161487, 0.15775151716948366, 0.21539725716706626, 0.16075792436526504, 0.21324001926326897, 0.16878492054068228, 0.18734127716194604, 0.11897566566994011, 0.1538208361773935, 0.7503302053632642, 0.20185891406423273, 0.2013301311060537, 0.191522834084916, 0.16956408774609621, 0.16904043051707318, 0.565642095287694, 0.16747798470002895, 0.2527368691612617, 0.18866971200319493, 0.11272919274338766, 0.1697697321447006, 0.22095737653543812, 0.29465457446968635, 0.1784831185652772, 0.20186842047350895, 0.18034773071838484, 0.19523448529632115, 0.18674353563596446, 0.19059172584355788, 0.190985424585435, 0.18039923921817758, 0.2050203505970153, 0.20213610418142902, 0.12829330739713407, 0.07211785809087723, 0.07866413756111301, 0.06051688338193695, 0.0930714170995014, 0.11373105994646682, 0.05617313096468146, 0.08412809387372544, 0.0796164192604929]}, "mutation_prompt": null}
{"id": "60929212-5d55-4ec5-8ebf-0f510fac6fa0", "solution": "import numpy as np\n\nclass OpposedEnhancedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition(x):\n            return -x\n\n        def adaptive_de_mutate(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + np.random.rand() * (f_max - f_min)\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_de_mutate(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n                # Opposition-based learning\n                opposition_trial = opposition(trial)\n                opposition_trial_fitness = func(opposition_trial)\n                if opposition_trial_fitness < gbest_fitness:\n                    gbest = opposition_trial\n                    gbest_fitness = opposition_trial_fitness\n\n        return gbest", "name": "OpposedEnhancedAdaptiveHybridMetaheuristic", "description": "Improving exploration by incorporating a novel opposition-based learning mechanism to enhance solution diversity and global search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df8047fb-8e6a-46fd-a864-52df5574c77b", "metadata": {"aucs": [0.9465571212680447, 0.9195769171552207, 0.9362037515906068, 0.5271146432639872, 0.9081871681698213, 0.6793077951721207, 0.9501448689411729, 0.9214049013808123, 0.9497872968438466, 0.48820344515984126, 0.6041693941019152, 0.32852738691292493, 0.6498326172776163, 0.5028492885517502, 0.397498954927604, 0.1235578545245869, 0.22772506910037793, 0.20076508920898606, 0.08442638272626335, 0.06528945987618429, 0.056637005159834164, 0.0811534214871823, 0.13690461189391157, 0.050704809550349506, 0.0654730180142038, 0.1675127951129456, 0.1382242549812026, 0.08363044862877811, 0.06302045552892122, 0.0575634056766845, 0.09457384811510305, 0.08397952721371116, 0.10221984371172443, 0.03637041011953002, 0.09887709647275611, 0.08116710358988999, 0.9524340327495553, 0.9525603151655065, 0.9506789021658005, 0.9204696708665556, 0.9580993516427919, 0.8547562718927991, 0.9528237064080415, 0.966116576638569, 0.8889343982390944, 0.12388533603814356, 0.13570685074438005, 0.12405168482069162, 0.23095638995727408, 0.06496770339788127, 0.10959039244369828, 0.18643678765719607, 0.05805222633499885, 0.1515328927458186, 0.14715771114707699, 0.08329200342204601, 0.22256453788048558, 0.2136933993690845, 0.17436236630365365, 0.2836808807440614, 0.0646854107182191, 0.15523742202516444, 0.22108663228506276, 0.1537643316160202, 0.14572713931804115, 9.999999999998899e-05, 0.14404516898934194, 0.1331623545545404, 0.15200569167111666, 0.1844856401161008, 0.13219003989992473, 0.15621818906913854, 0.12263079692696266, 0.14976782676501554, 0.19435107878362723, 0.17296308808510985, 0.17233190175552915, 0.3306592418632308, 0.12867567657690815, 0.10858134121692742, 0.063172688458208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056138494356474666, 0.02604342312092356, 0.056592745313794324, 0.07076979758063828, 0.05171736865646048, 0.020726568165708836, 0.10986913980480273, 0.030616629372711368, 0.0297262360073568, 0.12807929034584054, 0.13403275863421116, 0.198850087381933, 0.1366916208173936, 0.11865275842355882, 0.3088911753902924, 0.28743053428548115, 0.08093480886823379, 0.10776880976902625, 0.17398475747588404, 0.030318169260235117, 0.09692526419690517, 0.06866698623465894, 0.03090401051637548, 0.01681213866715403, 0.07584772943232454, 0.18855992275506428, 0.10249015725705335, 0.41682695506337275, 0.48488043125734115, 0.3993148590248701, 0.43292478219219166, 0.4761004981070923, 0.22762309453894936, 0.4481224267434908, 0.43625298501767773, 0.46545700542416957, 0.0538697611828346, 0.09819483965913622, 0.029589783517563806, 0.06735574553951051, 0.07136714600729444, 0.09454006371027823, 0.06346333505332535, 0.06709501088949588, 0.08769391592662812, 0.18693862281613205, 0.19043516394351168, 0.1782235898294504, 0.17711576425588083, 0.2273058211405311, 0.18731198829211637, 0.22543042573938465, 0.3253843290179289, 0.160496699108012, 0.18388923187134865, 0.2101628292466703, 0.16157488599258052, 0.21242662500062393, 0.1916683241936712, 0.1357776201898543, 0.18558602302359295, 0.23810840152547774, 0.12774027038121527, 0.08623925730093052, 0.11434362932805875, 0.16861330813533548, 0.11548993713335476, 0.08549592954781216, 0.20189762924892252, 0.1871833311791231, 0.21549116259109458, 0.19169899810531976, 0.25527122933039526, 0.19258478898255127, 0.20605346674965153, 0.20504205106991336, 0.1934655197253342, 0.2440403141790778, 0.26690778977412666, 0.21202650455202376, 0.18324059318435515, 0.16857621487451724, 0.2584398157509601, 0.1777815700520774, 0.21453557991161487, 0.15775151716948366, 0.21539725716706626, 0.16075792436526504, 0.21324001926326897, 0.16878492054068228, 0.18734127716194604, 0.11897566566994011, 0.1538208361773935, 0.7503302053632642, 0.20185891406423273, 0.2013301311060537, 0.191522834084916, 0.16956408774609621, 0.16904043051707318, 0.565642095287694, 0.16747798470002895, 0.2527368691612617, 0.18866971200319493, 0.11272919274338766, 0.1697697321447006, 0.22095737653543812, 0.29465457446968635, 0.1784831185652772, 0.20186842047350895, 0.18034773071838484, 0.19523448529632115, 0.18674353563596446, 0.19059172584355788, 0.190985424585435, 0.18039923921817758, 0.2050203505970153, 0.20213610418142902, 0.12829330739713407, 0.07211785809087723, 0.07866413756111301, 0.06051688338193695, 0.0930714170995014, 0.11373105994646682, 0.05617313096468146, 0.08412809387372544, 0.0796164192604929]}, "mutation_prompt": null}
{"id": "d3ac44e9-7dc8-45a4-93c3-28374bd27397", "solution": "import numpy as np\n\nclass OpposedEnhancedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition(x):\n            return -x\n\n        def adaptive_de_mutate(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + np.random.rand() * (f_max - f_min)\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_de_mutate(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n                # Opposition-based learning\n                opposition_trial = opposition(trial)\n                opposition_trial_fitness = func(opposition_trial)\n                if opposition_trial_fitness < gbest_fitness:\n                    gbest = opposition_trial\n                    gbest_fitness = opposition_trial_fitness\n\n        return gbest", "name": "OpposedEnhancedAdaptiveHybridMetaheuristic", "description": "Improving exploration by incorporating a novel opposition-based learning mechanism to enhance solution diversity and global search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df8047fb-8e6a-46fd-a864-52df5574c77b", "metadata": {"aucs": [0.9465571212680447, 0.9195769171552207, 0.9362037515906068, 0.5271146432639872, 0.9081871681698213, 0.6793077951721207, 0.9501448689411729, 0.9214049013808123, 0.9497872968438466, 0.48820344515984126, 0.6041693941019152, 0.32852738691292493, 0.6498326172776163, 0.5028492885517502, 0.397498954927604, 0.1235578545245869, 0.22772506910037793, 0.20076508920898606, 0.08442638272626335, 0.06528945987618429, 0.056637005159834164, 0.0811534214871823, 0.13690461189391157, 0.050704809550349506, 0.0654730180142038, 0.1675127951129456, 0.1382242549812026, 0.08363044862877811, 0.06302045552892122, 0.0575634056766845, 0.09457384811510305, 0.08397952721371116, 0.10221984371172443, 0.03637041011953002, 0.09887709647275611, 0.08116710358988999, 0.9524340327495553, 0.9525603151655065, 0.9506789021658005, 0.9204696708665556, 0.9580993516427919, 0.8547562718927991, 0.9528237064080415, 0.966116576638569, 0.8889343982390944, 0.12388533603814356, 0.13570685074438005, 0.12405168482069162, 0.23095638995727408, 0.06496770339788127, 0.10959039244369828, 0.18643678765719607, 0.05805222633499885, 0.1515328927458186, 0.14715771114707699, 0.08329200342204601, 0.22256453788048558, 0.2136933993690845, 0.17436236630365365, 0.2836808807440614, 0.0646854107182191, 0.15523742202516444, 0.22108663228506276, 0.1537643316160202, 0.14572713931804115, 9.999999999998899e-05, 0.14404516898934194, 0.1331623545545404, 0.15200569167111666, 0.1844856401161008, 0.13219003989992473, 0.15621818906913854, 0.12263079692696266, 0.14976782676501554, 0.19435107878362723, 0.17296308808510985, 0.17233190175552915, 0.3306592418632308, 0.12867567657690815, 0.10858134121692742, 0.063172688458208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056138494356474666, 0.02604342312092356, 0.056592745313794324, 0.07076979758063828, 0.05171736865646048, 0.020726568165708836, 0.10986913980480273, 0.030616629372711368, 0.0297262360073568, 0.12807929034584054, 0.13403275863421116, 0.198850087381933, 0.1366916208173936, 0.11865275842355882, 0.3088911753902924, 0.28743053428548115, 0.08093480886823379, 0.10776880976902625, 0.17398475747588404, 0.030318169260235117, 0.09692526419690517, 0.06866698623465894, 0.03090401051637548, 0.01681213866715403, 0.07584772943232454, 0.18855992275506428, 0.10249015725705335, 0.41682695506337275, 0.48488043125734115, 0.3993148590248701, 0.43292478219219166, 0.4761004981070923, 0.22762309453894936, 0.4481224267434908, 0.43625298501767773, 0.46545700542416957, 0.0538697611828346, 0.09819483965913622, 0.029589783517563806, 0.06735574553951051, 0.07136714600729444, 0.09454006371027823, 0.06346333505332535, 0.06709501088949588, 0.08769391592662812, 0.18693862281613205, 0.19043516394351168, 0.1782235898294504, 0.17711576425588083, 0.2273058211405311, 0.18731198829211637, 0.22543042573938465, 0.3253843290179289, 0.160496699108012, 0.18388923187134865, 0.2101628292466703, 0.16157488599258052, 0.21242662500062393, 0.1916683241936712, 0.1357776201898543, 0.18558602302359295, 0.23810840152547774, 0.12774027038121527, 0.08623925730093052, 0.11434362932805875, 0.16861330813533548, 0.11548993713335476, 0.08549592954781216, 0.20189762924892252, 0.1871833311791231, 0.21549116259109458, 0.19169899810531976, 0.25527122933039526, 0.19258478898255127, 0.20605346674965153, 0.20504205106991336, 0.1934655197253342, 0.2440403141790778, 0.26690778977412666, 0.21202650455202376, 0.18324059318435515, 0.16857621487451724, 0.2584398157509601, 0.1777815700520774, 0.21453557991161487, 0.15775151716948366, 0.21539725716706626, 0.16075792436526504, 0.21324001926326897, 0.16878492054068228, 0.18734127716194604, 0.11897566566994011, 0.1538208361773935, 0.7503302053632642, 0.20185891406423273, 0.2013301311060537, 0.191522834084916, 0.16956408774609621, 0.16904043051707318, 0.565642095287694, 0.16747798470002895, 0.2527368691612617, 0.18866971200319493, 0.11272919274338766, 0.1697697321447006, 0.22095737653543812, 0.29465457446968635, 0.1784831185652772, 0.20186842047350895, 0.18034773071838484, 0.19523448529632115, 0.18674353563596446, 0.19059172584355788, 0.190985424585435, 0.18039923921817758, 0.2050203505970153, 0.20213610418142902, 0.12829330739713407, 0.07211785809087723, 0.07866413756111301, 0.06051688338193695, 0.0930714170995014, 0.11373105994646682, 0.05617313096468146, 0.08412809387372544, 0.0796164192604929]}, "mutation_prompt": null}
{"id": "f3441113-48f9-462f-9c58-9b8761ccec5c", "solution": "import numpy as np\n\nclass EnhancedOpposedAdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition(x):\n            return -x\n\n        def dynamic_mutate(x, pop, scaling_factor_min=0.1, scaling_factor_max=0.9):\n            scaling_factor = scaling_factor_min + np.random.rand() * (scaling_factor_max - scaling_factor_min)\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + scaling_factor * (candidates[0] - x) + scaling_factor * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, inertia_weight_min=0.1, inertia_weight_max=0.9, cognitive_weight_min=1.0, cognitive_weight_max=2.0):\n            inertia_weight = inertia_weight_min + np.random.rand() * (inertia_weight_max - inertia_weight_min)\n            cognitive_weight = cognitive_weight_min + np.random.rand() * (cognitive_weight_max - cognitive_weight_min)\n            social_weight = cognitive_weight_min + np.random.rand() * (cognitive_weight_max - cognitive_weight_min)\n            new_velocity = inertia_weight * velocity \\\n                       + cognitive_weight * np.random.rand(self.dim) * (pbest - x) \\\n                       + social_weight * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = dynamic_mutate(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n                # Opposition-based learning\n                opposition_trial = opposition(trial)\n                opposition_trial_fitness = func(opposition_trial)\n                if opposition_trial_fitness < gbest_fitness:\n                    gbest = opposition_trial\n                    gbest_fitness = opposition_trial_fitness\n\n        return gbest", "name": "EnhancedOpposedAdaptiveHybridMetaheuristic", "description": "Enhancing the algorithm by incorporating a dynamic mutation strategy with adaptive control parameters.", "configspace": "", "generation": 18, "fitness": 0.22741607763070895, "feedback": "The algorithm EnhancedOpposedAdaptiveHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "df8047fb-8e6a-46fd-a864-52df5574c77b", "metadata": {"aucs": [0.9465571212680447, 0.9195769171552207, 0.9362037515906068, 0.5271146432639872, 0.9081871681698213, 0.6793077951721207, 0.9501448689411729, 0.9214049013808123, 0.9497872968438466, 0.48820344515984126, 0.6041693941019152, 0.32852738691292493, 0.6498326172776163, 0.5028492885517502, 0.397498954927604, 0.1235578545245869, 0.22772506910037793, 0.20076508920898606, 0.08442638272626335, 0.06528945987618429, 0.056637005159834164, 0.0811534214871823, 0.13690461189391157, 0.050704809550349506, 0.0654730180142038, 0.1675127951129456, 0.1382242549812026, 0.08363044862877811, 0.06302045552892122, 0.0575634056766845, 0.09457384811510305, 0.08397952721371116, 0.10221984371172443, 0.03637041011953002, 0.09887709647275611, 0.08116710358988999, 0.9524340327495553, 0.9525603151655065, 0.9506789021658005, 0.9204696708665556, 0.9580993516427919, 0.8547562718927991, 0.9528237064080415, 0.966116576638569, 0.8889343982390944, 0.12388533603814356, 0.13570685074438005, 0.12405168482069162, 0.23095638995727408, 0.06496770339788127, 0.10959039244369828, 0.18643678765719607, 0.05805222633499885, 0.1515328927458186, 0.14715771114707699, 0.08329200342204601, 0.22256453788048558, 0.2136933993690845, 0.17436236630365365, 0.2836808807440614, 0.0646854107182191, 0.15523742202516444, 0.22108663228506276, 0.1537643316160202, 0.14572713931804115, 9.999999999998899e-05, 0.14404516898934194, 0.1331623545545404, 0.15200569167111666, 0.1844856401161008, 0.13219003989992473, 0.15621818906913854, 0.12263079692696266, 0.14976782676501554, 0.19435107878362723, 0.17296308808510985, 0.17233190175552915, 0.3306592418632308, 0.12867567657690815, 0.10858134121692742, 0.063172688458208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056138494356474666, 0.02604342312092356, 0.056592745313794324, 0.07076979758063828, 0.05171736865646048, 0.020726568165708836, 0.10986913980480273, 0.030616629372711368, 0.0297262360073568, 0.12807929034584054, 0.13403275863421116, 0.198850087381933, 0.1366916208173936, 0.11865275842355882, 0.3088911753902924, 0.28743053428548115, 0.08093480886823379, 0.10776880976902625, 0.17398475747588404, 0.030318169260235117, 0.09692526419690517, 0.06866698623465894, 0.03090401051637548, 0.01681213866715403, 0.07584772943232454, 0.18855992275506428, 0.10249015725705335, 0.41682695506337275, 0.48488043125734115, 0.3993148590248701, 0.43292478219219166, 0.4761004981070923, 0.22762309453894936, 0.4481224267434908, 0.43625298501767773, 0.46545700542416957, 0.0538697611828346, 0.09819483965913622, 0.029589783517563806, 0.06735574553951051, 0.07136714600729444, 0.09454006371027823, 0.06346333505332535, 0.06709501088949588, 0.08769391592662812, 0.18693862281613205, 0.19043516394351168, 0.1782235898294504, 0.17711576425588083, 0.2273058211405311, 0.18731198829211637, 0.22543042573938465, 0.3253843290179289, 0.160496699108012, 0.18388923187134865, 0.2101628292466703, 0.16157488599258052, 0.21242662500062393, 0.1916683241936712, 0.1357776201898543, 0.18558602302359295, 0.23810840152547774, 0.12774027038121527, 0.08623925730093052, 0.11434362932805875, 0.16861330813533548, 0.11548993713335476, 0.08549592954781216, 0.20189762924892252, 0.1871833311791231, 0.21549116259109458, 0.19169899810531976, 0.25527122933039526, 0.19258478898255127, 0.20605346674965153, 0.20504205106991336, 0.1934655197253342, 0.2440403141790778, 0.26690778977412666, 0.21202650455202376, 0.18324059318435515, 0.16857621487451724, 0.2584398157509601, 0.1777815700520774, 0.21453557991161487, 0.15775151716948366, 0.21539725716706626, 0.16075792436526504, 0.21324001926326897, 0.16878492054068228, 0.18734127716194604, 0.11897566566994011, 0.1538208361773935, 0.7503302053632642, 0.20185891406423273, 0.2013301311060537, 0.191522834084916, 0.16956408774609621, 0.16904043051707318, 0.565642095287694, 0.16747798470002895, 0.2527368691612617, 0.18866971200319493, 0.11272919274338766, 0.1697697321447006, 0.22095737653543812, 0.29465457446968635, 0.1784831185652772, 0.20186842047350895, 0.18034773071838484, 0.19523448529632115, 0.18674353563596446, 0.19059172584355788, 0.190985424585435, 0.18039923921817758, 0.2050203505970153, 0.20213610418142902, 0.12829330739713407, 0.07211785809087723, 0.07866413756111301, 0.06051688338193695, 0.0930714170995014, 0.11373105994646682, 0.05617313096468146, 0.08412809387372544, 0.0796164192604929]}, "mutation_prompt": null}
{"id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 19, "fitness": 0.2297495694470753, "feedback": "The algorithm EnhancedOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "df8047fb-8e6a-46fd-a864-52df5574c77b", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "9988ff53-c585-49b4-bd27-9abf020b077d", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "cd61b010-89fd-4aec-826c-439e4a3d7e0b", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "a83c271b-251a-46be-99a4-93c4532a9866", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "aca1488c-e1be-4ed1-827a-b3fec3923f0a", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "84274040-1928-4dde-93cb-fc8ab2b956c8", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "a3e2f320-1f55-4d66-9535-211081f730ee", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition_based_learning(x):\n            return -1 * x\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest\n", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by incorporating a novel opposition-based learning mechanism for population diversity and convergence acceleration.", "configspace": "", "generation": 25, "fitness": 0.2297495694470753, "feedback": "The algorithm EnhancedOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "fb3ee60c-ba04-46b2-a4ab-4a0adba7e1c7", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "efc9c662-e67e-4419-9b95-ccee00031f1d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\nfrom cma import CMAEvolutionStrategy\n\nclass EnhancedOpposedChaoticHybridMetaheuristicImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        def local_search(x, func):\n            res = minimize(func, x, method='L-BFGS-B', bounds=[(-5.0, 5.0)]*self.dim)\n            return np.clip(res.x, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n                \n                if np.random.rand() < 0.1:  # Apply local search with a probability\n                    population[i] = local_search(population[i], func)\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristicImproved", "description": "Improving exploration and exploitation balance by incorporating a local search strategy based on covariance matrix adaptation evolution strategy (CMA-ES).", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'cma'\").", "error": "ModuleNotFoundError(\"No module named 'cma'\")", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {}, "mutation_prompt": null}
{"id": "01216446-67f6-4a25-9d00-79a1a12d78f3", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "eef2ca21-eb81-4d04-847f-133cfaeab87a", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "b68313f6-cec6-49f4-8bbc-c0e20237b999", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "843b0ddd-22c3-41e5-9bec-e6a918651b38", "solution": "import numpy as np\n\nclass EnhancedDynamicOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def dynamic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def dynamic_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = dynamic_mutation(population[i], population)\n                trial, new_velocity = dynamic_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedDynamicOpposedChaoticHybridMetaheuristic", "description": "Introducing a dynamic search neighborhood strategy to enhance exploration diversity and exploitation efficiency.", "configspace": "", "generation": 31, "fitness": 0.2297495694470753, "feedback": "The algorithm EnhancedDynamicOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "4066de76-dc21-4ad3-8bc5-800ab720c027", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "71086f91-5172-4022-9f0c-082161ea009d", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "30a2da9d-27cb-4078-817b-51561545fe38", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "6033493c-31a9-4024-a3f7-f9a8e601a382", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristicRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition_based_learning(x):\n            return -x\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristicRefined", "description": "Enhancing the exploration and exploitation balance by incorporating a novel opposition-based learning strategy to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 35, "fitness": 0.2297495694470753, "feedback": "The algorithm EnhancedOpposedChaoticHybridMetaheuristicRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "084d982e-4186-4516-bdee-2ecb209b2983", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing the exploration capability by introducing a novel mutation operator based on chaotic dynamics to improve the diversity of solutions and speed up convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.8318676815737722, 0.9588612173002081, 0.9667676214127058, 0.971460528066993, 0.963587750166303, 0.9325901667425963, 0.8599324692294908, 0.8536473311492967, 0.7917764429539853, 0.19890633335685948, 0.9048866163776035, 0.4484452722539297, 0.5901406498877468, 0.6077563482616062, 0.7233759383962459, 0.3513035860981417, 0.3287238704630001, 0.9109221484716257, 0.11454368630933764, 0.0819648203558967, 0.0915998243193884, 0.07172004840583346, 0.045500251120453195, 0.0444375891583384, 0.07413557162566509, 0.0742469899060405, 0.12739161573294555, 0.07669406135715451, 0.05671766547521295, 0.022980053495777475, 0.09155078229055214, 0.08194991507423366, 0.07605686097055964, 0.008820276636018698, 0.07408613353618299, 0.03660331190803667, 0.9643097925342455, 0.99136080110924, 0.9839997800445326, 0.9611598258266054, 0.9702955676080675, 0.9757338291086591, 0.9592157632041991, 0.9704590264317136, 0.9817356005957785, 0.270113219994073, 0.1475223339637738, 0.1508147274542676, 0.17943645796320984, 0.0650484280422906, 0.10406923669182921, 0.11445558081497498, 0.09801555215609803, 0.025136574243720844, 0.2293196818719223, 0.16043130421250917, 0.09197851101325472, 0.22613900780060459, 0.21700263112146023, 0.19605068690297034, 0.09705010263161262, 0.11194191848690915, 0.2260850129641151, 0.4343819345813542, 0.13897793617061793, 0.14586340342797888, 0.021023312967910934, 0.1483890482638881, 0.13772359424325153, 0.13244306276599205, 0.13153673255442955, 0.1324901640241145, 0.18060789816887013, 9.999999999998899e-05, 0.14157107814191983, 0.15320027127798186, 0.03507660020094494, 0.1288102645803879, 0.13235661868000204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09027611613053554, 0.08794019555225097, 0.06122357352663532, 0.0593061724573527, 0.002012691524610477, 0.016609637085487572, 0.2342352980311273, 0.06697078959206904, 0.03984858646127576, 0.10041962410288074, 0.07982481605024239, 0.13168333902795126, 0.14749056530955262, 0.09102888681606058, 0.19836295541077897, 0.18279951171108744, 0.17197812250524736, 0.09448315317880662, 0.08575746142892127, 0.06702341315928884, 0.05151561200132715, 0.008167638607627481, 0.04433119033016153, 0.006854649430597437, 0.08744453436715927, 0.10414710570937402, 0.09075972088258022, 0.47589055416336934, 0.39313052552282435, 0.45801643256330604, 0.3984062218663974, 0.43660416679430214, 0.43653149951136294, 0.4507026401189903, 0.43626527039473695, 0.4686322737425421, 0.033360202937663286, 0.1291842017872621, 0.06541952801828044, 0.08199460512505685, 0.09849132367720614, 0.09537966963299893, 0.0909286784697435, 0.08462111295613395, 0.0820019734019719, 0.22876547317923646, 0.1642581425364258, 0.12737175772664344, 0.19735798592119025, 0.2580410277786874, 0.1984155535488621, 0.20823547513901508, 0.12342163155777985, 0.11443779362491402, 0.15794263774033712, 0.20129678893135527, 0.14055310460008008, 0.22987319204496193, 0.3061660916428085, 0.1730065180314626, 0.14563150349387322, 0.2943311973215721, 0.12678308959756324, 0.12368845790721605, 0.1454532933493099, 0.17815662806859278, 0.11751607695934962, 0.1006910125646645, 0.10960208956488282, 0.14505285332560758, 0.2828810713345501, 0.09993858514692144, 0.24731928181257679, 0.19019667152206954, 0.1833308860608377, 0.20943039914905126, 0.2807117924293814, 0.20495237938327726, 0.21010999486065396, 0.2276758853891816, 0.18391868394183175, 0.1503827052268738, 0.17759398947833283, 0.2131687766255057, 0.17729248739085035, 0.19793803502691376, 0.16817373310802508, 0.18236366599847542, 0.1976603809955192, 0.1919379508682274, 0.18926975101394594, 0.12723895165885024, 0.15492806183185348, 0.15015139938520738, 0.20195713704060891, 0.6400405428936462, 0.10010433536858632, 0.1706893518526944, 0.14818183190192635, 0.08337530007053207, 0.17995333028388172, 0.16799321150593371, 0.2127736171468949, 0.17020016520190462, 0.21464984402634202, 0.10559911078479711, 0.3897007447032189, 0.19286413807259217, 0.22069637487126414, 0.20897207253683148, 0.18816311274937292, 0.1883325601527973, 0.20672910507034103, 0.19954349883220046, 0.19636271844172315, 0.19467500059185272, 0.20962901965652514, 0.08857502098932868, 0.10396841169892346, 0.07257407866488752, 0.06900707198121003, 0.07340184168154917, 0.09286418144483122, 0.07701137001269531, 0.05394315452130072, 0.060220304264620994]}, "mutation_prompt": null}
{"id": "c17d6a15-d05f-43be-bb73-7467eb2005fe", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing opposition-based learning\n                opposite_trial = 2 * gbest - trial\n                opposite_trial_fitness = func(opposite_trial)\n                if opposite_trial_fitness < fitness[i]:\n                    population[i] = opposite_trial\n                    fitness[i] = opposite_trial_fitness\n                    pbest[i] = opposite_trial\n                    if opposite_trial_fitness < gbest_fitness:\n                        gbest = opposite_trial\n                        gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing exploration diversity by incorporating opposition-based learning to improve population diversity and convergence speed.", "configspace": "", "generation": 37, "fitness": 0.25773166861851604, "feedback": "The algorithm EnhancedOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.28.", "error": "", "parent_id": "108de2ca-617f-4fb0-9e34-e3b9e53b2c22", "metadata": {"aucs": [0.9564320957047716, 0.9610443498964683, 0.9608623288458844, 0.9628583115969457, 0.28362074107713375, 0.19064249684543288, 0.9560809998981619, 0.9595383689334103, 0.9613284554696109, 0.9132557680999829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0513500008584542, 9.999999999998899e-05, 0.05621161684521536, 0.9252532318146991, 0.9135356926832314, 0.1658806327384884, 0.12049331098638139, 0.09524303505211851, 0.05833180351671641, 0.026916814340038453, 0.056683210314021015, 0.09938391618368148, 0.06764009083881006, 0.12123073607882795, 0.06528040422160686, 0.09855754369532788, 0.07333539617514839, 0.08805598361306477, 0.0737132793120241, 0.0693325821569617, 9.999999999998899e-05, 0.08125335864621541, 0.1489876849630436, 0.9957047534703147, 0.9958985923644474, 0.9966805536769724, 0.9943594707460346, 0.9941428986424956, 0.9921715451932903, 0.9945069746897001, 0.9946094887450597, 0.9923601563698133, 0.7851453264429722, 0.05522910555741822, 0.11674882695649236, 0.6349740896704221, 0.4973688569697212, 0.6482190781928223, 0.06926865644128122, 0.8260316844028924, 0.08854708629257169, 0.1838341013101511, 0.1138400622786192, 0.17203642586293644, 0.19533824445558867, 0.17588097674176428, 0.1511507651709071, 0.17854947347815864, 0.10569783013662004, 0.09163668481256027, 0.26819781005536747, 0.25324094401830866, 0.30375593898262465, 9.999999999998899e-05, 0.1091164860162257, 0.2097591464712124, 0.2592825231390884, 0.27254922574248686, 0.44492584299238047, 0.2787046679777895, 0.0202352455715179, 0.24000335500077052, 0.2873841541526224, 0.2734798800511665, 0.287194870082388, 0.2993946732785132, 9.999999999998899e-05, 0.3013344723965298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07039084047534849, 0.016183738047000906, 0.11190233672821037, 9.999999999998899e-05, 0.20007912138035067, 0.017209023967509007, 0.06843761579404328, 0.10880515374404354, 0.08366889793866705, 9.999999999998899e-05, 0.032215417245841316, 0.16668921488143273, 9.999999999998899e-05, 0.05200726974747105, 0.16342532892875483, 9.999999999998899e-05, 0.11192044447918248, 0.259984942014408, 0.21410757984195772, 9.999999999998899e-05, 0.20799372336738708, 0.08108675772406349, 0.1476763928136433, 0.13351138860764855, 0.08412831436740564, 0.13628578609678477, 0.053923715128455285, 0.006940609640113338, 0.006990421369994837, 0.22232357064001118, 0.24857477087418112, 0.16262394478944553, 0.5608047691460664, 0.6237021744790797, 0.5644364762882523, 0.6198145249190368, 0.6890608206656149, 0.5743127752365214, 0.5907578513643312, 0.14754661341598752, 0.5721807539592562, 0.04645044614899396, 0.05208017021000355, 0.07147077782672351, 0.1380299722683359, 0.11983162801190561, 0.1488973098097356, 0.0712903396884933, 0.0652581420174434, 0.09478955593732608, 0.2653550775662127, 0.13990398888312083, 0.12438324649555721, 0.19546575874969807, 0.3240580848686023, 0.18275978435910845, 0.17347745073313803, 0.12897867563338405, 0.18819761060557993, 0.14423947609915355, 0.23564297262195266, 0.22250372898473803, 0.2806291520508165, 0.13326906563024132, 0.2685064221257004, 0.24435521403770655, 0.23379809473895208, 0.19203238776316334, 0.1577866655539859, 0.13231293670861544, 0.10867944681180963, 0.11888636143399034, 0.20051057341068945, 0.2074163310113748, 0.15036419516895005, 0.13709524719655186, 0.09622464893743832, 0.20806988435014495, 0.20034727027768473, 0.1768309596455936, 0.2183059812559881, 0.20686561099289225, 0.18066055782969592, 0.18573538658628497, 0.21489507056469015, 0.224629433963348, 0.18519329558405517, 0.17495915968089326, 0.21404225948048894, 0.21557379955514688, 0.18087704653219017, 0.17681642595529978, 0.20136634514973972, 0.25772620294002513, 0.17162576613695324, 0.18841931149910274, 0.17041798322339052, 0.15499773986833787, 0.15491146366931552, 0.20240348369785166, 0.20223288601649725, 0.09998169093162201, 0.17051989416057545, 0.1547801329377937, 0.08226538274357664, 0.1671527625493271, 0.8915201795186312, 0.8635201363262737, 0.1700336535506396, 0.2135426730383082, 0.10548573272306316, 0.953036122566311, 0.8338726114748308, 0.24800420116717337, 0.20296078467994783, 0.18495045278630284, 0.22805218140743422, 0.1831279882759772, 0.1616604437375685, 0.23944591142133143, 0.2447624240109556, 0.20629004188189481, 0.09889258055767824, 0.11416292213015078, 0.08401916236936269, 0.0799574651831847, 0.10116615916766136, 0.07729585744517586, 0.04862472585031996, 0.09134423191797647, 0.08264938402321276]}, "mutation_prompt": null}
{"id": "755a7b72-6fa2-499f-a18e-4a8e0a457d30", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing opposition-based learning\n                opposite_trial = 2 * gbest - trial\n                opposite_trial_fitness = func(opposite_trial)\n                if opposite_trial_fitness < fitness[i]:\n                    population[i] = opposite_trial\n                    fitness[i] = opposite_trial_fitness\n                    pbest[i] = opposite_trial\n                    if opposite_trial_fitness < gbest_fitness:\n                        gbest = opposite_trial\n                        gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing exploration diversity by incorporating opposition-based learning to improve population diversity and convergence speed.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17d6a15-d05f-43be-bb73-7467eb2005fe", "metadata": {"aucs": [0.9564320957047716, 0.9610443498964683, 0.9608623288458844, 0.9628583115969457, 0.28362074107713375, 0.19064249684543288, 0.9560809998981619, 0.9595383689334103, 0.9613284554696109, 0.9132557680999829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0513500008584542, 9.999999999998899e-05, 0.05621161684521536, 0.9252532318146991, 0.9135356926832314, 0.1658806327384884, 0.12049331098638139, 0.09524303505211851, 0.05833180351671641, 0.026916814340038453, 0.056683210314021015, 0.09938391618368148, 0.06764009083881006, 0.12123073607882795, 0.06528040422160686, 0.09855754369532788, 0.07333539617514839, 0.08805598361306477, 0.0737132793120241, 0.0693325821569617, 9.999999999998899e-05, 0.08125335864621541, 0.1489876849630436, 0.9957047534703147, 0.9958985923644474, 0.9966805536769724, 0.9943594707460346, 0.9941428986424956, 0.9921715451932903, 0.9945069746897001, 0.9946094887450597, 0.9923601563698133, 0.7851453264429722, 0.05522910555741822, 0.11674882695649236, 0.6349740896704221, 0.4973688569697212, 0.6482190781928223, 0.06926865644128122, 0.8260316844028924, 0.08854708629257169, 0.1838341013101511, 0.1138400622786192, 0.17203642586293644, 0.19533824445558867, 0.17588097674176428, 0.1511507651709071, 0.17854947347815864, 0.10569783013662004, 0.09163668481256027, 0.26819781005536747, 0.25324094401830866, 0.30375593898262465, 9.999999999998899e-05, 0.1091164860162257, 0.2097591464712124, 0.2592825231390884, 0.27254922574248686, 0.44492584299238047, 0.2787046679777895, 0.0202352455715179, 0.24000335500077052, 0.2873841541526224, 0.2734798800511665, 0.287194870082388, 0.2993946732785132, 9.999999999998899e-05, 0.3013344723965298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07039084047534849, 0.016183738047000906, 0.11190233672821037, 9.999999999998899e-05, 0.20007912138035067, 0.017209023967509007, 0.06843761579404328, 0.10880515374404354, 0.08366889793866705, 9.999999999998899e-05, 0.032215417245841316, 0.16668921488143273, 9.999999999998899e-05, 0.05200726974747105, 0.16342532892875483, 9.999999999998899e-05, 0.11192044447918248, 0.259984942014408, 0.21410757984195772, 9.999999999998899e-05, 0.20799372336738708, 0.08108675772406349, 0.1476763928136433, 0.13351138860764855, 0.08412831436740564, 0.13628578609678477, 0.053923715128455285, 0.006940609640113338, 0.006990421369994837, 0.22232357064001118, 0.24857477087418112, 0.16262394478944553, 0.5608047691460664, 0.6237021744790797, 0.5644364762882523, 0.6198145249190368, 0.6890608206656149, 0.5743127752365214, 0.5907578513643312, 0.14754661341598752, 0.5721807539592562, 0.04645044614899396, 0.05208017021000355, 0.07147077782672351, 0.1380299722683359, 0.11983162801190561, 0.1488973098097356, 0.0712903396884933, 0.0652581420174434, 0.09478955593732608, 0.2653550775662127, 0.13990398888312083, 0.12438324649555721, 0.19546575874969807, 0.3240580848686023, 0.18275978435910845, 0.17347745073313803, 0.12897867563338405, 0.18819761060557993, 0.14423947609915355, 0.23564297262195266, 0.22250372898473803, 0.2806291520508165, 0.13326906563024132, 0.2685064221257004, 0.24435521403770655, 0.23379809473895208, 0.19203238776316334, 0.1577866655539859, 0.13231293670861544, 0.10867944681180963, 0.11888636143399034, 0.20051057341068945, 0.2074163310113748, 0.15036419516895005, 0.13709524719655186, 0.09622464893743832, 0.20806988435014495, 0.20034727027768473, 0.1768309596455936, 0.2183059812559881, 0.20686561099289225, 0.18066055782969592, 0.18573538658628497, 0.21489507056469015, 0.224629433963348, 0.18519329558405517, 0.17495915968089326, 0.21404225948048894, 0.21557379955514688, 0.18087704653219017, 0.17681642595529978, 0.20136634514973972, 0.25772620294002513, 0.17162576613695324, 0.18841931149910274, 0.17041798322339052, 0.15499773986833787, 0.15491146366931552, 0.20240348369785166, 0.20223288601649725, 0.09998169093162201, 0.17051989416057545, 0.1547801329377937, 0.08226538274357664, 0.1671527625493271, 0.8915201795186312, 0.8635201363262737, 0.1700336535506396, 0.2135426730383082, 0.10548573272306316, 0.953036122566311, 0.8338726114748308, 0.24800420116717337, 0.20296078467994783, 0.18495045278630284, 0.22805218140743422, 0.1831279882759772, 0.1616604437375685, 0.23944591142133143, 0.2447624240109556, 0.20629004188189481, 0.09889258055767824, 0.11416292213015078, 0.08401916236936269, 0.0799574651831847, 0.10116615916766136, 0.07729585744517586, 0.04862472585031996, 0.09134423191797647, 0.08264938402321276]}, "mutation_prompt": null}
{"id": "fad4d51a-0398-4746-b44c-2a135dea421f", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristicRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing the novel opposition-based selection mechanism\n                opposite_candidates = np.array([2 * gbest - pop for pop in population])\n                opposite_fitness = np.array([func(x) for x in opposite_candidates])\n                min_opposite_idx = np.argmin(opposite_fitness)\n                if opposite_fitness[min_opposite_idx] < fitness[i]:\n                    population[i] = opposite_candidates[min_opposite_idx]\n                    fitness[i] = opposite_fitness[min_opposite_idx]\n                    pbest[i] = opposite_candidates[min_opposite_idx]\n                    if opposite_fitness[min_opposite_idx] < gbest_fitness:\n                        gbest = opposite_candidates[min_opposite_idx]\n                        gbest_fitness = opposite_fitness[min_opposite_idx]\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristicRefined", "description": "Improving population diversity by incorporating a novel opposition-based selection mechanism to enhance exploration and exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.08310591886177418, "feedback": "The algorithm EnhancedOpposedChaoticHybridMetaheuristicRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.19.", "error": "", "parent_id": "c17d6a15-d05f-43be-bb73-7467eb2005fe", "metadata": {"aucs": [0.12344490784974405, 0.09110398674959719, 0.11317291230546667, 0.10039167263250948, 0.08169151488766291, 0.1586987869936589, 0.1535134827555401, 0.10629681307803351, 0.13126924054082645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020655128346576235, 0.019735310147685592, 0.025846015806561762, 0.010643411704069683, 0.01670912288234372, 0.018696108077667306, 0.018248263482334326, 0.005998074650452545, 0.03282361400205225, 0.005961199555287733, 0.006162350290215168, 0.0047106314684493, 0.01959972157639278, 0.029715584817297858, 0.020928083082068394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9959377100894049, 0.9920641639133647, 0.9959732889743499, 0.09981225745203703, 0.9948401104995142, 0.9905059645572276, 0.9956585699327659, 0.995643425710921, 0.9956731991889879, 0.01029811709867623, 9.999999999998899e-05, 9.999999999998899e-05, 0.020373795895842872, 0.042153039678545445, 0.0020225344110543775, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.04688769813892357, 0.07320256430783922, 0.06279118125008931, 0.08241047770164422, 0.01301961024412579, 0.026742501088490855, 0.09829017790586736, 0.03860590367336458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004182763775932852, 9.999999999998899e-05, 9.999999999998899e-05, 0.011110926285705647, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12735994186379962, 0.12847718168965927, 0.16200498117811823, 0.1291343489113218, 0.111783480018672, 0.10609039118861019, 0.14717467674057116, 0.12094667334420028, 0.17566377066262162, 9.999999999998899e-05, 0.0011376472262280002, 9.999999999998899e-05, 0.025704272466964384, 0.003840707122831355, 0.019134351071826483, 0.023521075119548707, 0.012847658256821326, 0.02852989444947629, 0.07037543064596374, 0.07083428027100058, 0.059328965068867756, 0.09855305120349966, 0.10852972522114013, 0.05643121168494414, 0.08808199726801991, 0.07331259497499432, 0.08704949589038247, 0.11630550419642283, 0.1377335218614022, 0.10359778603806002, 0.13024895935561742, 0.11599923344023044, 0.12985997081898892, 0.11420206329748472, 0.17377774300845283, 0.10106956173553028, 0.08183645614906232, 0.04644245327403018, 0.06536910927355843, 0.06450112719474999, 0.06406947898089654, 0.06777695712220522, 0.06485338273586005, 0.10911757746165063, 0.034573241697105184, 0.11982397142311674, 0.11614920592925859, 0.13345086981233123, 0.11859743181278604, 0.09670431572666693, 0.14455876937384615, 0.12245976138762271, 0.09316155411360394, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.040211204227924235, 0.13389888188194876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13372712179351642, 0.06307413632008119, 0.09805263015074184, 0.08167024703901915, 0.1033971367380907, 0.1207914665021157, 0.1060666962300586, 0.07662850848633751, 0.09643604708838482, 0.08294621312930828, 0.03824121102611444, 0.06533509616680999, 0.02520987743123826, 0.0759934028744016, 0.06918110090721896, 0.05763172995277366, 0.06008778672560333, 0.081939940102294, 0.04951310713922541, 0.13916901156792594, 0.128372137474824, 0.14763022729669195, 0.12668741541126716, 0.12272203055011399, 0.12465113207635137, 0.12850576028924698, 0.13994837231717938, 0.14689007985489466, 0.026998826388866304, 0.033338999353999865, 0.05233462438004732, 0.027015293023570086, 0.02074228028059666, 0.012584454752178176, 0.028246703432359355, 0.019645506423416004, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "ab764b0b-8dcc-45c1-aa7e-b761d88df2c1", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing opposition-based learning\n                opposite_trial = 2 * gbest - trial\n                opposite_trial_fitness = func(opposite_trial)\n                if opposite_trial_fitness < fitness[i]:\n                    population[i] = opposite_trial\n                    fitness[i] = opposite_trial_fitness\n                    pbest[i] = opposite_trial\n                    if opposite_trial_fitness < gbest_fitness:\n                        gbest = opposite_trial\n                        gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing exploration diversity by incorporating opposition-based learning to improve population diversity and convergence speed.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17d6a15-d05f-43be-bb73-7467eb2005fe", "metadata": {"aucs": [0.9564320957047716, 0.9610443498964683, 0.9608623288458844, 0.9628583115969457, 0.28362074107713375, 0.19064249684543288, 0.9560809998981619, 0.9595383689334103, 0.9613284554696109, 0.9132557680999829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0513500008584542, 9.999999999998899e-05, 0.05621161684521536, 0.9252532318146991, 0.9135356926832314, 0.1658806327384884, 0.12049331098638139, 0.09524303505211851, 0.05833180351671641, 0.026916814340038453, 0.056683210314021015, 0.09938391618368148, 0.06764009083881006, 0.12123073607882795, 0.06528040422160686, 0.09855754369532788, 0.07333539617514839, 0.08805598361306477, 0.0737132793120241, 0.0693325821569617, 9.999999999998899e-05, 0.08125335864621541, 0.1489876849630436, 0.9957047534703147, 0.9958985923644474, 0.9966805536769724, 0.9943594707460346, 0.9941428986424956, 0.9921715451932903, 0.9945069746897001, 0.9946094887450597, 0.9923601563698133, 0.7851453264429722, 0.05522910555741822, 0.11674882695649236, 0.6349740896704221, 0.4973688569697212, 0.6482190781928223, 0.06926865644128122, 0.8260316844028924, 0.08854708629257169, 0.1838341013101511, 0.1138400622786192, 0.17203642586293644, 0.19533824445558867, 0.17588097674176428, 0.1511507651709071, 0.17854947347815864, 0.10569783013662004, 0.09163668481256027, 0.26819781005536747, 0.25324094401830866, 0.30375593898262465, 9.999999999998899e-05, 0.1091164860162257, 0.2097591464712124, 0.2592825231390884, 0.27254922574248686, 0.44492584299238047, 0.2787046679777895, 0.0202352455715179, 0.24000335500077052, 0.2873841541526224, 0.2734798800511665, 0.287194870082388, 0.2993946732785132, 9.999999999998899e-05, 0.3013344723965298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07039084047534849, 0.016183738047000906, 0.11190233672821037, 9.999999999998899e-05, 0.20007912138035067, 0.017209023967509007, 0.06843761579404328, 0.10880515374404354, 0.08366889793866705, 9.999999999998899e-05, 0.032215417245841316, 0.16668921488143273, 9.999999999998899e-05, 0.05200726974747105, 0.16342532892875483, 9.999999999998899e-05, 0.11192044447918248, 0.259984942014408, 0.21410757984195772, 9.999999999998899e-05, 0.20799372336738708, 0.08108675772406349, 0.1476763928136433, 0.13351138860764855, 0.08412831436740564, 0.13628578609678477, 0.053923715128455285, 0.006940609640113338, 0.006990421369994837, 0.22232357064001118, 0.24857477087418112, 0.16262394478944553, 0.5608047691460664, 0.6237021744790797, 0.5644364762882523, 0.6198145249190368, 0.6890608206656149, 0.5743127752365214, 0.5907578513643312, 0.14754661341598752, 0.5721807539592562, 0.04645044614899396, 0.05208017021000355, 0.07147077782672351, 0.1380299722683359, 0.11983162801190561, 0.1488973098097356, 0.0712903396884933, 0.0652581420174434, 0.09478955593732608, 0.2653550775662127, 0.13990398888312083, 0.12438324649555721, 0.19546575874969807, 0.3240580848686023, 0.18275978435910845, 0.17347745073313803, 0.12897867563338405, 0.18819761060557993, 0.14423947609915355, 0.23564297262195266, 0.22250372898473803, 0.2806291520508165, 0.13326906563024132, 0.2685064221257004, 0.24435521403770655, 0.23379809473895208, 0.19203238776316334, 0.1577866655539859, 0.13231293670861544, 0.10867944681180963, 0.11888636143399034, 0.20051057341068945, 0.2074163310113748, 0.15036419516895005, 0.13709524719655186, 0.09622464893743832, 0.20806988435014495, 0.20034727027768473, 0.1768309596455936, 0.2183059812559881, 0.20686561099289225, 0.18066055782969592, 0.18573538658628497, 0.21489507056469015, 0.224629433963348, 0.18519329558405517, 0.17495915968089326, 0.21404225948048894, 0.21557379955514688, 0.18087704653219017, 0.17681642595529978, 0.20136634514973972, 0.25772620294002513, 0.17162576613695324, 0.18841931149910274, 0.17041798322339052, 0.15499773986833787, 0.15491146366931552, 0.20240348369785166, 0.20223288601649725, 0.09998169093162201, 0.17051989416057545, 0.1547801329377937, 0.08226538274357664, 0.1671527625493271, 0.8915201795186312, 0.8635201363262737, 0.1700336535506396, 0.2135426730383082, 0.10548573272306316, 0.953036122566311, 0.8338726114748308, 0.24800420116717337, 0.20296078467994783, 0.18495045278630284, 0.22805218140743422, 0.1831279882759772, 0.1616604437375685, 0.23944591142133143, 0.2447624240109556, 0.20629004188189481, 0.09889258055767824, 0.11416292213015078, 0.08401916236936269, 0.0799574651831847, 0.10116615916766136, 0.07729585744517586, 0.04862472585031996, 0.09134423191797647, 0.08264938402321276]}, "mutation_prompt": null}
{"id": "bd6a6d79-ab28-45c2-9ea4-75c612b2e290", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticDEMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def differential_evolution_mutation(population, i, mut=0.8, crossp=0.7):\n            candidates = [ind for ind in range(len(population)) if ind != i]\n            a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n            mutant = np.clip(a + mut * (b - c), -5.0, 5.0)\n            return mutant\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                           + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                           + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = differential_evolution_mutation(population, i)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                opposite_trial = 2 * gbest - trial\n                opposite_trial_fitness = func(opposite_trial)\n                if opposite_trial_fitness < fitness[i]:\n                    population[i] = opposite_trial\n                    fitness[i] = opposite_trial_fitness\n                    pbest[i] = opposite_trial\n                    if opposite_trial_fitness < gbest_fitness:\n                        gbest = opposite_trial\n                        gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticDEMetaheuristic", "description": "Enhancing exploration diversity and exploitation by incorporating opposition-based learning and differential evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 41, "fitness": 0.24825559400833744, "feedback": "The algorithm EnhancedOpposedChaoticDEMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.28.", "error": "", "parent_id": "c17d6a15-d05f-43be-bb73-7467eb2005fe", "metadata": {"aucs": [0.9627400466230204, 0.9619608660678548, 0.9657677907548158, 0.19360312549431324, 0.96414471372333, 0.18382400647324237, 0.9587180095587874, 0.9644110026741558, 0.9583104341463686, 0.92053861859144, 0.9086572777573694, 9.999999999998899e-05, 9.999999999998899e-05, 0.921792172305219, 0.9008570804416152, 9.999999999998899e-05, 0.019694669051538383, 0.01960206405959175, 0.13739091686140636, 0.06893507503379748, 0.13735325856445435, 0.08043803379293091, 0.05100838885005743, 0.14655194028009122, 0.11347365659605968, 0.053244389481366894, 0.16763320044949337, 0.09888829383639297, 0.06136056097233378, 0.0948772312392201, 0.10305852998006082, 0.16676236541476697, 0.030945309630894924, 0.06302157366789451, 0.07049544702555299, 0.11405537429946266, 0.9955683418277734, 0.9960870847843258, 0.9973527388094904, 0.9925553193176389, 0.09299194538118138, 0.9925775639615618, 0.9955172806079016, 0.9946997415655261, 0.9940335021401028, 0.05570308557060777, 0.05990135707315114, 0.11657143617151888, 0.8219559920956954, 0.154753528088158, 0.8241739895337673, 0.7765743335543056, 0.6330478848694938, 0.08804771501865216, 0.17283801802867926, 0.09807000523152853, 0.1115297777213724, 0.20769697485238725, 0.28437744549396593, 0.11595352954122407, 0.1512400399159476, 0.1370361351634487, 0.18005961890928068, 0.1268493186011792, 0.27200280835314383, 0.24195129233045365, 0.2569624964880539, 0.27493516325060785, 0.13208555522103038, 0.2566551151381503, 0.32498938204906225, 0.24542846857628242, 0.2547570522911107, 0.24847317225497112, 0.13136354714968113, 0.13535863343379373, 0.2640987107824312, 0.13759962458722352, 0.2990369799551289, 9.999999999998899e-05, 0.18228195930262892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07408124683367079, 9.999999999998899e-05, 9.999999999998899e-05, 0.0770731585356611, 9.999999999998899e-05, 0.09596178546226142, 0.08004040424315395, 0.023447169926569256, 0.09063363268833291, 0.08271007360185612, 0.007026131822454262, 0.01152078100882703, 0.03345817154950215, 0.08079843703384759, 0.009299702557253098, 0.23386573286926415, 9.999999999998899e-05, 0.21725772519462694, 0.08653435717663616, 0.369101241902828, 0.1728769396754558, 0.19607848642175618, 0.16000447056376654, 9.999999999998899e-05, 0.11107690348597843, 0.35236740915892795, 0.148956939404556, 0.0069545521246813236, 0.07103987556512115, 0.04342137290994108, 0.16208578434805765, 9.999999999998899e-05, 0.08515140792584752, 0.5763389425773686, 0.5981275184638002, 0.6085081676762636, 0.5869382806921062, 0.6046399681789256, 0.20967273442575673, 0.6512166713987814, 0.6423549269504374, 0.7351964610338713, 0.07126724136761464, 0.1209400493676247, 0.07353025968149962, 0.05684466569540181, 0.102503215953345, 0.08110936575079541, 0.09450253677602305, 0.07178114419376891, 0.08465206367184674, 0.12286780036929956, 0.17642571099794624, 0.14541727160555207, 0.1662362158152646, 0.20419101009703977, 0.18374350603338807, 0.26953987974596105, 0.13845088227969882, 0.22406334367993563, 0.21703067142138266, 0.21743603902751374, 0.2783737057650991, 0.18651919869024114, 0.26905895525058154, 0.2604891300258787, 0.18593091443567178, 0.23357936056343775, 0.17334772528745457, 0.09860316121744095, 0.14541625111966971, 0.14787506550350338, 0.17290129173808233, 0.13194535918199324, 0.2471185770596881, 0.1593608959349534, 0.1797268952851604, 0.07065801606096922, 0.1779365320755889, 0.15590335826534096, 0.19293852329389716, 0.18799526666698285, 0.20460604607419097, 0.2191072345188425, 0.1960680120408288, 0.16738018358696305, 0.18977611152731222, 0.17306795567136402, 0.17288214505267663, 0.17675200652892054, 0.23075690406369054, 0.18780779869928255, 0.17354075859944496, 0.18747812954039278, 0.19323681037706253, 0.17518409165799753, 0.1837011119965235, 0.12711242493379593, 0.15509017615833742, 0.967265083419704, 0.20182491935801594, 0.16639056013666031, 0.12337271895444424, 0.1707727326489108, 0.1636624584591495, 0.08331317723432252, 0.21360704378049822, 0.051797537670252525, 0.10520949479133601, 0.17016548235204176, 0.21424405231762933, 0.10543932384994026, 0.9019197753468783, 0.09491349985041708, 0.17908364993457193, 0.21617672748178518, 0.20421310403586412, 0.2026427653564873, 0.19322631409134938, 0.2152772630896349, 0.2146686567607825, 0.23312502590067075, 0.22252247570184658, 0.11315647873783141, 0.06728958609931268, 0.11909476896422566, 0.06761784864394216, 0.08661288826954638, 0.06333734440352423, 0.07386085919071939, 0.06267854401227668, 0.07599053289548452]}, "mutation_prompt": null}
{"id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 42, "fitness": 0.26215974209984005, "feedback": "The algorithm AdvancedOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.28.", "error": "", "parent_id": "c17d6a15-d05f-43be-bb73-7467eb2005fe", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "642926d3-b206-420a-87b6-ab4a5a9bd46c", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def adaptive_chaotic_mutation(x, pop, fitness, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            # Dynamic mutation probability adjustment\n            if func(mutant) < fitness:\n                return mutant\n            else:\n                return x\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_chaotic_mutation(population[i], population, fitness[i])\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Improving convergence by dynamically adjusting mutation probabilities based on local fitness landscape characteristics.", "configspace": "", "generation": 43, "fitness": 0.22390207743513424, "feedback": "The algorithm EnhancedOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.24.", "error": "", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.812945187763154, 0.9198838318652899, 0.9354515873385938, 0.9455268638621134, 0.9293381202145713, 0.8672919841789883, 0.8327840518689476, 0.7858881720601982, 0.7374361348130579, 0.18709398272295819, 0.8117820168231458, 0.4014685086177543, 0.5533193389024496, 0.5254796515716649, 0.6852459421490043, 0.32405566605234526, 0.3146705188251909, 0.8241850947989893, 0.11355090642960308, 0.08144044779547388, 0.09104398287953774, 0.07114577005255762, 0.04538236382053762, 0.053493249654402275, 0.07370808550292463, 0.07392804547816523, 0.12598408124677063, 0.07633624450437382, 0.056372987298246136, 0.02279957319502013, 0.0909853278017938, 0.08145956835452506, 0.07506659617182065, 0.00872009082080627, 0.07355501271595277, 0.036341566663875335, 0.9306600326585793, 0.9847562829742929, 0.9700584031137749, 0.9243611421736744, 0.9425986601345213, 0.9534531112654137, 0.9204659968133156, 0.9431516115120726, 0.9663489850953978, 0.26383950046389004, 0.14488784861728055, 0.144745722834566, 0.17789072854448218, 0.06477096137772786, 0.10024130168684264, 0.10993312782880005, 0.09505943456877608, 0.024587016864714872, 0.22643376279015148, 0.17690989760915365, 0.09171178540005531, 0.2380978576573448, 0.21641898343037014, 0.19537756277649665, 0.10614215716987108, 0.11183277913932, 0.22533057521002697, 0.42721448472719004, 0.13764093912076603, 0.13429093181807716, 0.019538056921248215, 0.1454354243027285, 0.13628124021357435, 0.1318588519718944, 0.12959518516053836, 0.13125247222563086, 0.17927087571022038, 9.999999999998899e-05, 0.1371100479968851, 0.15188719995765732, 0.03257414755458954, 0.12471795612943737, 0.13164181567875455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09011073648438583, 0.08871158680520275, 0.061144371241268036, 0.060419443662918626, 0.00016196622231967606, 0.01670346499046771, 0.2145418825177724, 0.06562331002930955, 0.04609662649798574, 0.09687389415628855, 0.07811482436646144, 0.12222155054034844, 0.14397969201204852, 0.08877465925411254, 0.19355173991280028, 0.17273037226730525, 0.16761008248717613, 0.08746006298615938, 0.0785935494486274, 0.06500935707592526, 0.042413782692946156, 0.00797649163642511, 0.0430517620374119, 0.006586376339546396, 0.08639618511330172, 0.10283562288454973, 0.08978123295004858, 0.4658063827144373, 0.38900713493058725, 0.4521336249562363, 0.39531693142185365, 0.43166186585364297, 0.4305125558406854, 0.444650761630776, 0.4315315173138452, 0.4602961095341377, 0.03307640252407251, 0.12823124772204975, 0.0649157421861506, 0.08145259656810067, 0.09695104472163818, 0.09489628133831085, 0.0902265768508721, 0.08377117587780447, 0.08154967623003262, 0.2277292760521158, 0.17212123104583765, 0.12681322236687298, 0.20095605898883273, 0.24818457612539246, 0.19555157772056309, 0.2070478050003869, 0.12170665777679623, 0.11469756771194917, 0.15882222383710143, 0.20103867770309358, 0.1419441423171227, 0.2289862657085484, 0.3065640131875702, 0.17371991126474218, 0.1454229940056635, 0.31945193357319857, 0.1266984178004673, 0.12454173295087023, 0.1451556098884883, 0.1767432526956234, 0.11717716449497295, 0.10034883381564819, 0.10933337299634982, 0.1441212905257575, 0.2817823118647661, 0.10112185510552774, 0.24372120975353906, 0.18820390534955855, 0.18970353404232188, 0.2076591707169576, 0.27407006830782443, 0.20234611559205296, 0.20900273225605548, 0.22567323945356577, 0.20894747724005258, 0.15513931558648708, 0.17646399619685615, 0.21248181331591853, 0.17683185851635486, 0.19733739356075075, 0.16786539200070671, 0.18197643877587955, 0.19692925176499898, 0.19018622437394528, 0.18836126493911987, 0.1269757379155122, 0.1545468199546145, 0.14985061528364674, 0.2009151994927556, 0.6120507885426522, 0.10028311849920679, 0.17024410998402306, 0.14535995950626968, 0.15237915179436257, 0.17885956627173605, 0.1674638985252146, 0.19744072465670903, 0.16973495499009383, 0.21374505374206498, 0.10542252482558456, 0.38093932024909305, 0.19065658141243624, 0.2150385263671437, 0.199210704917262, 0.18649999050824262, 0.18483212630016588, 0.18643745963179126, 0.1892295107041999, 0.20524955690814672, 0.18341938816376446, 0.1873322758254452, 0.0876714787570314, 0.10266193626039932, 0.07160103233922654, 0.06860702743182467, 0.07258017053320431, 0.08703788813946756, 0.074299050437589, 0.05348847113226607, 0.05990395887539002]}, "mutation_prompt": null}
{"id": "43146610-cba3-4f56-a7d3-07ad428b73da", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "7d681386-6408-4358-93a8-68bc9ce0da73", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "d5253afd-325b-458f-b7b4-e5430f4148a3", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "0166f1ab-10d1-4aaa-bbcd-3b8d77cfa53a", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "657e2410-6e3a-4cd1-b629-3d91483d2ebd", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "bd96983a-d22e-44cc-9a7d-3cb1731bea9d", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "9b52cdb6-7079-407c-913b-c91fdd315fce", "solution": "import numpy as np\n\nclass EnhancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def opposition_mutation(x, gbest):\n            return 2 * gbest - x\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n\n                opposite_trial = opposition_mutation(trial, gbest)\n                opposite_trial_fitness = func(opposite_trial)\n                if opposite_trial_fitness < fitness[i]:\n                    population[i] = opposite_trial\n                    fitness[i] = opposite_trial_fitness\n                    pbest[i] = opposite_trial\n                    if opposite_trial_fitness < gbest_fitness:\n                        gbest = opposite_trial\n                        gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by integrating opposition-based learning in the mutation step and utilizing a modified particle swarm optimization approach for enhanced exploration-exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.25773166861851604, "feedback": "The algorithm EnhancedOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.28.", "error": "", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9564320957047716, 0.9610443498964683, 0.9608623288458844, 0.9628583115969457, 0.28362074107713375, 0.19064249684543288, 0.9560809998981619, 0.9595383689334103, 0.9613284554696109, 0.9132557680999829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0513500008584542, 9.999999999998899e-05, 0.05621161684521536, 0.9252532318146991, 0.9135356926832314, 0.1658806327384884, 0.12049331098638139, 0.09524303505211851, 0.05833180351671641, 0.026916814340038453, 0.056683210314021015, 0.09938391618368148, 0.06764009083881006, 0.12123073607882795, 0.06528040422160686, 0.09855754369532788, 0.07333539617514839, 0.08805598361306477, 0.0737132793120241, 0.0693325821569617, 9.999999999998899e-05, 0.08125335864621541, 0.1489876849630436, 0.9957047534703147, 0.9958985923644474, 0.9966805536769724, 0.9943594707460346, 0.9941428986424956, 0.9921715451932903, 0.9945069746897001, 0.9946094887450597, 0.9923601563698133, 0.7851453264429722, 0.05522910555741822, 0.11674882695649236, 0.6349740896704221, 0.4973688569697212, 0.6482190781928223, 0.06926865644128122, 0.8260316844028924, 0.08854708629257169, 0.1838341013101511, 0.1138400622786192, 0.17203642586293644, 0.19533824445558867, 0.17588097674176428, 0.1511507651709071, 0.17854947347815864, 0.10569783013662004, 0.09163668481256027, 0.26819781005536747, 0.25324094401830866, 0.30375593898262465, 9.999999999998899e-05, 0.1091164860162257, 0.2097591464712124, 0.2592825231390884, 0.27254922574248686, 0.44492584299238047, 0.2787046679777895, 0.0202352455715179, 0.24000335500077052, 0.2873841541526224, 0.2734798800511665, 0.287194870082388, 0.2993946732785132, 9.999999999998899e-05, 0.3013344723965298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07039084047534849, 0.016183738047000906, 0.11190233672821037, 9.999999999998899e-05, 0.20007912138035067, 0.017209023967509007, 0.06843761579404328, 0.10880515374404354, 0.08366889793866705, 9.999999999998899e-05, 0.032215417245841316, 0.16668921488143273, 9.999999999998899e-05, 0.05200726974747105, 0.16342532892875483, 9.999999999998899e-05, 0.11192044447918248, 0.259984942014408, 0.21410757984195772, 9.999999999998899e-05, 0.20799372336738708, 0.08108675772406349, 0.1476763928136433, 0.13351138860764855, 0.08412831436740564, 0.13628578609678477, 0.053923715128455285, 0.006940609640113338, 0.006990421369994837, 0.22232357064001118, 0.24857477087418112, 0.16262394478944553, 0.5608047691460664, 0.6237021744790797, 0.5644364762882523, 0.6198145249190368, 0.6890608206656149, 0.5743127752365214, 0.5907578513643312, 0.14754661341598752, 0.5721807539592562, 0.04645044614899396, 0.05208017021000355, 0.07147077782672351, 0.1380299722683359, 0.11983162801190561, 0.1488973098097356, 0.0712903396884933, 0.0652581420174434, 0.09478955593732608, 0.2653550775662127, 0.13990398888312083, 0.12438324649555721, 0.19546575874969807, 0.3240580848686023, 0.18275978435910845, 0.17347745073313803, 0.12897867563338405, 0.18819761060557993, 0.14423947609915355, 0.23564297262195266, 0.22250372898473803, 0.2806291520508165, 0.13326906563024132, 0.2685064221257004, 0.24435521403770655, 0.23379809473895208, 0.19203238776316334, 0.1577866655539859, 0.13231293670861544, 0.10867944681180963, 0.11888636143399034, 0.20051057341068945, 0.2074163310113748, 0.15036419516895005, 0.13709524719655186, 0.09622464893743832, 0.20806988435014495, 0.20034727027768473, 0.1768309596455936, 0.2183059812559881, 0.20686561099289225, 0.18066055782969592, 0.18573538658628497, 0.21489507056469015, 0.224629433963348, 0.18519329558405517, 0.17495915968089326, 0.21404225948048894, 0.21557379955514688, 0.18087704653219017, 0.17681642595529978, 0.20136634514973972, 0.25772620294002513, 0.17162576613695324, 0.18841931149910274, 0.17041798322339052, 0.15499773986833787, 0.15491146366931552, 0.20240348369785166, 0.20223288601649725, 0.09998169093162201, 0.17051989416057545, 0.1547801329377937, 0.08226538274357664, 0.1671527625493271, 0.8915201795186312, 0.8635201363262737, 0.1700336535506396, 0.2135426730383082, 0.10548573272306316, 0.953036122566311, 0.8338726114748308, 0.24800420116717337, 0.20296078467994783, 0.18495045278630284, 0.22805218140743422, 0.1831279882759772, 0.1616604437375685, 0.23944591142133143, 0.2447624240109556, 0.20629004188189481, 0.09889258055767824, 0.11416292213015078, 0.08401916236936269, 0.0799574651831847, 0.10116615916766136, 0.07729585744517586, 0.04862472585031996, 0.09134423191797647, 0.08264938402321276]}, "mutation_prompt": null}
{"id": "7ae74171-2554-471c-ba53-b063c24c13e4", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "d6b30377-604b-497a-b716-4757a239b766", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "be84c132-bc17-4fa3-bca1-dd5db5874df3", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "a2b66409-2a0a-4cbb-9281-aef3471885a5", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "450a0fa6-ba89-4a37-8fc8-e1c7bd4a1f08", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "e6eb6a33-b026-4c8e-affe-96cc52e6779b", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "7cd208d9-14f8-4ca2-a788-a899d93555c6", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "d2d8b3dc-65eb-404e-88b6-f934cb3d94f0", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "56bc5ecb-48b1-4f3f-a6af-41080100bbcd", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "05194b79-af60-40ca-897e-730574c74c99", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "833b68e6-0e74-4a14-80c2-50c44df67eb3", "solution": "import numpy as np\n\nclass ImprovedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  \n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "ImprovedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning, adaptive particle swarm optimization, and chaotic mutation operators to improve solution quality.", "configspace": "", "generation": 61, "fitness": 0.26215974209984005, "feedback": "The algorithm ImprovedOpposedChaoticHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.28.", "error": "", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "001ae226-86c5-4f1c-846a-243e36500a9c", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "c95f1333-ba3b-46b6-9c2b-59ea9287a5ab", "solution": "import numpy as np\n\nclass ImprovedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(x, beta=1.5, scale=0.1):\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, size=len(x))\n            v = np.random.normal(0, 1, size=len(x))\n            step = scale * u / np.abs(v) ** (1 / beta)\n            return x + step\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutated = levy_flight(population[i])\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                \n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "ImprovedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and a novel mutation strategy using Levy flights to explore the search space more effectively.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {}, "mutation_prompt": null}
{"id": "51bb4300-8a39-4373-a46c-1a2012224653", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "091739bb-2c6c-4480-a66e-38d5371dbf76", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "f02f8058-6ad2-416f-84a0-54fdd02db2b6", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "f2f45cd9-0b48-4d8e-8cbe-ed9d3eb2810b", "solution": "import numpy as np\n\nclass AdvancedOpposedChaoticHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_pso_update(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            new_velocity = w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x)\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = adaptive_pso_update(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                # Introducing dynamic opposition-based learning\n                if np.random.rand() < 0.5:  # Randomly switch between the original and dynamic opposition-based learning\n                    opposite_trial = 2 * gbest - trial\n                    opposite_trial_fitness = func(opposite_trial)\n                    if opposite_trial_fitness < fitness[i]:\n                        population[i] = opposite_trial\n                        fitness[i] = opposite_trial_fitness\n                        pbest[i] = opposite_trial\n                        if opposite_trial_fitness < gbest_fitness:\n                            gbest = opposite_trial\n                            gbest_fitness = opposite_trial_fitness\n                else:\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        pbest[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n\n        return gbest", "name": "AdvancedOpposedChaoticHybridMetaheuristic", "description": "Enhancing metaheuristic convergence by incorporating dynamic opposition-based learning and chaos-driven mutation operators to improve solution quality.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9688497074814454, 0.9526164451997685, 0.971011528174688, 0.9709305016184703, 0.9534131801965677, 0.9678562371664271, 0.9731344171831051, 0.966632375868803, 0.9637651282853453, 0.9286381670090406, 9.999999999998899e-05, 0.08184292681081173, 0.9381152145453732, 0.883989928989545, 9.999999999998899e-05, 9.999999999998899e-05, 0.9304146011991605, 0.904558512478477, 0.10373892321369604, 0.07179997840664132, 0.09881748470996832, 0.11003807568839508, 0.03650335875035182, 0.0990646087709125, 0.08460654947166535, 0.12128506016484497, 0.08487085527273908, 0.05416980733245291, 0.06538129118177582, 0.06187186555010937, 0.11465042159167793, 0.11392516140330322, 0.04192197250018981, 0.04266224763546855, 0.10356209736749766, 0.09868022634844187, 0.9951351200212822, 0.993476274308562, 0.9959985619448223, 0.9953039017828619, 0.9950235719280384, 0.9901240935451063, 0.9963555743559671, 0.9926902578160381, 0.9893648495550957, 0.5313542558491631, 0.5272533145871366, 0.2659692254389495, 0.5970508706641886, 0.27993972691583013, 0.3608185183778144, 0.08445118905424165, 0.5109733770863232, 0.21379784114785305, 0.1393469437156798, 0.09235874071014949, 0.17543281961489465, 0.14409489422575517, 0.13971756139284175, 0.19926494783831894, 0.07615852630617825, 0.13218631791118807, 0.14123688116857813, 0.17395574709224515, 0.20552981730971287, 0.26280534660688204, 0.1909368361614887, 0.2878120811893641, 0.22763751413735145, 0.19511471063782704, 0.17766547485054363, 0.23431011487053088, 0.337914972496659, 0.02871631484337689, 0.1794485762933955, 0.1896961546653413, 0.24141624039202259, 0.13838597328504287, 0.22743387798517056, 9.999999999998899e-05, 0.18645802242226384, 0.0058960944802163295, 9.999999999998899e-05, 9.999999999998899e-05, 0.044173343433613455, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860109747589194, 9.999999999998899e-05, 0.07085832771714462, 0.04902467507162145, 0.06734247313849717, 0.08169625116786228, 0.07427952000465521, 0.06167070051469126, 0.02411541718200605, 0.20909160267772542, 0.05800101118974599, 0.05733395532962293, 0.0557106967446509, 0.0728249459979119, 0.22730739871745886, 0.24929137872930607, 0.17011864001296595, 0.12721269187490836, 0.2661157484456187, 0.1844552701421618, 0.12012078984607966, 0.3927771616477651, 0.04498460593301301, 0.34722432016791294, 0.21138119241305553, 0.18724836130933575, 0.02840112967081221, 0.11744883683393148, 0.05705190324820486, 0.09925523759290356, 0.5621515299187694, 0.5956443370458436, 0.6004900721990312, 0.5275146930738649, 0.5268603945325053, 0.5495124419257914, 0.5964940915325416, 0.5679016168455745, 0.6450107921536532, 0.06488959406808503, 0.061409944322633914, 0.03251178771070551, 0.074001207767742, 0.1505010481577106, 0.09924202511191849, 0.0907969753900284, 0.07791921278023695, 0.06764826527941736, 0.22530416861496327, 0.23446892052973867, 0.18534625093678614, 0.16133778238724006, 0.20901375164435243, 0.16323276799895337, 0.23034518480123212, 0.17500846958334748, 0.13904712170037414, 0.15978521400029, 0.16833740329335456, 0.17167075556268951, 0.2689953695206493, 0.199633478607124, 0.21417154516886927, 0.15523162191795326, 0.21066889218325568, 0.1707336541412866, 0.12356068334020254, 0.20128995525238325, 0.1701588970512954, 0.14269893613414264, 0.13793608383183054, 0.11768901118947706, 0.08421590499195375, 0.2408868561904557, 0.08771049385727203, 0.2209270351229654, 0.24406892189970708, 0.19210721941030284, 0.2497686886933339, 0.18119187972745532, 0.24865625632295107, 0.26007463182217117, 0.15512548425451989, 0.17850064720279302, 0.18004330494762943, 0.18303099489188412, 0.1813508610028296, 0.20084457771562303, 0.2149735507491718, 0.17295707327855347, 0.1851680511688819, 0.17279432233560788, 0.16986006220682193, 0.18878671641368583, 0.12674301191068593, 0.154870402079072, 0.17354775231691832, 0.2020340932680288, 0.17069723389009572, 0.10007658568059741, 0.17032883894728634, 0.16376787573620333, 0.8798268446080608, 0.21302569885519984, 0.12848115288112572, 0.10758014120914361, 0.5013356926988044, 0.2129932963195278, 0.10543093474682541, 0.09473008650667858, 0.45003886167229945, 0.2155225340986674, 0.2105152118299526, 0.19618839377862063, 0.2129520180524601, 0.21075493082782082, 0.1992936964956188, 0.20317562961190105, 0.20958354725655481, 0.26114159022932615, 0.09399301641835212, 0.04103688330722621, 0.0865202506800895, 0.08784810227372764, 0.08492646000177884, 0.05669678970670722, 0.06462887559199826, 0.044589131105273405, 0.03706967677788253]}, "mutation_prompt": null}
{"id": "563c7114-a9ee-4f64-b57b-9782c970d295", "solution": "import numpy as np\n\nclass DynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "DynamicAdaptiveVelocityScaling", "description": "Introducing dynamic adaptive velocity scaling to explore search space efficiently while maintaining diversity.", "configspace": "", "generation": 68, "fitness": 0.2815472803841128, "feedback": "The algorithm DynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.29.", "error": "", "parent_id": "67cb3148-4ed7-48fd-a2f8-32ce3dd15b6d", "metadata": {"aucs": [0.9666838273748029, 0.9736233477642684, 0.9688391975587456, 0.9680168249391979, 0.9653551782736874, 0.9711297466426914, 0.9650496583195096, 0.9573349692731291, 0.9685297400706846, 0.9066436751856146, 0.938931728531751, 0.9381973325307292, 0.9266866236673814, 0.92031637291277, 0.9330239804896198, 0.9419564662623668, 0.9319447685875463, 0.9361223198962498, 0.14473564092740687, 0.10182273903911665, 0.1468706899874067, 0.14728705379898277, 0.08446055985806511, 0.08477600072413005, 0.09899013816398672, 0.08447732971247301, 0.07897127152667838, 0.0948400663706197, 0.1430452967345185, 0.08014900559443738, 0.09883997394304678, 0.09126270053559693, 0.05327461211793283, 0.07031945172519538, 0.046075125456765065, 0.07868078303806891, 0.9870303987864185, 0.9838693422392513, 0.9924394992129715, 0.9861507502040882, 0.9950440391833107, 0.9860083759927799, 0.9931314013154434, 0.995076931534638, 0.9825400225397419, 0.20344495664176776, 0.20556855015686337, 0.11830480948776034, 0.32254872900292764, 0.1676134986540645, 0.22354316436515642, 0.22365856748469515, 0.6548338432218466, 0.2869087043672687, 0.21803808576853656, 0.1071467548621049, 0.17215534873341554, 0.17896280483380866, 0.2845590839217783, 0.14556431408328574, 0.1286215999115251, 0.12943603937335924, 0.1516860838329851, 0.2889808438985162, 0.13206127094262665, 0.16985894788376898, 0.1361794178487662, 0.21163057311456357, 0.1344578658341039, 0.29915517255344015, 0.20351083263444703, 0.1838658417819422, 0.1721048857404981, 0.14811384799306238, 0.4278391542797404, 0.18149163471027663, 0.21302301845114702, 0.1803369036874075, 0.23826225990945338, 0.17537564515050086, 0.12895632383529865, 9.999999999998899e-05, 0.009270608484405196, 9.999999999998899e-05, 0.00017875433427694265, 0.03238021635507338, 9.999999999998899e-05, 0.06411069665241831, 9.999999999998899e-05, 0.09470333869390579, 0.08884693765190965, 0.07434879836259989, 0.09002847727441132, 0.11292624621147063, 0.01923479141306239, 0.030555443778635505, 0.06087546350608153, 0.08090376998493143, 0.0302486895445514, 0.23014294995955442, 0.10504352484045487, 0.21716009055438246, 0.1900361491014576, 0.12074538023258652, 0.1589414062368043, 0.1762083526042112, 0.2308602638354853, 0.09221522311917796, 0.05368136348531294, 0.04793662723649794, 0.24629497459386418, 0.01883690257257986, 0.10639148288744182, 0.0388907601764138, 0.2333837132837907, 0.17594128456915092, 0.08767017888240602, 0.5526434167107455, 0.5568897818612994, 0.5724134201324735, 0.5660849472808095, 0.5436295743957865, 0.5269864662558982, 0.6109782033918159, 0.5416183846545175, 0.6162092368658246, 0.09462290064005463, 0.07124044480906977, 0.04663076315888226, 0.10346616813931342, 0.0716447573299056, 0.09649787817255451, 0.10734996308970535, 0.0729702930942232, 0.06568011747905844, 0.15410412832744202, 0.28534071501722, 0.17130863295841847, 0.15965248287640466, 0.3932650487155549, 0.19844391401815276, 0.19780627281110963, 0.1534418199423786, 0.18357484464260887, 0.24722373443594148, 0.22619365861393048, 0.1745774708235518, 0.28253088421169315, 0.22086767067820512, 0.305125223642981, 0.19969182153012888, 0.26148573113447815, 0.18396253686949615, 0.14619714237969106, 0.15918398417252388, 0.11392831410799154, 0.2224587765374949, 0.20143508949017142, 0.17449927879262273, 0.16405176677097877, 0.18585780408509756, 0.11603894278562565, 0.22095036479337982, 0.19888390920289667, 0.18983095794559435, 0.21695772544798042, 0.24553679461332945, 0.28796797328243773, 0.20359367728587174, 0.21249842461235435, 0.24066893905359144, 0.17098039847913826, 0.18036084433682664, 0.19228251406758634, 0.17986549901784188, 0.2130044586084261, 0.20099567458647094, 0.2010118478475852, 0.19765309007471665, 0.20261992539855933, 0.1258633903807438, 0.17008950420884705, 0.1548337116735523, 0.17289611244061487, 0.20208630536065986, 0.11707443372421455, 0.10003227615118615, 0.17009287847399135, 0.16394232536942377, 0.08347128839413998, 0.21290410114410174, 0.05191020175135275, 0.5399097105389462, 0.3840197934023085, 0.650394392184418, 0.21460534504757256, 0.1696581168301402, 0.8608041240346194, 0.1912831093013091, 0.18202090968451667, 0.18298227171272496, 0.2263554358507146, 0.21329358151629174, 0.18868747312635792, 0.2082535413805232, 0.19983663337694602, 0.19969869388033168, 0.09027931398354971, 0.07449986646303763, 0.08213745430999986, 0.08731193315773489, 0.09375331990618962, 0.12467648607272985, 0.10769843514651878, 0.11328952398443248, 0.07235194459937744]}, "mutation_prompt": null}
{"id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing population diversity by incorporating a novel crowding-based selection mechanism to prioritize exploration.", "configspace": "", "generation": 69, "fitness": 0.2894377971844019, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "563c7114-a9ee-4f64-b57b-9782c970d295", "metadata": {"aucs": [0.9556778366838569, 0.9437845224720165, 0.9623066518840252, 0.9615084988063965, 0.9482205121482385, 0.9655068632738436, 0.9426243269429242, 0.9510650154315385, 0.9543772243816345, 0.9212282853912612, 0.9318167190412329, 0.9067650800970901, 0.9205515657829824, 0.9219970082156836, 0.9171507603284039, 0.9015240587275191, 0.906033610904224, 0.8987374523906329, 0.07877733317838242, 0.11978074403548866, 0.08369867389645591, 0.13209101703187442, 0.08611252059980412, 0.15945009542115718, 0.11689976570275051, 0.16608509438163221, 0.15061977079335864, 0.1429409551284785, 0.10131908648099164, 0.10966504579647496, 0.11598199408172583, 0.029681326171958844, 0.11524584674290073, 0.12789894080519992, 0.015979260353274016, 0.08368306417327331, 0.9551629752695173, 0.9798486299929304, 0.9793267734892559, 0.9643122344338627, 0.9707761986585939, 0.9702005628061549, 0.9804021794434732, 0.9664651477512177, 0.9787290031282212, 0.64503589402171, 0.48499274531284786, 0.44197901305254195, 0.43116521471507807, 0.3989272566484823, 0.6317761618510137, 0.4491217460923126, 0.340034442988826, 0.2984271476199991, 0.23606107380218633, 0.11200267186663626, 0.10007961581988534, 0.2686640815484287, 0.15085191164275435, 0.150621917933897, 0.15265489274827992, 0.23815351286994368, 0.1480174647613166, 0.1186784782374678, 0.13361300960574696, 0.15885382957781913, 0.17686290423354256, 0.17796187840990785, 0.18094360091414896, 0.16826622567732152, 0.18851328369163722, 0.18919099335642242, 0.16384730207276044, 0.1352071291488528, 0.13224793723801576, 0.1605532767070872, 0.13264847867090324, 0.2176841469384191, 0.20773145063560217, 0.15212636890521702, 0.12203118459522178, 9.999999999998899e-05, 9.999999999998899e-05, 0.02055222311048388, 9.999999999998899e-05, 0.03532490808326294, 9.999999999998899e-05, 0.00037691618428037366, 9.999999999998899e-05, 0.0042190524689803555, 0.09876424021689267, 0.09927832871365405, 0.08885421865214072, 0.07703367353284052, 0.001069962777698108, 0.07551688231704179, 0.19335645362907017, 0.09846459209703085, 0.08231640572522703, 0.2849720916673262, 0.03969568461570194, 0.3180476680055866, 0.09753938455075672, 0.3744232505062759, 0.22512441874793898, 0.1331239221485464, 0.3479901520481202, 0.09015831463119262, 0.05054735386670017, 0.07780714903547281, 0.12078337235321923, 0.007143124132406586, 0.09087687009801071, 0.13932114140543017, 0.3505453741037423, 0.1824206827717666, 0.2503490528359623, 0.5341918905703923, 0.5279275326435777, 0.6341229697797633, 0.5787927356204621, 0.4687070697524659, 0.5202459864321558, 0.5598413751195541, 0.4829008062172869, 0.5163846022079881, 0.0974071809894358, 0.09635251621273566, 0.1156992009528145, 0.10416004327384032, 0.09411055944867408, 0.14211695816275738, 0.14566352376843683, 0.12125693108484792, 0.06669878369203108, 0.22040703899271574, 0.23084664302234836, 0.21792164327331642, 0.17627554843013693, 0.18884072244425598, 0.1545969102909759, 0.19231267848289446, 0.17986047490318846, 0.21183348773130994, 0.22589609901222252, 0.23255551104242256, 0.18723246917154368, 0.3787230208869179, 0.19478221876573976, 0.3623261595079914, 0.39550725433619327, 0.348838523984208, 0.21402342894669013, 0.16212689819649373, 0.15398342495946948, 0.11922669333878788, 0.1739596441312915, 0.17504403457587836, 0.39474545682859463, 0.21670489521875247, 0.2061369679819266, 0.17923975913894175, 0.22269070985689, 0.2214996825070683, 0.21499547914196515, 0.22768257561417105, 0.24462698019000906, 0.24994347731366895, 0.2254540995529658, 0.23167246212083237, 0.22604743207098632, 0.17739695317265336, 0.178210722226936, 0.1940888648049356, 0.19922988436186806, 0.18727285554040551, 0.17697294107036055, 0.18876646439398648, 0.1751175854589756, 0.1933269289142563, 0.18876106092712552, 0.1883073314330287, 0.15843821629766408, 0.17319129346530626, 0.201166649405622, 0.13194290519621954, 0.15985553513857498, 0.1914979009833676, 0.16363142375142392, 0.0832781031999632, 0.4666063107679599, 0.4994547097587939, 0.21211993929173945, 0.2920859091850967, 0.21242733269256264, 0.21362125363777873, 0.3712908983786457, 0.28714501279394966, 0.19325541067341745, 0.18483743020598664, 0.1785304714081305, 0.19155180421386875, 0.19419087575380656, 0.1933796947410643, 0.19090238856453257, 0.20388042377148563, 0.17572806125265816, 0.07288887158217383, 0.0827615121138584, 0.09177893202148002, 0.09045945638442332, 0.09185110614808178, 0.11987753395420764, 0.09566525416689875, 0.09589126236371337, 0.09675220277191765]}, "mutation_prompt": null}
{"id": "dcdbdd0c-69e0-4b1b-a9ba-062b668b4da5", "solution": "import numpy as np\n\nclass SelfAdaptiveEnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def self_adaptive_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = self_adaptive_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "SelfAdaptiveEnhancedDynamicAdaptiveVelocityScaling", "description": "Utilizing a self-adaptive mutation strategy for enhanced exploration and exploitation in the optimization process.", "configspace": "", "generation": 70, "fitness": 0.2894377971844019, "feedback": "The algorithm SelfAdaptiveEnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9556778366838569, 0.9437845224720165, 0.9623066518840252, 0.9615084988063965, 0.9482205121482385, 0.9655068632738436, 0.9426243269429242, 0.9510650154315385, 0.9543772243816345, 0.9212282853912612, 0.9318167190412329, 0.9067650800970901, 0.9205515657829824, 0.9219970082156836, 0.9171507603284039, 0.9015240587275191, 0.906033610904224, 0.8987374523906329, 0.07877733317838242, 0.11978074403548866, 0.08369867389645591, 0.13209101703187442, 0.08611252059980412, 0.15945009542115718, 0.11689976570275051, 0.16608509438163221, 0.15061977079335864, 0.1429409551284785, 0.10131908648099164, 0.10966504579647496, 0.11598199408172583, 0.029681326171958844, 0.11524584674290073, 0.12789894080519992, 0.015979260353274016, 0.08368306417327331, 0.9551629752695173, 0.9798486299929304, 0.9793267734892559, 0.9643122344338627, 0.9707761986585939, 0.9702005628061549, 0.9804021794434732, 0.9664651477512177, 0.9787290031282212, 0.64503589402171, 0.48499274531284786, 0.44197901305254195, 0.43116521471507807, 0.3989272566484823, 0.6317761618510137, 0.4491217460923126, 0.340034442988826, 0.2984271476199991, 0.23606107380218633, 0.11200267186663626, 0.10007961581988534, 0.2686640815484287, 0.15085191164275435, 0.150621917933897, 0.15265489274827992, 0.23815351286994368, 0.1480174647613166, 0.1186784782374678, 0.13361300960574696, 0.15885382957781913, 0.17686290423354256, 0.17796187840990785, 0.18094360091414896, 0.16826622567732152, 0.18851328369163722, 0.18919099335642242, 0.16384730207276044, 0.1352071291488528, 0.13224793723801576, 0.1605532767070872, 0.13264847867090324, 0.2176841469384191, 0.20773145063560217, 0.15212636890521702, 0.12203118459522178, 9.999999999998899e-05, 9.999999999998899e-05, 0.02055222311048388, 9.999999999998899e-05, 0.03532490808326294, 9.999999999998899e-05, 0.00037691618428037366, 9.999999999998899e-05, 0.0042190524689803555, 0.09876424021689267, 0.09927832871365405, 0.08885421865214072, 0.07703367353284052, 0.001069962777698108, 0.07551688231704179, 0.19335645362907017, 0.09846459209703085, 0.08231640572522703, 0.2849720916673262, 0.03969568461570194, 0.3180476680055866, 0.09753938455075672, 0.3744232505062759, 0.22512441874793898, 0.1331239221485464, 0.3479901520481202, 0.09015831463119262, 0.05054735386670017, 0.07780714903547281, 0.12078337235321923, 0.007143124132406586, 0.09087687009801071, 0.13932114140543017, 0.3505453741037423, 0.1824206827717666, 0.2503490528359623, 0.5341918905703923, 0.5279275326435777, 0.6341229697797633, 0.5787927356204621, 0.4687070697524659, 0.5202459864321558, 0.5598413751195541, 0.4829008062172869, 0.5163846022079881, 0.0974071809894358, 0.09635251621273566, 0.1156992009528145, 0.10416004327384032, 0.09411055944867408, 0.14211695816275738, 0.14566352376843683, 0.12125693108484792, 0.06669878369203108, 0.22040703899271574, 0.23084664302234836, 0.21792164327331642, 0.17627554843013693, 0.18884072244425598, 0.1545969102909759, 0.19231267848289446, 0.17986047490318846, 0.21183348773130994, 0.22589609901222252, 0.23255551104242256, 0.18723246917154368, 0.3787230208869179, 0.19478221876573976, 0.3623261595079914, 0.39550725433619327, 0.348838523984208, 0.21402342894669013, 0.16212689819649373, 0.15398342495946948, 0.11922669333878788, 0.1739596441312915, 0.17504403457587836, 0.39474545682859463, 0.21670489521875247, 0.2061369679819266, 0.17923975913894175, 0.22269070985689, 0.2214996825070683, 0.21499547914196515, 0.22768257561417105, 0.24462698019000906, 0.24994347731366895, 0.2254540995529658, 0.23167246212083237, 0.22604743207098632, 0.17739695317265336, 0.178210722226936, 0.1940888648049356, 0.19922988436186806, 0.18727285554040551, 0.17697294107036055, 0.18876646439398648, 0.1751175854589756, 0.1933269289142563, 0.18876106092712552, 0.1883073314330287, 0.15843821629766408, 0.17319129346530626, 0.201166649405622, 0.13194290519621954, 0.15985553513857498, 0.1914979009833676, 0.16363142375142392, 0.0832781031999632, 0.4666063107679599, 0.4994547097587939, 0.21211993929173945, 0.2920859091850967, 0.21242733269256264, 0.21362125363777873, 0.3712908983786457, 0.28714501279394966, 0.19325541067341745, 0.18483743020598664, 0.1785304714081305, 0.19155180421386875, 0.19419087575380656, 0.1933796947410643, 0.19090238856453257, 0.20388042377148563, 0.17572806125265816, 0.07288887158217383, 0.0827615121138584, 0.09177893202148002, 0.09045945638442332, 0.09185110614808178, 0.11987753395420764, 0.09566525416689875, 0.09589126236371337, 0.09675220277191765]}, "mutation_prompt": null}
{"id": "14abde96-fbc4-491f-9b8c-746705475bfd", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing population diversity by incorporating a novel crowding-based selection mechanism to prioritize exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9556778366838569, 0.9437845224720165, 0.9623066518840252, 0.9615084988063965, 0.9482205121482385, 0.9655068632738436, 0.9426243269429242, 0.9510650154315385, 0.9543772243816345, 0.9212282853912612, 0.9318167190412329, 0.9067650800970901, 0.9205515657829824, 0.9219970082156836, 0.9171507603284039, 0.9015240587275191, 0.906033610904224, 0.8987374523906329, 0.07877733317838242, 0.11978074403548866, 0.08369867389645591, 0.13209101703187442, 0.08611252059980412, 0.15945009542115718, 0.11689976570275051, 0.16608509438163221, 0.15061977079335864, 0.1429409551284785, 0.10131908648099164, 0.10966504579647496, 0.11598199408172583, 0.029681326171958844, 0.11524584674290073, 0.12789894080519992, 0.015979260353274016, 0.08368306417327331, 0.9551629752695173, 0.9798486299929304, 0.9793267734892559, 0.9643122344338627, 0.9707761986585939, 0.9702005628061549, 0.9804021794434732, 0.9664651477512177, 0.9787290031282212, 0.64503589402171, 0.48499274531284786, 0.44197901305254195, 0.43116521471507807, 0.3989272566484823, 0.6317761618510137, 0.4491217460923126, 0.340034442988826, 0.2984271476199991, 0.23606107380218633, 0.11200267186663626, 0.10007961581988534, 0.2686640815484287, 0.15085191164275435, 0.150621917933897, 0.15265489274827992, 0.23815351286994368, 0.1480174647613166, 0.1186784782374678, 0.13361300960574696, 0.15885382957781913, 0.17686290423354256, 0.17796187840990785, 0.18094360091414896, 0.16826622567732152, 0.18851328369163722, 0.18919099335642242, 0.16384730207276044, 0.1352071291488528, 0.13224793723801576, 0.1605532767070872, 0.13264847867090324, 0.2176841469384191, 0.20773145063560217, 0.15212636890521702, 0.12203118459522178, 9.999999999998899e-05, 9.999999999998899e-05, 0.02055222311048388, 9.999999999998899e-05, 0.03532490808326294, 9.999999999998899e-05, 0.00037691618428037366, 9.999999999998899e-05, 0.0042190524689803555, 0.09876424021689267, 0.09927832871365405, 0.08885421865214072, 0.07703367353284052, 0.001069962777698108, 0.07551688231704179, 0.19335645362907017, 0.09846459209703085, 0.08231640572522703, 0.2849720916673262, 0.03969568461570194, 0.3180476680055866, 0.09753938455075672, 0.3744232505062759, 0.22512441874793898, 0.1331239221485464, 0.3479901520481202, 0.09015831463119262, 0.05054735386670017, 0.07780714903547281, 0.12078337235321923, 0.007143124132406586, 0.09087687009801071, 0.13932114140543017, 0.3505453741037423, 0.1824206827717666, 0.2503490528359623, 0.5341918905703923, 0.5279275326435777, 0.6341229697797633, 0.5787927356204621, 0.4687070697524659, 0.5202459864321558, 0.5598413751195541, 0.4829008062172869, 0.5163846022079881, 0.0974071809894358, 0.09635251621273566, 0.1156992009528145, 0.10416004327384032, 0.09411055944867408, 0.14211695816275738, 0.14566352376843683, 0.12125693108484792, 0.06669878369203108, 0.22040703899271574, 0.23084664302234836, 0.21792164327331642, 0.17627554843013693, 0.18884072244425598, 0.1545969102909759, 0.19231267848289446, 0.17986047490318846, 0.21183348773130994, 0.22589609901222252, 0.23255551104242256, 0.18723246917154368, 0.3787230208869179, 0.19478221876573976, 0.3623261595079914, 0.39550725433619327, 0.348838523984208, 0.21402342894669013, 0.16212689819649373, 0.15398342495946948, 0.11922669333878788, 0.1739596441312915, 0.17504403457587836, 0.39474545682859463, 0.21670489521875247, 0.2061369679819266, 0.17923975913894175, 0.22269070985689, 0.2214996825070683, 0.21499547914196515, 0.22768257561417105, 0.24462698019000906, 0.24994347731366895, 0.2254540995529658, 0.23167246212083237, 0.22604743207098632, 0.17739695317265336, 0.178210722226936, 0.1940888648049356, 0.19922988436186806, 0.18727285554040551, 0.17697294107036055, 0.18876646439398648, 0.1751175854589756, 0.1933269289142563, 0.18876106092712552, 0.1883073314330287, 0.15843821629766408, 0.17319129346530626, 0.201166649405622, 0.13194290519621954, 0.15985553513857498, 0.1914979009833676, 0.16363142375142392, 0.0832781031999632, 0.4666063107679599, 0.4994547097587939, 0.21211993929173945, 0.2920859091850967, 0.21242733269256264, 0.21362125363777873, 0.3712908983786457, 0.28714501279394966, 0.19325541067341745, 0.18483743020598664, 0.1785304714081305, 0.19155180421386875, 0.19419087575380656, 0.1933796947410643, 0.19090238856453257, 0.20388042377148563, 0.17572806125265816, 0.07288887158217383, 0.0827615121138584, 0.09177893202148002, 0.09045945638442332, 0.09185110614808178, 0.11987753395420764, 0.09566525416689875, 0.09589126236371337, 0.09675220277191765]}, "mutation_prompt": null}
{"id": "028c47f0-1e74-4d63-8879-ba135a027b19", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing population diversity by incorporating a novel crowding-based selection mechanism to prioritize exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9556778366838569, 0.9437845224720165, 0.9623066518840252, 0.9615084988063965, 0.9482205121482385, 0.9655068632738436, 0.9426243269429242, 0.9510650154315385, 0.9543772243816345, 0.9212282853912612, 0.9318167190412329, 0.9067650800970901, 0.9205515657829824, 0.9219970082156836, 0.9171507603284039, 0.9015240587275191, 0.906033610904224, 0.8987374523906329, 0.07877733317838242, 0.11978074403548866, 0.08369867389645591, 0.13209101703187442, 0.08611252059980412, 0.15945009542115718, 0.11689976570275051, 0.16608509438163221, 0.15061977079335864, 0.1429409551284785, 0.10131908648099164, 0.10966504579647496, 0.11598199408172583, 0.029681326171958844, 0.11524584674290073, 0.12789894080519992, 0.015979260353274016, 0.08368306417327331, 0.9551629752695173, 0.9798486299929304, 0.9793267734892559, 0.9643122344338627, 0.9707761986585939, 0.9702005628061549, 0.9804021794434732, 0.9664651477512177, 0.9787290031282212, 0.64503589402171, 0.48499274531284786, 0.44197901305254195, 0.43116521471507807, 0.3989272566484823, 0.6317761618510137, 0.4491217460923126, 0.340034442988826, 0.2984271476199991, 0.23606107380218633, 0.11200267186663626, 0.10007961581988534, 0.2686640815484287, 0.15085191164275435, 0.150621917933897, 0.15265489274827992, 0.23815351286994368, 0.1480174647613166, 0.1186784782374678, 0.13361300960574696, 0.15885382957781913, 0.17686290423354256, 0.17796187840990785, 0.18094360091414896, 0.16826622567732152, 0.18851328369163722, 0.18919099335642242, 0.16384730207276044, 0.1352071291488528, 0.13224793723801576, 0.1605532767070872, 0.13264847867090324, 0.2176841469384191, 0.20773145063560217, 0.15212636890521702, 0.12203118459522178, 9.999999999998899e-05, 9.999999999998899e-05, 0.02055222311048388, 9.999999999998899e-05, 0.03532490808326294, 9.999999999998899e-05, 0.00037691618428037366, 9.999999999998899e-05, 0.0042190524689803555, 0.09876424021689267, 0.09927832871365405, 0.08885421865214072, 0.07703367353284052, 0.001069962777698108, 0.07551688231704179, 0.19335645362907017, 0.09846459209703085, 0.08231640572522703, 0.2849720916673262, 0.03969568461570194, 0.3180476680055866, 0.09753938455075672, 0.3744232505062759, 0.22512441874793898, 0.1331239221485464, 0.3479901520481202, 0.09015831463119262, 0.05054735386670017, 0.07780714903547281, 0.12078337235321923, 0.007143124132406586, 0.09087687009801071, 0.13932114140543017, 0.3505453741037423, 0.1824206827717666, 0.2503490528359623, 0.5341918905703923, 0.5279275326435777, 0.6341229697797633, 0.5787927356204621, 0.4687070697524659, 0.5202459864321558, 0.5598413751195541, 0.4829008062172869, 0.5163846022079881, 0.0974071809894358, 0.09635251621273566, 0.1156992009528145, 0.10416004327384032, 0.09411055944867408, 0.14211695816275738, 0.14566352376843683, 0.12125693108484792, 0.06669878369203108, 0.22040703899271574, 0.23084664302234836, 0.21792164327331642, 0.17627554843013693, 0.18884072244425598, 0.1545969102909759, 0.19231267848289446, 0.17986047490318846, 0.21183348773130994, 0.22589609901222252, 0.23255551104242256, 0.18723246917154368, 0.3787230208869179, 0.19478221876573976, 0.3623261595079914, 0.39550725433619327, 0.348838523984208, 0.21402342894669013, 0.16212689819649373, 0.15398342495946948, 0.11922669333878788, 0.1739596441312915, 0.17504403457587836, 0.39474545682859463, 0.21670489521875247, 0.2061369679819266, 0.17923975913894175, 0.22269070985689, 0.2214996825070683, 0.21499547914196515, 0.22768257561417105, 0.24462698019000906, 0.24994347731366895, 0.2254540995529658, 0.23167246212083237, 0.22604743207098632, 0.17739695317265336, 0.178210722226936, 0.1940888648049356, 0.19922988436186806, 0.18727285554040551, 0.17697294107036055, 0.18876646439398648, 0.1751175854589756, 0.1933269289142563, 0.18876106092712552, 0.1883073314330287, 0.15843821629766408, 0.17319129346530626, 0.201166649405622, 0.13194290519621954, 0.15985553513857498, 0.1914979009833676, 0.16363142375142392, 0.0832781031999632, 0.4666063107679599, 0.4994547097587939, 0.21211993929173945, 0.2920859091850967, 0.21242733269256264, 0.21362125363777873, 0.3712908983786457, 0.28714501279394966, 0.19325541067341745, 0.18483743020598664, 0.1785304714081305, 0.19155180421386875, 0.19419087575380656, 0.1933796947410643, 0.19090238856453257, 0.20388042377148563, 0.17572806125265816, 0.07288887158217383, 0.0827615121138584, 0.09177893202148002, 0.09045945638442332, 0.09185110614808178, 0.11987753395420764, 0.09566525416689875, 0.09589126236371337, 0.09675220277191765]}, "mutation_prompt": null}
{"id": "3d584b4d-0f58-4337-ae03-f27c93696b99", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScalingRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(step_size=0.1):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim) ** 2\n            v = np.random.normal(0, 1, self.dim)\n            step = step_size * v / (u + 1e-10)\n            return step\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                step = levy_flight()\n                trial = np.clip(population[i] + step, -5.0, 5.0)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScalingRefined", "description": "Enhancing exploration by incorporating Levy flight behavior for global search capabilities.", "configspace": "", "generation": 73, "fitness": 0.28893572944364515, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScalingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9443704768116051, 0.9574826800802021, 0.9622308898197355, 0.9529189235368691, 0.9631540553676488, 0.9551883333212744, 0.9579291491813643, 0.9509972018355908, 0.9415351058397343, 0.9257997628974514, 0.914857207499116, 0.9102723331589699, 0.8868960053778357, 0.9158550287508547, 0.8592919144933856, 0.8590104341888584, 0.9044322219497061, 0.9067214809625929, 0.072077004411913, 0.07334175527684605, 0.16034206578229881, 0.08002323532667055, 0.12668657579318388, 0.13686514152329188, 0.09152410832579772, 0.11021374365837633, 0.14875221233967617, 0.11184708612574046, 0.05359900673570861, 0.10006627021730818, 0.10557733669671254, 0.13209011084791744, 0.10286681794740593, 0.1026085766779744, 0.14619108873208553, 0.11804381802190833, 0.9531588464810135, 0.986402731556347, 0.9731456489628344, 0.9676257076607907, 0.9849606517588146, 0.9873211868353909, 0.9611511852438951, 0.9702344979220675, 0.9798232118613875, 0.5306663692978346, 0.26167015313063036, 0.1235163523070727, 0.6352996107077604, 0.22322809843998226, 0.31291606606475564, 0.5498950955374559, 0.2411818298544527, 0.31322285959679486, 0.1454667478268319, 0.17914917621258153, 0.2288456327940951, 0.21607213824995275, 0.2843653820655002, 0.17500829505059168, 0.1764680220715209, 0.23853328470563406, 0.19839209955449222, 0.13871989118609873, 0.17411577307397896, 0.22071093185232216, 0.0015066787204239818, 0.162795708160124, 0.20611370951650687, 0.17163968715643974, 0.4858080162329068, 0.1679623741535755, 0.13369736766735607, 0.1464514720645328, 0.128516119618166, 0.16629962913403962, 0.1634358599684077, 0.14429769038117302, 0.21006614445490945, 9.999999999998899e-05, 0.11593175058557481, 9.999999999998899e-05, 0.0003031855436081976, 9.999999999998899e-05, 0.02726622587900618, 9.999999999998899e-05, 9.999999999998899e-05, 0.08445645913339472, 9.999999999998899e-05, 0.002423458586677807, 0.13353083632399665, 0.06686731214984831, 0.05140072486723113, 0.07791591099154682, 0.022654937825160926, 0.028104496675888324, 0.1931768156707674, 0.11983551151292215, 0.09196820760136992, 0.1196595576592655, 0.08441859787290518, 0.2991711339745049, 0.1407978509308515, 0.259038049844855, 0.10522791935703768, 0.21531825960654027, 0.2233458811317648, 0.22157268960766696, 0.1855130271056027, 0.11331993436329213, 0.2381944244934222, 0.145312317683561, 0.07556178809711678, 0.020825848484686715, 0.41035278127020414, 0.22171293051261387, 0.0955208148298099, 0.525865695757342, 0.5265350158147041, 0.48032452366582934, 0.6025178792862971, 0.5106957458455197, 0.5428679876120954, 0.49516651985879356, 0.5402889746399827, 0.5634087672315976, 0.08831525415021169, 0.15676072607161018, 0.1616201390757529, 0.08214808786805183, 0.10309945893495476, 0.11874478383764475, 0.15950450378151604, 0.14460499831986962, 0.1294855339073665, 0.32287708017542127, 0.1634130083052533, 0.17875727352857862, 0.18321255879695986, 0.16202306096981534, 0.24486402938872232, 0.2512311969915866, 0.1829737905190073, 0.20362771626605414, 0.2674211080060902, 0.36656218362807735, 0.3751853140288738, 0.21781618448672735, 0.22708349693098373, 0.2942130225774756, 0.28080823101335517, 0.45597540949314364, 0.18237287350925113, 0.212815541087222, 0.21338431142814085, 0.15530037329521096, 0.2334392612188526, 0.177211552954607, 0.2653477122052502, 0.21947615166066048, 0.23815470904549407, 0.09275606701430317, 0.23794123911071396, 0.23609863516203644, 0.24507607504250162, 0.24697396469843513, 0.2601859325081656, 0.20936786156277343, 0.22342458207483962, 0.1860947371351045, 0.21052726354131945, 0.19068870005050786, 0.20793887922156085, 0.21076558083503916, 0.1988129026918496, 0.25329381108178206, 0.22619104148280544, 0.20516246476948863, 0.18346599998051583, 0.2191035538503998, 0.18847574379205867, 0.16721966898303597, 0.17715799499772034, 0.8182260316929015, 0.2020225799727413, 0.20142898188668235, 0.12293182067870478, 0.17064650351607746, 0.1633929460147041, 0.11295286212488431, 0.2127029093189321, 0.08318673839383284, 0.3068492483973858, 0.21070032581016762, 0.2118139389476973, 0.10512834113338809, 0.5926947819633955, 0.15730855393932974, 0.18842224566464827, 0.1805531033586354, 0.19909616595696156, 0.17768726625377274, 0.17643756589948623, 0.1830340772700465, 0.18226668842503557, 0.18330432633922833, 0.1879268288679039, 0.09493421127729362, 0.09234475048191704, 0.08770221041859882, 0.08834883076526745, 0.10238998245639142, 0.11595974705608691, 0.09652359897542084, 0.08395497935338803, 0.08020323568179044]}, "mutation_prompt": null}
{"id": "5a56bc9f-5ca4-4027-a8f8-645710312cff", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing population diversity by incorporating a novel crowding-based selection mechanism to prioritize exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9556778366838569, 0.9437845224720165, 0.9623066518840252, 0.9615084988063965, 0.9482205121482385, 0.9655068632738436, 0.9426243269429242, 0.9510650154315385, 0.9543772243816345, 0.9212282853912612, 0.9318167190412329, 0.9067650800970901, 0.9205515657829824, 0.9219970082156836, 0.9171507603284039, 0.9015240587275191, 0.906033610904224, 0.8987374523906329, 0.07877733317838242, 0.11978074403548866, 0.08369867389645591, 0.13209101703187442, 0.08611252059980412, 0.15945009542115718, 0.11689976570275051, 0.16608509438163221, 0.15061977079335864, 0.1429409551284785, 0.10131908648099164, 0.10966504579647496, 0.11598199408172583, 0.029681326171958844, 0.11524584674290073, 0.12789894080519992, 0.015979260353274016, 0.08368306417327331, 0.9551629752695173, 0.9798486299929304, 0.9793267734892559, 0.9643122344338627, 0.9707761986585939, 0.9702005628061549, 0.9804021794434732, 0.9664651477512177, 0.9787290031282212, 0.64503589402171, 0.48499274531284786, 0.44197901305254195, 0.43116521471507807, 0.3989272566484823, 0.6317761618510137, 0.4491217460923126, 0.340034442988826, 0.2984271476199991, 0.23606107380218633, 0.11200267186663626, 0.10007961581988534, 0.2686640815484287, 0.15085191164275435, 0.150621917933897, 0.15265489274827992, 0.23815351286994368, 0.1480174647613166, 0.1186784782374678, 0.13361300960574696, 0.15885382957781913, 0.17686290423354256, 0.17796187840990785, 0.18094360091414896, 0.16826622567732152, 0.18851328369163722, 0.18919099335642242, 0.16384730207276044, 0.1352071291488528, 0.13224793723801576, 0.1605532767070872, 0.13264847867090324, 0.2176841469384191, 0.20773145063560217, 0.15212636890521702, 0.12203118459522178, 9.999999999998899e-05, 9.999999999998899e-05, 0.02055222311048388, 9.999999999998899e-05, 0.03532490808326294, 9.999999999998899e-05, 0.00037691618428037366, 9.999999999998899e-05, 0.0042190524689803555, 0.09876424021689267, 0.09927832871365405, 0.08885421865214072, 0.07703367353284052, 0.001069962777698108, 0.07551688231704179, 0.19335645362907017, 0.09846459209703085, 0.08231640572522703, 0.2849720916673262, 0.03969568461570194, 0.3180476680055866, 0.09753938455075672, 0.3744232505062759, 0.22512441874793898, 0.1331239221485464, 0.3479901520481202, 0.09015831463119262, 0.05054735386670017, 0.07780714903547281, 0.12078337235321923, 0.007143124132406586, 0.09087687009801071, 0.13932114140543017, 0.3505453741037423, 0.1824206827717666, 0.2503490528359623, 0.5341918905703923, 0.5279275326435777, 0.6341229697797633, 0.5787927356204621, 0.4687070697524659, 0.5202459864321558, 0.5598413751195541, 0.4829008062172869, 0.5163846022079881, 0.0974071809894358, 0.09635251621273566, 0.1156992009528145, 0.10416004327384032, 0.09411055944867408, 0.14211695816275738, 0.14566352376843683, 0.12125693108484792, 0.06669878369203108, 0.22040703899271574, 0.23084664302234836, 0.21792164327331642, 0.17627554843013693, 0.18884072244425598, 0.1545969102909759, 0.19231267848289446, 0.17986047490318846, 0.21183348773130994, 0.22589609901222252, 0.23255551104242256, 0.18723246917154368, 0.3787230208869179, 0.19478221876573976, 0.3623261595079914, 0.39550725433619327, 0.348838523984208, 0.21402342894669013, 0.16212689819649373, 0.15398342495946948, 0.11922669333878788, 0.1739596441312915, 0.17504403457587836, 0.39474545682859463, 0.21670489521875247, 0.2061369679819266, 0.17923975913894175, 0.22269070985689, 0.2214996825070683, 0.21499547914196515, 0.22768257561417105, 0.24462698019000906, 0.24994347731366895, 0.2254540995529658, 0.23167246212083237, 0.22604743207098632, 0.17739695317265336, 0.178210722226936, 0.1940888648049356, 0.19922988436186806, 0.18727285554040551, 0.17697294107036055, 0.18876646439398648, 0.1751175854589756, 0.1933269289142563, 0.18876106092712552, 0.1883073314330287, 0.15843821629766408, 0.17319129346530626, 0.201166649405622, 0.13194290519621954, 0.15985553513857498, 0.1914979009833676, 0.16363142375142392, 0.0832781031999632, 0.4666063107679599, 0.4994547097587939, 0.21211993929173945, 0.2920859091850967, 0.21242733269256264, 0.21362125363777873, 0.3712908983786457, 0.28714501279394966, 0.19325541067341745, 0.18483743020598664, 0.1785304714081305, 0.19155180421386875, 0.19419087575380656, 0.1933796947410643, 0.19090238856453257, 0.20388042377148563, 0.17572806125265816, 0.07288887158217383, 0.0827615121138584, 0.09177893202148002, 0.09045945638442332, 0.09185110614808178, 0.11987753395420764, 0.09566525416689875, 0.09589126236371337, 0.09675220277191765]}, "mutation_prompt": null}
{"id": "cab8ce71-a20c-453c-aa5d-33aaf81a584b", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing population diversity by incorporating a novel crowding-based selection mechanism to prioritize exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9556778366838569, 0.9437845224720165, 0.9623066518840252, 0.9615084988063965, 0.9482205121482385, 0.9655068632738436, 0.9426243269429242, 0.9510650154315385, 0.9543772243816345, 0.9212282853912612, 0.9318167190412329, 0.9067650800970901, 0.9205515657829824, 0.9219970082156836, 0.9171507603284039, 0.9015240587275191, 0.906033610904224, 0.8987374523906329, 0.07877733317838242, 0.11978074403548866, 0.08369867389645591, 0.13209101703187442, 0.08611252059980412, 0.15945009542115718, 0.11689976570275051, 0.16608509438163221, 0.15061977079335864, 0.1429409551284785, 0.10131908648099164, 0.10966504579647496, 0.11598199408172583, 0.029681326171958844, 0.11524584674290073, 0.12789894080519992, 0.015979260353274016, 0.08368306417327331, 0.9551629752695173, 0.9798486299929304, 0.9793267734892559, 0.9643122344338627, 0.9707761986585939, 0.9702005628061549, 0.9804021794434732, 0.9664651477512177, 0.9787290031282212, 0.64503589402171, 0.48499274531284786, 0.44197901305254195, 0.43116521471507807, 0.3989272566484823, 0.6317761618510137, 0.4491217460923126, 0.340034442988826, 0.2984271476199991, 0.23606107380218633, 0.11200267186663626, 0.10007961581988534, 0.2686640815484287, 0.15085191164275435, 0.150621917933897, 0.15265489274827992, 0.23815351286994368, 0.1480174647613166, 0.1186784782374678, 0.13361300960574696, 0.15885382957781913, 0.17686290423354256, 0.17796187840990785, 0.18094360091414896, 0.16826622567732152, 0.18851328369163722, 0.18919099335642242, 0.16384730207276044, 0.1352071291488528, 0.13224793723801576, 0.1605532767070872, 0.13264847867090324, 0.2176841469384191, 0.20773145063560217, 0.15212636890521702, 0.12203118459522178, 9.999999999998899e-05, 9.999999999998899e-05, 0.02055222311048388, 9.999999999998899e-05, 0.03532490808326294, 9.999999999998899e-05, 0.00037691618428037366, 9.999999999998899e-05, 0.0042190524689803555, 0.09876424021689267, 0.09927832871365405, 0.08885421865214072, 0.07703367353284052, 0.001069962777698108, 0.07551688231704179, 0.19335645362907017, 0.09846459209703085, 0.08231640572522703, 0.2849720916673262, 0.03969568461570194, 0.3180476680055866, 0.09753938455075672, 0.3744232505062759, 0.22512441874793898, 0.1331239221485464, 0.3479901520481202, 0.09015831463119262, 0.05054735386670017, 0.07780714903547281, 0.12078337235321923, 0.007143124132406586, 0.09087687009801071, 0.13932114140543017, 0.3505453741037423, 0.1824206827717666, 0.2503490528359623, 0.5341918905703923, 0.5279275326435777, 0.6341229697797633, 0.5787927356204621, 0.4687070697524659, 0.5202459864321558, 0.5598413751195541, 0.4829008062172869, 0.5163846022079881, 0.0974071809894358, 0.09635251621273566, 0.1156992009528145, 0.10416004327384032, 0.09411055944867408, 0.14211695816275738, 0.14566352376843683, 0.12125693108484792, 0.06669878369203108, 0.22040703899271574, 0.23084664302234836, 0.21792164327331642, 0.17627554843013693, 0.18884072244425598, 0.1545969102909759, 0.19231267848289446, 0.17986047490318846, 0.21183348773130994, 0.22589609901222252, 0.23255551104242256, 0.18723246917154368, 0.3787230208869179, 0.19478221876573976, 0.3623261595079914, 0.39550725433619327, 0.348838523984208, 0.21402342894669013, 0.16212689819649373, 0.15398342495946948, 0.11922669333878788, 0.1739596441312915, 0.17504403457587836, 0.39474545682859463, 0.21670489521875247, 0.2061369679819266, 0.17923975913894175, 0.22269070985689, 0.2214996825070683, 0.21499547914196515, 0.22768257561417105, 0.24462698019000906, 0.24994347731366895, 0.2254540995529658, 0.23167246212083237, 0.22604743207098632, 0.17739695317265336, 0.178210722226936, 0.1940888648049356, 0.19922988436186806, 0.18727285554040551, 0.17697294107036055, 0.18876646439398648, 0.1751175854589756, 0.1933269289142563, 0.18876106092712552, 0.1883073314330287, 0.15843821629766408, 0.17319129346530626, 0.201166649405622, 0.13194290519621954, 0.15985553513857498, 0.1914979009833676, 0.16363142375142392, 0.0832781031999632, 0.4666063107679599, 0.4994547097587939, 0.21211993929173945, 0.2920859091850967, 0.21242733269256264, 0.21362125363777873, 0.3712908983786457, 0.28714501279394966, 0.19325541067341745, 0.18483743020598664, 0.1785304714081305, 0.19155180421386875, 0.19419087575380656, 0.1933796947410643, 0.19090238856453257, 0.20388042377148563, 0.17572806125265816, 0.07288887158217383, 0.0827615121138584, 0.09177893202148002, 0.09045945638442332, 0.09185110614808178, 0.11987753395420764, 0.09566525416689875, 0.09589126236371337, 0.09675220277191765]}, "mutation_prompt": null}
{"id": "f007555d-67d4-4e18-8213-1b7c0256b749", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing population diversity by incorporating a novel crowding-based selection mechanism to prioritize exploration.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9556778366838569, 0.9437845224720165, 0.9623066518840252, 0.9615084988063965, 0.9482205121482385, 0.9655068632738436, 0.9426243269429242, 0.9510650154315385, 0.9543772243816345, 0.9212282853912612, 0.9318167190412329, 0.9067650800970901, 0.9205515657829824, 0.9219970082156836, 0.9171507603284039, 0.9015240587275191, 0.906033610904224, 0.8987374523906329, 0.07877733317838242, 0.11978074403548866, 0.08369867389645591, 0.13209101703187442, 0.08611252059980412, 0.15945009542115718, 0.11689976570275051, 0.16608509438163221, 0.15061977079335864, 0.1429409551284785, 0.10131908648099164, 0.10966504579647496, 0.11598199408172583, 0.029681326171958844, 0.11524584674290073, 0.12789894080519992, 0.015979260353274016, 0.08368306417327331, 0.9551629752695173, 0.9798486299929304, 0.9793267734892559, 0.9643122344338627, 0.9707761986585939, 0.9702005628061549, 0.9804021794434732, 0.9664651477512177, 0.9787290031282212, 0.64503589402171, 0.48499274531284786, 0.44197901305254195, 0.43116521471507807, 0.3989272566484823, 0.6317761618510137, 0.4491217460923126, 0.340034442988826, 0.2984271476199991, 0.23606107380218633, 0.11200267186663626, 0.10007961581988534, 0.2686640815484287, 0.15085191164275435, 0.150621917933897, 0.15265489274827992, 0.23815351286994368, 0.1480174647613166, 0.1186784782374678, 0.13361300960574696, 0.15885382957781913, 0.17686290423354256, 0.17796187840990785, 0.18094360091414896, 0.16826622567732152, 0.18851328369163722, 0.18919099335642242, 0.16384730207276044, 0.1352071291488528, 0.13224793723801576, 0.1605532767070872, 0.13264847867090324, 0.2176841469384191, 0.20773145063560217, 0.15212636890521702, 0.12203118459522178, 9.999999999998899e-05, 9.999999999998899e-05, 0.02055222311048388, 9.999999999998899e-05, 0.03532490808326294, 9.999999999998899e-05, 0.00037691618428037366, 9.999999999998899e-05, 0.0042190524689803555, 0.09876424021689267, 0.09927832871365405, 0.08885421865214072, 0.07703367353284052, 0.001069962777698108, 0.07551688231704179, 0.19335645362907017, 0.09846459209703085, 0.08231640572522703, 0.2849720916673262, 0.03969568461570194, 0.3180476680055866, 0.09753938455075672, 0.3744232505062759, 0.22512441874793898, 0.1331239221485464, 0.3479901520481202, 0.09015831463119262, 0.05054735386670017, 0.07780714903547281, 0.12078337235321923, 0.007143124132406586, 0.09087687009801071, 0.13932114140543017, 0.3505453741037423, 0.1824206827717666, 0.2503490528359623, 0.5341918905703923, 0.5279275326435777, 0.6341229697797633, 0.5787927356204621, 0.4687070697524659, 0.5202459864321558, 0.5598413751195541, 0.4829008062172869, 0.5163846022079881, 0.0974071809894358, 0.09635251621273566, 0.1156992009528145, 0.10416004327384032, 0.09411055944867408, 0.14211695816275738, 0.14566352376843683, 0.12125693108484792, 0.06669878369203108, 0.22040703899271574, 0.23084664302234836, 0.21792164327331642, 0.17627554843013693, 0.18884072244425598, 0.1545969102909759, 0.19231267848289446, 0.17986047490318846, 0.21183348773130994, 0.22589609901222252, 0.23255551104242256, 0.18723246917154368, 0.3787230208869179, 0.19478221876573976, 0.3623261595079914, 0.39550725433619327, 0.348838523984208, 0.21402342894669013, 0.16212689819649373, 0.15398342495946948, 0.11922669333878788, 0.1739596441312915, 0.17504403457587836, 0.39474545682859463, 0.21670489521875247, 0.2061369679819266, 0.17923975913894175, 0.22269070985689, 0.2214996825070683, 0.21499547914196515, 0.22768257561417105, 0.24462698019000906, 0.24994347731366895, 0.2254540995529658, 0.23167246212083237, 0.22604743207098632, 0.17739695317265336, 0.178210722226936, 0.1940888648049356, 0.19922988436186806, 0.18727285554040551, 0.17697294107036055, 0.18876646439398648, 0.1751175854589756, 0.1933269289142563, 0.18876106092712552, 0.1883073314330287, 0.15843821629766408, 0.17319129346530626, 0.201166649405622, 0.13194290519621954, 0.15985553513857498, 0.1914979009833676, 0.16363142375142392, 0.0832781031999632, 0.4666063107679599, 0.4994547097587939, 0.21211993929173945, 0.2920859091850967, 0.21242733269256264, 0.21362125363777873, 0.3712908983786457, 0.28714501279394966, 0.19325541067341745, 0.18483743020598664, 0.1785304714081305, 0.19155180421386875, 0.19419087575380656, 0.1933796947410643, 0.19090238856453257, 0.20388042377148563, 0.17572806125265816, 0.07288887158217383, 0.0827615121138584, 0.09177893202148002, 0.09045945638442332, 0.09185110614808178, 0.11987753395420764, 0.09566525416689875, 0.09589126236371337, 0.09675220277191765]}, "mutation_prompt": null}
{"id": "b240bd94-3622-4836-a9a7-df108acfe287", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Improving population diversity through a new chaotic mutation operator to enhance exploration and exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.2928552967134586, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "f3206f4a-a098-40b9-aa5a-2f661de25ac1", "metadata": {"aucs": [0.9612862743171389, 0.9498892388479536, 0.9531889151393971, 0.9626630565645689, 0.9576284933108423, 0.9508044907438078, 0.9584203813581968, 0.9623129215153662, 0.9629147049537342, 0.9378177433107089, 0.8838331263254482, 0.8684779245541822, 0.8905879909621945, 0.8911695832418683, 0.8767332539918276, 0.9065683923620674, 0.9023029717562128, 0.9070797463427996, 0.15179582312633233, 0.12627758039138293, 0.10740446477688892, 0.0645758256642126, 0.1103601541978444, 0.174740155883077, 0.1159161655997647, 0.12228617671546904, 0.14820643191392768, 0.07175896115836056, 0.1047805357194278, 0.09186416285715948, 0.09517190953081989, 0.0685729402414127, 0.0647071541498262, 0.00782655420976519, 0.09679628542586471, 0.05815274377603563, 0.9833660586362941, 0.9591130602065449, 0.9834193197954577, 0.9802119418012887, 0.9795147327641788, 0.9762378828492457, 0.9941111585632495, 0.9945165396319373, 0.975299307263473, 0.23405642926085846, 0.35522514684503026, 0.3596736052128031, 0.5922345759015313, 0.4472473660025591, 0.3414002715376935, 0.48825905321321184, 0.3391395664342587, 0.4005956265494508, 0.23173846618223792, 0.11513247265453297, 0.13994176032588912, 0.28129921868422647, 0.1953609411365489, 0.2616528795193428, 0.22426649271108, 0.18174590550677228, 0.23771368545382277, 0.2116079329792112, 0.1350969966838227, 0.1671229872727481, 0.1340710760757725, 0.13473369420630443, 0.1605840665966054, 0.13726343298362886, 0.16867143855244526, 0.18303747836555062, 0.1861671834695603, 0.15038849011730948, 0.12979218937445314, 0.19638564369593892, 0.23029736303589887, 0.17661400827947382, 0.20744892567362216, 0.17028896142651762, 0.16415687312345617, 9.999999999998899e-05, 0.02026288433422485, 0.09745971696200684, 0.06104615081916365, 0.0064260632643142745, 0.1119477433498216, 9.999999999998899e-05, 9.999999999998899e-05, 0.19289446200582738, 0.09657387231773862, 0.04624952257296222, 0.09022264377199496, 0.07127446393923087, 0.045479791216588294, 0.048085874237263626, 0.14582925600450292, 0.05831444600026603, 0.0599865645776414, 0.17502007204986114, 0.0819656562370108, 0.34910837324177335, 0.23377360866624208, 0.09695182805269364, 0.19566773026770723, 0.3592118421052807, 0.2249327108167597, 0.08445746859824721, 0.12865148897221168, 0.17244354966882824, 0.0993982609967512, 0.19163785237910724, 0.008653957133498813, 0.0065250558064885444, 0.09784827868725077, 0.11629918019788565, 0.1484069006023152, 0.5571122301278505, 0.5449165375588295, 0.517066127178052, 0.5297506886791016, 0.4653260009617648, 0.51208517587153, 0.5842230638708821, 0.5547160311973636, 0.5524767202496761, 0.11981827892145325, 0.11018453837101627, 0.07529687990238743, 0.15645901416436758, 0.10722044399980901, 0.14730556205433454, 0.07383877248369641, 0.11212727229125852, 0.10201703874422019, 0.17889065247756586, 0.2523214319553906, 0.23043378611844156, 0.1896879242842182, 0.17486992090555054, 0.2276032837167835, 0.17490037106827316, 0.1687909424873444, 0.17767718385886289, 0.3239131136161594, 0.5472445244287272, 0.17237967871747384, 0.3218850003619137, 0.22178853785360952, 0.28068559909588275, 0.22617377519630888, 0.32146479302957476, 0.19373344689021144, 0.21905345587715297, 0.26179880711330805, 0.25695036771506297, 0.15905977732302412, 0.2224121727891495, 0.17921103197146349, 0.23110355118235948, 0.29116535493461004, 0.19916215543681504, 0.24119809604568676, 0.22674161743372045, 0.2044387166124063, 0.1988433183562226, 0.23699172565418836, 0.2288141687168187, 0.21486040004301854, 0.22831423474295776, 0.2063980905017767, 0.18986391948097503, 0.2110564664275364, 0.18113020837502736, 0.17967717550258566, 0.19972433407065449, 0.17642968402685733, 0.20849046673358684, 0.24914343135669736, 0.20964128093228984, 0.8767608661274386, 0.12077259215579961, 0.1492776827425838, 0.17366702301857895, 0.17951813386945337, 0.9139414676765262, 0.1001367920959072, 0.1704514152819645, 0.16108837458683234, 0.08333647715555292, 0.21105420277758857, 0.5775376789213535, 0.25013972779334104, 0.2620098042441712, 0.1977264704887226, 0.10554961531046136, 0.35889525650126397, 0.1649898718202064, 0.19071289614988762, 0.19282263923759402, 0.20383084000346074, 0.19279937834985994, 0.18184072849757071, 0.18564838589754173, 0.192476369345845, 0.17727831039600328, 0.18080515041157497, 0.08863231620762868, 0.08966660836253326, 0.09631323407922388, 0.0884800976193052, 0.0988006365566062, 0.08953093465209527, 0.07175561176290268, 0.09728828421534341, 0.078767152403309]}, "mutation_prompt": null}
{"id": "d445cac5-9d5c-4f3a-a406-4cbfbaea1625", "solution": "import numpy as np\n\nclass OpposedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def opposition_based_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x - f * (candidates[0] - x) - f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = opposition_based_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "OpposedDynamicAdaptiveVelocityScaling", "description": "Enhancing convergence by incorporating a novel adaptive mutation strategy based on opposition-based learning.", "configspace": "", "generation": 78, "fitness": 0.2928552967134586, "feedback": "The algorithm OpposedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {"aucs": [0.9612862743171389, 0.9498892388479536, 0.9531889151393971, 0.9626630565645689, 0.9576284933108423, 0.9508044907438078, 0.9584203813581968, 0.9623129215153662, 0.9629147049537342, 0.9378177433107089, 0.8838331263254482, 0.8684779245541822, 0.8905879909621945, 0.8911695832418683, 0.8767332539918276, 0.9065683923620674, 0.9023029717562128, 0.9070797463427996, 0.15179582312633233, 0.12627758039138293, 0.10740446477688892, 0.0645758256642126, 0.1103601541978444, 0.174740155883077, 0.1159161655997647, 0.12228617671546904, 0.14820643191392768, 0.07175896115836056, 0.1047805357194278, 0.09186416285715948, 0.09517190953081989, 0.0685729402414127, 0.0647071541498262, 0.00782655420976519, 0.09679628542586471, 0.05815274377603563, 0.9833660586362941, 0.9591130602065449, 0.9834193197954577, 0.9802119418012887, 0.9795147327641788, 0.9762378828492457, 0.9941111585632495, 0.9945165396319373, 0.975299307263473, 0.23405642926085846, 0.35522514684503026, 0.3596736052128031, 0.5922345759015313, 0.4472473660025591, 0.3414002715376935, 0.48825905321321184, 0.3391395664342587, 0.4005956265494508, 0.23173846618223792, 0.11513247265453297, 0.13994176032588912, 0.28129921868422647, 0.1953609411365489, 0.2616528795193428, 0.22426649271108, 0.18174590550677228, 0.23771368545382277, 0.2116079329792112, 0.1350969966838227, 0.1671229872727481, 0.1340710760757725, 0.13473369420630443, 0.1605840665966054, 0.13726343298362886, 0.16867143855244526, 0.18303747836555062, 0.1861671834695603, 0.15038849011730948, 0.12979218937445314, 0.19638564369593892, 0.23029736303589887, 0.17661400827947382, 0.20744892567362216, 0.17028896142651762, 0.16415687312345617, 9.999999999998899e-05, 0.02026288433422485, 0.09745971696200684, 0.06104615081916365, 0.0064260632643142745, 0.1119477433498216, 9.999999999998899e-05, 9.999999999998899e-05, 0.19289446200582738, 0.09657387231773862, 0.04624952257296222, 0.09022264377199496, 0.07127446393923087, 0.045479791216588294, 0.048085874237263626, 0.14582925600450292, 0.05831444600026603, 0.0599865645776414, 0.17502007204986114, 0.0819656562370108, 0.34910837324177335, 0.23377360866624208, 0.09695182805269364, 0.19566773026770723, 0.3592118421052807, 0.2249327108167597, 0.08445746859824721, 0.12865148897221168, 0.17244354966882824, 0.0993982609967512, 0.19163785237910724, 0.008653957133498813, 0.0065250558064885444, 0.09784827868725077, 0.11629918019788565, 0.1484069006023152, 0.5571122301278505, 0.5449165375588295, 0.517066127178052, 0.5297506886791016, 0.4653260009617648, 0.51208517587153, 0.5842230638708821, 0.5547160311973636, 0.5524767202496761, 0.11981827892145325, 0.11018453837101627, 0.07529687990238743, 0.15645901416436758, 0.10722044399980901, 0.14730556205433454, 0.07383877248369641, 0.11212727229125852, 0.10201703874422019, 0.17889065247756586, 0.2523214319553906, 0.23043378611844156, 0.1896879242842182, 0.17486992090555054, 0.2276032837167835, 0.17490037106827316, 0.1687909424873444, 0.17767718385886289, 0.3239131136161594, 0.5472445244287272, 0.17237967871747384, 0.3218850003619137, 0.22178853785360952, 0.28068559909588275, 0.22617377519630888, 0.32146479302957476, 0.19373344689021144, 0.21905345587715297, 0.26179880711330805, 0.25695036771506297, 0.15905977732302412, 0.2224121727891495, 0.17921103197146349, 0.23110355118235948, 0.29116535493461004, 0.19916215543681504, 0.24119809604568676, 0.22674161743372045, 0.2044387166124063, 0.1988433183562226, 0.23699172565418836, 0.2288141687168187, 0.21486040004301854, 0.22831423474295776, 0.2063980905017767, 0.18986391948097503, 0.2110564664275364, 0.18113020837502736, 0.17967717550258566, 0.19972433407065449, 0.17642968402685733, 0.20849046673358684, 0.24914343135669736, 0.20964128093228984, 0.8767608661274386, 0.12077259215579961, 0.1492776827425838, 0.17366702301857895, 0.17951813386945337, 0.9139414676765262, 0.1001367920959072, 0.1704514152819645, 0.16108837458683234, 0.08333647715555292, 0.21105420277758857, 0.5775376789213535, 0.25013972779334104, 0.2620098042441712, 0.1977264704887226, 0.10554961531046136, 0.35889525650126397, 0.1649898718202064, 0.19071289614988762, 0.19282263923759402, 0.20383084000346074, 0.19279937834985994, 0.18184072849757071, 0.18564838589754173, 0.192476369345845, 0.17727831039600328, 0.18080515041157497, 0.08863231620762868, 0.08966660836253326, 0.09631323407922388, 0.0884800976193052, 0.0988006365566062, 0.08953093465209527, 0.07175561176290268, 0.09728828421534341, 0.078767152403309]}, "mutation_prompt": null}
{"id": "2caeee14-aee4-4819-9e22-de9808ce9e25", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def dynamic_opposition_based_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.sin(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x - f * (candidates[0] - x) - f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = dynamic_opposition_based_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing the exploration and exploitation balance by introducing a dynamic mutation strategy based on opposition-based learning.", "configspace": "", "generation": 79, "fitness": 0.2928552967134586, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {"aucs": [0.9612862743171389, 0.9498892388479536, 0.9531889151393971, 0.9626630565645689, 0.9576284933108423, 0.9508044907438078, 0.9584203813581968, 0.9623129215153662, 0.9629147049537342, 0.9378177433107089, 0.8838331263254482, 0.8684779245541822, 0.8905879909621945, 0.8911695832418683, 0.8767332539918276, 0.9065683923620674, 0.9023029717562128, 0.9070797463427996, 0.15179582312633233, 0.12627758039138293, 0.10740446477688892, 0.0645758256642126, 0.1103601541978444, 0.174740155883077, 0.1159161655997647, 0.12228617671546904, 0.14820643191392768, 0.07175896115836056, 0.1047805357194278, 0.09186416285715948, 0.09517190953081989, 0.0685729402414127, 0.0647071541498262, 0.00782655420976519, 0.09679628542586471, 0.05815274377603563, 0.9833660586362941, 0.9591130602065449, 0.9834193197954577, 0.9802119418012887, 0.9795147327641788, 0.9762378828492457, 0.9941111585632495, 0.9945165396319373, 0.975299307263473, 0.23405642926085846, 0.35522514684503026, 0.3596736052128031, 0.5922345759015313, 0.4472473660025591, 0.3414002715376935, 0.48825905321321184, 0.3391395664342587, 0.4005956265494508, 0.23173846618223792, 0.11513247265453297, 0.13994176032588912, 0.28129921868422647, 0.1953609411365489, 0.2616528795193428, 0.22426649271108, 0.18174590550677228, 0.23771368545382277, 0.2116079329792112, 0.1350969966838227, 0.1671229872727481, 0.1340710760757725, 0.13473369420630443, 0.1605840665966054, 0.13726343298362886, 0.16867143855244526, 0.18303747836555062, 0.1861671834695603, 0.15038849011730948, 0.12979218937445314, 0.19638564369593892, 0.23029736303589887, 0.17661400827947382, 0.20744892567362216, 0.17028896142651762, 0.16415687312345617, 9.999999999998899e-05, 0.02026288433422485, 0.09745971696200684, 0.06104615081916365, 0.0064260632643142745, 0.1119477433498216, 9.999999999998899e-05, 9.999999999998899e-05, 0.19289446200582738, 0.09657387231773862, 0.04624952257296222, 0.09022264377199496, 0.07127446393923087, 0.045479791216588294, 0.048085874237263626, 0.14582925600450292, 0.05831444600026603, 0.0599865645776414, 0.17502007204986114, 0.0819656562370108, 0.34910837324177335, 0.23377360866624208, 0.09695182805269364, 0.19566773026770723, 0.3592118421052807, 0.2249327108167597, 0.08445746859824721, 0.12865148897221168, 0.17244354966882824, 0.0993982609967512, 0.19163785237910724, 0.008653957133498813, 0.0065250558064885444, 0.09784827868725077, 0.11629918019788565, 0.1484069006023152, 0.5571122301278505, 0.5449165375588295, 0.517066127178052, 0.5297506886791016, 0.4653260009617648, 0.51208517587153, 0.5842230638708821, 0.5547160311973636, 0.5524767202496761, 0.11981827892145325, 0.11018453837101627, 0.07529687990238743, 0.15645901416436758, 0.10722044399980901, 0.14730556205433454, 0.07383877248369641, 0.11212727229125852, 0.10201703874422019, 0.17889065247756586, 0.2523214319553906, 0.23043378611844156, 0.1896879242842182, 0.17486992090555054, 0.2276032837167835, 0.17490037106827316, 0.1687909424873444, 0.17767718385886289, 0.3239131136161594, 0.5472445244287272, 0.17237967871747384, 0.3218850003619137, 0.22178853785360952, 0.28068559909588275, 0.22617377519630888, 0.32146479302957476, 0.19373344689021144, 0.21905345587715297, 0.26179880711330805, 0.25695036771506297, 0.15905977732302412, 0.2224121727891495, 0.17921103197146349, 0.23110355118235948, 0.29116535493461004, 0.19916215543681504, 0.24119809604568676, 0.22674161743372045, 0.2044387166124063, 0.1988433183562226, 0.23699172565418836, 0.2288141687168187, 0.21486040004301854, 0.22831423474295776, 0.2063980905017767, 0.18986391948097503, 0.2110564664275364, 0.18113020837502736, 0.17967717550258566, 0.19972433407065449, 0.17642968402685733, 0.20849046673358684, 0.24914343135669736, 0.20964128093228984, 0.8767608661274386, 0.12077259215579961, 0.1492776827425838, 0.17366702301857895, 0.17951813386945337, 0.9139414676765262, 0.1001367920959072, 0.1704514152819645, 0.16108837458683234, 0.08333647715555292, 0.21105420277758857, 0.5775376789213535, 0.25013972779334104, 0.2620098042441712, 0.1977264704887226, 0.10554961531046136, 0.35889525650126397, 0.1649898718202064, 0.19071289614988762, 0.19282263923759402, 0.20383084000346074, 0.19279937834985994, 0.18184072849757071, 0.18564838589754173, 0.192476369345845, 0.17727831039600328, 0.18080515041157497, 0.08863231620762868, 0.08966660836253326, 0.09631323407922388, 0.0884800976193052, 0.0988006365566062, 0.08953093465209527, 0.07175561176290268, 0.09728828421534341, 0.078767152403309]}, "mutation_prompt": null}
{"id": "deb83bfb-2c2a-4e9d-bd2b-8ba489a1d34b", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def opposition_based_mutation(x):\n            return 2 * 5.0 - x\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedOppositionBasedDynamicAdaptiveVelocityScaling", "description": "Enhancing the population diversity and convergence speed by integrating a novel opposition-based learning mechanism into the optimization process.", "configspace": "", "generation": 80, "fitness": 0.2928552967134586, "feedback": "The algorithm EnhancedOppositionBasedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {"aucs": [0.9612862743171389, 0.9498892388479536, 0.9531889151393971, 0.9626630565645689, 0.9576284933108423, 0.9508044907438078, 0.9584203813581968, 0.9623129215153662, 0.9629147049537342, 0.9378177433107089, 0.8838331263254482, 0.8684779245541822, 0.8905879909621945, 0.8911695832418683, 0.8767332539918276, 0.9065683923620674, 0.9023029717562128, 0.9070797463427996, 0.15179582312633233, 0.12627758039138293, 0.10740446477688892, 0.0645758256642126, 0.1103601541978444, 0.174740155883077, 0.1159161655997647, 0.12228617671546904, 0.14820643191392768, 0.07175896115836056, 0.1047805357194278, 0.09186416285715948, 0.09517190953081989, 0.0685729402414127, 0.0647071541498262, 0.00782655420976519, 0.09679628542586471, 0.05815274377603563, 0.9833660586362941, 0.9591130602065449, 0.9834193197954577, 0.9802119418012887, 0.9795147327641788, 0.9762378828492457, 0.9941111585632495, 0.9945165396319373, 0.975299307263473, 0.23405642926085846, 0.35522514684503026, 0.3596736052128031, 0.5922345759015313, 0.4472473660025591, 0.3414002715376935, 0.48825905321321184, 0.3391395664342587, 0.4005956265494508, 0.23173846618223792, 0.11513247265453297, 0.13994176032588912, 0.28129921868422647, 0.1953609411365489, 0.2616528795193428, 0.22426649271108, 0.18174590550677228, 0.23771368545382277, 0.2116079329792112, 0.1350969966838227, 0.1671229872727481, 0.1340710760757725, 0.13473369420630443, 0.1605840665966054, 0.13726343298362886, 0.16867143855244526, 0.18303747836555062, 0.1861671834695603, 0.15038849011730948, 0.12979218937445314, 0.19638564369593892, 0.23029736303589887, 0.17661400827947382, 0.20744892567362216, 0.17028896142651762, 0.16415687312345617, 9.999999999998899e-05, 0.02026288433422485, 0.09745971696200684, 0.06104615081916365, 0.0064260632643142745, 0.1119477433498216, 9.999999999998899e-05, 9.999999999998899e-05, 0.19289446200582738, 0.09657387231773862, 0.04624952257296222, 0.09022264377199496, 0.07127446393923087, 0.045479791216588294, 0.048085874237263626, 0.14582925600450292, 0.05831444600026603, 0.0599865645776414, 0.17502007204986114, 0.0819656562370108, 0.34910837324177335, 0.23377360866624208, 0.09695182805269364, 0.19566773026770723, 0.3592118421052807, 0.2249327108167597, 0.08445746859824721, 0.12865148897221168, 0.17244354966882824, 0.0993982609967512, 0.19163785237910724, 0.008653957133498813, 0.0065250558064885444, 0.09784827868725077, 0.11629918019788565, 0.1484069006023152, 0.5571122301278505, 0.5449165375588295, 0.517066127178052, 0.5297506886791016, 0.4653260009617648, 0.51208517587153, 0.5842230638708821, 0.5547160311973636, 0.5524767202496761, 0.11981827892145325, 0.11018453837101627, 0.07529687990238743, 0.15645901416436758, 0.10722044399980901, 0.14730556205433454, 0.07383877248369641, 0.11212727229125852, 0.10201703874422019, 0.17889065247756586, 0.2523214319553906, 0.23043378611844156, 0.1896879242842182, 0.17486992090555054, 0.2276032837167835, 0.17490037106827316, 0.1687909424873444, 0.17767718385886289, 0.3239131136161594, 0.5472445244287272, 0.17237967871747384, 0.3218850003619137, 0.22178853785360952, 0.28068559909588275, 0.22617377519630888, 0.32146479302957476, 0.19373344689021144, 0.21905345587715297, 0.26179880711330805, 0.25695036771506297, 0.15905977732302412, 0.2224121727891495, 0.17921103197146349, 0.23110355118235948, 0.29116535493461004, 0.19916215543681504, 0.24119809604568676, 0.22674161743372045, 0.2044387166124063, 0.1988433183562226, 0.23699172565418836, 0.2288141687168187, 0.21486040004301854, 0.22831423474295776, 0.2063980905017767, 0.18986391948097503, 0.2110564664275364, 0.18113020837502736, 0.17967717550258566, 0.19972433407065449, 0.17642968402685733, 0.20849046673358684, 0.24914343135669736, 0.20964128093228984, 0.8767608661274386, 0.12077259215579961, 0.1492776827425838, 0.17366702301857895, 0.17951813386945337, 0.9139414676765262, 0.1001367920959072, 0.1704514152819645, 0.16108837458683234, 0.08333647715555292, 0.21105420277758857, 0.5775376789213535, 0.25013972779334104, 0.2620098042441712, 0.1977264704887226, 0.10554961531046136, 0.35889525650126397, 0.1649898718202064, 0.19071289614988762, 0.19282263923759402, 0.20383084000346074, 0.19279937834985994, 0.18184072849757071, 0.18564838589754173, 0.192476369345845, 0.17727831039600328, 0.18080515041157497, 0.08863231620762868, 0.08966660836253326, 0.09631323407922388, 0.0884800976193052, 0.0988006365566062, 0.08953093465209527, 0.07175561176290268, 0.09728828421534341, 0.078767152403309]}, "mutation_prompt": null}
{"id": "4f77b494-96e4-4fb7-9ba5-14f141b760b9", "solution": "import numpy as np\n\nclass EnhancedTournamentSelectionAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def tournament_selection(pop, scores, tournament_size=3):\n            selected_indices = []\n            for _ in range(len(pop)):\n                tournament_indices = np.random.choice(range(len(pop)), tournament_size, replace=False)\n                tournament_scores = [scores[i] for i in tournament_indices]\n                winner_index = tournament_indices[np.argmin(tournament_scores)]\n                selected_indices.append(winner_index)\n            return pop[selected_indices]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = tournament_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedTournamentSelectionAlgorithm", "description": "Enhancing the selection mechanism by incorporating a tournament selection strategy to promote diverse exploration and exploit the best solutions efficiently.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {}, "mutation_prompt": null}
{"id": "a680e1a9-4d21-4a91-8a8b-32c21e2acd1c", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Improving population diversity through a new chaotic mutation operator to enhance exploration and exploitation balance.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {"aucs": [0.9612862743171389, 0.9498892388479536, 0.9531889151393971, 0.9626630565645689, 0.9576284933108423, 0.9508044907438078, 0.9584203813581968, 0.9623129215153662, 0.9629147049537342, 0.9378177433107089, 0.8838331263254482, 0.8684779245541822, 0.8905879909621945, 0.8911695832418683, 0.8767332539918276, 0.9065683923620674, 0.9023029717562128, 0.9070797463427996, 0.15179582312633233, 0.12627758039138293, 0.10740446477688892, 0.0645758256642126, 0.1103601541978444, 0.174740155883077, 0.1159161655997647, 0.12228617671546904, 0.14820643191392768, 0.07175896115836056, 0.1047805357194278, 0.09186416285715948, 0.09517190953081989, 0.0685729402414127, 0.0647071541498262, 0.00782655420976519, 0.09679628542586471, 0.05815274377603563, 0.9833660586362941, 0.9591130602065449, 0.9834193197954577, 0.9802119418012887, 0.9795147327641788, 0.9762378828492457, 0.9941111585632495, 0.9945165396319373, 0.975299307263473, 0.23405642926085846, 0.35522514684503026, 0.3596736052128031, 0.5922345759015313, 0.4472473660025591, 0.3414002715376935, 0.48825905321321184, 0.3391395664342587, 0.4005956265494508, 0.23173846618223792, 0.11513247265453297, 0.13994176032588912, 0.28129921868422647, 0.1953609411365489, 0.2616528795193428, 0.22426649271108, 0.18174590550677228, 0.23771368545382277, 0.2116079329792112, 0.1350969966838227, 0.1671229872727481, 0.1340710760757725, 0.13473369420630443, 0.1605840665966054, 0.13726343298362886, 0.16867143855244526, 0.18303747836555062, 0.1861671834695603, 0.15038849011730948, 0.12979218937445314, 0.19638564369593892, 0.23029736303589887, 0.17661400827947382, 0.20744892567362216, 0.17028896142651762, 0.16415687312345617, 9.999999999998899e-05, 0.02026288433422485, 0.09745971696200684, 0.06104615081916365, 0.0064260632643142745, 0.1119477433498216, 9.999999999998899e-05, 9.999999999998899e-05, 0.19289446200582738, 0.09657387231773862, 0.04624952257296222, 0.09022264377199496, 0.07127446393923087, 0.045479791216588294, 0.048085874237263626, 0.14582925600450292, 0.05831444600026603, 0.0599865645776414, 0.17502007204986114, 0.0819656562370108, 0.34910837324177335, 0.23377360866624208, 0.09695182805269364, 0.19566773026770723, 0.3592118421052807, 0.2249327108167597, 0.08445746859824721, 0.12865148897221168, 0.17244354966882824, 0.0993982609967512, 0.19163785237910724, 0.008653957133498813, 0.0065250558064885444, 0.09784827868725077, 0.11629918019788565, 0.1484069006023152, 0.5571122301278505, 0.5449165375588295, 0.517066127178052, 0.5297506886791016, 0.4653260009617648, 0.51208517587153, 0.5842230638708821, 0.5547160311973636, 0.5524767202496761, 0.11981827892145325, 0.11018453837101627, 0.07529687990238743, 0.15645901416436758, 0.10722044399980901, 0.14730556205433454, 0.07383877248369641, 0.11212727229125852, 0.10201703874422019, 0.17889065247756586, 0.2523214319553906, 0.23043378611844156, 0.1896879242842182, 0.17486992090555054, 0.2276032837167835, 0.17490037106827316, 0.1687909424873444, 0.17767718385886289, 0.3239131136161594, 0.5472445244287272, 0.17237967871747384, 0.3218850003619137, 0.22178853785360952, 0.28068559909588275, 0.22617377519630888, 0.32146479302957476, 0.19373344689021144, 0.21905345587715297, 0.26179880711330805, 0.25695036771506297, 0.15905977732302412, 0.2224121727891495, 0.17921103197146349, 0.23110355118235948, 0.29116535493461004, 0.19916215543681504, 0.24119809604568676, 0.22674161743372045, 0.2044387166124063, 0.1988433183562226, 0.23699172565418836, 0.2288141687168187, 0.21486040004301854, 0.22831423474295776, 0.2063980905017767, 0.18986391948097503, 0.2110564664275364, 0.18113020837502736, 0.17967717550258566, 0.19972433407065449, 0.17642968402685733, 0.20849046673358684, 0.24914343135669736, 0.20964128093228984, 0.8767608661274386, 0.12077259215579961, 0.1492776827425838, 0.17366702301857895, 0.17951813386945337, 0.9139414676765262, 0.1001367920959072, 0.1704514152819645, 0.16108837458683234, 0.08333647715555292, 0.21105420277758857, 0.5775376789213535, 0.25013972779334104, 0.2620098042441712, 0.1977264704887226, 0.10554961531046136, 0.35889525650126397, 0.1649898718202064, 0.19071289614988762, 0.19282263923759402, 0.20383084000346074, 0.19279937834985994, 0.18184072849757071, 0.18564838589754173, 0.192476369345845, 0.17727831039600328, 0.18080515041157497, 0.08863231620762868, 0.08966660836253326, 0.09631323407922388, 0.0884800976193052, 0.0988006365566062, 0.08953093465209527, 0.07175561176290268, 0.09728828421534341, 0.078767152403309]}, "mutation_prompt": null}
{"id": "6b364e1e-5c9e-4229-a2c0-1b7082ba41b0", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Improving population diversity through a new chaotic mutation operator to enhance exploration and exploitation balance.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {"aucs": [0.9612862743171389, 0.9498892388479536, 0.9531889151393971, 0.9626630565645689, 0.9576284933108423, 0.9508044907438078, 0.9584203813581968, 0.9623129215153662, 0.9629147049537342, 0.9378177433107089, 0.8838331263254482, 0.8684779245541822, 0.8905879909621945, 0.8911695832418683, 0.8767332539918276, 0.9065683923620674, 0.9023029717562128, 0.9070797463427996, 0.15179582312633233, 0.12627758039138293, 0.10740446477688892, 0.0645758256642126, 0.1103601541978444, 0.174740155883077, 0.1159161655997647, 0.12228617671546904, 0.14820643191392768, 0.07175896115836056, 0.1047805357194278, 0.09186416285715948, 0.09517190953081989, 0.0685729402414127, 0.0647071541498262, 0.00782655420976519, 0.09679628542586471, 0.05815274377603563, 0.9833660586362941, 0.9591130602065449, 0.9834193197954577, 0.9802119418012887, 0.9795147327641788, 0.9762378828492457, 0.9941111585632495, 0.9945165396319373, 0.975299307263473, 0.23405642926085846, 0.35522514684503026, 0.3596736052128031, 0.5922345759015313, 0.4472473660025591, 0.3414002715376935, 0.48825905321321184, 0.3391395664342587, 0.4005956265494508, 0.23173846618223792, 0.11513247265453297, 0.13994176032588912, 0.28129921868422647, 0.1953609411365489, 0.2616528795193428, 0.22426649271108, 0.18174590550677228, 0.23771368545382277, 0.2116079329792112, 0.1350969966838227, 0.1671229872727481, 0.1340710760757725, 0.13473369420630443, 0.1605840665966054, 0.13726343298362886, 0.16867143855244526, 0.18303747836555062, 0.1861671834695603, 0.15038849011730948, 0.12979218937445314, 0.19638564369593892, 0.23029736303589887, 0.17661400827947382, 0.20744892567362216, 0.17028896142651762, 0.16415687312345617, 9.999999999998899e-05, 0.02026288433422485, 0.09745971696200684, 0.06104615081916365, 0.0064260632643142745, 0.1119477433498216, 9.999999999998899e-05, 9.999999999998899e-05, 0.19289446200582738, 0.09657387231773862, 0.04624952257296222, 0.09022264377199496, 0.07127446393923087, 0.045479791216588294, 0.048085874237263626, 0.14582925600450292, 0.05831444600026603, 0.0599865645776414, 0.17502007204986114, 0.0819656562370108, 0.34910837324177335, 0.23377360866624208, 0.09695182805269364, 0.19566773026770723, 0.3592118421052807, 0.2249327108167597, 0.08445746859824721, 0.12865148897221168, 0.17244354966882824, 0.0993982609967512, 0.19163785237910724, 0.008653957133498813, 0.0065250558064885444, 0.09784827868725077, 0.11629918019788565, 0.1484069006023152, 0.5571122301278505, 0.5449165375588295, 0.517066127178052, 0.5297506886791016, 0.4653260009617648, 0.51208517587153, 0.5842230638708821, 0.5547160311973636, 0.5524767202496761, 0.11981827892145325, 0.11018453837101627, 0.07529687990238743, 0.15645901416436758, 0.10722044399980901, 0.14730556205433454, 0.07383877248369641, 0.11212727229125852, 0.10201703874422019, 0.17889065247756586, 0.2523214319553906, 0.23043378611844156, 0.1896879242842182, 0.17486992090555054, 0.2276032837167835, 0.17490037106827316, 0.1687909424873444, 0.17767718385886289, 0.3239131136161594, 0.5472445244287272, 0.17237967871747384, 0.3218850003619137, 0.22178853785360952, 0.28068559909588275, 0.22617377519630888, 0.32146479302957476, 0.19373344689021144, 0.21905345587715297, 0.26179880711330805, 0.25695036771506297, 0.15905977732302412, 0.2224121727891495, 0.17921103197146349, 0.23110355118235948, 0.29116535493461004, 0.19916215543681504, 0.24119809604568676, 0.22674161743372045, 0.2044387166124063, 0.1988433183562226, 0.23699172565418836, 0.2288141687168187, 0.21486040004301854, 0.22831423474295776, 0.2063980905017767, 0.18986391948097503, 0.2110564664275364, 0.18113020837502736, 0.17967717550258566, 0.19972433407065449, 0.17642968402685733, 0.20849046673358684, 0.24914343135669736, 0.20964128093228984, 0.8767608661274386, 0.12077259215579961, 0.1492776827425838, 0.17366702301857895, 0.17951813386945337, 0.9139414676765262, 0.1001367920959072, 0.1704514152819645, 0.16108837458683234, 0.08333647715555292, 0.21105420277758857, 0.5775376789213535, 0.25013972779334104, 0.2620098042441712, 0.1977264704887226, 0.10554961531046136, 0.35889525650126397, 0.1649898718202064, 0.19071289614988762, 0.19282263923759402, 0.20383084000346074, 0.19279937834985994, 0.18184072849757071, 0.18564838589754173, 0.192476369345845, 0.17727831039600328, 0.18080515041157497, 0.08863231620762868, 0.08966660836253326, 0.09631323407922388, 0.0884800976193052, 0.0988006365566062, 0.08953093465209527, 0.07175561176290268, 0.09728828421534341, 0.078767152403309]}, "mutation_prompt": null}
{"id": "f99dc162-88db-4d42-ae58-47910e2899d9", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScalingImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v)**(1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + np.random.normal(scale=0.1, size=self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity + levy_flight(self.dim), -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScalingImproved", "description": "Enhancing exploration by incorporating Levy flight for global search while maintaining exploitation through adaptive velocity scaling for local optimization.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {}, "mutation_prompt": null}
{"id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration by incorporating Levy flight behavior for improved diversity and global search capability.", "configspace": "", "generation": 85, "fitness": 0.29414782507528897, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b240bd94-3622-4836-a9a7-df108acfe287", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "c7cf23c0-869e-46a9-91a5-74eab9f7c769", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration by incorporating Levy flight behavior for improved diversity and global search capability.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "e4bc7200-ab76-423f-9943-d2a2af856aeb", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScalingRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling_refined(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling_refined(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScalingRefined", "description": "Enhancing exploration and exploitation by introducing a dynamic mutation strategy based on chaotic dynamics and adaptive velocity scaling.", "configspace": "", "generation": 87, "fitness": 0.29414782507528897, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScalingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "86030f20-cbd9-4de0-b8c6-9f453c953475", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration by incorporating Levy flight behavior for improved diversity and global search capability.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "d64e7998-c25c-4d95-895d-3b1870c32aea", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScalingRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmin(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = adaptive_crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest\n", "name": "EnhancedDynamicAdaptiveVelocityScalingRefined", "description": "Enhancing exploration by incorporating chaotic mutation with adaptive crowding selection for improved diversity and convergence.", "configspace": "", "generation": 89, "fitness": 0.26738189010777325, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScalingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.94190463096925, 0.9444142819534143, 0.9496611855565427, 0.914115981035723, 0.9293982468659987, 0.9477067311242033, 0.951773854269446, 0.9569080480375712, 0.9511822581298925, 0.8751397871843659, 0.8439394532610496, 0.8491533945749539, 0.9115425470188022, 0.1283844342539503, 0.901421945678059, 0.9077464095354989, 0.03587688350825535, 9.999999999998899e-05, 0.09706487406764952, 0.17893852509860153, 0.14649904834323757, 0.15571911870660315, 0.1971468806578015, 0.13549165379171968, 0.13288994664340348, 0.10209721403116201, 0.16648310236327868, 0.09644140281359248, 0.09773037683355201, 0.11225951264903089, 0.0959752890184643, 0.10125819590310836, 0.08909163845482093, 0.11151111389153445, 0.13075265139071723, 0.11151428938653385, 0.9816983505394064, 0.9633011174580381, 0.9632523122753689, 0.9461965148878244, 0.9817646316935315, 0.9591516417081115, 0.9873303667607051, 0.931622607073718, 0.9878448958272817, 0.14870814179050507, 0.4313539464308995, 0.1233617002011611, 0.23044765781713317, 0.28053389111415394, 0.33538689368465513, 0.09918534409783619, 0.1835846437137969, 0.25075734076612666, 0.1875688104008968, 0.27910443622978853, 0.09937776401410614, 0.17104996088469193, 0.21901236658828704, 0.21954393623651836, 0.16932773304287652, 0.17854772097705696, 0.33496201219595667, 0.1501291607314068, 0.15782749492370807, 0.1477026361214001, 0.13083456374479208, 0.25575721759240255, 0.15505691416066825, 0.19513292303966323, 0.1273087303537781, 0.24495700168236256, 0.13586062773368335, 0.13340193384058008, 0.13214976331269535, 0.1492089432143342, 0.1926327561103217, 0.1520762781388466, 0.17734006133583757, 9.999999999998899e-05, 0.2253772470518871, 0.0005705340733344055, 9.999999999998899e-05, 9.999999999998899e-05, 0.06501003420821994, 9.999999999998899e-05, 9.999999999998899e-05, 0.01596237737369921, 9.999999999998899e-05, 0.0970515474273771, 0.0651167108293037, 0.04520043769168447, 0.1290023182196246, 0.046629323924375576, 0.013776289320415858, 0.013907087014510378, 0.0782854966223584, 0.13072786921098445, 0.04437552792417632, 0.14099475929979688, 0.11373104084667918, 0.2834965100856379, 0.13858034046021417, 0.1028243833286906, 0.08642124910477211, 0.11261509026488514, 0.13841539465259234, 0.09978089034219739, 0.1670457371663946, 0.15689609198522136, 0.09996623321918874, 0.024520388209622435, 0.07483890782466174, 0.07785038534236532, 0.17655930042085788, 0.16470552194759724, 0.1167342970525499, 0.5029112283088075, 0.5077856212113507, 0.46214437540407627, 0.49203598820403005, 0.5321545593994903, 0.5056738247438473, 0.5159131531939978, 0.49174464674805207, 0.5465829367030414, 0.1179226265128216, 0.08788457259960891, 0.07405059040764095, 0.11595180435174113, 0.12082578504766806, 0.12580205992571225, 0.14983793401428536, 0.1435887072740839, 0.09495802749162707, 0.14793181851712767, 0.1553242116971325, 0.18271252835404683, 0.17237450077121752, 0.197727310718536, 0.14590707540185655, 0.19537973876244874, 0.16471475065971897, 0.2284243967109323, 0.31923817188925385, 0.3245886937611179, 0.18321956976172704, 0.3239411464142322, 0.26678504894991373, 0.3240348834918986, 0.2549625815837553, 0.4753464323793769, 0.2656481535828008, 0.17110357606915116, 0.31196887788335403, 0.13860092843532035, 0.29111409995822735, 0.15370337363453745, 0.2882003819119989, 0.2254855757646217, 0.22941712232106615, 0.16894968660393916, 0.19509960895097078, 0.20840920580953493, 0.21976214551384254, 0.22047510691423322, 0.20863610594535553, 0.20177865784689397, 0.20932322801936676, 0.20989341901947323, 0.2468576435945976, 0.21883715382666957, 0.18305131448671175, 0.17841641542738218, 0.19439417834693185, 0.22519120365151923, 0.18581467727449186, 0.1667258000457459, 0.19222783575306557, 0.17844651493579733, 0.1864462858105429, 0.1881225749342007, 0.1543593045186018, 0.9636379511057506, 0.18809656738004765, 0.9564548956802196, 0.12001481168651484, 0.21896870710979854, 0.16688452677518906, 0.42896993580020815, 0.21278601618866544, 0.16045151943258895, 0.19872220227432136, 0.16981913608987975, 0.21266811238096606, 0.12063377389651142, 0.20662522100641167, 0.167816861895972, 0.2078031942301981, 0.19186772477953407, 0.19051433484477676, 0.18811451137751578, 0.18034093181533317, 0.17253932619335066, 0.1921038770332455, 0.19966849490273053, 0.1767731074072908, 0.08965635416102014, 0.08939243084657045, 0.06910767835105325, 0.08374259658888528, 0.08372617247471681, 0.08972330010681484, 0.09561751651582051, 0.09518261728315047, 0.07106442361227183]}, "mutation_prompt": null}
{"id": "6dbe5f80-abb0-4327-aa26-bd75ec6f4b92", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScalingRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population, f_min=0.3, f_max=0.8)  # Adjusted mutation factor range\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity, w_min=0.3, w_max=0.8, c_min=0.8, c_max=2.2)  # Dynamically adjusted velocity scaling factors\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScalingRefined", "description": "Enhancing exploration and exploitation balance through dynamically adjusting chaotic mutation and velocity scaling factors based on population diversity and convergence.", "configspace": "", "generation": 90, "fitness": 0.29050281805723077, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScalingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.952390143094556, 0.9541763212102289, 0.9579855608661297, 0.941758683491395, 0.949566805998025, 0.9533598892773286, 0.9621350617324499, 0.9534886440832407, 0.9461470891941323, 0.8930722717312741, 0.9022317351313119, 0.9162810475458282, 0.9165791027024315, 0.9204709715589398, 0.8865773787692969, 0.9020601509552887, 0.9132506438621779, 0.8874039747526737, 0.17293889843559607, 0.19056792981376414, 0.08089729462550277, 0.1732040098238813, 0.1313536411377748, 0.15502623933877946, 0.08363374554018155, 0.09170891464224129, 0.16247311200313996, 0.11869776083888339, 0.1084293111846768, 0.10659666310740101, 0.10544686407915449, 0.11671428228591452, 0.09779704138859346, 0.14985009167341412, 0.1624494877470274, 0.0965202027194948, 0.9791302295705769, 0.9841405647866049, 0.9655724555642415, 0.9725016816935188, 0.9584317810807973, 0.955000067591425, 0.976547518110271, 0.99462966213796, 0.9875086551216005, 0.3672574319240183, 0.4228509337183953, 0.28642758533532064, 0.475927533661441, 0.6888761817591806, 0.250000392312409, 0.7428637097695977, 0.5680720483945001, 0.33284388766891937, 0.2137661525948672, 0.2421085542653837, 0.17721830223339952, 0.28396637557842996, 0.2146549624759435, 0.33734873141459454, 0.16291957977144267, 0.1515770808442357, 0.24694840076340807, 0.1611143118009375, 0.17937330108250749, 0.1877023325729169, 0.36731918275412945, 0.2737000484454605, 0.24607965581336344, 0.19103911123741057, 0.1564325559215235, 0.1761940292907226, 0.2331391331502698, 0.11448396907192238, 0.19581931079484394, 0.15502564248201656, 0.06905854192206784, 0.17302523687282922, 0.17956342259333802, 0.09924797500888449, 0.12571042736985039, 0.03246522524732065, 9.999999999998899e-05, 0.052296434651375456, 0.055837752918491246, 9.999999999998899e-05, 0.038618624314480265, 0.030701710613603828, 9.999999999998899e-05, 0.0030687857081335146, 0.10753120771221325, 0.08819625658980734, 0.12141316584068496, 0.08193295491277963, 0.029470141794915028, 0.030817808290830695, 0.06629189823764792, 0.07722769935339435, 0.04327974776929078, 0.2741226993100059, 0.09597312182823114, 0.2326516276146544, 0.1793072990801855, 0.08558005233752719, 0.09374673931124, 0.11185361167717656, 0.11009379051134549, 0.07980070385761806, 0.13070819110766607, 0.20624317119793256, 0.21815597560736388, 0.12243332864972911, 0.11402528102968135, 0.016495031265854387, 0.08994587209434324, 0.13871184771816225, 0.09651264732110099, 0.5314393996297972, 0.5409325808203596, 0.5645801807324475, 0.5412692159252858, 0.5185332126676596, 0.5364487731477832, 0.5243706986778975, 0.5386499064592625, 0.5584399014824779, 0.0925611232628798, 0.10747866835906283, 0.09288965316115771, 0.10666766915077641, 0.08620132796130642, 0.1410788858669495, 0.11082986162230513, 0.10424007582776007, 0.09067342505729847, 0.15683874747525095, 0.18536412732912966, 0.1804386118308885, 0.18730128194715212, 0.20718526051201858, 0.14142678250329777, 0.16276920987410248, 0.17793987077175355, 0.20083138053745564, 0.18624563190474064, 0.3934785206854855, 0.197300441231411, 0.28274497516530483, 0.34326481499849437, 0.46877063515853, 0.2702335111013896, 0.3190044415216782, 0.3616787405667996, 0.297293636481179, 0.3040335967846771, 0.16982044904780524, 0.20957765805179862, 0.20870568392012645, 0.15692912103918644, 0.20013427154471397, 0.29968004939051784, 0.24684228487321536, 0.22608739104059405, 0.22581136153870796, 0.1968315732157625, 0.21541225094975558, 0.21466512383947534, 0.2701437332911877, 0.21144377123434888, 0.22950871961258457, 0.24257174094026535, 0.19824944360831498, 0.19688085749952833, 0.20385493733557525, 0.20976794956247358, 0.19567450103525275, 0.17291875082445218, 0.19482375280288722, 0.187020361390418, 0.1906860081664402, 0.7480181079839392, 0.18829389538089258, 0.15198296201797878, 0.17364741238837755, 0.20200329871115408, 0.20118019385738706, 0.1001369005669066, 0.21287175088509624, 0.16724107599523486, 0.08337105437454972, 0.20198165078736408, 0.12562458492606987, 0.21328785843727105, 0.16839584048990142, 0.20142012826574895, 0.10532366983925023, 0.16884868995784796, 0.21339046618530533, 0.18565152909546168, 0.18835509373495074, 0.18794658792011842, 0.18717053846723608, 0.18928785507566048, 0.19358104009249322, 0.1823636103011449, 0.19996302203795102, 0.18028414931463654, 0.09300190389475993, 0.09209958301883836, 0.08779241142914707, 0.06801245204587325, 0.08890323760447094, 0.14357204526475287, 0.09510695327651575, 0.09880198274359031, 0.0820546199009814]}, "mutation_prompt": null}
{"id": "91558a00-8d8f-45cd-ac62-925e55b5da44", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScalingRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        def reinitialize_population(pop, best):\n            new_pop = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n            new_pop[0] = best\n            pop[1:] = new_pop[1:]\n            return pop\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n            if np.random.rand() < 0.2:  # 20% chance for population reinitialization\n                population = reinitialize_population(population, gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScalingRefined", "description": "Improving adaptive behavior through dynamic population reinitialization to promote exploration and avoid premature convergence.", "configspace": "", "generation": 91, "fitness": 0.15957162380903972, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScalingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.30501698222408413, 0.2530594414357561, 0.2791435098484024, 0.23185367140201307, 0.44705841912946576, 0.21444176035465234, 0.25793502754091924, 0.2549941418107735, 0.30507506890613734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08167350928147388, 0.07765007063034268, 0.06016953888049481, 0.07198848294218185, 0.05735667192418292, 0.09206681440646514, 0.058545964828656705, 0.06020762186978468, 0.09427390889287657, 0.05552789022491511, 0.05123495198170136, 0.04822309280474857, 0.06892908476634707, 0.055160997896209096, 0.09073336004617683, 0.051715569190003086, 0.06275402186413426, 0.04103915348344522, 0.9805623853134503, 0.9911472963850376, 0.9902940267339829, 0.9927803905429653, 0.9741223446669398, 0.9896590091566334, 0.98720791053001, 0.978775765448984, 0.9734395531905955, 0.12179310209677208, 0.10421281558839923, 0.13421495061101796, 0.1388423660267596, 0.1421772990957918, 0.13547432349745336, 0.11417326370296266, 0.12533515760799818, 0.18044712011051, 0.2265574810112616, 0.1329340245359366, 0.14578248800482685, 0.13825888828264543, 0.15400669180473492, 0.16790107545923016, 0.18331104766255224, 0.1432436787056759, 0.19174889889705815, 0.06315550267675374, 0.05853928120386098, 0.05874751750396112, 0.04371473713566809, 0.03539035208278252, 0.07792671050391842, 0.10874525876065144, 0.042742268494026736, 0.07097557429148071, 0.0702043186109127, 0.08557726822963452, 0.06313573054665234, 0.08093560711152126, 0.07773328627649168, 0.06688479864955044, 0.048683097844552825, 0.07169864763840561, 0.09413585692794224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07743215151574645, 0.037237188804663535, 0.0540055896743834, 0.0638377457391065, 0.029364133117987135, 0.056655372505223234, 0.1147189614257268, 0.06377822408197575, 0.09567237031271159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029916033532917052, 0.023114874705754462, 0.01266194476386806, 0.02503768982164578, 0.02799529139932566, 0.03720451737284225, 0.03261255147756292, 0.011926455504316813, 0.06908167017385825, 0.2784823253919836, 0.2926409828828901, 0.26095529791024663, 0.25061927776531834, 0.29775368819970205, 0.2809411433968285, 0.2404179279710179, 0.3043627164777395, 0.28784812566595097, 0.05489150984847946, 0.061407161865021376, 0.058124758258456866, 0.08462622114339069, 0.07603772060562641, 0.0854535898018377, 0.06383942346343152, 0.08962262135230759, 0.05764353297991842, 0.13995783935272954, 0.13977095582240295, 0.13350695009655889, 0.1341029594738602, 0.13207841937023035, 0.14239942011776807, 0.14492656959140027, 0.13368190619973397, 0.1449316105902495, 0.23588000009050014, 0.208554553529814, 0.20671610906050653, 0.2238638399995695, 0.23561101934631767, 0.2267356944820238, 0.195094845618502, 0.20550586724722664, 0.21187340766762464, 0.15165896545069169, 0.12075752931010486, 0.12669530551421226, 0.15275056236245566, 0.15055634457590072, 0.14689203158819508, 0.13697622120836328, 0.1345711105338171, 0.13931589927102883, 0.20145003605710887, 0.1992121659725411, 0.16906664717038877, 0.20950471824916195, 0.16587509680362456, 0.1842246763630545, 0.16554638781034015, 0.17624222564339775, 0.18077945813933582, 0.1619573389667417, 0.17048233939927593, 0.18713191111498584, 0.1631930411407293, 0.17013360346303052, 0.16539618295947622, 0.16558508985162113, 0.16671720801334655, 0.1709377200493204, 0.2883350351437115, 0.16622052057426828, 0.1967404995007982, 0.3506368373533705, 0.24007539645049014, 0.1621803275052387, 0.22067559907611545, 0.21241546232414021, 0.17456576018997438, 0.22174293151455293, 0.2134508607260348, 0.22252098304696233, 0.1961500769511696, 0.32439434550070323, 0.24051957374764565, 0.19124360140442687, 0.21452222010160682, 0.21744263901439675, 0.1796712173416437, 0.19206526116561573, 0.1790725166728091, 0.19277330405094228, 0.17352444712088166, 0.19552327306750572, 0.1800700234877981, 0.1818179179120769, 0.20893036393243514, 0.08456883216347888, 0.08028721641603975, 0.061226692770638524, 0.08380440047964188, 0.05867439155269549, 0.0688869709409693, 0.06244252765569358, 0.060035412747097894, 0.06568282987468332]}, "mutation_prompt": null}
{"id": "fe008932-cefb-4e11-8358-22ef18d0241d", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScalingRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def adaptive_chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            chaotic_factor = np.random.rand(self.dim) * np.abs(candidates[0] - candidates[1])\n            mutant = x + f * chaotic_factor\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScalingRefined", "description": "Utilizing an adaptive chaotic mutation strategy for enhanced exploration and exploitation in the optimization process.", "configspace": "", "generation": 92, "fitness": 0.28096160620350646, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScalingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.28.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9579339511306093, 0.960273737646518, 0.9590384059537795, 0.9494439743816241, 0.9539788753665577, 0.9450573653579453, 0.9559230043196963, 0.9556970896570451, 0.9534867783831641, 0.9081189270851009, 0.9331203139426153, 0.9030837621371759, 0.9278094477588998, 0.9105964661143828, 0.9073720002502159, 0.902450081985678, 0.8670192990782339, 0.9148006557061211, 0.11396507391588495, 0.1180967213829508, 0.14262029246798502, 0.12927056005826543, 0.1272130371560798, 0.09800722115176053, 0.14052993833676686, 0.0985375049118149, 0.18836195489890728, 0.1113194287519722, 0.11187051559754457, 0.11739971217471978, 0.10240226411140774, 0.10751849142089831, 0.09199802503887022, 0.06909975657445833, 0.11811230361308478, 0.09540200358958317, 0.9577580338671171, 0.972066257993997, 0.9868979480465061, 0.9895525661147542, 0.9876615779269037, 0.9769722088464681, 0.9766704169997056, 0.9744929284211485, 0.968694255857452, 0.46371540776594344, 0.24570956403920552, 0.19067916333212143, 0.24242649062918076, 0.21563577916325383, 0.3453183680228973, 0.5438734599209879, 0.25308314695818634, 0.3561461310079057, 0.20597559989122816, 0.2133256436618315, 0.17230324926904217, 0.28281221564421943, 0.2818230323392157, 0.19406472434004562, 0.15309201583368848, 0.1400763944369401, 0.086708627609277, 0.2387295113986454, 0.13666616468679638, 0.16393960988534273, 0.17954095780478563, 0.13515400150438295, 0.1220084780828915, 0.1619639135569696, 0.1855552426195355, 0.180298089924657, 0.2151337255212502, 0.10005564974262926, 0.23264656904643366, 0.164852907954106, 0.18146822115821637, 0.16242828942863707, 0.24427301690921033, 9.999999999998899e-05, 0.18502063806596447, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032837069612765557, 0.004549759258278385, 9.999999999998899e-05, 0.020175521431290866, 9.999999999998899e-05, 9.999999999998899e-05, 0.11750373740619213, 0.07598330524878782, 0.06020254564770733, 0.08715908280713303, 0.07653190627111017, 0.016477967082584866, 0.06937777784503874, 0.11048316543573777, 0.10105994048010358, 0.031183242057564176, 0.0654713347524929, 0.15343531642091912, 0.16881064892916653, 0.14681519434881507, 0.21263246307074224, 0.14579829202845573, 0.24255032545279798, 0.10021058029495289, 0.07862794163209785, 0.13252409639569707, 0.14003175764398534, 0.09949745387419406, 0.22450826097315046, 0.18382363526644063, 0.08089407448672048, 0.14433827017899947, 0.05985650700395673, 0.10858803629013969, 0.6281488007858106, 0.48841993533186756, 0.5027632326308373, 0.5514973034443995, 0.5351684663213925, 0.5354086439150226, 0.5555361338637483, 0.5347430229683061, 0.603079991879995, 0.03922387456650578, 0.0945076819573143, 0.06475382447933864, 0.15716349763471493, 0.13546079612194895, 0.11591043895821518, 0.133497507309423, 0.12009231481715288, 0.1103880907829966, 0.18298159443832784, 0.18007003820823353, 0.2158656493447283, 0.19524217221183404, 0.19595032059221174, 0.29110481650314324, 0.23165740990853934, 0.1681924431204045, 0.16905501532855183, 0.26127425974708895, 0.3740073091567164, 0.2604011368440301, 0.25332059670843465, 0.3077942477701886, 0.3112292261920727, 0.21864361616283545, 0.29459719002086426, 0.23473358135777056, 0.2856213615637596, 0.17120236594640992, 0.14944358318688122, 0.31321464945662336, 0.310246737134785, 0.226650434939217, 0.21727966742329907, 0.23348873518067637, 0.21094388936635622, 0.2746768030308877, 0.23046809100267618, 0.25020643337892756, 0.20729027920960663, 0.21287489418941097, 0.2581395624629327, 0.21330360945262017, 0.23352131449347135, 0.26296465563511784, 0.20011158089408265, 0.1880518748711686, 0.1887311349929932, 0.17758504326241076, 0.188812586800296, 0.19876017321403316, 0.1731014838161995, 0.190803118533864, 0.25067822918140525, 0.20033506477822893, 0.1884333249428073, 0.15457971354959643, 0.17339771697707096, 0.20167705561324434, 0.20112615450716753, 0.1000703848634803, 0.11626009557881611, 0.15396137022740053, 0.10072676690690296, 0.2114087766723466, 0.5553935833916179, 0.21233357406145137, 0.16984880670284097, 0.21141231736354615, 0.21173463984756025, 0.16828958183910037, 0.0944778289853524, 0.19193542558435572, 0.1935733308535721, 0.18839640224393583, 0.18463658594325072, 0.17968244360113128, 0.18922370875487315, 0.17354892408574196, 0.20482286027048446, 0.17752463936483998, 0.10106327573136509, 0.09893845339343965, 0.07315857031681483, 0.08306337100986128, 0.09834253892316969, 0.12755613789125786, 0.08118201179794249, 0.08705946784639451, 0.08129057791682903]}, "mutation_prompt": null}
{"id": "30955fed-0364-4dbc-a36a-19b4f047c2bd", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        def opposition_based_learning(x):\n            return -x\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Improving exploration and exploitation balance by incorporating opposition-based learning for enhanced convergence speed and solution quality.", "configspace": "", "generation": 93, "fitness": 0.29414782507528897, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "32c03ec9-a7f2-481a-87be-56e567c076b4", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration by incorporating Levy flight behavior for improved diversity and global search capability.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "8cd736e0-7040-44a9-a062-dca16e456300", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration by incorporating Levy flight behavior with a dynamic population size and adaptive mutation strategy for improved convergence and search efficiency.", "configspace": "", "generation": 95, "fitness": 0.29414782507528897, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "f360656b-6f24-4379-b619-6abe1ae80b1b", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration by incorporating Levy flight behavior for improved diversity and global search capability.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "c325edb9-0099-4925-b4df-0ea2f8b38bc7", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration by incorporating Levy flight behavior for improved diversity and global search capability.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
{"id": "1bb39bac-69d3-4b4b-bec6-1b2bb6ede397", "solution": "import numpy as np\n\nclass EnhancedRefinedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def adaptive_mutation(x, pbest, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidate = x + f * (pbest - x) + levy_flight(self.dim)\n            return np.clip(candidate, -5.0, 5.0)\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = adaptive_mutation(population[i], pbest[i])\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedRefinedDynamicAdaptiveVelocityScaling", "description": "Enhancing exploration and exploitation by incorporating a dynamic adaptive mutation strategy based on individual performance for improved convergence and efficiency.", "configspace": "", "generation": 98, "fitness": 0.28893572944364515, "feedback": "The algorithm EnhancedRefinedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9443704768116051, 0.9574826800802021, 0.9622308898197355, 0.9529189235368691, 0.9631540553676488, 0.9551883333212744, 0.9579291491813643, 0.9509972018355908, 0.9415351058397343, 0.9257997628974514, 0.914857207499116, 0.9102723331589699, 0.8868960053778357, 0.9158550287508547, 0.8592919144933856, 0.8590104341888584, 0.9044322219497061, 0.9067214809625929, 0.072077004411913, 0.07334175527684605, 0.16034206578229881, 0.08002323532667055, 0.12668657579318388, 0.13686514152329188, 0.09152410832579772, 0.11021374365837633, 0.14875221233967617, 0.11184708612574046, 0.05359900673570861, 0.10006627021730818, 0.10557733669671254, 0.13209011084791744, 0.10286681794740593, 0.1026085766779744, 0.14619108873208553, 0.11804381802190833, 0.9531588464810135, 0.986402731556347, 0.9731456489628344, 0.9676257076607907, 0.9849606517588146, 0.9873211868353909, 0.9611511852438951, 0.9702344979220675, 0.9798232118613875, 0.5306663692978346, 0.26167015313063036, 0.1235163523070727, 0.6352996107077604, 0.22322809843998226, 0.31291606606475564, 0.5498950955374559, 0.2411818298544527, 0.31322285959679486, 0.1454667478268319, 0.17914917621258153, 0.2288456327940951, 0.21607213824995275, 0.2843653820655002, 0.17500829505059168, 0.1764680220715209, 0.23853328470563406, 0.19839209955449222, 0.13871989118609873, 0.17411577307397896, 0.22071093185232216, 0.0015066787204239818, 0.162795708160124, 0.20611370951650687, 0.17163968715643974, 0.4858080162329068, 0.1679623741535755, 0.13369736766735607, 0.1464514720645328, 0.128516119618166, 0.16629962913403962, 0.1634358599684077, 0.14429769038117302, 0.21006614445490945, 9.999999999998899e-05, 0.11593175058557481, 9.999999999998899e-05, 0.0003031855436081976, 9.999999999998899e-05, 0.02726622587900618, 9.999999999998899e-05, 9.999999999998899e-05, 0.08445645913339472, 9.999999999998899e-05, 0.002423458586677807, 0.13353083632399665, 0.06686731214984831, 0.05140072486723113, 0.07791591099154682, 0.022654937825160926, 0.028104496675888324, 0.1931768156707674, 0.11983551151292215, 0.09196820760136992, 0.1196595576592655, 0.08441859787290518, 0.2991711339745049, 0.1407978509308515, 0.259038049844855, 0.10522791935703768, 0.21531825960654027, 0.2233458811317648, 0.22157268960766696, 0.1855130271056027, 0.11331993436329213, 0.2381944244934222, 0.145312317683561, 0.07556178809711678, 0.020825848484686715, 0.41035278127020414, 0.22171293051261387, 0.0955208148298099, 0.525865695757342, 0.5265350158147041, 0.48032452366582934, 0.6025178792862971, 0.5106957458455197, 0.5428679876120954, 0.49516651985879356, 0.5402889746399827, 0.5634087672315976, 0.08831525415021169, 0.15676072607161018, 0.1616201390757529, 0.08214808786805183, 0.10309945893495476, 0.11874478383764475, 0.15950450378151604, 0.14460499831986962, 0.1294855339073665, 0.32287708017542127, 0.1634130083052533, 0.17875727352857862, 0.18321255879695986, 0.16202306096981534, 0.24486402938872232, 0.2512311969915866, 0.1829737905190073, 0.20362771626605414, 0.2674211080060902, 0.36656218362807735, 0.3751853140288738, 0.21781618448672735, 0.22708349693098373, 0.2942130225774756, 0.28080823101335517, 0.45597540949314364, 0.18237287350925113, 0.212815541087222, 0.21338431142814085, 0.15530037329521096, 0.2334392612188526, 0.177211552954607, 0.2653477122052502, 0.21947615166066048, 0.23815470904549407, 0.09275606701430317, 0.23794123911071396, 0.23609863516203644, 0.24507607504250162, 0.24697396469843513, 0.2601859325081656, 0.20936786156277343, 0.22342458207483962, 0.1860947371351045, 0.21052726354131945, 0.19068870005050786, 0.20793887922156085, 0.21076558083503916, 0.1988129026918496, 0.25329381108178206, 0.22619104148280544, 0.20516246476948863, 0.18346599998051583, 0.2191035538503998, 0.18847574379205867, 0.16721966898303597, 0.17715799499772034, 0.8182260316929015, 0.2020225799727413, 0.20142898188668235, 0.12293182067870478, 0.17064650351607746, 0.1633929460147041, 0.11295286212488431, 0.2127029093189321, 0.08318673839383284, 0.3068492483973858, 0.21070032581016762, 0.2118139389476973, 0.10512834113338809, 0.5926947819633955, 0.15730855393932974, 0.18842224566464827, 0.1805531033586354, 0.19909616595696156, 0.17768726625377274, 0.17643756589948623, 0.1830340772700465, 0.18226668842503557, 0.18330432633922833, 0.1879268288679039, 0.09493421127729362, 0.09234475048191704, 0.08770221041859882, 0.08834883076526745, 0.10238998245639142, 0.11595974705608691, 0.09652359897542084, 0.08395497935338803, 0.08020323568179044]}, "mutation_prompt": null}
{"id": "d6f9b703-042a-40de-b408-bdb43ae359f1", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveVelocityScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def chaotic_mutation(x, pop, f_min=0.4, f_max=0.9):\n            f = f_min + 0.5 * (f_max - f_min) * (1 - np.cos(x))\n            candidates = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = x + f * (candidates[0] - x) + f * (candidates[1] - candidates[2]) + levy_flight(self.dim)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def opposition_based_learning(x):\n            return -x\n\n        def crowding_selection(pop, scores):\n            sorted_indices = np.argsort(scores)\n            crowding_distance = np.zeros(len(pop))\n            for i in range(self.dim):\n                crowding_distance[sorted_indices[0]] = crowding_distance[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distance[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return pop[sorted_indices[np.argmax(crowding_distance)]]\n\n        def dynamic_adaptive_velocity_scaling(x, pbest, gbest, velocity, w_min=0.4, w_max=0.9, c_min=1.0, c_max=2.0):\n            w = w_min + np.random.rand() * (w_max - w_min)\n            c1 = c_min + np.random.rand() * (c_max - c_min)\n            c2 = c_min + np.random.rand() * (c_max - c_min)\n            scaling_factor = np.random.rand() * 2  # Dynamic scaling factor\n            new_velocity = scaling_factor * (w * velocity \\\n                       + c1 * np.random.rand(self.dim) * (pbest - x) \\\n                       + c2 * np.random.rand(self.dim) * (gbest - x))\n            x_new = np.clip(x + new_velocity, -5.0, 5.0)\n            return x_new, new_velocity\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        gbest_fitness = func(gbest)\n        initial_velocity = np.zeros(self.dim)\n\n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                mutant = chaotic_mutation(population[i], population)\n                trial, new_velocity = dynamic_adaptive_velocity_scaling(population[i], pbest[i], gbest, initial_velocity)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n            gbest = crowding_selection(population, fitness)\n            gbest_fitness = func(gbest)\n\n        return gbest", "name": "EnhancedDynamicAdaptiveVelocityScaling", "description": "Introducing opposition-based learning for enhanced exploration and exploitation in the algorithm.", "configspace": "", "generation": 99, "fitness": 0.29414782507528897, "feedback": "The algorithm EnhancedDynamicAdaptiveVelocityScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "7772e5ae-54b3-420b-9902-d95e12a5bf3a", "metadata": {"aucs": [0.9490454971937528, 0.9550297274043203, 0.9586641701288987, 0.9450752064787092, 0.9600064815387458, 0.9498539090396764, 0.9570987427867761, 0.9612911988514111, 0.9315347715592843, 0.8952977170803096, 0.8866695295727011, 0.928739757673973, 0.8641694432580413, 0.9071699087054343, 0.9186931066190953, 0.8772693193104957, 0.9156575336718158, 0.8934181827839223, 0.15562474063428855, 0.14837724463065283, 0.1717994620398804, 0.127294904831725, 0.1668609817449198, 0.09850544241072479, 0.09673184769343302, 0.1765211650437727, 0.15781233225156377, 0.06476222338853166, 0.08378586337666749, 0.071043948068084, 0.0988020031238388, 0.13806713575043306, 0.09109385335932985, 0.08567133716167408, 0.06448630154010426, 0.06694797515449968, 0.9872234343264258, 0.9717051143573207, 0.9559838876168957, 0.9534015841463477, 0.9864519375971008, 0.97677373689391, 0.9807145281949026, 0.9739383996080749, 0.9801370482070293, 0.522515984626331, 0.341397469916372, 0.4148122042878325, 0.5221744436688359, 0.38237210611170647, 0.514797932987837, 0.3266148080898701, 0.31307481737263154, 0.6098538945082718, 0.20747791060600385, 0.21164370058771187, 0.1130912383582019, 0.20490011347921777, 0.30343144102125963, 0.3684973526212737, 0.15043212171539233, 0.24034924057265994, 0.19382320940032682, 0.1648375965141069, 0.17592617163341018, 0.18739824642720282, 0.2083075109195367, 0.3161673865823639, 0.2428699860174658, 0.17142373609995143, 0.15276707757445496, 0.2998385609679419, 0.24856983405806454, 0.14259458461601393, 0.13647431145623468, 0.1676576307257539, 0.020432942217719186, 0.17286044320928218, 0.2115548253569559, 9.999999999998899e-05, 0.12681910204538926, 9.999999999998899e-05, 0.038850970203472945, 0.0047617274281608335, 0.031102475856047196, 0.01385866012215975, 0.07919803712831419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00622452553780517, 0.07167035161555435, 0.05449559265636694, 0.14928819372137436, 0.08635886313941121, 0.01837384133211195, 0.019554533488338355, 0.06939187024174875, 0.0711210262456119, 0.04463402136852879, 0.07445475053031314, 0.24440719382011689, 0.22539335691672258, 0.19040271363307182, 0.2966050468598457, 0.08625023947272514, 0.1376842840868685, 0.16295672986469523, 0.0817200451094805, 0.13245778952487086, 0.1582052595667296, 0.16331840990459479, 0.18416067523099855, 0.10623765204501212, 0.008901684671054344, 0.16765393350452684, 0.08723963497863241, 0.10257710933792064, 0.5020699786531382, 0.538432012089266, 0.521151271492018, 0.5210291116200519, 0.5621021753422454, 0.5066064610417076, 0.5259482577299013, 0.5589280841891213, 0.5703240136943495, 0.12142685041249046, 0.11105900804636892, 0.06963671377744085, 0.14868186535718309, 0.08604071438863503, 0.0950187137801558, 0.18358961137589214, 0.13612588422977145, 0.10255661653386616, 0.18208930792452693, 0.22524394549274807, 0.19086628504134695, 0.1476242149396425, 0.20167700748881057, 0.1958645708092327, 0.2214445792533234, 0.17057289248750074, 0.15762302504135273, 0.2523747967775659, 0.309503442474111, 0.17215957978313312, 0.29958156852948015, 0.24847815151950003, 0.31171450920221, 0.17714277262190115, 0.4155891794978772, 0.18477640856361255, 0.20396078577334098, 0.233250814683868, 0.14611767382261498, 0.23034397020226893, 0.20027414795880927, 0.29057538617347556, 0.21924602689334605, 0.2665667794861831, 0.2259785423430155, 0.20230371744585463, 0.2008553457210388, 0.20639767185762192, 0.21955305057183483, 0.1823646510944461, 0.22757332075005465, 0.22335992014920492, 0.20447779640060226, 0.21385660752919744, 0.18186589528774388, 0.2111612030843707, 0.17541866439851073, 0.21401840411685447, 0.2521445133006436, 0.177063855428105, 0.19021126393940269, 0.804677694845799, 0.1687928039813147, 0.9301295006207781, 0.18861359404752565, 0.153922760408141, 0.17318039726454793, 0.20193749547348583, 0.9549908002999505, 0.10004872716166757, 0.17032763877492307, 0.16622555706029307, 0.08335420113455261, 0.21185457031657295, 0.27967787863328897, 0.16525966603374587, 0.16890986976539646, 0.20681604262974462, 0.10539367203125893, 0.104900990014417, 0.39656830377580043, 0.20809757204166268, 0.19005768986772598, 0.21994007206185862, 0.18508220042361423, 0.19934404249406956, 0.1972337117067383, 0.18134109115531927, 0.19889709375587605, 0.20586430124666044, 0.0925868484743616, 0.08820890256504643, 0.10266859171640685, 0.0917902016038894, 0.09184686424447319, 0.09607657855723095, 0.11278612551775291, 0.08065890679027266, 0.0909998958461099]}, "mutation_prompt": null}
