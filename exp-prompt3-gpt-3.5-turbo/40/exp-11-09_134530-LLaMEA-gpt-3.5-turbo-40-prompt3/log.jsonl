{"id": "1781961b-f0dd-4389-8b43-1992ff58733e", "solution": "import numpy as np\n\nclass FireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "FireflyLevyAlgorithm", "description": "A novel metaheuristic algorithm based on Firefly Algorithm with Levy flights for global optimization in continuous search spaces.", "configspace": "", "generation": 0, "fitness": 0.16933734974221878, "feedback": "The algorithm FireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3921009931035636, 0.3677446519475174, 0.38473478262747485, 0.3869994294221143, 0.376290287589376, 0.36523355971301386, 0.38304483348218765, 0.3828166840790731, 0.34373188271515476, 0.007613051731172327, 0.015975309534305038, 0.00084377587162765, 9.999999999998899e-05, 0.003887381947773272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09377468553276647, 0.09806669731723283, 0.10750658075110364, 0.09930943670343151, 0.11004246648391003, 0.10753459994433912, 0.0995378685932028, 0.10298441533987301, 0.08462222585002332, 0.0809669181116256, 0.0797032224192844, 0.08426497286936263, 0.07945658748825113, 0.07691752440181265, 0.08063027163951353, 0.08081218213521679, 0.08910419726856855, 0.08909489698919282, 0.329448808150996, 0.33120232558437956, 0.48342594962718544, 0.43401680207110294, 0.5455795098668063, 0.360514624824011, 0.6440148898630644, 0.5348003009264388, 0.5728025109015351, 0.1849549331705871, 0.16453048435480233, 0.14304966736357494, 0.18742792759867521, 0.20738125188800605, 0.18977030555028718, 0.21404617830955308, 0.1574053706104731, 0.18720459802945222, 0.21914336672545776, 0.24573411536099077, 0.16994658908711446, 0.2540840806302763, 0.24869772404298052, 0.24186687829980846, 0.21074064243291657, 0.2629620407519303, 0.2622511510619685, 0.12981842279558242, 0.13134452304808497, 0.13639715603674818, 0.1103592171050457, 0.1612044054238675, 0.10702695807776452, 0.1385107208213402, 0.12974202862122453, 0.1316816374631795, 0.13040135091443295, 0.13186185293335262, 0.12175362822774938, 0.1322736978341169, 0.1737808404148542, 0.13352102579216607, 0.1334489605611925, 0.1563955194736869, 0.12834064616408125, 9.999999999998899e-05, 0.00149368194407562, 9.999999999998899e-05, 0.01908269346116287, 9.999999999998899e-05, 0.0012703183987007316, 9.999999999998899e-05, 0.0030440545907957084, 0.005106552199422021, 0.15431395337982845, 0.07977403129082361, 0.14411336438541855, 0.050255755240309896, 0.03370741180168513, 0.055876665362794675, 0.08575858391418245, 0.11552818809990861, 0.1243987246865974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06997620469205323, 0.0692493489911643, 0.07390163458151988, 0.06199191115293523, 0.07868378104804685, 0.06991762538792567, 0.06718696677860114, 0.0557397434040775, 0.06256096188486049, 0.3584141906667905, 0.3834091114605811, 0.34888511470639694, 0.33380949204030863, 0.3395815510482706, 0.33657879022020354, 0.35079410364496233, 0.3415290474536289, 0.35904013283825065, 0.08972135804813919, 0.08871738247410033, 0.08458146818354129, 0.1023911674836041, 0.09653477911928132, 0.10088512954427609, 0.09999669978561265, 0.11038970767335254, 0.09721930704290771, 0.18445156017132036, 0.16944325730713883, 0.17517264593366544, 0.16147073406928358, 0.17176369916152867, 0.1895204892990885, 0.17581068930573895, 0.18856993009669132, 0.17097040192800506, 0.23496496775059372, 0.22351891209917008, 0.25508448365763015, 0.2616091777400881, 0.2622193827099758, 0.2808937784139003, 0.23621765866751743, 0.2584256011767684, 0.2323854641091856, 0.17068141536795178, 0.19142287188901297, 0.20034640969384576, 0.20358046837146593, 0.20143583564246192, 0.2012619343057237, 0.18052233763080494, 0.18845630595999552, 0.18163618527484005, 0.22036607456146584, 0.25896557367912454, 0.2299529278889988, 0.20772537003344682, 0.21737255256924204, 0.2371514662879951, 0.22403409831921295, 0.22750606305200904, 0.25093272456209215, 0.18357992905061649, 0.16622249414762102, 0.1668893350421684, 0.18638240986189536, 0.17676810395949383, 0.17941783567807978, 0.16277976915848336, 0.17155202360780908, 0.16892112320244324, 0.18328196225268867, 0.18495204734273352, 0.17911061783751536, 0.38825515969850344, 0.13296285631847748, 0.2023152206326302, 0.15567264305259831, 0.12404159583994856, 0.16442059425442623, 0.36128122885857017, 0.34920988823120724, 0.29693928653353685, 0.20026629185357392, 0.13212145593061086, 0.14686749375961483, 0.21230942916125894, 0.3244045030582513, 0.23476646396040746, 0.19916225985803893, 0.1775047432171909, 0.20440963381295085, 0.1943094960776841, 0.18179070562950006, 0.18716990030086222, 0.1845540309667264, 0.18366357478925732, 0.1822990467552874, 0.07528559286229353, 0.08390487080858589, 0.08585645848406276, 0.08168989730380904, 0.09188333748771749, 0.0764280655345585, 0.08349753110530234, 0.08742204847986246, 0.08707845736641806]}, "mutation_prompt": null}
{"id": "3e9a9b6c-e3cb-4165-947f-fc442eee900e", "solution": "import numpy as np\n\nclass FireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "FireflyLevyAlgorithm", "description": "A novel metaheuristic algorithm based on Firefly Algorithm with Levy flights for global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1781961b-f0dd-4389-8b43-1992ff58733e", "metadata": {"aucs": [0.3921009931035636, 0.3677446519475174, 0.38473478262747485, 0.3869994294221143, 0.376290287589376, 0.36523355971301386, 0.38304483348218765, 0.3828166840790731, 0.34373188271515476, 0.007613051731172327, 0.015975309534305038, 0.00084377587162765, 9.999999999998899e-05, 0.003887381947773272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09377468553276647, 0.09806669731723283, 0.10750658075110364, 0.09930943670343151, 0.11004246648391003, 0.10753459994433912, 0.0995378685932028, 0.10298441533987301, 0.08462222585002332, 0.0809669181116256, 0.0797032224192844, 0.08426497286936263, 0.07945658748825113, 0.07691752440181265, 0.08063027163951353, 0.08081218213521679, 0.08910419726856855, 0.08909489698919282, 0.329448808150996, 0.33120232558437956, 0.48342594962718544, 0.43401680207110294, 0.5455795098668063, 0.360514624824011, 0.6440148898630644, 0.5348003009264388, 0.5728025109015351, 0.1849549331705871, 0.16453048435480233, 0.14304966736357494, 0.18742792759867521, 0.20738125188800605, 0.18977030555028718, 0.21404617830955308, 0.1574053706104731, 0.18720459802945222, 0.21914336672545776, 0.24573411536099077, 0.16994658908711446, 0.2540840806302763, 0.24869772404298052, 0.24186687829980846, 0.21074064243291657, 0.2629620407519303, 0.2622511510619685, 0.12981842279558242, 0.13134452304808497, 0.13639715603674818, 0.1103592171050457, 0.1612044054238675, 0.10702695807776452, 0.1385107208213402, 0.12974202862122453, 0.1316816374631795, 0.13040135091443295, 0.13186185293335262, 0.12175362822774938, 0.1322736978341169, 0.1737808404148542, 0.13352102579216607, 0.1334489605611925, 0.1563955194736869, 0.12834064616408125, 9.999999999998899e-05, 0.00149368194407562, 9.999999999998899e-05, 0.01908269346116287, 9.999999999998899e-05, 0.0012703183987007316, 9.999999999998899e-05, 0.0030440545907957084, 0.005106552199422021, 0.15431395337982845, 0.07977403129082361, 0.14411336438541855, 0.050255755240309896, 0.03370741180168513, 0.055876665362794675, 0.08575858391418245, 0.11552818809990861, 0.1243987246865974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06997620469205323, 0.0692493489911643, 0.07390163458151988, 0.06199191115293523, 0.07868378104804685, 0.06991762538792567, 0.06718696677860114, 0.0557397434040775, 0.06256096188486049, 0.3584141906667905, 0.3834091114605811, 0.34888511470639694, 0.33380949204030863, 0.3395815510482706, 0.33657879022020354, 0.35079410364496233, 0.3415290474536289, 0.35904013283825065, 0.08972135804813919, 0.08871738247410033, 0.08458146818354129, 0.1023911674836041, 0.09653477911928132, 0.10088512954427609, 0.09999669978561265, 0.11038970767335254, 0.09721930704290771, 0.18445156017132036, 0.16944325730713883, 0.17517264593366544, 0.16147073406928358, 0.17176369916152867, 0.1895204892990885, 0.17581068930573895, 0.18856993009669132, 0.17097040192800506, 0.23496496775059372, 0.22351891209917008, 0.25508448365763015, 0.2616091777400881, 0.2622193827099758, 0.2808937784139003, 0.23621765866751743, 0.2584256011767684, 0.2323854641091856, 0.17068141536795178, 0.19142287188901297, 0.20034640969384576, 0.20358046837146593, 0.20143583564246192, 0.2012619343057237, 0.18052233763080494, 0.18845630595999552, 0.18163618527484005, 0.22036607456146584, 0.25896557367912454, 0.2299529278889988, 0.20772537003344682, 0.21737255256924204, 0.2371514662879951, 0.22403409831921295, 0.22750606305200904, 0.25093272456209215, 0.18357992905061649, 0.16622249414762102, 0.1668893350421684, 0.18638240986189536, 0.17676810395949383, 0.17941783567807978, 0.16277976915848336, 0.17155202360780908, 0.16892112320244324, 0.18328196225268867, 0.18495204734273352, 0.17911061783751536, 0.38825515969850344, 0.13296285631847748, 0.2023152206326302, 0.15567264305259831, 0.12404159583994856, 0.16442059425442623, 0.36128122885857017, 0.34920988823120724, 0.29693928653353685, 0.20026629185357392, 0.13212145593061086, 0.14686749375961483, 0.21230942916125894, 0.3244045030582513, 0.23476646396040746, 0.19916225985803893, 0.1775047432171909, 0.20440963381295085, 0.1943094960776841, 0.18179070562950006, 0.18716990030086222, 0.1845540309667264, 0.18366357478925732, 0.1822990467552874, 0.07528559286229353, 0.08390487080858589, 0.08585645848406276, 0.08168989730380904, 0.09188333748771749, 0.0764280655345585, 0.08349753110530234, 0.08742204847986246, 0.08707845736641806]}, "mutation_prompt": null}
{"id": "b007bd20-d02b-42b1-be56-94839db90b23", "solution": "import numpy as np\n\nclass FireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "FireflyLevyAlgorithm", "description": "A novel metaheuristic algorithm based on Firefly Algorithm with Levy flights for global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1781961b-f0dd-4389-8b43-1992ff58733e", "metadata": {"aucs": [0.3921009931035636, 0.3677446519475174, 0.38473478262747485, 0.3869994294221143, 0.376290287589376, 0.36523355971301386, 0.38304483348218765, 0.3828166840790731, 0.34373188271515476, 0.007613051731172327, 0.015975309534305038, 0.00084377587162765, 9.999999999998899e-05, 0.003887381947773272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09377468553276647, 0.09806669731723283, 0.10750658075110364, 0.09930943670343151, 0.11004246648391003, 0.10753459994433912, 0.0995378685932028, 0.10298441533987301, 0.08462222585002332, 0.0809669181116256, 0.0797032224192844, 0.08426497286936263, 0.07945658748825113, 0.07691752440181265, 0.08063027163951353, 0.08081218213521679, 0.08910419726856855, 0.08909489698919282, 0.329448808150996, 0.33120232558437956, 0.48342594962718544, 0.43401680207110294, 0.5455795098668063, 0.360514624824011, 0.6440148898630644, 0.5348003009264388, 0.5728025109015351, 0.1849549331705871, 0.16453048435480233, 0.14304966736357494, 0.18742792759867521, 0.20738125188800605, 0.18977030555028718, 0.21404617830955308, 0.1574053706104731, 0.18720459802945222, 0.21914336672545776, 0.24573411536099077, 0.16994658908711446, 0.2540840806302763, 0.24869772404298052, 0.24186687829980846, 0.21074064243291657, 0.2629620407519303, 0.2622511510619685, 0.12981842279558242, 0.13134452304808497, 0.13639715603674818, 0.1103592171050457, 0.1612044054238675, 0.10702695807776452, 0.1385107208213402, 0.12974202862122453, 0.1316816374631795, 0.13040135091443295, 0.13186185293335262, 0.12175362822774938, 0.1322736978341169, 0.1737808404148542, 0.13352102579216607, 0.1334489605611925, 0.1563955194736869, 0.12834064616408125, 9.999999999998899e-05, 0.00149368194407562, 9.999999999998899e-05, 0.01908269346116287, 9.999999999998899e-05, 0.0012703183987007316, 9.999999999998899e-05, 0.0030440545907957084, 0.005106552199422021, 0.15431395337982845, 0.07977403129082361, 0.14411336438541855, 0.050255755240309896, 0.03370741180168513, 0.055876665362794675, 0.08575858391418245, 0.11552818809990861, 0.1243987246865974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06997620469205323, 0.0692493489911643, 0.07390163458151988, 0.06199191115293523, 0.07868378104804685, 0.06991762538792567, 0.06718696677860114, 0.0557397434040775, 0.06256096188486049, 0.3584141906667905, 0.3834091114605811, 0.34888511470639694, 0.33380949204030863, 0.3395815510482706, 0.33657879022020354, 0.35079410364496233, 0.3415290474536289, 0.35904013283825065, 0.08972135804813919, 0.08871738247410033, 0.08458146818354129, 0.1023911674836041, 0.09653477911928132, 0.10088512954427609, 0.09999669978561265, 0.11038970767335254, 0.09721930704290771, 0.18445156017132036, 0.16944325730713883, 0.17517264593366544, 0.16147073406928358, 0.17176369916152867, 0.1895204892990885, 0.17581068930573895, 0.18856993009669132, 0.17097040192800506, 0.23496496775059372, 0.22351891209917008, 0.25508448365763015, 0.2616091777400881, 0.2622193827099758, 0.2808937784139003, 0.23621765866751743, 0.2584256011767684, 0.2323854641091856, 0.17068141536795178, 0.19142287188901297, 0.20034640969384576, 0.20358046837146593, 0.20143583564246192, 0.2012619343057237, 0.18052233763080494, 0.18845630595999552, 0.18163618527484005, 0.22036607456146584, 0.25896557367912454, 0.2299529278889988, 0.20772537003344682, 0.21737255256924204, 0.2371514662879951, 0.22403409831921295, 0.22750606305200904, 0.25093272456209215, 0.18357992905061649, 0.16622249414762102, 0.1668893350421684, 0.18638240986189536, 0.17676810395949383, 0.17941783567807978, 0.16277976915848336, 0.17155202360780908, 0.16892112320244324, 0.18328196225268867, 0.18495204734273352, 0.17911061783751536, 0.38825515969850344, 0.13296285631847748, 0.2023152206326302, 0.15567264305259831, 0.12404159583994856, 0.16442059425442623, 0.36128122885857017, 0.34920988823120724, 0.29693928653353685, 0.20026629185357392, 0.13212145593061086, 0.14686749375961483, 0.21230942916125894, 0.3244045030582513, 0.23476646396040746, 0.19916225985803893, 0.1775047432171909, 0.20440963381295085, 0.1943094960776841, 0.18179070562950006, 0.18716990030086222, 0.1845540309667264, 0.18366357478925732, 0.1822990467552874, 0.07528559286229353, 0.08390487080858589, 0.08585645848406276, 0.08168989730380904, 0.09188333748771749, 0.0764280655345585, 0.08349753110530234, 0.08742204847986246, 0.08707845736641806]}, "mutation_prompt": null}
{"id": "65d7a053-2773-4f5f-b031-98f749cc9f64", "solution": "import numpy as np\n\nclass FireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "FireflyLevyAlgorithm", "description": "A novel metaheuristic algorithm based on Firefly Algorithm with Levy flights for global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1781961b-f0dd-4389-8b43-1992ff58733e", "metadata": {"aucs": [0.3921009931035636, 0.3677446519475174, 0.38473478262747485, 0.3869994294221143, 0.376290287589376, 0.36523355971301386, 0.38304483348218765, 0.3828166840790731, 0.34373188271515476, 0.007613051731172327, 0.015975309534305038, 0.00084377587162765, 9.999999999998899e-05, 0.003887381947773272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09377468553276647, 0.09806669731723283, 0.10750658075110364, 0.09930943670343151, 0.11004246648391003, 0.10753459994433912, 0.0995378685932028, 0.10298441533987301, 0.08462222585002332, 0.0809669181116256, 0.0797032224192844, 0.08426497286936263, 0.07945658748825113, 0.07691752440181265, 0.08063027163951353, 0.08081218213521679, 0.08910419726856855, 0.08909489698919282, 0.329448808150996, 0.33120232558437956, 0.48342594962718544, 0.43401680207110294, 0.5455795098668063, 0.360514624824011, 0.6440148898630644, 0.5348003009264388, 0.5728025109015351, 0.1849549331705871, 0.16453048435480233, 0.14304966736357494, 0.18742792759867521, 0.20738125188800605, 0.18977030555028718, 0.21404617830955308, 0.1574053706104731, 0.18720459802945222, 0.21914336672545776, 0.24573411536099077, 0.16994658908711446, 0.2540840806302763, 0.24869772404298052, 0.24186687829980846, 0.21074064243291657, 0.2629620407519303, 0.2622511510619685, 0.12981842279558242, 0.13134452304808497, 0.13639715603674818, 0.1103592171050457, 0.1612044054238675, 0.10702695807776452, 0.1385107208213402, 0.12974202862122453, 0.1316816374631795, 0.13040135091443295, 0.13186185293335262, 0.12175362822774938, 0.1322736978341169, 0.1737808404148542, 0.13352102579216607, 0.1334489605611925, 0.1563955194736869, 0.12834064616408125, 9.999999999998899e-05, 0.00149368194407562, 9.999999999998899e-05, 0.01908269346116287, 9.999999999998899e-05, 0.0012703183987007316, 9.999999999998899e-05, 0.0030440545907957084, 0.005106552199422021, 0.15431395337982845, 0.07977403129082361, 0.14411336438541855, 0.050255755240309896, 0.03370741180168513, 0.055876665362794675, 0.08575858391418245, 0.11552818809990861, 0.1243987246865974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06997620469205323, 0.0692493489911643, 0.07390163458151988, 0.06199191115293523, 0.07868378104804685, 0.06991762538792567, 0.06718696677860114, 0.0557397434040775, 0.06256096188486049, 0.3584141906667905, 0.3834091114605811, 0.34888511470639694, 0.33380949204030863, 0.3395815510482706, 0.33657879022020354, 0.35079410364496233, 0.3415290474536289, 0.35904013283825065, 0.08972135804813919, 0.08871738247410033, 0.08458146818354129, 0.1023911674836041, 0.09653477911928132, 0.10088512954427609, 0.09999669978561265, 0.11038970767335254, 0.09721930704290771, 0.18445156017132036, 0.16944325730713883, 0.17517264593366544, 0.16147073406928358, 0.17176369916152867, 0.1895204892990885, 0.17581068930573895, 0.18856993009669132, 0.17097040192800506, 0.23496496775059372, 0.22351891209917008, 0.25508448365763015, 0.2616091777400881, 0.2622193827099758, 0.2808937784139003, 0.23621765866751743, 0.2584256011767684, 0.2323854641091856, 0.17068141536795178, 0.19142287188901297, 0.20034640969384576, 0.20358046837146593, 0.20143583564246192, 0.2012619343057237, 0.18052233763080494, 0.18845630595999552, 0.18163618527484005, 0.22036607456146584, 0.25896557367912454, 0.2299529278889988, 0.20772537003344682, 0.21737255256924204, 0.2371514662879951, 0.22403409831921295, 0.22750606305200904, 0.25093272456209215, 0.18357992905061649, 0.16622249414762102, 0.1668893350421684, 0.18638240986189536, 0.17676810395949383, 0.17941783567807978, 0.16277976915848336, 0.17155202360780908, 0.16892112320244324, 0.18328196225268867, 0.18495204734273352, 0.17911061783751536, 0.38825515969850344, 0.13296285631847748, 0.2023152206326302, 0.15567264305259831, 0.12404159583994856, 0.16442059425442623, 0.36128122885857017, 0.34920988823120724, 0.29693928653353685, 0.20026629185357392, 0.13212145593061086, 0.14686749375961483, 0.21230942916125894, 0.3244045030582513, 0.23476646396040746, 0.19916225985803893, 0.1775047432171909, 0.20440963381295085, 0.1943094960776841, 0.18179070562950006, 0.18716990030086222, 0.1845540309667264, 0.18366357478925732, 0.1822990467552874, 0.07528559286229353, 0.08390487080858589, 0.08585645848406276, 0.08168989730380904, 0.09188333748771749, 0.0764280655345585, 0.08349753110530234, 0.08742204847986246, 0.08707845736641806]}, "mutation_prompt": null}
{"id": "f40a0d5c-1eca-4f3d-a22b-32eba4d8ca72", "solution": "import numpy as np\n\nclass ImprovedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n        self.min_population = 10\n        self.max_population = 100\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n            \n            diversity = np.mean(np.std(population, axis=0))\n            if diversity < 0.1 and self.population_size > self.min_population:\n                self.population_size = int(0.9 * self.population_size)\n            elif diversity > 0.5 and self.population_size < self.max_population:\n                self.population_size = int(1.1 * self.population_size)\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedFireflyLevyAlgorithm", "description": "Improving the FireflyLevyAlgorithm by incorporating a dynamic population size adaptation mechanism based on fitness diversity.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1781961b-f0dd-4389-8b43-1992ff58733e", "metadata": {}, "mutation_prompt": null}
{"id": "ac187564-92c3-4894-8d89-213a377047f8", "solution": "import numpy as np\n\nclass FireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "FireflyLevyAlgorithm", "description": "A novel metaheuristic algorithm based on Firefly Algorithm with Levy flights for global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1781961b-f0dd-4389-8b43-1992ff58733e", "metadata": {"aucs": [0.3921009931035636, 0.3677446519475174, 0.38473478262747485, 0.3869994294221143, 0.376290287589376, 0.36523355971301386, 0.38304483348218765, 0.3828166840790731, 0.34373188271515476, 0.007613051731172327, 0.015975309534305038, 0.00084377587162765, 9.999999999998899e-05, 0.003887381947773272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09377468553276647, 0.09806669731723283, 0.10750658075110364, 0.09930943670343151, 0.11004246648391003, 0.10753459994433912, 0.0995378685932028, 0.10298441533987301, 0.08462222585002332, 0.0809669181116256, 0.0797032224192844, 0.08426497286936263, 0.07945658748825113, 0.07691752440181265, 0.08063027163951353, 0.08081218213521679, 0.08910419726856855, 0.08909489698919282, 0.329448808150996, 0.33120232558437956, 0.48342594962718544, 0.43401680207110294, 0.5455795098668063, 0.360514624824011, 0.6440148898630644, 0.5348003009264388, 0.5728025109015351, 0.1849549331705871, 0.16453048435480233, 0.14304966736357494, 0.18742792759867521, 0.20738125188800605, 0.18977030555028718, 0.21404617830955308, 0.1574053706104731, 0.18720459802945222, 0.21914336672545776, 0.24573411536099077, 0.16994658908711446, 0.2540840806302763, 0.24869772404298052, 0.24186687829980846, 0.21074064243291657, 0.2629620407519303, 0.2622511510619685, 0.12981842279558242, 0.13134452304808497, 0.13639715603674818, 0.1103592171050457, 0.1612044054238675, 0.10702695807776452, 0.1385107208213402, 0.12974202862122453, 0.1316816374631795, 0.13040135091443295, 0.13186185293335262, 0.12175362822774938, 0.1322736978341169, 0.1737808404148542, 0.13352102579216607, 0.1334489605611925, 0.1563955194736869, 0.12834064616408125, 9.999999999998899e-05, 0.00149368194407562, 9.999999999998899e-05, 0.01908269346116287, 9.999999999998899e-05, 0.0012703183987007316, 9.999999999998899e-05, 0.0030440545907957084, 0.005106552199422021, 0.15431395337982845, 0.07977403129082361, 0.14411336438541855, 0.050255755240309896, 0.03370741180168513, 0.055876665362794675, 0.08575858391418245, 0.11552818809990861, 0.1243987246865974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06997620469205323, 0.0692493489911643, 0.07390163458151988, 0.06199191115293523, 0.07868378104804685, 0.06991762538792567, 0.06718696677860114, 0.0557397434040775, 0.06256096188486049, 0.3584141906667905, 0.3834091114605811, 0.34888511470639694, 0.33380949204030863, 0.3395815510482706, 0.33657879022020354, 0.35079410364496233, 0.3415290474536289, 0.35904013283825065, 0.08972135804813919, 0.08871738247410033, 0.08458146818354129, 0.1023911674836041, 0.09653477911928132, 0.10088512954427609, 0.09999669978561265, 0.11038970767335254, 0.09721930704290771, 0.18445156017132036, 0.16944325730713883, 0.17517264593366544, 0.16147073406928358, 0.17176369916152867, 0.1895204892990885, 0.17581068930573895, 0.18856993009669132, 0.17097040192800506, 0.23496496775059372, 0.22351891209917008, 0.25508448365763015, 0.2616091777400881, 0.2622193827099758, 0.2808937784139003, 0.23621765866751743, 0.2584256011767684, 0.2323854641091856, 0.17068141536795178, 0.19142287188901297, 0.20034640969384576, 0.20358046837146593, 0.20143583564246192, 0.2012619343057237, 0.18052233763080494, 0.18845630595999552, 0.18163618527484005, 0.22036607456146584, 0.25896557367912454, 0.2299529278889988, 0.20772537003344682, 0.21737255256924204, 0.2371514662879951, 0.22403409831921295, 0.22750606305200904, 0.25093272456209215, 0.18357992905061649, 0.16622249414762102, 0.1668893350421684, 0.18638240986189536, 0.17676810395949383, 0.17941783567807978, 0.16277976915848336, 0.17155202360780908, 0.16892112320244324, 0.18328196225268867, 0.18495204734273352, 0.17911061783751536, 0.38825515969850344, 0.13296285631847748, 0.2023152206326302, 0.15567264305259831, 0.12404159583994856, 0.16442059425442623, 0.36128122885857017, 0.34920988823120724, 0.29693928653353685, 0.20026629185357392, 0.13212145593061086, 0.14686749375961483, 0.21230942916125894, 0.3244045030582513, 0.23476646396040746, 0.19916225985803893, 0.1775047432171909, 0.20440963381295085, 0.1943094960776841, 0.18179070562950006, 0.18716990030086222, 0.1845540309667264, 0.18366357478925732, 0.1822990467552874, 0.07528559286229353, 0.08390487080858589, 0.08585645848406276, 0.08168989730380904, 0.09188333748771749, 0.0764280655345585, 0.08349753110530234, 0.08742204847986246, 0.08707845736641806]}, "mutation_prompt": null}
{"id": "269065dd-6921-460c-9391-c31a01f29ffd", "solution": "import numpy as np\n\nclass FireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "FireflyLevyAlgorithm", "description": "A novel metaheuristic algorithm based on Firefly Algorithm with Levy flights for global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1781961b-f0dd-4389-8b43-1992ff58733e", "metadata": {"aucs": [0.3921009931035636, 0.3677446519475174, 0.38473478262747485, 0.3869994294221143, 0.376290287589376, 0.36523355971301386, 0.38304483348218765, 0.3828166840790731, 0.34373188271515476, 0.007613051731172327, 0.015975309534305038, 0.00084377587162765, 9.999999999998899e-05, 0.003887381947773272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09377468553276647, 0.09806669731723283, 0.10750658075110364, 0.09930943670343151, 0.11004246648391003, 0.10753459994433912, 0.0995378685932028, 0.10298441533987301, 0.08462222585002332, 0.0809669181116256, 0.0797032224192844, 0.08426497286936263, 0.07945658748825113, 0.07691752440181265, 0.08063027163951353, 0.08081218213521679, 0.08910419726856855, 0.08909489698919282, 0.329448808150996, 0.33120232558437956, 0.48342594962718544, 0.43401680207110294, 0.5455795098668063, 0.360514624824011, 0.6440148898630644, 0.5348003009264388, 0.5728025109015351, 0.1849549331705871, 0.16453048435480233, 0.14304966736357494, 0.18742792759867521, 0.20738125188800605, 0.18977030555028718, 0.21404617830955308, 0.1574053706104731, 0.18720459802945222, 0.21914336672545776, 0.24573411536099077, 0.16994658908711446, 0.2540840806302763, 0.24869772404298052, 0.24186687829980846, 0.21074064243291657, 0.2629620407519303, 0.2622511510619685, 0.12981842279558242, 0.13134452304808497, 0.13639715603674818, 0.1103592171050457, 0.1612044054238675, 0.10702695807776452, 0.1385107208213402, 0.12974202862122453, 0.1316816374631795, 0.13040135091443295, 0.13186185293335262, 0.12175362822774938, 0.1322736978341169, 0.1737808404148542, 0.13352102579216607, 0.1334489605611925, 0.1563955194736869, 0.12834064616408125, 9.999999999998899e-05, 0.00149368194407562, 9.999999999998899e-05, 0.01908269346116287, 9.999999999998899e-05, 0.0012703183987007316, 9.999999999998899e-05, 0.0030440545907957084, 0.005106552199422021, 0.15431395337982845, 0.07977403129082361, 0.14411336438541855, 0.050255755240309896, 0.03370741180168513, 0.055876665362794675, 0.08575858391418245, 0.11552818809990861, 0.1243987246865974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06997620469205323, 0.0692493489911643, 0.07390163458151988, 0.06199191115293523, 0.07868378104804685, 0.06991762538792567, 0.06718696677860114, 0.0557397434040775, 0.06256096188486049, 0.3584141906667905, 0.3834091114605811, 0.34888511470639694, 0.33380949204030863, 0.3395815510482706, 0.33657879022020354, 0.35079410364496233, 0.3415290474536289, 0.35904013283825065, 0.08972135804813919, 0.08871738247410033, 0.08458146818354129, 0.1023911674836041, 0.09653477911928132, 0.10088512954427609, 0.09999669978561265, 0.11038970767335254, 0.09721930704290771, 0.18445156017132036, 0.16944325730713883, 0.17517264593366544, 0.16147073406928358, 0.17176369916152867, 0.1895204892990885, 0.17581068930573895, 0.18856993009669132, 0.17097040192800506, 0.23496496775059372, 0.22351891209917008, 0.25508448365763015, 0.2616091777400881, 0.2622193827099758, 0.2808937784139003, 0.23621765866751743, 0.2584256011767684, 0.2323854641091856, 0.17068141536795178, 0.19142287188901297, 0.20034640969384576, 0.20358046837146593, 0.20143583564246192, 0.2012619343057237, 0.18052233763080494, 0.18845630595999552, 0.18163618527484005, 0.22036607456146584, 0.25896557367912454, 0.2299529278889988, 0.20772537003344682, 0.21737255256924204, 0.2371514662879951, 0.22403409831921295, 0.22750606305200904, 0.25093272456209215, 0.18357992905061649, 0.16622249414762102, 0.1668893350421684, 0.18638240986189536, 0.17676810395949383, 0.17941783567807978, 0.16277976915848336, 0.17155202360780908, 0.16892112320244324, 0.18328196225268867, 0.18495204734273352, 0.17911061783751536, 0.38825515969850344, 0.13296285631847748, 0.2023152206326302, 0.15567264305259831, 0.12404159583994856, 0.16442059425442623, 0.36128122885857017, 0.34920988823120724, 0.29693928653353685, 0.20026629185357392, 0.13212145593061086, 0.14686749375961483, 0.21230942916125894, 0.3244045030582513, 0.23476646396040746, 0.19916225985803893, 0.1775047432171909, 0.20440963381295085, 0.1943094960776841, 0.18179070562950006, 0.18716990030086222, 0.1845540309667264, 0.18366357478925732, 0.1822990467552874, 0.07528559286229353, 0.08390487080858589, 0.08585645848406276, 0.08168989730380904, 0.09188333748771749, 0.0764280655345585, 0.08349753110530234, 0.08742204847986246, 0.08707845736641806]}, "mutation_prompt": null}
{"id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 7, "fitness": 0.19075403783728084, "feedback": "The algorithm EnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "1781961b-f0dd-4389-8b43-1992ff58733e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "0bdf0776-8d4e-48a2-8f24-bfe1e24ab5cf", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "864f966a-1bd8-4515-aef9-2010fab4a1c7", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def opposition_based_learning(self, individual):\n        return -individual\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            for i in range(population_size):\n                opp_individual = self.opposition_based_learning(population[i])\n                opp_fitness = func(opp_individual)\n                if opp_fitness < fitness[i]:\n                    population[i] = opp_individual\n                    fitness[i] = opp_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhancing diversity by incorporating opposition-based learning to improve exploration in the Enhanced Firefly Algorithm with Levy flights.", "configspace": "", "generation": 9, "fitness": 0.18829743856841633, "feedback": "The algorithm EnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.445896771695911, 0.43969845170423416, 0.4354893878198187, 0.4240908029891507, 0.40385636300831784, 0.4236201641638502, 0.4438003122100279, 0.4386971462206277, 0.4336379321845858, 0.042249998583595905, 0.02178669985404036, 0.022905456809695357, 9.999999999998899e-05, 0.017549317065410963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11538324956029078, 0.13295415262438004, 0.10253948873058649, 0.10030198252074041, 0.09793728490956344, 0.11886446670569406, 0.1014461075427252, 0.11031531252178006, 0.09310435358861546, 0.08473401399126657, 0.08808278064621533, 0.09076045457630477, 0.08618503884567141, 0.09159878476347094, 0.06661337582901561, 0.10220509568740765, 0.08965012273768003, 0.092909986354899, 0.5666699672169873, 0.5181607266535194, 0.6277350107844946, 0.5806881411429697, 0.5496778495904924, 0.5847605478549387, 0.6581134814456846, 0.6194676921725497, 0.6193711299772895, 0.2354113862008963, 0.23381803085818564, 0.19994594710955815, 0.23129752871687292, 0.24268753037613078, 0.2528483550502949, 0.263766954518613, 0.18636648416549728, 0.2447435657368484, 0.23946193436281182, 0.21031071059897555, 0.17002922225729267, 0.2666417403453467, 0.320089265011294, 0.2581053730311692, 0.1996577675586686, 0.22329034227041533, 0.2383828561907717, 0.1800045062390091, 0.1365063967013943, 0.16858977463536062, 0.12638391882294686, 0.2224183063744416, 0.13448034041186674, 0.1860741953869377, 0.1618409863593966, 0.1750390315200271, 0.15011466559303988, 0.17685184435203116, 0.1678219228671043, 0.1269144550238237, 0.15746853912562675, 0.17569062685317927, 0.17300309405164593, 0.16806362540003794, 0.15823358783337826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033422476430885806, 0.04730087850181042, 9.999999999998899e-05, 0.007880739321646568, 9.999999999998899e-05, 0.02585873925434501, 0.15529609029394775, 0.06971194794216606, 0.1358399883328888, 0.04729759646486287, 0.03715178028921384, 0.0482252685631398, 0.0907101920796527, 0.10393374567201485, 0.13557793825971498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573504915339477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08397250647290111, 0.0984800823468791, 0.09334453961558409, 0.06874430950470234, 0.11813757477128506, 0.08994340750207086, 0.0872265154352947, 0.10243392539371676, 0.06881687753907095, 0.40791481112206307, 0.40855975956614354, 0.4090983038245435, 0.3831057887079099, 0.40558479204085995, 0.394870710723388, 0.4150795559861834, 0.40559608862771523, 0.4122282610132736, 0.07300487506379028, 0.0851651570085622, 0.07864855164439521, 0.09306516927214958, 0.11291357267321034, 0.09836643550776003, 0.11197314564069472, 0.09730805502075623, 0.12687355053187044, 0.16270415119668213, 0.2544971829011996, 0.13540830301142381, 0.17143616050933763, 0.20069339525878616, 0.18138243188406433, 0.16565170719865163, 0.18332940172928014, 0.14973983490075604, 0.1820898771797762, 0.19217042389967331, 0.2906258121780497, 0.27578467181152344, 0.28673982782078455, 0.2933683485064936, 0.21870767475365716, 0.2657595880906838, 0.24252844459757783, 0.17677769440919144, 0.19933621031213622, 0.23628512469876006, 0.250185285560102, 0.23447556750715393, 0.22515940199815043, 0.20361943062184418, 0.19859152062829166, 0.18354048636920606, 0.23852525565317306, 0.23202226755213173, 0.23130771997554322, 0.2822131026192677, 0.2601620802726059, 0.25560411496010327, 0.24306181474453703, 0.23666273662456638, 0.25807825972661635, 0.18503697668588903, 0.16440387913122234, 0.18442638069095607, 0.18203021156358268, 0.18331377745841004, 0.17745797012420628, 0.16669121623790273, 0.17353771290105324, 0.1720633546606659, 0.18438099691544285, 0.1868235468039271, 0.18019206773605823, 0.17794324485655177, 0.1207914665021157, 0.16290217740298085, 0.15637404465665872, 0.11091996072667387, 0.16459167494636417, 0.49335919058794575, 0.547022857768294, 0.3991031190986749, 0.2014300902141113, 0.14320462003605572, 0.14893112775990736, 0.2516704254815263, 0.3325867193367382, 0.25578174807388665, 0.18217205691062177, 0.1744464153291161, 0.19458727405752863, 0.1890927465578337, 0.17934640265462043, 0.18934312073296466, 0.1910844875120461, 0.18755093476264484, 0.18723496238742499, 0.07075018602576544, 0.07575748306366581, 0.08098376068035629, 0.07452126374408385, 0.0741169173047157, 0.05893965387341449, 0.07371521000225767, 0.07673776658030051, 0.08576879450519082]}, "mutation_prompt": null}
{"id": "56b61d5f-fd9b-4392-b32d-8e59929d6d1f", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "59a5bdca-0aa2-48c6-9eeb-1f5c76ac86c6", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:  # Adjust alpha based on individual fitness improvement\n                            alpha_min = 0.1\n                            alpha_max = 0.5\n                            self.alpha = alpha_min + (alpha_max - alpha_min) * ((self.budget - _) / self.budget)\n                            fitness[i] = new_fitness\n                        else:  # Reset individual to previous position\n                            population[i] -= beta * (population[j] - population[i]) + self.alpha * step\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic step size adaptation mechanism based on individual fitness evaluations.", "configspace": "", "generation": 11, "fitness": 0.13508141139207672, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.30648262369396484, 0.2812062491726254, 0.2823954951032902, 0.23989985896411603, 0.29472228152108837, 0.23915542690103864, 0.2612835098255286, 0.2658738102616801, 0.3130335327157818, 0.012766234538890253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918391984931673, 0.0785518321528158, 0.08388377972615557, 0.0827784935079735, 0.0872860649205881, 0.0827253976730663, 0.07847261406147721, 0.1181087432310336, 0.0770192759484356, 0.06327658205930586, 0.05908411872257491, 0.050378579385975675, 0.05538954562219245, 0.07284116937703289, 0.07179747649888835, 0.06680260413857464, 0.0700668395373335, 0.0634892281082553, 0.14385696657511093, 0.13248798615115287, 0.16006214952319608, 0.11937972313934408, 0.18068146403166263, 0.15129909827250498, 0.1455014828140514, 0.15034272394313009, 0.14806128053180123, 0.14323307504345262, 0.12297818047797116, 0.13920339294587014, 0.14267525212583954, 0.138994508980409, 0.1396293629087113, 0.14761279741028244, 0.12259669825886887, 0.1348408926555974, 0.20137339211052163, 0.1920339054983098, 0.19342164608898815, 0.20709198550308727, 0.20929043862224594, 0.21184188048227448, 0.18022084099933322, 0.21058559150501832, 0.17957962426699814, 0.09860442302731975, 0.07679232720489781, 0.09067318309252115, 0.11068081223734405, 0.059767130423571846, 0.0881779531334399, 0.09586303684493791, 0.1128534749690776, 0.09690007168621273, 0.11303386496904788, 0.09566402258497697, 0.10557145365721754, 0.1293641701453898, 0.10087494504895189, 0.10720591358229026, 0.09813900494055905, 0.10342357072987307, 0.0954638406922248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02528010595017549, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10850874322794679, 0.06802176353474476, 0.09722350826369786, 0.053085853915540104, 0.05193805767020965, 0.05401959178461313, 0.10631841312367118, 0.08717614853310751, 0.14102285729215513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028925833796069278, 0.022944606532982692, 0.022755049617778744, 0.03945629275035811, 0.044716334780738, 0.02105578458940449, 0.0024417242338468093, 0.015290982834049616, 0.032614329404839326, 0.29697131760208406, 0.30535872976805023, 0.2697246226985348, 0.2764665318532342, 0.2888919710771697, 0.27358811823020956, 0.2762369358042601, 0.2980516638505464, 0.31673673811268255, 0.08445723518107606, 0.07200975324820336, 0.07998871688335252, 0.10069533394066799, 0.0712755723215498, 0.09067821966492284, 0.0799488503789979, 0.08224943761351622, 0.07484703811962823, 0.1392903026462614, 0.1584970979885627, 0.14027389564856807, 0.1452145469815579, 0.12997544471590738, 0.13626959414709727, 0.12805346447253996, 0.13470746196632155, 0.12797631107392948, 0.20242426901403, 0.19314890948175334, 0.21230982323687808, 0.23400273712139052, 0.23387219334593856, 0.2350753096984879, 0.19046603443035304, 0.1962677963329873, 0.19409095391077913, 0.16128057890851577, 0.16276883629400762, 0.14351085185417356, 0.18520572074790664, 0.15861198626928963, 0.17786532154467183, 0.14244873487690124, 0.1522054811090744, 0.15905955153846607, 0.22112507000100556, 0.22370581988316962, 0.23533368178311598, 0.19751961724614675, 0.23727280335986078, 0.20458608900335484, 0.2127568467254608, 0.22932455587735912, 0.20478708025939363, 0.16948875784544415, 0.1774401422163211, 0.1693244144371221, 0.16705795565561243, 0.17062828219740134, 0.16409194638434033, 0.1691344180937513, 0.18096242617420055, 0.16518374510945955, 0.20730220635302654, 0.17500806933737745, 0.17591246471136168, 0.3153609114811897, 0.20939261644732665, 0.2934735948098022, 0.3332038338054014, 0.3202191389563389, 0.2859498819413855, 0.2984378779696323, 0.2945209163481861, 0.3487537546952574, 0.16896655514761605, 0.19301821371816807, 0.1497096495896103, 0.1820515784900547, 0.22437864700742927, 0.20955235345743273, 0.19159659769248194, 0.18631746271827865, 0.18910066687001936, 0.20937936994123252, 0.19181642061682103, 0.17895336628804104, 0.17759599071456544, 0.1778771471356143, 0.1936176307022892, 0.07758014659250434, 0.07263646186498751, 0.06926343040777194, 0.0693374491406763, 0.07912943772522374, 0.07718700859023009, 0.07035890328443473, 0.08564773106896906, 0.08102291821975727]}, "mutation_prompt": null}
{"id": "19639fde-51f8-4023-b713-3c222756c4ef", "solution": "import numpy as np\n\nclass DynamicFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha_min = 0.1\n        self.alpha_max = 0.5\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = 0.2 + 0.8 * np.exp(-self.gamma * r ** 2)  # Dynamic mutation step size adaptation\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha_min + (_ / self.budget) * (self.alpha_max - self.alpha_min) * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicFireflyLevyAlgorithm", "description": "Refining the Enhanced Firefly Algorithm with Levy flights by implementing a dynamic mutation step size adaptation to enhance exploration and exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.08920112422511979, "feedback": "The algorithm DynamicFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.18303008026293865, 0.1867126616847934, 0.22102483259312544, 0.0971701258004688, 0.10750000009520266, 0.1125973140037515, 0.12132843847586594, 0.0980752395992488, 0.08835767082469537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053297332460886304, 0.06918320774791775, 0.06846816518625487, 0.05271785943072338, 0.04213251593957412, 0.04569486279504853, 0.0321896286467136, 0.043725036959572194, 0.039255659728267944, 0.08867933613758705, 0.06449787078017122, 0.06439887287583645, 0.05570278788185912, 0.04906205173644207, 0.054690592240560054, 0.06190503022524374, 0.0517117682414453, 0.050221419094556796, 0.046196669217234976, 0.04556520921283369, 0.04386334233799205, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.10343179253717039, 0.09295441925249504, 0.04628690896549548, 0.0839269350046219, 0.04484535249500621, 0.020265315085695512, 0.07531577665720579, 0.026826322692514948, 9.999999999998899e-05, 0.13011216205979304, 0.1729264569101321, 0.15304752668652488, 0.1543456194466034, 0.12227198434993336, 0.07118404399369815, 0.08235468523380474, 0.11680470040931357, 0.13838456337970473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011757811446743482, 9.999999999998899e-05, 9.999999999998899e-05, 0.050481202193705, 0.09811654037428374, 0.04933442318180459, 0.03684295006262672, 0.059964424671458794, 0.05300234896875622, 0.09343791583712169, 0.05377647735696156, 0.05686391534566715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1423518109011226, 0.02457682792498217, 0.0199643277274677, 0.04251786308886918, 0.028687670589552128, 0.04268543712937278, 0.04604812882360443, 0.07029431320400814, 0.09667114271146637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2308511505748282, 0.19701939480237696, 0.19663943400744033, 0.15752059423118003, 0.14291109547972192, 0.13533946495331506, 0.25097901539263934, 0.19631622815201855, 0.21262791520007018, 0.032363055222441095, 0.04066352102578763, 0.04699983844044908, 0.055852822366071475, 0.029814557924761953, 0.034636552332173, 0.03910842590958763, 0.03733855939952513, 0.04280812802528511, 0.13377960554807655, 0.15018745438768344, 0.13840125651424984, 0.1045667405045595, 0.10957256482680955, 0.10798713552628325, 0.1095647265338594, 0.1369542392211126, 0.10669600176306648, 0.13241881004974598, 0.18148224359534182, 0.21225893424458964, 0.16391427940116832, 0.18711728558934915, 0.17125186815160798, 0.1491925628406372, 0.18539119362525525, 0.1561971774814641, 0.09802716497449204, 0.10558198838086119, 0.12718415487060697, 0.11059452919427581, 0.15446809562054709, 0.10668809522185108, 0.11216828740892126, 0.14399236401872273, 0.11342383697934, 0.20284491003368066, 0.200501258303051, 0.1755532279835561, 0.185025181732699, 0.1960160029741339, 0.20988657628323548, 0.187287977050842, 0.17810016003076468, 0.17804376806454258, 0.16365915172250822, 0.15783454685311504, 0.1685728157675772, 0.15767284017917083, 0.15676609999441649, 0.14832196305029632, 0.18030521977593694, 0.168458032403479, 0.16780185907465295, 0.09455383910750936, 0.1237319705698956, 0.10731205129799559, 0.16811509199128072, 0.1207914665021157, 0.12188753054313106, 0.14621995023316137, 0.10644454725169994, 0.13866749568462766, 0.2799339639156945, 0.31988843703223324, 0.17164894752619808, 0.14310444922988286, 0.07198010433297419, 0.08379698986552009, 0.2026844443082947, 0.2115926056988695, 0.23841801643568494, 0.17395063768458063, 0.17475116204658425, 0.1740958884339432, 0.16960672389675457, 0.17579274810909717, 0.17681011899066612, 0.18959588383761306, 0.18148933214767315, 0.1671904811804963, 0.05489897548983358, 0.05156947794464761, 0.05278723397449325, 0.06052549620117076, 0.06766052206764339, 0.05751983209016798, 0.052735378286702494, 0.053916434965350035, 0.06443586473735363]}, "mutation_prompt": null}
{"id": "5e37e112-bb20-4a99-913a-4e26e8479260", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "ed895a13-ffb0-49f3-8f0d-be7cbd0ae31b", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def cauchy_mutation(self):\n        scale = 0.1\n        return np.random.standard_cauchy(self.dim) * scale\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight() + self.cauchy_mutation()  # Incorporate Cauchy mutation\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Improve the Enhanced Firefly Algorithm with Levy flights by incorporating a mutation operator based on Cauchy distribution to enhance exploration capability.", "configspace": "", "generation": 14, "fitness": 0.18900807012654455, "feedback": "The algorithm EnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.41031250596774893, 0.4322557797734011, 0.42156135347959767, 0.41768642500112196, 0.40037606088865774, 0.42087613205001184, 0.4331245826416579, 0.43122728384946474, 0.38868156049578284, 0.012681269489447367, 0.031550722955104527, 0.008805342867749588, 0.008864622499343056, 0.02983573778486992, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018945005346664434, 9.999999999998899e-05, 0.15080075690035488, 0.10728013030336658, 0.0940903368504602, 0.11114862160911676, 0.1178590315244139, 0.10872598496035057, 0.12451725874837849, 0.1111115245274934, 0.11279323335662117, 0.07904644399061322, 0.09580943339194292, 0.09011573865155531, 0.08800595396947342, 0.10388182153513048, 0.08938195151513462, 0.10854054530208523, 0.1084785088785557, 0.1017917167692971, 0.5367624683267533, 0.6164530703958919, 0.6273982553681496, 0.5442774420611498, 0.6205810268608161, 0.5847428376062633, 0.6597816110592274, 0.4586594022529943, 0.6104322764359897, 0.2214931193466828, 0.20644642591569873, 0.2211495353411077, 0.2316717620228047, 0.2698527054063682, 0.2309625907329138, 0.2436551837834675, 0.24411337989072357, 0.2463020733836303, 0.20841090759124503, 0.2556332138064876, 0.16986671398153852, 0.26907066123976797, 0.25023769114632166, 0.25712585166232294, 0.2095541740318787, 0.20984225089634678, 0.21874766734319329, 0.1822593458586692, 0.15602952495587052, 0.132277129669213, 0.1409598551574267, 0.15616656272142937, 0.1890532232626433, 0.21779508897851696, 0.16343923077547717, 0.16765345794518127, 0.15524110271143599, 0.15007481197766903, 0.14354810636194337, 0.155140402370053, 0.19088438539499275, 0.12143166679605077, 0.16170547866261986, 0.1491996126734093, 0.1476956439663103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003734523026670544, 0.013634839202106508, 0.017518377712646416, 9.999999999998899e-05, 0.007282138053699816, 9.999999999998899e-05, 0.0006579515503876143, 0.12832253158973672, 0.09413772350937666, 0.1401130981218126, 0.040242916090572955, 0.037686068336740375, 0.055818501960948064, 0.0972358017155397, 0.10527292826091073, 0.12752164043252956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026944633446263078, 9.999999999998899e-05, 9.999999999998899e-05, 0.08738816751960954, 0.10457000101647806, 0.10542272905938899, 0.09327809908213625, 0.11239133174823202, 0.10002548819886725, 0.0965029548625802, 0.07866916298803683, 0.06730112609090066, 0.38969665375095297, 0.392816663919872, 0.3953533163572537, 0.3749041317932653, 0.41459886294747605, 0.39202925747914275, 0.3803068152867255, 0.40859184574292284, 0.39708088277074616, 0.08897394388865809, 0.09223743882047242, 0.1004403274403447, 0.09658780449287718, 0.12010450487870838, 0.12638981893901458, 0.1281038694197143, 0.09398394824831324, 0.10848028861474124, 0.18655237648007816, 0.14588363589591768, 0.16706942233182676, 0.14535213627498778, 0.20449449864737557, 0.17948445328905405, 0.2073164907620063, 0.17464280733221238, 0.1591633817043796, 0.23632439900007318, 0.2413663798711655, 0.28504596325557485, 0.3014454797409899, 0.2940232022214514, 0.28162794052924234, 0.23944549796905645, 0.25285847988306964, 0.21988892899564383, 0.1856594297503893, 0.21064649900674137, 0.2228629595712095, 0.23457742633583434, 0.2304906048241725, 0.22910453741176584, 0.18365678756788462, 0.224738599116309, 0.17099007558865997, 0.23519828918203456, 0.21450616186784155, 0.23922574619724057, 0.21244865992843653, 0.21682712130482573, 0.2047953745862925, 0.24673746479817504, 0.23779025319709957, 0.2331995806775059, 0.17107704304261317, 0.1770884412766538, 0.18432364124902312, 0.18515610081207556, 0.17091998324120428, 0.1745503585255359, 0.17808937029082283, 0.17659516088838134, 0.170789008919068, 0.18499434546045146, 0.18631318570020516, 0.18302455611514645, 0.15568370776837115, 0.1633037431235871, 0.17864654194063456, 0.19029411990961187, 0.49740790567550963, 0.15897935000876828, 0.4656421008898134, 0.5026680729556274, 0.41752807120014057, 0.19356682116788237, 0.15786015486843685, 0.1633305722470796, 0.23310152991904365, 0.327739001769616, 0.26804045921920916, 0.18448115327219472, 0.18479734839264061, 0.18614476354185971, 0.18798536496732243, 0.19568394411047352, 0.18736181888634462, 0.1884230515005043, 0.18267557511093324, 0.18299180496301182, 0.08318621780901636, 0.08093373108479951, 0.0893293726372365, 0.08283556822702542, 0.09204181016917812, 0.08274623694629879, 0.08550311639005248, 0.09112833756223593, 0.08795569964647587]}, "mutation_prompt": null}
{"id": "b5a4e2ad-6746-42b8-a003-abe8254f6dc1", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "2837e979-378b-44e9-8e42-cc607a0d69b5", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmOpposition:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def opposition(self, individual):\n        return -individual\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            for i in range(population_size):\n                individual_opposite = self.opposition(population[i])\n                fitness_opposite = func(individual_opposite)\n\n                if fitness_opposite < fitness[i]:\n                    population[i] = individual_opposite\n                    fitness[i] = fitness_opposite\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmOpposition", "description": "Enhancing the diversity maintenance by introducing opposition-based learning to improve exploration in the optimization process.", "configspace": "", "generation": 16, "fitness": 0.18829743856841633, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.445896771695911, 0.43969845170423416, 0.4354893878198187, 0.4240908029891507, 0.40385636300831784, 0.4236201641638502, 0.4438003122100279, 0.4386971462206277, 0.4336379321845858, 0.042249998583595905, 0.02178669985404036, 0.022905456809695357, 9.999999999998899e-05, 0.017549317065410963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11538324956029078, 0.13295415262438004, 0.10253948873058649, 0.10030198252074041, 0.09793728490956344, 0.11886446670569406, 0.1014461075427252, 0.11031531252178006, 0.09310435358861546, 0.08473401399126657, 0.08808278064621533, 0.09076045457630477, 0.08618503884567141, 0.09159878476347094, 0.06661337582901561, 0.10220509568740765, 0.08965012273768003, 0.092909986354899, 0.5666699672169873, 0.5181607266535194, 0.6277350107844946, 0.5806881411429697, 0.5496778495904924, 0.5847605478549387, 0.6581134814456846, 0.6194676921725497, 0.6193711299772895, 0.2354113862008963, 0.23381803085818564, 0.19994594710955815, 0.23129752871687292, 0.24268753037613078, 0.2528483550502949, 0.263766954518613, 0.18636648416549728, 0.2447435657368484, 0.23946193436281182, 0.21031071059897555, 0.17002922225729267, 0.2666417403453467, 0.320089265011294, 0.2581053730311692, 0.1996577675586686, 0.22329034227041533, 0.2383828561907717, 0.1800045062390091, 0.1365063967013943, 0.16858977463536062, 0.12638391882294686, 0.2224183063744416, 0.13448034041186674, 0.1860741953869377, 0.1618409863593966, 0.1750390315200271, 0.15011466559303988, 0.17685184435203116, 0.1678219228671043, 0.1269144550238237, 0.15746853912562675, 0.17569062685317927, 0.17300309405164593, 0.16806362540003794, 0.15823358783337826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033422476430885806, 0.04730087850181042, 9.999999999998899e-05, 0.007880739321646568, 9.999999999998899e-05, 0.02585873925434501, 0.15529609029394775, 0.06971194794216606, 0.1358399883328888, 0.04729759646486287, 0.03715178028921384, 0.0482252685631398, 0.0907101920796527, 0.10393374567201485, 0.13557793825971498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573504915339477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08397250647290111, 0.0984800823468791, 0.09334453961558409, 0.06874430950470234, 0.11813757477128506, 0.08994340750207086, 0.0872265154352947, 0.10243392539371676, 0.06881687753907095, 0.40791481112206307, 0.40855975956614354, 0.4090983038245435, 0.3831057887079099, 0.40558479204085995, 0.394870710723388, 0.4150795559861834, 0.40559608862771523, 0.4122282610132736, 0.07300487506379028, 0.0851651570085622, 0.07864855164439521, 0.09306516927214958, 0.11291357267321034, 0.09836643550776003, 0.11197314564069472, 0.09730805502075623, 0.12687355053187044, 0.16270415119668213, 0.2544971829011996, 0.13540830301142381, 0.17143616050933763, 0.20069339525878616, 0.18138243188406433, 0.16565170719865163, 0.18332940172928014, 0.14973983490075604, 0.1820898771797762, 0.19217042389967331, 0.2906258121780497, 0.27578467181152344, 0.28673982782078455, 0.2933683485064936, 0.21870767475365716, 0.2657595880906838, 0.24252844459757783, 0.17677769440919144, 0.19933621031213622, 0.23628512469876006, 0.250185285560102, 0.23447556750715393, 0.22515940199815043, 0.20361943062184418, 0.19859152062829166, 0.18354048636920606, 0.23852525565317306, 0.23202226755213173, 0.23130771997554322, 0.2822131026192677, 0.2601620802726059, 0.25560411496010327, 0.24306181474453703, 0.23666273662456638, 0.25807825972661635, 0.18503697668588903, 0.16440387913122234, 0.18442638069095607, 0.18203021156358268, 0.18331377745841004, 0.17745797012420628, 0.16669121623790273, 0.17353771290105324, 0.1720633546606659, 0.18438099691544285, 0.1868235468039271, 0.18019206773605823, 0.17794324485655177, 0.1207914665021157, 0.16290217740298085, 0.15637404465665872, 0.11091996072667387, 0.16459167494636417, 0.49335919058794575, 0.547022857768294, 0.3991031190986749, 0.2014300902141113, 0.14320462003605572, 0.14893112775990736, 0.2516704254815263, 0.3325867193367382, 0.25578174807388665, 0.18217205691062177, 0.1744464153291161, 0.19458727405752863, 0.1890927465578337, 0.17934640265462043, 0.18934312073296466, 0.1910844875120461, 0.18755093476264484, 0.18723496238742499, 0.07075018602576544, 0.07575748306366581, 0.08098376068035629, 0.07452126374408385, 0.0741169173047157, 0.05893965387341449, 0.07371521000225767, 0.07673776658030051, 0.08576879450519082]}, "mutation_prompt": null}
{"id": "a37177db-d9a6-4ada-848c-c1b8d8901e3e", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n        self.mutation_rate = 0.1\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def random_mutation(self, individual):\n        mutated = individual + np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n        return np.clip(mutated, -5.0, 5.0)\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n            mutation_candidates = np.random.choice(range(len(population)), int(0.4 * len(population)), replace=False)\n            for idx in mutation_candidates:\n                population[idx] = self.random_mutation(population[idx])\n                fitness[idx] = func(population[idx])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhancing the diversity maintenance mechanism by incorporating a random mutation step to explore new regions of the search space.", "configspace": "", "generation": 17, "fitness": 0.18720413620331722, "feedback": "The algorithm EnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.4622768418654565, 0.4415894226257584, 0.45201485528746055, 0.43150225636616035, 0.42632232718967544, 0.42471490970515147, 0.42134852769663333, 0.4226554744501354, 0.4188063000952865, 0.03570958315141215, 0.007604655666064386, 0.01837884133138401, 0.001045047651705322, 0.03925840520189572, 9.999999999998899e-05, 0.004631643494840909, 0.004270092342332443, 9.999999999998899e-05, 0.12291637916335751, 0.10353737844020328, 0.09832579143408149, 0.10559201853491684, 0.10167918582584456, 0.11462516192660022, 0.11178372800651926, 0.11706818479280623, 0.09188032457882034, 0.07667175837192064, 0.09693288246619935, 0.09701466739640652, 0.08186828578807381, 0.07927382359586244, 0.0792919544912164, 0.09944405931653832, 0.08434138311011175, 0.08768486054505154, 0.5387562224534439, 0.537746477201643, 0.5327561202765456, 0.5547475723836446, 0.5506224237490682, 0.5494328761417883, 0.6455978695620905, 0.4911523369591474, 0.6771792264788128, 0.23984381233657892, 0.24127029248446574, 0.22422027990757287, 0.26801879167627685, 0.25295309735691307, 0.25614409703364316, 0.25603701920690713, 0.2026477999053563, 0.26339169939208984, 0.22255548288404647, 0.22425275583811521, 0.2006826591375518, 0.27628960594165497, 0.34424740718286895, 0.21675970279410128, 0.20760292770782163, 0.25164517440968326, 0.22159915948287512, 0.18444072406102074, 0.15137644883638424, 0.12891640358925938, 0.11960358343103705, 0.21009407762045307, 0.09295489449485794, 0.13920841686135443, 0.15675814283618184, 0.15121808026581507, 0.181487645467592, 0.1614365136611261, 0.12135453524308415, 0.13649836566005757, 0.14748738303610587, 0.1345044903152144, 0.1396939440552809, 0.22936638302315748, 0.17400649290442127, 9.999999999998899e-05, 0.009013639042119714, 9.999999999998899e-05, 0.06103181535464952, 0.01875734078558544, 0.00016989787800991696, 0.00010588456930926693, 9.999999999998899e-05, 0.02410947585548695, 0.15007612384783775, 0.0618091416908052, 0.14475764842408212, 0.038840261087619954, 0.03237225774920083, 0.052619187223369224, 0.08733719170802179, 0.09344368998474584, 0.14366530043289727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09101481785051169, 0.09706475785401458, 0.10307514227090175, 0.04205024337177443, 0.10038250458694908, 0.10368439415968966, 0.07302409573608437, 0.07151387127065423, 0.07259463039336611, 0.40443876604996376, 0.39981031538666834, 0.38703635940849057, 0.3862454049350207, 0.40517206817934937, 0.41373667498602895, 0.4017678836301024, 0.4060546746504806, 0.428464469958308, 0.07755096472034906, 0.08497424216536731, 0.07385353702755271, 0.12191743216941009, 0.12374496446403305, 0.09913979198065936, 0.13355294120465222, 0.09507551553372229, 0.09473162730870244, 0.21222825866667194, 0.2480300261194175, 0.15600722566902636, 0.25051940048876287, 0.22919209038421007, 0.18714042605405656, 0.16333846452887624, 0.1630879274207807, 0.1518101835794431, 0.1726283283483877, 0.19267363265940707, 0.2939509879006058, 0.2759620935624034, 0.24291810338695485, 0.2841238836976433, 0.22043662595829983, 0.27590990890005296, 0.24672572452424513, 0.19236579801213283, 0.18038226350525344, 0.22714454575321397, 0.23013021372153086, 0.22175277809899951, 0.25085446920791776, 0.19375165731448107, 0.21627168645957573, 0.20260725604927876, 0.22926094373286454, 0.2272059214315939, 0.20823037250233678, 0.22235596352278686, 0.23229795711035595, 0.2461281634586231, 0.2446405767714206, 0.23685024202016636, 0.25093272456209215, 0.17964536141596854, 0.18636889073045682, 0.17741059928961167, 0.1875294380168775, 0.17260103581910646, 0.18357343295203077, 0.17341662102469613, 0.19194503001023833, 0.17134651129428025, 0.18437485898864647, 0.1866961607289681, 0.1806318081181567, 0.1675585707607128, 0.12564123244336656, 0.14046078165237763, 0.15654903516298035, 0.15666431523699487, 0.16456886922576575, 0.4892545404957511, 0.4803791689809953, 0.38770748442665537, 0.20072201102759446, 0.13514070620127228, 0.14954920821139972, 0.24517145912164262, 0.32606832269750585, 0.2869432250412589, 0.18238172586290258, 0.17429142279815169, 0.20303629319412764, 0.1890927465578337, 0.1923756273616466, 0.1789226246441321, 0.18603923611881057, 0.18904040522765275, 0.20672359543432028, 0.08381075366747404, 0.09057181997333741, 0.08756183107989379, 0.091082450631219, 0.09431716539446156, 0.06304796188075346, 0.0895060360184542, 0.09523900894280835, 0.08948583692981538]}, "mutation_prompt": null}
{"id": "da8891f4-51fd-4070-a652-ae0b36ca1f19", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "50372a41-75e4-4140-9543-ef41b75914a4", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "814d573a-ed6b-4f0d-8f39-d2e1c782ebc8", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        fitness_prop = (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness))\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step * fitness_prop\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of the Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on individual fitness and diversity.", "configspace": "", "generation": 20, "fitness": 0.11830120280846766, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.42111423501793765, 0.27417415427561675, 0.4587571244358227, 0.18006757547271024, 0.1517538102977627, 0.19547839267931022, 0.22264920143938138, 0.17610709381662382, 0.1557793247419038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07838157874403984, 0.09392808486226023, 0.065850780250442, 0.07960246295060858, 0.10817628041380634, 0.08013311587502281, 0.08269868530514146, 0.06900979620706238, 0.08201775883406859, 0.08233880701509844, 0.048747277958206325, 0.06587141135747365, 0.0909037393087001, 0.052563540539593445, 0.04400477747814113, 0.06853269517412297, 0.07259305486442302, 0.04735038076976794, 0.05704805764756149, 0.06940452501654237, 0.062315611579357166, 0.06398231803646193, 0.05842565798820265, 0.05608635406311391, 0.06946606788487497, 0.05977822139566635, 0.062324091857052566, 0.06300422209620027, 0.05920869981375054, 0.020037669972801653, 0.06176507593438252, 0.061139170375859475, 0.053873112045493166, 9.999999999998899e-05, 0.02794840351460315, 0.009223330394043439, 0.22451198066790634, 0.2101578462677417, 0.14100616128045584, 0.16891325139497093, 0.1672231592789134, 0.08529016047582572, 0.14140681045488968, 0.12882036097210092, 0.14706233052555906, 0.1358825444778411, 0.08484191222946624, 0.0006370178356671641, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13853801670264143, 0.03331966837846756, 0.03501833125571485, 0.21137669471341347, 0.13601138143108304, 0.11956555144703673, 0.11691081851239893, 0.19881352857030699, 0.12121247676941527, 0.18358068045016485, 0.04925973146069773, 0.12709382441986594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033430621522230974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1785242166076254, 0.07803825161874922, 0.15883269780862264, 0.039490705753084, 0.026340400715732515, 0.02353338098908242, 0.09550758570705109, 0.09478385701615899, 0.087624150159053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01633844967456677, 0.03180248145862208, 9.999999999998899e-05, 9.999999999998899e-05, 0.01790965998693339, 0.02370287562178308, 9.999999999998899e-05, 9.999999999998899e-05, 0.03164360260134269, 0.3774540849879703, 0.42544790203656824, 0.2839601967111791, 0.21871377522159097, 0.1736837301606976, 0.19058488273514063, 0.3513457453617378, 0.28373930125807345, 0.34533089146581875, 0.045717313557726236, 0.015886695735202516, 0.061693830758577706, 0.08040321818147711, 0.05600299273124032, 0.0716902958558936, 0.07872017161065736, 0.10061289198141554, 0.06274505083598525, 0.1376355108872076, 0.12020056717616079, 0.14645149088918807, 0.09855305120349966, 0.14749488314104908, 0.1742371524532078, 0.1517281801478546, 0.1728249468788261, 0.12201706939641532, 0.1399527530153093, 0.17539511992201273, 0.19682210998492689, 0.24268114758726178, 0.21236662511702165, 0.18647711694294689, 0.17260451992673675, 0.19876601882959133, 0.17588781077876026, 0.1863183227344526, 0.11073992662918286, 0.17773783153241818, 0.18637307472064601, 0.18698776514831283, 0.19011521823939115, 0.1446939604832278, 0.20019978942697092, 0.13582453681649675, 0.24402994503554432, 0.21798438932433684, 0.19949399510460986, 0.2820658356056288, 0.26393836748330723, 0.22586242411189628, 0.2626949714592304, 0.27964824694699364, 0.21154189788946864, 0.16698486192827644, 0.1647463264833856, 0.1744913821566323, 0.17882416141711766, 0.17333913585538374, 0.17205509170637834, 0.1641566918019316, 0.17043130112746385, 0.16555850800022176, 0.14758572631703104, 0.1872993607616198, 0.17268600329104633, 0.26994339338296036, 0.12521725398339822, 0.24367654754534973, 0.1070176662487543, 0.12038827264586494, 0.16107325543238893, 0.32165823072478883, 0.1701045482067629, 0.11286309628273972, 0.11687605196901552, 0.093332903738793, 0.1255769190649989, 0.13492217202650858, 0.20368822077009996, 0.15654792513695703, 0.1835000422872195, 0.18759253918355312, 0.18265848007267094, 0.18745680615095806, 0.1832156739806211, 0.22061027106958542, 0.19379528770942067, 0.20649240856349227, 0.22044358257312502, 0.0935063273596376, 0.08503894018029767, 0.07632834879695127, 0.08276178408155244, 0.11209891428054941, 0.1355305114480203, 0.0939946009623942, 0.10651779309687537, 0.08742003575497515]}, "mutation_prompt": null}
{"id": "6f6e4359-eba2-4bac-8d9d-88d667e22d51", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n        self.sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n\n    def levy_flight(self):\n        u = np.random.normal(0, self.sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhancing the exploration-exploitation balance by incorporating a self-adaptive levy flight step-size mechanism.", "configspace": "", "generation": 21, "fitness": 0.19075403783728084, "feedback": "The algorithm EnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "109c7035-0c8f-4958-88bd-9f15f303bc4e", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha_min = 0.1\n        self.alpha_max = 0.5\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.alpha_min + (1 - self.alpha_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            diversity = np.mean(np.std(population, axis=0))\n            self.alpha = self.alpha_min + (self.alpha_max - self.alpha_min) * (1 - diversity)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhancing the adaptive alpha value update strategy to improve convergence and exploration by introducing a dynamic adjustment based on population diversity.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedFireflyLevyAlgorithm' object has no attribute 'alpha'\").", "error": "AttributeError(\"'EnhancedFireflyLevyAlgorithm' object has no attribute 'alpha'\")", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {}, "mutation_prompt": null}
{"id": "2df6d773-7b79-453a-8f27-e9914245d5e0", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            elite_ratio = 0.1\n            elite_count = int(elite_ratio * population_size)\n            elite_indices = np.argsort(fitness)[:elite_count]\n\n            for elite_idx in elite_indices:\n                population[elite_idx] = np.clip(population[elite_idx] + np.random.uniform(-1, 1, self.dim), -5.0, 5.0)\n                fitness[elite_idx] = func(population[elite_idx])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhancing diversity through adaptive mutation rates and elitism selection for improved convergence in Enhanced Firefly Algorithm with Levy flights.", "configspace": "", "generation": 23, "fitness": 0.18260259163684064, "feedback": "The algorithm EnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.450455174592969, 0.44867300499334917, 0.4404355454723359, 0.42559839261676113, 0.4227634012813405, 0.43555529111164715, 0.40317864314855867, 0.44435324945590715, 0.4496367623454175, 0.034152394902866035, 0.0037306824761265123, 0.005870125125107761, 9.999999999998899e-05, 0.0182181918214277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12810044180859514, 0.12466670517439582, 0.09782472493372385, 0.10647608751093207, 0.08505007527744979, 0.11137691712189768, 0.09818992007851557, 0.110759205696774, 0.09569493410619401, 0.09371015103273606, 0.08695367301679946, 0.0923747699947749, 0.07689919224877373, 0.08583033459393319, 0.08067501037356084, 0.09623443333092585, 0.09278228859839832, 0.09235632222172863, 0.5946027068056889, 0.3182868185710811, 0.4836419415226316, 0.44099946872092854, 0.5961575132446559, 0.5412522561703055, 0.693753255765553, 0.5456300092797772, 0.6399577433265184, 0.2183137793319826, 0.1950631147427756, 0.17543206298001224, 0.21910133594253212, 0.2254553101448422, 0.23257533630686333, 0.25751566349540544, 0.17058170119830773, 0.22304021781986694, 0.2120260957879595, 0.2186515404240288, 0.18728565376575423, 0.26651407329067367, 0.25907657071416057, 0.21414431543639922, 0.16484870535308815, 0.22118648190505497, 0.275938311530038, 0.18691408929471942, 0.13322290176572782, 0.19489351272245625, 0.1165972934182209, 0.22043652308293515, 0.14402992592884056, 0.15658278069627973, 0.16842059637289608, 0.15528338709261846, 0.13866542996370357, 0.15410918137751173, 0.11509809876390864, 0.1343871462608318, 0.16438105823140248, 0.13763885390110486, 0.14067476291721537, 0.1772768874839019, 0.14161260579647805, 9.999999999998899e-05, 0.0010910696700456857, 9.999999999998899e-05, 0.09152629697343273, 0.02025545000161677, 9.999999999998899e-05, 0.00010734697144254568, 9.999999999998899e-05, 0.013936787373185489, 0.1624745782660697, 0.08512841920973313, 0.12558505863009628, 0.04232116623919502, 0.027574775777911564, 0.04835054751604062, 0.08774620995032534, 0.12795185451643576, 0.11904783934527208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10681848331244204, 0.09601516960793799, 0.09612000694685918, 0.050686587090108204, 0.10568286704516683, 0.09782957395647895, 0.09825124308186273, 0.07449067004989052, 0.07187812481197908, 0.41395694878554135, 0.4297870632139893, 0.39450801344627784, 0.3990949762646522, 0.39781835661474774, 0.38835712477347883, 0.3872731548904007, 0.39465229733994933, 0.41072535623084583, 0.0917710042109342, 0.06866412913197872, 0.08211143441726931, 0.09238887869654955, 0.10623813018363448, 0.10033524007437378, 0.11681025590918037, 0.10813463208902285, 0.11029385668108804, 0.256315427643072, 0.18121872866900157, 0.16208739631214952, 0.23098366639531953, 0.1938444663504112, 0.17505703139054984, 0.16860535793736087, 0.2111354817080875, 0.14046552698075865, 0.19734964317148807, 0.21194187973042222, 0.2869578425558458, 0.29347401051503963, 0.26406059850056507, 0.28871096575036914, 0.24463640530546438, 0.2901072448284048, 0.22246053080108674, 0.17811132389372397, 0.21267435525813072, 0.21589865924896123, 0.2108535799322926, 0.21093895051966982, 0.2416869933657989, 0.1997664494358603, 0.19549650078931258, 0.18686727049332186, 0.2329384312418591, 0.21414464457036153, 0.20469138977246937, 0.2633383432832095, 0.22915728301277638, 0.23180190243387833, 0.2413288757043217, 0.22639324670657301, 0.25093272456209215, 0.1780827406335509, 0.16641899832406237, 0.17621457280264607, 0.18585250904603823, 0.18691505253631102, 0.17270312114508324, 0.1722741352354582, 0.1697275799142386, 0.1768613972881592, 0.1847504574039731, 0.1865731191965012, 0.1817513438462578, 0.1665333025127076, 0.1207914665021157, 0.15285532696610227, 0.15530666434400786, 0.14734038462115417, 0.16472535005652245, 0.3427421202707692, 0.37657547404338454, 0.39932410046177913, 0.20296832213500715, 0.13417830076311088, 0.14842437403015607, 0.2401089076202445, 0.2868603722536618, 0.25103909132580327, 0.18218395390112407, 0.182995696378221, 0.19673793612582002, 0.1890927465578337, 0.1974929071974496, 0.17873244886114226, 0.19495273979318994, 0.1986405193856371, 0.1822990467552874, 0.08646459400873663, 0.07863348380698243, 0.08370832648165438, 0.09183441990452013, 0.09699148573395378, 0.0734032873635162, 0.08520432580664905, 0.10058995833066475, 0.09244615870737471]}, "mutation_prompt": null}
{"id": "9dd0e045-f9e1-411d-8cfe-7161deed3171", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "79714f7d-05e0-48a7-b3f6-468de82a6264", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "5a1f627d-17d8-4bc7-8f07-e9ffe576cfcf", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "fd05827b-565a-410d-80a6-d77448b8415b", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation_rate = 1 / (1 + r)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * mutation_rate * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhancing the population diversity by introducing a dynamic distance-based mutation rate.", "configspace": "", "generation": 27, "fitness": 0.1869907278878857, "feedback": "The algorithm EnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.48858312614986654, 0.4530562867347039, 0.45280795936825113, 0.44883525126346324, 0.44252719750714575, 0.4385939133120156, 0.4398795640584987, 0.45465572812601507, 0.41792933793622455, 0.05874411725986606, 0.04851390379426779, 0.03351455570965567, 9.999999999998899e-05, 0.024903404300857024, 9.999999999998899e-05, 0.0018860769429651647, 0.035702172113261765, 9.999999999998899e-05, 0.10852900488394412, 0.10246231505606884, 0.08180540876401354, 0.09778147373478441, 0.10054518963267578, 0.13120962729856178, 0.09685938514747827, 0.1121808088006071, 0.09964095931133032, 0.09960949004116659, 0.0771197371937713, 0.06906118791647109, 0.097826268376356, 0.07647338964388806, 0.0662324734137062, 0.10559686851397632, 0.10678264270527893, 0.07543940584785158, 0.5309011523625499, 0.5198276868484497, 0.6251100027281113, 0.5042758515109237, 0.553991753478102, 0.5961993301908755, 0.6449502904615119, 0.6312841964555419, 0.5465942905841998, 0.2845307566385544, 0.2500957315934468, 0.18376729181067653, 0.257024854974218, 0.2683120653463691, 0.2555217971519179, 0.2647332926203432, 0.21097509845731977, 0.27708741558212235, 0.22110117789855, 0.2510556027667089, 0.16892746287544957, 0.26799642650339084, 0.34519994412970534, 0.19534267383677473, 0.16628856718566754, 0.26839277734033207, 0.14129406613185624, 0.17883515438729392, 0.13956016238900826, 0.15764577478540998, 0.10370991491853798, 0.20505536399622049, 0.07997430724981658, 0.20736834494095202, 0.19239374199378467, 0.1784365522155691, 0.1441397342443923, 0.1645550266530934, 0.21358323649397937, 0.13276562557971316, 0.18491672536110348, 0.13217948169383675, 0.19188918356846707, 0.15970809722915458, 0.14020856297507822, 9.999999999998899e-05, 0.0002603006880722569, 9.999999999998899e-05, 0.037872106646501424, 0.04245738136731503, 0.002147243867228865, 0.017517669351624354, 0.003338452260768787, 0.03187010966571602, 0.16241685207133416, 0.06746489419510449, 0.15585161551451088, 0.03382851074819504, 0.022563823478778833, 0.025040702191573838, 0.1016115765212946, 0.1093465693562179, 0.10995331474866166, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010704135184309571, 9.999999999998899e-05, 9.999999999998899e-05, 0.002772931936080747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10964279045642056, 0.11057122163722288, 0.11443249365189223, 0.09528303426844564, 0.10992283542720305, 0.12195589029479348, 0.093339977652237, 0.09528136936108367, 0.07285187017706052, 0.4385376766104542, 0.43362424220609985, 0.408968765886899, 0.38863050551884193, 0.40572560316227435, 0.3941236963114063, 0.41897160424712476, 0.4251416804795881, 0.4297359552902815, 0.05901929792932392, 0.050515576071327284, 0.07243174774500527, 0.10320120504407626, 0.07795844463132962, 0.09660681433984297, 0.08132875123133732, 0.07152395143738977, 0.0748891585056134, 0.22539017506760395, 0.134457214039451, 0.15849988284027128, 0.25798822849675485, 0.11838836335794911, 0.19321297676356075, 0.1861097788791788, 0.20167377058280278, 0.19141190731926305, 0.17460552981871114, 0.18849830663736433, 0.29711131811105607, 0.29634009333758293, 0.24584226434689171, 0.25052093480199034, 0.24853142804027795, 0.22151222289406647, 0.2190356377898891, 0.14408187365023672, 0.1929611495345095, 0.2443578034870093, 0.17837731421860648, 0.2021124124991518, 0.24187050184307102, 0.19435085097312466, 0.24285077486650775, 0.16975100152038358, 0.24106117146442207, 0.2286065710893389, 0.21221860223594546, 0.2591933170473564, 0.23179312329592838, 0.23419943065132298, 0.22914319561780827, 0.23420657823761837, 0.23634769768835306, 0.175879007290084, 0.1786583997298622, 0.19062395482703687, 0.17071094603647963, 0.17541574415423855, 0.17159022942048463, 0.1856860310487285, 0.17732703323194798, 0.18326165961802066, 0.6262904786670265, 0.18834555436667888, 0.18175639600660132, 0.3229019586148144, 0.1207914665021157, 0.1847867234738726, 0.15767692017512658, 0.10606620087885255, 0.1622074399791249, 0.47916810599802717, 0.18483252652282856, 0.08823073753980859, 0.19518089645973635, 0.14366325463032026, 0.14545469238295972, 0.2860127800897342, 0.15699021287995707, 0.2913041343626761, 0.18011189224948632, 0.1799954099964165, 0.1930075450524794, 0.17658804816457363, 0.19643381744632638, 0.1958526017135901, 0.20525333156526493, 0.19754258229055965, 0.18554882219328783, 0.07986378509477365, 0.08099518323907162, 0.06995896323253914, 0.09107828303189713, 0.08857391766456058, 0.07263275916350598, 0.08429033101165184, 0.09242567839155913, 0.09662197764921132]}, "mutation_prompt": null}
{"id": "4e326f9d-4ee8-4ce6-a3ee-f0b7a4c89865", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "e30bca88-9cfe-49ae-9958-4a373576723a", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "97a7863f-3308-4d77-9fb8-c4f675fd97d6", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithm", "description": "Enhanced Firefly Algorithm with Levy flights for global optimization in continuous search spaces by introducing a dynamic population size and adaptive alpha value.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.44705832480730023, 0.44009973921017054, 0.4377864607303933, 0.4284104476980112, 0.4075659876280754, 0.42578972984236074, 0.44677147990482424, 0.4413499815399172, 0.4383204437880498, 0.047627811482713556, 0.025201603992640376, 0.03128741254764078, 9.999999999998899e-05, 0.013824391475115272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11133908305308182, 0.13423954923471026, 0.10359478667615984, 0.10094862188496356, 0.09885196197765322, 0.11932118465454644, 0.10183049033356106, 0.11461012901779122, 0.0941246529892944, 0.09600145717355768, 0.08929970874331461, 0.1013128760066736, 0.09441355223013792, 0.09079357256273612, 0.07110365677555741, 0.10264522106546559, 0.0904667506438489, 0.09443284763015292, 0.5910567163380908, 0.543524003877939, 0.6463762080023855, 0.6023604486531402, 0.5748897071195661, 0.606203435154816, 0.6759577278415398, 0.6413266240381297, 0.6398357234150815, 0.2399710357290411, 0.23802292828511296, 0.20597093095730534, 0.23031093079050413, 0.25073644190617006, 0.25760124869125167, 0.2676446943565347, 0.19399853738449901, 0.24803037041231624, 0.17161185672536572, 0.21023207776240982, 0.16994658908711358, 0.2674231224496626, 0.3223714945607108, 0.25932393108195495, 0.20182961397478516, 0.22401470523373224, 0.23927196324622668, 0.20348017329495394, 0.14157813906522698, 0.1943642267399932, 0.12856295265742324, 0.2257786200095676, 0.1375410074750234, 0.18691588196236175, 0.1586779834626726, 0.1763668081109816, 0.14919022403059812, 0.1587496873127615, 0.21828836963067888, 0.13520611494425105, 0.15844905854878633, 0.1413396737057625, 0.14597435242265333, 0.2239152946681191, 0.1499401966520485, 9.999999999998899e-05, 0.006132974796780433, 9.999999999998899e-05, 0.0344195742060458, 0.04861567793001975, 9.999999999998899e-05, 0.012592608803926653, 9.999999999998899e-05, 0.014572759342757147, 0.156433888602032, 0.07016203441735325, 0.12589247873356268, 0.04419599238020744, 0.040999456244837695, 0.046921402777760024, 0.09084594471146834, 0.0973197408372829, 0.1376763289755223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722156028338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085169907410938, 0.10030402854330278, 0.09441849631643129, 0.0701791367445267, 0.1208688360413469, 0.09197111032159755, 0.08804714275382941, 0.10395593921591861, 0.06900770718154747, 0.40886771333237926, 0.4098676232193148, 0.4126016029521057, 0.38632395013209864, 0.4085691598341623, 0.3986665886246069, 0.40728330085640807, 0.40739944050303667, 0.41381763170849906, 0.07366379783663102, 0.0861644695297713, 0.07601822381623369, 0.0937352067002667, 0.11342149308258065, 0.09861720580652167, 0.11279996785130841, 0.09787577981530537, 0.1282709184171099, 0.2131423349587901, 0.26040868217937163, 0.15219940859014292, 0.20276932401302472, 0.18434399348859343, 0.1785516309735944, 0.15855253022609905, 0.1759779279226905, 0.16631869424720425, 0.18154310299167686, 0.19287185487445724, 0.2916783940856985, 0.2883199625998799, 0.2913970209112583, 0.2979990870769822, 0.21690090551362573, 0.26752468606993685, 0.24328093922348137, 0.17794860907213605, 0.19801301894360546, 0.23789410670669553, 0.23674696105056714, 0.22066590393534535, 0.23927846948278808, 0.2041976341573789, 0.19986989728261506, 0.17927241717110554, 0.2296673984424522, 0.24151517945165835, 0.19770100575318827, 0.24325653839938088, 0.25990749321632434, 0.23570687668753498, 0.23958709845077586, 0.23214629325562286, 0.2509723157215309, 0.18526219190584947, 0.16442989293110166, 0.18505812332697458, 0.18926041305240437, 0.18376654080654953, 0.17807785072951754, 0.16653168729912848, 0.1740384465524185, 0.17318819071109937, 0.18452954701798574, 0.18683139605633448, 0.18061027807197172, 0.1665333025127076, 0.1207914665021157, 0.1630820041920773, 0.15641692693804976, 0.15750150373523542, 0.16454128063142903, 0.489368046300542, 0.5062829222933398, 0.40964203921905995, 0.2019443712162151, 0.13551242030931698, 0.1494675930321111, 0.2689674700326483, 0.3449522714565013, 0.27601818229002006, 0.18473934504043632, 0.18213165119715535, 0.19458727405752863, 0.1890927465578337, 0.18943337957166828, 0.18592457753503766, 0.18288154173967197, 0.1895305837495711, 0.18855671702758725, 0.09112467836070082, 0.0839060619819556, 0.08490396393294819, 0.08511385097701019, 0.09257615495780103, 0.07059776696181652, 0.08559974260462144, 0.09452560494155127, 0.09090776287481661]}, "mutation_prompt": null}
{"id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 31, "fitness": 0.19151594563210048, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "fe8aa868-f9cc-4238-b507-c13bc30e864e", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "9a1ca5a0-a8b9-4b15-afcb-2c6555507526", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "10bf8108-a403-4716-8e13-80e45e9f39f7", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "55670fa6-a61b-4707-bf97-1ffd0b097106", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "48b29fec-b7f9-45ed-af7d-181f532b5c0b", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "8c469782-8d81-4147-8fc0-7cba3c76c882", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "1572ea51-2c1b-456f-8a65-45bfaf2c1d7d", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "572db1e4-34d7-42ce-a9cd-3280e1910e10", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "a1a978c7-613b-4e39-95ef-7e7b0cf427bd", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "5934c8b7-aed1-43fc-882e-0575dd427a98", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "0b8aa6e7-5684-4820-b872-d903c1e830a8", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "36fe547b-5ad6-433a-9efe-3790a44f4b2a", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefinedNiching:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def crowding_distance(self, population):\n        distances = np.zeros(len(population))\n        sorted_indices = np.argsort([func(individual) for individual in population])\n        distances[sorted_indices[0]] = np.inf\n        distances[sorted_indices[-1]] = np.inf\n        for i in range(1, len(population) - 1):\n            distances[sorted_indices[i]] += np.linalg.norm(population[sorted_indices[i+1]] - population[sorted_indices[i-1]])\n        return distances\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            crowding_distances = self.crowding_distance(population)\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefinedNiching", "description": "Improving convergence speed by incorporating a niching strategy through crowding distance calculation and selection of diverse solutions for exploration.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {}, "mutation_prompt": null}
{"id": "203b05f4-9a5d-4464-ac28-99868b8a1594", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Refinement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic step size adaptation based on fitness improvement.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715122, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.20076114036832593, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "396a7b28-fcc2-48f9-b5bc-919e047e3061", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha_min = 0.1\n        self.alpha_max = 0.5\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.alpha_min + (self.alpha_max - self.alpha_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha_min * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            self.alpha = self.alpha_min + (self.alpha_max - self.alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmImproved", "description": "Improved Enhanced Firefly Algorithm with Levy flights incorporating adaptive population size and dynamic alpha adjustment based on budget progress.", "configspace": "", "generation": 44, "fitness": 0.14397307746192137, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.3708999171031566, 0.38110140620455624, 0.37757813708528387, 0.33208060587975297, 0.3002116427847771, 0.3171761496692871, 0.33987553910939783, 0.3639722294045329, 0.33441405184820905, 9.999999999998899e-05, 0.014987498067314475, 0.04935527376363258, 9.999999999998899e-05, 0.012227939147192446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08641614338455561, 0.08429451474436156, 0.08872373349299834, 0.09764958876926089, 0.08927251411274706, 0.08351996719125288, 0.07885926547279398, 0.10445423295133516, 0.08368128666518004, 0.07729909102285071, 0.07485793107083794, 0.07142209274213651, 0.08090730028487902, 0.06876705063174104, 0.07847041936410237, 0.08265562665341986, 0.0779956537004588, 0.07587618402799512, 0.12612990841903826, 0.1173948131860314, 0.11536383355211821, 0.1031535030782581, 0.11536060846004004, 0.11337280023107665, 0.13683105373507698, 0.13367986513000019, 0.12337850813579188, 0.15515168935048373, 0.13626567278045298, 0.1326229245272199, 0.16906491818321978, 0.18656424438564467, 0.1751653035218318, 0.17166601764310085, 0.15524144639940618, 0.16880145561813986, 0.21494018863037523, 0.2083709590689078, 0.16315016318955422, 0.2881322902331521, 0.22500802908313533, 0.21191088015213477, 0.17641448983685082, 0.2058925527367388, 0.24976394941353208, 0.09978451565871926, 0.10076952055025445, 0.10499183152825153, 0.06249373176501305, 0.12781351369374483, 0.044593938537278666, 0.1305851027514947, 0.14520252576117887, 0.12385554972955981, 0.12539296386186494, 0.11510827361224385, 0.12225254795572005, 0.12909155471673806, 0.15529831167714314, 0.11991433940040552, 0.14736922701324273, 0.11653375822707601, 0.12619260990292314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02404627013461813, 0.025451485481821745, 0.0016827579087824729, 9.999999999998899e-05, 9.999999999998899e-05, 0.01749385650157076, 0.1171046198856387, 0.08409051870178808, 0.10533609940941968, 0.040418075506814644, 0.04112803890675076, 0.04658321529327747, 0.08170692522855483, 0.11100690441086702, 0.10900368480262712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061173364671242236, 0.06301176337616599, 0.04997597037551915, 0.04401504664981715, 0.06624515770186623, 0.06506144601981978, 0.0494813884307157, 0.06283994512429747, 0.04383427668323858, 0.3370310286917817, 0.35179393693960326, 0.33995576256444093, 0.3223043895715012, 0.3225825311286684, 0.3044226602110681, 0.32851611892549426, 0.32998301254443396, 0.3652390804144132, 0.05796012508651416, 0.07399512675664233, 0.06630323271604088, 0.09743511941387295, 0.08637488376548608, 0.08993253192958761, 0.08163253428040951, 0.09907355953701502, 0.08575367288343627, 0.15687960275848067, 0.24359323175420344, 0.14296198009185923, 0.1315818543416799, 0.18843603179930346, 0.15879770473769061, 0.17246592185688858, 0.12785524857594688, 0.12703887787466828, 0.19003115495023104, 0.20480959677536126, 0.19178907645701015, 0.2482184775598888, 0.2540084032484291, 0.25682470288958037, 0.2288741046844922, 0.23229372375332702, 0.19508856188316026, 0.1607842084355341, 0.17597998586465147, 0.1619370653939839, 0.1467461877917945, 0.20215790475589313, 0.18542680361821273, 0.17445658561932165, 0.1678348952194536, 0.1650824851889141, 0.21980653702608088, 0.2567069476460805, 0.21967916842092194, 0.22680306584238175, 0.23140170142548744, 0.23386704740604747, 0.22564575949492804, 0.2340103410699057, 0.21420282005884939, 0.16317987008247015, 0.17613956983513512, 0.16731355956562077, 0.1720318646862926, 0.16494606903176812, 0.1641988556112618, 0.1680731138383622, 0.16472646101900024, 0.16339723871039402, 0.1765935844343126, 0.18096788119224394, 0.17065953641637477, 0.49620432659899816, 0.16980566473515135, 0.13936954658927603, 0.10747083516279055, 0.16038751792195238, 0.15874822948951894, 0.33953542068898634, 0.24606260939933478, 0.3625594971983429, 0.15911564417690838, 0.17256293741990936, 0.1307521262849839, 0.21656452042196983, 0.1459403466333179, 0.2350680853449979, 0.18510016673856566, 0.18581016595417887, 0.18351704063470298, 0.1938406456857853, 0.20188227231284628, 0.18732338845865515, 0.18285744550633487, 0.19772996939708998, 0.18945673789315187, 0.08508987010746638, 0.07175668038473382, 0.07695267902057623, 0.0768375824241595, 0.0873123593324413, 0.10328721275327024, 0.08348386676393693, 0.081907212793215, 0.08956776691379997]}, "mutation_prompt": null}
{"id": "631672b5-221a-43f1-a2d5-2ea23621eb70", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 40\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmImproved", "description": "Enhancement of Enhanced Firefly Algorithm with Levy flights by incorporating dynamic population size adaptation and improved step size adjustment mechanism.", "configspace": "", "generation": 45, "fitness": 0.19030210930528607, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4144826755075198, 0.4348545561408418, 0.412021570790871, 0.40343562453537185, 0.3895554142848838, 0.43005705381792625, 0.39867227840522124, 0.418767595834037, 0.40489141582851906, 0.00622294835757875, 0.0326413033724664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08682920486276235, 0.11060773767180887, 0.11661651225819136, 0.10699553893521607, 0.0827607338762344, 0.1185473639727257, 0.10325427004106236, 0.09850048467225969, 0.10607602358352064, 0.08867398333974674, 0.07005531675395282, 0.09519943779652462, 0.09152343985938582, 0.09515294975342348, 0.06778730336399241, 0.09657912483450326, 0.09225591929083732, 0.077089461543429, 0.4708434479183944, 0.5678189905555482, 0.6152929816418671, 0.5018682360059386, 0.6150487585868784, 0.6182370138694577, 0.6907487896020932, 0.5391049607468523, 0.6174454977499129, 0.26494584531990917, 0.22784985488161114, 0.24468628902740475, 0.28947152384715813, 0.2310431542253134, 0.2573426084940015, 0.29507674122141014, 0.20106665620713948, 0.24140338609450807, 0.22085335644246729, 0.20418848934030087, 0.2179738766285546, 0.31842390938153053, 0.3385559165655363, 0.2641072715680681, 0.2574408587742447, 0.23266636800220208, 0.22646148656257237, 0.17630977333519438, 0.1380852663250105, 0.1303604121238806, 0.11466498188707541, 0.12791084643396866, 0.09964907387987154, 0.15281470973641575, 0.15405720725536554, 0.15719575425857024, 0.1264486453492526, 0.18223468138676258, 0.12010511800073131, 0.12774345178201874, 0.14800922187551768, 0.1297560133227671, 0.15719694237353976, 0.18233999147452495, 0.15168416664943563, 9.999999999998899e-05, 0.010303112595678399, 0.011256267920570773, 0.02735219613831219, 0.015234460842928454, 9.999999999998899e-05, 0.01614070897328146, 9.999999999998899e-05, 0.012985647447852133, 0.1755068244606438, 0.08582559871874895, 0.17980536237058808, 0.053040953247928346, 0.046235537077685684, 0.03134509759816684, 0.10650501378703536, 0.12820726367786828, 0.12103136089488031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08294933017442341, 0.08559886648660064, 0.10524512949588183, 0.0769148153961089, 0.11245332276743902, 0.10365005959164042, 0.06654725012329199, 0.07607582958934378, 0.07108583239809718, 0.40472109384630683, 0.3979776907018262, 0.3961029515704969, 0.37424031653509116, 0.3740357797060755, 0.3719992156953814, 0.4312465131450375, 0.3885477160032097, 0.3994922612068693, 0.06792855942854525, 0.09991469645685958, 0.0840377224316824, 0.11956449258963364, 0.10152802832576469, 0.10431131428220719, 0.13306959863777612, 0.10291901256665592, 0.10601912747882414, 0.2531046954979368, 0.17768383124684495, 0.15060089328103898, 0.14318553583734683, 0.11815110629347414, 0.1385965900987256, 0.18010618378652798, 0.1621504190451677, 0.15357200944928717, 0.23062601890408718, 0.18188964321671142, 0.1808663803552245, 0.2653240290892258, 0.2852404338036375, 0.2617069414548143, 0.22839763027238968, 0.2706135166074768, 0.22275426982394375, 0.1721129051554271, 0.16848478487770258, 0.17209423685243308, 0.2030491337633924, 0.21014792138068672, 0.18794743296162753, 0.187462519318772, 0.21376080708390366, 0.1998885399815442, 0.2013718026303115, 0.24922403215471067, 0.1944340611588049, 0.23146014164414774, 0.2349421660434532, 0.21589795937010392, 0.21973225932605722, 0.25904379911399233, 0.23678214637493145, 0.1740944967669742, 0.19913810827878498, 0.19133593988060715, 0.2089497237690221, 0.19038584868264996, 0.17690288238445262, 0.1800172091841079, 0.1660050247098428, 0.17506628387611467, 0.18568563651039627, 0.18607993486756746, 0.1313768638168381, 0.6607926580857422, 0.17010783476690017, 0.5119179400122141, 0.657962081050076, 0.48231472483669746, 0.16581464132439583, 0.4285985971460491, 0.1472312004131623, 0.4968489587903939, 0.19862719122979644, 0.1077104796141628, 0.14697403724580382, 0.3134336353830185, 0.2390851687984492, 0.30532368364621043, 0.18484849886408605, 0.18686788969611234, 0.18234646459157844, 0.19303386013697987, 0.18833315126922134, 0.1846715742263686, 0.1990620570678162, 0.20362310896913027, 0.17810833221203082, 0.08064884366935132, 0.08212739034854766, 0.08407472791451598, 0.08068799354333456, 0.08685361617466192, 0.1286297176612321, 0.09221272892360599, 0.06507388509065326, 0.08637250487743497]}, "mutation_prompt": null}
{"id": "c0b25cc3-5d1c-4618-b376-35ada29da763", "solution": "import numpy as np\n\nclass ImprovedEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if _ % int(self.budget * 0.1) == 0:\n                population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n                if population_size > len(population):\n                    new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                    population = np.vstack([population, new_population])\n                    fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedEnhancedFireflyLevyAlgorithmRefined", "description": "Improved Enhanced Firefly Algorithm with Levy flights by incorporating a dynamic population resizing strategy and adaptive alpha parameter update based on budget progress.", "configspace": "", "generation": 46, "fitness": 0.19148367670096553, "feedback": "The algorithm ImprovedEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.4194429366693624, 0.4301263663340722, 0.4524917013335057, 0.41346415207000964, 0.3904938505121335, 0.4130409446508868, 0.4406460552621767, 0.4094526483880011, 0.39819752186717683, 0.05990112769582989, 0.022060438003217442, 0.026338551566890023, 9.999999999998899e-05, 9.999999999998899e-05, 0.015176661524515245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14163032607698556, 0.12284790612465424, 0.09310718340718649, 0.09951338252259279, 0.1036870442469432, 0.08772268289994045, 0.1033022502159533, 0.1101535755810864, 0.11073509494974554, 0.09877549456480794, 0.07943720376679742, 0.09343963478108741, 0.09024351104128492, 0.07014339466516506, 0.08116060535267566, 0.10461194452180478, 0.09800011004829157, 0.0878082060375669, 0.5907842364323292, 0.5630802608840513, 0.6070700102480058, 0.6234267904516164, 0.5313964875231647, 0.5599776764948341, 0.5492385772253782, 0.5865279139564075, 0.5155635084945231, 0.26017966280863114, 0.23418955899669336, 0.2586967719793477, 0.26158227391188726, 0.2474696612206514, 0.2665406519448338, 0.24393555438725378, 0.22769389591471478, 0.24873288056500098, 0.22913513077603975, 0.22622851545767397, 0.16821512136715133, 0.3366592744776854, 0.30731653555237204, 0.20288608546606668, 0.19379105124318163, 0.21347471238427618, 0.2254817209611638, 0.16895370536294663, 0.14040630798555376, 0.1306078467012758, 0.127956636419698, 0.14600422630093746, 0.09189704033218715, 0.13849932231201345, 0.15768463890622098, 0.14999741955250467, 0.13397053425662764, 0.1531112913830428, 0.15911615817273028, 0.13512657641224746, 0.16754043731813928, 0.1237867393273846, 0.1425157208366038, 0.1367719404283687, 0.17571314117576908, 0.007964983365944645, 0.006502976156743889, 0.00883660669778652, 0.03358384375273327, 0.03378912755770813, 0.004543476444578642, 0.026805662235988126, 9.999999999998899e-05, 0.03342163751473437, 0.1800006284743093, 0.08169523726572536, 0.13287516689096068, 0.057902848867358414, 0.030802587456041697, 0.0409185627094788, 0.11868931289529028, 0.12411559529343152, 0.1901242841434958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007772289423104706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10983866639884166, 0.09134856821291482, 0.08971799897308119, 0.07098235296091948, 0.0915302039438548, 0.0956140348785941, 0.07644925208166109, 0.07078042632366455, 0.06168784968467622, 0.377796874178116, 0.4038932534911087, 0.39981105625202107, 0.3641318775943493, 0.3823286091701774, 0.38027563671050624, 0.42524032986060945, 0.4089870148283127, 0.4114966009495592, 0.0983805912559994, 0.08942140518473207, 0.08147834177377877, 0.1120306715208137, 0.10257088323953645, 0.09147445728779602, 0.10707683191493578, 0.1060306309810729, 0.08557609024590951, 0.13276116316096798, 0.19504266264183467, 0.14912401815158804, 0.17492640675665627, 0.17241095680308338, 0.1770514963960268, 0.15957709679807464, 0.2230755210239257, 0.1735144993587, 0.18214546227181094, 0.20677369877490936, 0.25902990987999963, 0.27336625892653044, 0.25809966752490243, 0.2714724683563442, 0.2642754955429656, 0.27233648363499874, 0.214452144642286, 0.19290450710716867, 0.20712196090812218, 0.20463382738983904, 0.2031339059294518, 0.21508813518683978, 0.2159111421829787, 0.19151495160493082, 0.21882362825936963, 0.19521857391132102, 0.22338727519054624, 0.23536831223794463, 0.22467376831724695, 0.27619236395187285, 0.23267763756644322, 0.2535096370815354, 0.23521452963615785, 0.2185862774895323, 0.22901701244062234, 0.17376486597423013, 0.18395560794392063, 0.1764358562726802, 0.1854492701007986, 0.17929683996956214, 0.18232935347888835, 0.17997882097509577, 0.18378217819484477, 0.16997705835413457, 0.18465555739207418, 0.186249999534439, 0.18018061543315178, 0.5646880135750132, 0.19670220174832787, 0.5459668335095063, 0.2373599203862471, 0.5126821199372826, 0.16329279599936963, 0.4253423796901218, 0.34923039393775923, 0.4400433524816383, 0.25384847837510294, 0.3547350625871478, 0.14411392388026212, 0.3464808258967984, 0.1564597976768246, 0.3366382514546008, 0.17923989816241503, 0.1873306033023837, 0.18933428457018386, 0.1908459007792389, 0.17542314907292533, 0.18860802956041678, 0.1828940181104105, 0.19713288241846139, 0.17804824814108255, 0.08282554561971778, 0.08324608349820029, 0.07595652364434569, 0.07885926095210072, 0.09361922339753603, 0.07185721471785733, 0.08688369147989672, 0.08688765094879003, 0.07864173968155241]}, "mutation_prompt": null}
{"id": "b30acf4c-f0ad-4b7f-848a-ec1d8f2720f6", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Enhancing the search diversity by introducing a mutation mechanism inspired by particle swarm optimization to explore new regions of the search space efficiently.", "configspace": "", "generation": 47, "fitness": 0.20255524460660973, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "53bdcb86-34f9-48a4-b44f-72941102da7f", "metadata": {"aucs": [0.43845055876491956, 0.42868989959986237, 0.3977250521292609, 0.4041788839872442, 0.38618572427009645, 0.4006335048496146, 0.4299566892966379, 0.41741799873155083, 0.4156191090028257, 0.046191468258649504, 0.036332886509358286, 0.09104427163781659, 9.999999999998899e-05, 0.008828185327735771, 0.02088602241303794, 9.999999999998899e-05, 9.999999999998899e-05, 0.008378775172454667, 0.10726297935159768, 0.12108107677587177, 0.12388755233746851, 0.1325437365624209, 0.11443836127993012, 0.09092030021696773, 0.0920667611332443, 0.1300632745021083, 0.1198904240723343, 0.07742406225560317, 0.07784904239299106, 0.08529552673992147, 0.10460072455372393, 0.072275432755739, 0.08198592367376445, 0.10113347579653875, 0.09555637663765482, 0.10558709432814517, 0.8905718663072756, 0.8251845453195746, 0.8971866854685211, 0.8121647337879293, 0.8346853558880399, 0.8896263833431558, 0.8854651355615164, 0.8865408100700033, 0.8747521865833412, 0.2737919686091509, 0.27937765984482954, 0.24110962204341468, 0.26682014637740037, 0.2775397625122824, 0.2584148217965857, 0.33829823955721217, 0.26800905458663515, 0.28550459254382854, 0.3310387820230548, 0.24144281976830573, 0.13991268674146418, 0.2374125725384707, 0.3442318504440315, 0.30305133675796136, 0.17510195621173152, 0.20952942212310077, 0.22700683832146562, 0.16324546614221347, 0.09968336641656839, 0.13579046863390454, 0.17436825842086223, 0.1652222229119994, 0.13875485191466452, 0.17275153573588686, 0.1240830533241507, 0.16341166303973298, 0.17900206001154761, 0.11368771465014071, 0.13760375830493776, 0.13235308481258767, 0.1494718621013269, 0.1270221762934085, 0.16319315326460182, 0.1069961777995937, 0.144566732383845, 0.018144385253271, 9.999999999998899e-05, 0.00587751694831351, 0.02714922596020275, 9.999999999998899e-05, 9.999999999998899e-05, 0.005088660890407493, 0.02147222203789534, 0.056966501575185235, 0.10251833748989903, 0.10264392821233925, 0.1725472830340936, 0.027833433880473657, 0.01448823743334815, 0.044828283139461744, 0.08018043002731867, 0.08082456138871241, 0.15564633679978956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07800983254161498, 0.0854851707374421, 0.07199932205113724, 0.0930057164190835, 0.0882055040280817, 0.10329595841381778, 0.07627130028938645, 0.09739364726702937, 0.06682304204149025, 0.39387700808503856, 0.41480653976110093, 0.38270747420653384, 0.38182221820054196, 0.3653584532775276, 0.37594009898099934, 0.37687991836261825, 0.38889151141637834, 0.4036466765501564, 0.10354281203412297, 0.07986152252081391, 0.10431656131334144, 0.0830467673597346, 0.10153715427824539, 0.09559195090281647, 0.07344080059950087, 0.09950032797519948, 0.09164526448619859, 0.1501202802278998, 0.257474423141561, 0.16517210821130734, 0.22085516147453466, 0.22754835979288313, 0.24858765844075725, 0.2644322776157507, 0.24754537568599222, 0.21241063848203878, 0.19138265785575026, 0.2790480062863877, 0.2781555250653912, 0.23664861084417566, 0.2702573861895846, 0.2731903377694115, 0.22391222032397873, 0.28088917951817105, 0.24475970867943297, 0.2122308042334894, 0.1795247985733629, 0.21130161013178317, 0.20406938213890002, 0.20570146107055565, 0.21930475748831546, 0.1863163548246073, 0.23749536511578595, 0.21509440055109297, 0.24920218080426648, 0.22339840338177586, 0.19977210482302177, 0.21136446769220218, 0.18738776171920046, 0.23082405767844882, 0.23447252445223554, 0.20702661780915954, 0.2162197272592865, 0.1861600797931935, 0.2021645126209224, 0.18578110162893846, 0.19249481246517575, 0.2041323707686339, 0.22793153259821464, 0.20609009591119587, 0.19350527245066595, 0.23909009680894144, 0.18647730315855993, 0.1866786939484154, 0.187801865197885, 0.6149729090258489, 0.20115624354394845, 0.11465882311342579, 0.16307895779515713, 0.1604785677745676, 0.57297197133814, 0.5214758323704343, 0.21073238392086435, 0.07349826115535474, 0.16633353401956574, 0.15360397604884457, 0.15025334836057425, 0.09437277466339677, 0.45077862445170713, 0.2877566571407487, 0.20168903828943008, 0.1935502487823555, 0.18402597251785902, 0.20385207610075184, 0.1817656085447782, 0.1866057860946656, 0.19211743082837862, 0.17422918426360035, 0.1790228201279227, 0.08173661623746065, 0.09475565440645783, 0.08721787941695236, 0.0739165203466231, 0.08945280961288993, 0.0858625849794582, 0.08709929795351723, 0.09721076279278751, 0.0763227515259769]}, "mutation_prompt": null}
{"id": "941d05c6-c477-4bc4-b784-c32c55c6aaec", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Enhancing the search diversity by introducing a mutation mechanism inspired by particle swarm optimization to explore new regions of the search space efficiently.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b30acf4c-f0ad-4b7f-848a-ec1d8f2720f6", "metadata": {"aucs": [0.43845055876491956, 0.42868989959986237, 0.3977250521292609, 0.4041788839872442, 0.38618572427009645, 0.4006335048496146, 0.4299566892966379, 0.41741799873155083, 0.4156191090028257, 0.046191468258649504, 0.036332886509358286, 0.09104427163781659, 9.999999999998899e-05, 0.008828185327735771, 0.02088602241303794, 9.999999999998899e-05, 9.999999999998899e-05, 0.008378775172454667, 0.10726297935159768, 0.12108107677587177, 0.12388755233746851, 0.1325437365624209, 0.11443836127993012, 0.09092030021696773, 0.0920667611332443, 0.1300632745021083, 0.1198904240723343, 0.07742406225560317, 0.07784904239299106, 0.08529552673992147, 0.10460072455372393, 0.072275432755739, 0.08198592367376445, 0.10113347579653875, 0.09555637663765482, 0.10558709432814517, 0.8905718663072756, 0.8251845453195746, 0.8971866854685211, 0.8121647337879293, 0.8346853558880399, 0.8896263833431558, 0.8854651355615164, 0.8865408100700033, 0.8747521865833412, 0.2737919686091509, 0.27937765984482954, 0.24110962204341468, 0.26682014637740037, 0.2775397625122824, 0.2584148217965857, 0.33829823955721217, 0.26800905458663515, 0.28550459254382854, 0.3310387820230548, 0.24144281976830573, 0.13991268674146418, 0.2374125725384707, 0.3442318504440315, 0.30305133675796136, 0.17510195621173152, 0.20952942212310077, 0.22700683832146562, 0.16324546614221347, 0.09968336641656839, 0.13579046863390454, 0.17436825842086223, 0.1652222229119994, 0.13875485191466452, 0.17275153573588686, 0.1240830533241507, 0.16341166303973298, 0.17900206001154761, 0.11368771465014071, 0.13760375830493776, 0.13235308481258767, 0.1494718621013269, 0.1270221762934085, 0.16319315326460182, 0.1069961777995937, 0.144566732383845, 0.018144385253271, 9.999999999998899e-05, 0.00587751694831351, 0.02714922596020275, 9.999999999998899e-05, 9.999999999998899e-05, 0.005088660890407493, 0.02147222203789534, 0.056966501575185235, 0.10251833748989903, 0.10264392821233925, 0.1725472830340936, 0.027833433880473657, 0.01448823743334815, 0.044828283139461744, 0.08018043002731867, 0.08082456138871241, 0.15564633679978956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07800983254161498, 0.0854851707374421, 0.07199932205113724, 0.0930057164190835, 0.0882055040280817, 0.10329595841381778, 0.07627130028938645, 0.09739364726702937, 0.06682304204149025, 0.39387700808503856, 0.41480653976110093, 0.38270747420653384, 0.38182221820054196, 0.3653584532775276, 0.37594009898099934, 0.37687991836261825, 0.38889151141637834, 0.4036466765501564, 0.10354281203412297, 0.07986152252081391, 0.10431656131334144, 0.0830467673597346, 0.10153715427824539, 0.09559195090281647, 0.07344080059950087, 0.09950032797519948, 0.09164526448619859, 0.1501202802278998, 0.257474423141561, 0.16517210821130734, 0.22085516147453466, 0.22754835979288313, 0.24858765844075725, 0.2644322776157507, 0.24754537568599222, 0.21241063848203878, 0.19138265785575026, 0.2790480062863877, 0.2781555250653912, 0.23664861084417566, 0.2702573861895846, 0.2731903377694115, 0.22391222032397873, 0.28088917951817105, 0.24475970867943297, 0.2122308042334894, 0.1795247985733629, 0.21130161013178317, 0.20406938213890002, 0.20570146107055565, 0.21930475748831546, 0.1863163548246073, 0.23749536511578595, 0.21509440055109297, 0.24920218080426648, 0.22339840338177586, 0.19977210482302177, 0.21136446769220218, 0.18738776171920046, 0.23082405767844882, 0.23447252445223554, 0.20702661780915954, 0.2162197272592865, 0.1861600797931935, 0.2021645126209224, 0.18578110162893846, 0.19249481246517575, 0.2041323707686339, 0.22793153259821464, 0.20609009591119587, 0.19350527245066595, 0.23909009680894144, 0.18647730315855993, 0.1866786939484154, 0.187801865197885, 0.6149729090258489, 0.20115624354394845, 0.11465882311342579, 0.16307895779515713, 0.1604785677745676, 0.57297197133814, 0.5214758323704343, 0.21073238392086435, 0.07349826115535474, 0.16633353401956574, 0.15360397604884457, 0.15025334836057425, 0.09437277466339677, 0.45077862445170713, 0.2877566571407487, 0.20168903828943008, 0.1935502487823555, 0.18402597251785902, 0.20385207610075184, 0.1817656085447782, 0.1866057860946656, 0.19211743082837862, 0.17422918426360035, 0.1790228201279227, 0.08173661623746065, 0.09475565440645783, 0.08721787941695236, 0.0739165203466231, 0.08945280961288993, 0.0858625849794582, 0.08709929795351723, 0.09721076279278751, 0.0763227515259769]}, "mutation_prompt": null}
{"id": "d1de4241-0450-4e35-b0e1-ae07b64279a2", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Enhancing the search diversity by introducing a mutation mechanism inspired by particle swarm optimization to explore new regions of the search space efficiently.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b30acf4c-f0ad-4b7f-848a-ec1d8f2720f6", "metadata": {"aucs": [0.43845055876491956, 0.42868989959986237, 0.3977250521292609, 0.4041788839872442, 0.38618572427009645, 0.4006335048496146, 0.4299566892966379, 0.41741799873155083, 0.4156191090028257, 0.046191468258649504, 0.036332886509358286, 0.09104427163781659, 9.999999999998899e-05, 0.008828185327735771, 0.02088602241303794, 9.999999999998899e-05, 9.999999999998899e-05, 0.008378775172454667, 0.10726297935159768, 0.12108107677587177, 0.12388755233746851, 0.1325437365624209, 0.11443836127993012, 0.09092030021696773, 0.0920667611332443, 0.1300632745021083, 0.1198904240723343, 0.07742406225560317, 0.07784904239299106, 0.08529552673992147, 0.10460072455372393, 0.072275432755739, 0.08198592367376445, 0.10113347579653875, 0.09555637663765482, 0.10558709432814517, 0.8905718663072756, 0.8251845453195746, 0.8971866854685211, 0.8121647337879293, 0.8346853558880399, 0.8896263833431558, 0.8854651355615164, 0.8865408100700033, 0.8747521865833412, 0.2737919686091509, 0.27937765984482954, 0.24110962204341468, 0.26682014637740037, 0.2775397625122824, 0.2584148217965857, 0.33829823955721217, 0.26800905458663515, 0.28550459254382854, 0.3310387820230548, 0.24144281976830573, 0.13991268674146418, 0.2374125725384707, 0.3442318504440315, 0.30305133675796136, 0.17510195621173152, 0.20952942212310077, 0.22700683832146562, 0.16324546614221347, 0.09968336641656839, 0.13579046863390454, 0.17436825842086223, 0.1652222229119994, 0.13875485191466452, 0.17275153573588686, 0.1240830533241507, 0.16341166303973298, 0.17900206001154761, 0.11368771465014071, 0.13760375830493776, 0.13235308481258767, 0.1494718621013269, 0.1270221762934085, 0.16319315326460182, 0.1069961777995937, 0.144566732383845, 0.018144385253271, 9.999999999998899e-05, 0.00587751694831351, 0.02714922596020275, 9.999999999998899e-05, 9.999999999998899e-05, 0.005088660890407493, 0.02147222203789534, 0.056966501575185235, 0.10251833748989903, 0.10264392821233925, 0.1725472830340936, 0.027833433880473657, 0.01448823743334815, 0.044828283139461744, 0.08018043002731867, 0.08082456138871241, 0.15564633679978956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07800983254161498, 0.0854851707374421, 0.07199932205113724, 0.0930057164190835, 0.0882055040280817, 0.10329595841381778, 0.07627130028938645, 0.09739364726702937, 0.06682304204149025, 0.39387700808503856, 0.41480653976110093, 0.38270747420653384, 0.38182221820054196, 0.3653584532775276, 0.37594009898099934, 0.37687991836261825, 0.38889151141637834, 0.4036466765501564, 0.10354281203412297, 0.07986152252081391, 0.10431656131334144, 0.0830467673597346, 0.10153715427824539, 0.09559195090281647, 0.07344080059950087, 0.09950032797519948, 0.09164526448619859, 0.1501202802278998, 0.257474423141561, 0.16517210821130734, 0.22085516147453466, 0.22754835979288313, 0.24858765844075725, 0.2644322776157507, 0.24754537568599222, 0.21241063848203878, 0.19138265785575026, 0.2790480062863877, 0.2781555250653912, 0.23664861084417566, 0.2702573861895846, 0.2731903377694115, 0.22391222032397873, 0.28088917951817105, 0.24475970867943297, 0.2122308042334894, 0.1795247985733629, 0.21130161013178317, 0.20406938213890002, 0.20570146107055565, 0.21930475748831546, 0.1863163548246073, 0.23749536511578595, 0.21509440055109297, 0.24920218080426648, 0.22339840338177586, 0.19977210482302177, 0.21136446769220218, 0.18738776171920046, 0.23082405767844882, 0.23447252445223554, 0.20702661780915954, 0.2162197272592865, 0.1861600797931935, 0.2021645126209224, 0.18578110162893846, 0.19249481246517575, 0.2041323707686339, 0.22793153259821464, 0.20609009591119587, 0.19350527245066595, 0.23909009680894144, 0.18647730315855993, 0.1866786939484154, 0.187801865197885, 0.6149729090258489, 0.20115624354394845, 0.11465882311342579, 0.16307895779515713, 0.1604785677745676, 0.57297197133814, 0.5214758323704343, 0.21073238392086435, 0.07349826115535474, 0.16633353401956574, 0.15360397604884457, 0.15025334836057425, 0.09437277466339677, 0.45077862445170713, 0.2877566571407487, 0.20168903828943008, 0.1935502487823555, 0.18402597251785902, 0.20385207610075184, 0.1817656085447782, 0.1866057860946656, 0.19211743082837862, 0.17422918426360035, 0.1790228201279227, 0.08173661623746065, 0.09475565440645783, 0.08721787941695236, 0.0739165203466231, 0.08945280961288993, 0.0858625849794582, 0.08709929795351723, 0.09721076279278751, 0.0763227515259769]}, "mutation_prompt": null}
{"id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.20403794011675208, "feedback": "The algorithm DynamicMutationEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "b30acf4c-f0ad-4b7f-848a-ec1d8f2720f6", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "544f9493-ec36-4254-8a3b-22d63e1dfded", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "628a710e-f2ae-4176-aa38-94a803be0a6c", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n        self.eta = 0.9  # Levy flight step size adaptation parameter\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma) * self.eta\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmImproved", "description": "Improving the exploration-exploitation balance by incorporating a dynamic adaptation of Levy flight step size based on population diversity.", "configspace": "", "generation": 52, "fitness": 0.18938716299829986, "feedback": "The algorithm DynamicMutationEnhancedFireflyLevyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.41964890545822353, 0.4199980958443149, 0.4244139915541343, 0.4281671173190873, 0.39317361237864257, 0.4109917514776188, 0.40112712555627594, 0.42241698721115273, 0.4080426146627122, 0.04941853273099894, 0.03160593454842853, 0.03408475049362025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001853887986179359, 9.999999999998899e-05, 0.11748743623816649, 0.11476889271710444, 0.10184568131047722, 0.1151247777181501, 0.11600302879924751, 0.11901040716484368, 0.12621995582428258, 0.09772199225630374, 0.09344231820267723, 0.09114209839677279, 0.07963097273468389, 0.09063269358091242, 0.08840356183202436, 0.08978946578761027, 0.07389709878945283, 0.09743615733205147, 0.08099811096970877, 0.09112277940207658, 0.5380928692453387, 0.5115504401569766, 0.6554082245846067, 0.4870509365652551, 0.558152756124728, 0.37035797572762463, 0.6015046679396436, 0.6264051264520436, 0.55015287747611, 0.28260721307689707, 0.23676599089883632, 0.24945224695480717, 0.2658614914673051, 0.2539106219760897, 0.257966899429968, 0.2454745933986484, 0.22703175747756454, 0.25882549379861286, 0.21387170330954197, 0.17035270731806618, 0.16925334767843192, 0.3398375231207045, 0.30157442082410846, 0.2854123151929121, 0.21536331218078397, 0.22165113127193503, 0.2180308417899387, 0.1530936757164605, 0.1444244016257772, 0.1434051540223954, 0.1030735118614915, 0.18353411620597082, 0.1450582491550092, 0.1753649308343571, 0.15669504010120705, 0.13925080873277096, 0.14494877410932827, 0.1498701617999988, 0.14577936308612538, 0.16611370010722326, 0.1524977368836138, 0.12505966034887261, 0.1700124453104379, 0.16783677772765482, 0.15548070415250603, 0.002880914162436965, 0.00692779662780485, 0.03101946809812617, 0.03403491736018327, 0.0249607676725756, 9.999999999998899e-05, 0.016845897059858395, 0.0006531764360903081, 0.02524597376398341, 0.17507048990138319, 0.07589824207004403, 0.1279130356662589, 0.05752211727704504, 0.039075185388290135, 0.04010259635991098, 0.09316066046819893, 0.08678843558647387, 0.17302971231541175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07819405333979434, 0.09703154034548767, 0.10738339627629978, 0.06127085376950436, 0.08548813417334311, 0.10634461983431631, 0.08049151442849611, 0.09700058386172383, 0.06577318636854457, 0.41675879981038666, 0.4287732305521086, 0.4013109184417515, 0.3769774917164883, 0.3885268482492843, 0.3687395588772824, 0.3874063234921039, 0.41910437421882984, 0.4066768122749135, 0.08156860366529728, 0.08915549569368308, 0.07263716910685891, 0.11741276855693772, 0.09896954947507353, 0.12661963525238684, 0.10488544550108159, 0.09753134419624765, 0.08628297098700566, 0.25257190416533726, 0.20617659910818997, 0.14895452052633396, 0.11180951316739796, 0.1858889781985178, 0.14958133166591236, 0.13046172378679044, 0.21399096342324941, 0.12283351752449001, 0.1914295790549616, 0.183724543764338, 0.29241679803157317, 0.2636162143098931, 0.26506085682309743, 0.2829148767642553, 0.22681671575072893, 0.2807882153071485, 0.2255610944166362, 0.1963442202253336, 0.19878781475986185, 0.2017226802435843, 0.20703961550530126, 0.18105073808631522, 0.23532385171021675, 0.17446505491587072, 0.23479437713632945, 0.17213599144891634, 0.2230974289678923, 0.26439983182622817, 0.20149676487649137, 0.24398362785911976, 0.23779521528356717, 0.22369865296063995, 0.20479348428534672, 0.24180538458000067, 0.20496557026132178, 0.1901461840599633, 0.18140275965671404, 0.18169860275334526, 0.1896195589649744, 0.17904003593699835, 0.17506312056730644, 0.1792051408571329, 0.18261493890408975, 0.17412340353457634, 0.1834135924031901, 0.1860006722564106, 0.18034517575769038, 0.5425417750663306, 0.1452643070824039, 0.39443811581305777, 0.15337512017807786, 0.5085305929885636, 0.16367439321291022, 0.4206449341792079, 0.495208476454816, 0.42371727861830744, 0.19963097064158875, 0.18356742843115348, 0.14585833177806218, 0.37063854962446496, 0.34717069452865035, 0.2762778434805454, 0.1861371711710551, 0.17635475221200247, 0.18253838551759616, 0.18256584673223575, 0.18359354589312615, 0.17567931473861786, 0.19581110899120224, 0.1859746545664983, 0.18493500759244208, 0.09848334900512179, 0.07619520691798065, 0.07921677707579344, 0.08875679855891339, 0.09297838937727887, 0.08599833443503613, 0.09575750332636346, 0.09226139759827567, 0.08489537329559627]}, "mutation_prompt": null}
{"id": "671fd379-29d6-4d5b-95dc-c8c28515635e", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "6f7f5a5a-e036-4a57-85e9-2c3940737372", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "e66bdb1d-70c9-4d20-92b3-cf743df345b4", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyLEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(np.mean(fitness)))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyLEA", "description": "Enhancing exploration-exploitation balance by incorporating a dynamic population size adjustment based on fitness values.", "configspace": "", "generation": 55, "fitness": 0.2002803764786348, "feedback": "The algorithm EnhancedDynamicMutationFireflyLEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4233239275617813, 0.42516697564753936, 0.40417348138911424, 0.4195093138913949, 0.4120776178406178, 0.4160159334383511, 0.4180366050522927, 0.4352130428538601, 0.41057776856173156, 0.01448885975022407, 0.023451298579698743, 0.03204232095666415, 9.999999999998899e-05, 0.03944531402259022, 9.999999999998899e-05, 0.0003339720062623952, 0.04809805665090483, 9.999999999998899e-05, 0.10315704267078396, 0.13924710160385834, 0.09387758956598502, 0.11443847206937663, 0.1020660985268762, 0.0961468200563057, 0.08664508790941727, 0.11380656841250036, 0.09129030799111237, 0.09239506486291416, 0.0902472269656639, 0.09980148581985471, 0.09219272303784765, 0.0712649157354206, 0.0781152875370904, 0.0917594390106411, 0.10000968806429134, 0.09528332989876309, 0.7030385718026708, 0.7169352371932693, 0.6669884565159071, 0.6404209691584857, 0.5060311622057092, 0.6401723603230125, 0.6223871114203231, 0.39927617508736346, 0.691825275313904, 0.2632443400750142, 0.2382814886219199, 0.21021982749627743, 0.2723891776264675, 0.2558553589339344, 0.24448723405245842, 0.26244254052237537, 0.21675878776693502, 0.2582338296479365, 0.3365677600185155, 0.23273199239605014, 0.20856338636579141, 0.3119633776271491, 0.3408789746749903, 0.2580168842989339, 0.45299907789222915, 0.2251971222020589, 0.2731323234736015, 0.20903603966551532, 0.19430376391667292, 0.13308222104061584, 0.1685329975999763, 0.17999114175632125, 0.1825681301124239, 0.16703286791458416, 0.162284608472963, 0.13980425812194897, 0.14135926019937628, 0.1369486231111421, 0.1360533221221092, 0.1489482676507201, 0.216548059950882, 0.12905324811388308, 0.16598877998304984, 0.15457478755385456, 0.16131351062459032, 9.999999999998899e-05, 0.023659125028459904, 0.01290622879934833, 0.05553958063718634, 0.01910610535292523, 0.028460674363138594, 0.0359143274723861, 0.003805202603369584, 0.00826156208777229, 0.16358103568495586, 0.10198842992405877, 0.21470341516218883, 0.039248021997564275, 0.032575696360762074, 0.03466986658591509, 0.11386467122617272, 0.09038113255218339, 0.12457895426126853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11926112586656923, 0.09310491011929622, 0.10055978825503953, 0.08877137051849093, 0.09308007151962683, 0.09407056414341586, 0.08261278108018033, 0.08568332103891774, 0.06924892796570203, 0.3935223716754691, 0.3655348295393055, 0.3923163973691919, 0.37420633527015035, 0.388221834177089, 0.39366878526768656, 0.41277957236038176, 0.3800501742673945, 0.38787264329767657, 0.08647265100879487, 0.1204498033198853, 0.08357408949530909, 0.09228836793926243, 0.09067208044155106, 0.08689314444403384, 0.12092117883789144, 0.11285294121206901, 0.0973589938793088, 0.231696047671329, 0.17795643661385763, 0.17180163467506449, 0.14789114135981685, 0.27137650415799897, 0.2369690367589795, 0.13862279144955014, 0.13494420162016052, 0.19677459822842824, 0.1760837315545839, 0.2048587564218648, 0.2865348262768884, 0.29067546799141075, 0.23555865822411093, 0.27552424751092974, 0.21165785784806757, 0.27798282991069156, 0.2214676155163633, 0.1972023372145404, 0.17648302215474654, 0.17997697494148435, 0.1861514571751387, 0.19007113032065936, 0.2396696230908124, 0.2083639121517632, 0.21993109137892464, 0.2012565245717669, 0.2213858879263555, 0.23014998038101586, 0.18467808255616047, 0.24844694846663895, 0.21562062361374523, 0.21299204227562718, 0.2218378471324034, 0.25446719409127316, 0.23365777319341208, 0.20817249684913497, 0.18287376113262377, 0.1931576805519648, 0.1756215493659249, 0.18283283116976567, 0.1650924017879406, 0.18057669622033667, 0.20425535913445514, 0.17317036038445877, 0.1838834408078449, 0.18696359815730534, 0.1786218666905881, 0.5141935690879352, 0.19527391772496838, 0.5160482797113262, 0.5850866334862396, 0.17704114756383227, 0.6405231023307676, 0.5007797308321937, 0.20853277394836078, 0.07350567181639212, 0.519143675794559, 0.13319604150714626, 0.14845766065827215, 0.3950495104520533, 0.5270750369029731, 0.37991798156467016, 0.18930836778676963, 0.19513678999911455, 0.17481694209558596, 0.17469643102648025, 0.18873109950688693, 0.1866199531848729, 0.20320460775864635, 0.1836415413077478, 0.19784443249463513, 0.09402689220232474, 0.08149096057561822, 0.08092562459186814, 0.0800498444514427, 0.09303105679640433, 0.07529516959420013, 0.0875493622519542, 0.09076213665679678, 0.08290998206818079]}, "mutation_prompt": null}
{"id": "179ff4f2-e6cd-41d1-8cb7-cba4904933d4", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if np.random.rand() < 0.4:\n                population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n                if population_size > len(population):\n                    new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                    population = np.vstack([population, new_population])\n                    fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Implementing a dynamic population size update mechanism based on fitness improvement to enhance exploration and exploitation in optimization.", "configspace": "", "generation": 56, "fitness": 0.20249854203462292, "feedback": "The algorithm ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.43245551709414465, 0.4184714990266132, 0.42761850991363004, 0.39884199403672604, 0.441185300634643, 0.4194103178854419, 0.43322711586289875, 0.43556625428848306, 0.42585567952720726, 0.009427665476767877, 0.03864781158625652, 0.05595394151011501, 0.018267340529629306, 0.0403957421478357, 9.999999999998899e-05, 9.999999999998899e-05, 0.03461010590252589, 0.0043526394206298, 0.11675356225155142, 0.14153454437145396, 0.11091547839865779, 0.11165509513163396, 0.10050916310827529, 0.09343172896842467, 0.09729749637634977, 0.11036034007697637, 0.11237342863563848, 0.09100405487578445, 0.10543332833783248, 0.0645027014737043, 0.08893060189978874, 0.06404748199998445, 0.08824756876142059, 0.0952954696081244, 0.09913497038980035, 0.08791585042528782, 0.7700885007521368, 0.7122587692103737, 0.7227419924273741, 0.5966800743810563, 0.5346736147969342, 0.7095465513921514, 0.5337942794162968, 0.5666888172833484, 0.7159369946911327, 0.2554254485674887, 0.2538982717067859, 0.20929997702054826, 0.2872257993134112, 0.2620671221308737, 0.2500069404402778, 0.25575412725638613, 0.26016394225492345, 0.2638493134981753, 0.2955222727400273, 0.22765683982358254, 0.2573474833494721, 0.27309141721477825, 0.46895830186956, 0.2999747109650843, 0.22159435695057272, 0.29270377747083687, 0.2714480964699634, 0.1743993396231177, 0.18775377540613158, 0.13392917726234677, 0.17482005647625432, 0.1853737931235626, 0.11425609162116468, 0.17979241393410372, 0.19369896514685014, 0.1762503004385899, 0.1494549492990136, 0.13222778766402332, 0.1258452055977206, 0.1489890622960025, 0.20598978803988943, 0.1244498268924884, 0.1835227399727023, 0.17946895826035547, 0.1275347343895612, 9.999999999998899e-05, 0.00459898332132902, 0.003431268162762735, 0.0245133802629931, 0.02822111564112839, 0.0016775310456972337, 0.02027443776256388, 9.999999999998899e-05, 0.022908622631021225, 0.1625553687703608, 0.1072585968787837, 0.20231822412545186, 0.0389234325045531, 0.03965028566465223, 0.043952478751405066, 0.10262748818174117, 0.08450843454828993, 0.16844249137832212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08465980883519064, 0.11353781739257462, 0.10210348107590195, 0.11024709108006336, 0.09843105578855649, 0.08932709308511255, 0.07681696399905702, 0.09800072491370937, 0.07678662330175379, 0.45616720124768206, 0.3905039885051511, 0.3920869135899058, 0.38006414898221264, 0.3892801418064029, 0.3795931085818265, 0.37827926438648596, 0.4394769489122694, 0.4280485563835541, 0.08208789496842384, 0.10884121419508375, 0.07992956897500225, 0.08850853225399047, 0.07973434063232432, 0.11205860296574832, 0.12178286300522301, 0.11707619080123399, 0.09476690530887699, 0.1361674593042197, 0.24501817023346228, 0.19668670545210676, 0.16772898496002986, 0.23398074244954792, 0.27660821583016526, 0.20453792568351004, 0.12846403684377605, 0.2362169452640024, 0.20045526087541843, 0.24996922165307633, 0.27169034337269937, 0.28330384670592124, 0.23665159352674525, 0.2862893002206168, 0.22120442613621405, 0.25296160411219415, 0.21385919776106732, 0.193330775489578, 0.2060748876828593, 0.20318237740573852, 0.1945319524111977, 0.1833448837784566, 0.2262829739085851, 0.1776107341716523, 0.2221421131267558, 0.13383373880262228, 0.19467269283930433, 0.22478460812366352, 0.20807840412470224, 0.2393928677055176, 0.2330202757848715, 0.22009730269541383, 0.24274440384435703, 0.23869413642078807, 0.23697990181521744, 0.20081461830644898, 0.18963002633101556, 0.17803405144138928, 0.18656693627387744, 0.18781815549454894, 0.18021114035653207, 0.17009982171821758, 0.19534540830095237, 0.1678134431378423, 0.18377620681817197, 0.18720126440234997, 0.17873750753912432, 0.48793183827585584, 0.19537464095367896, 0.5924012431783657, 0.5796361907904017, 0.17704023834867244, 0.6061780771097627, 0.4205735322069448, 0.208810663552209, 0.07349540499813012, 0.5040149699997163, 0.13691103310995845, 0.14658964194777124, 0.4122840250587526, 0.4278443427072973, 0.37438200178533243, 0.17933944018339787, 0.18832999597976474, 0.18920160638623063, 0.18195813753837897, 0.18511314966696302, 0.18108127971434174, 0.20320460775864635, 0.1744322879884579, 0.20985007881247553, 0.08486608706644694, 0.08889605074549023, 0.08755427883683697, 0.08282623800862965, 0.09469753207378617, 0.07476324647698473, 0.08147482227386571, 0.09191412479283956, 0.08492843713959086]}, "mutation_prompt": null}
{"id": "bb140062-3ede-461a-b2fa-e58d2cc79424", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            dynamic_population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if dynamic_population_size != population_size:\n                if dynamic_population_size > population_size:\n                    new_population = np.random.uniform(-5.0, 5.0, (dynamic_population_size - population_size, self.dim))\n                    population = np.vstack([population, new_population])\n                    fitness.extend([func(individual) for individual in new_population])\n                else:\n                    indices_to_remove = np.random.choice(range(len(population)), population_size - dynamic_population_size, replace=False)\n                    population = np.delete(population, indices_to_remove, axis=0)\n                    fitness = [fitness[i] for i in range(len(fitness)) if i not in indices_to_remove]\n                population_size = dynamic_population_size\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmRefined", "description": "Enhancing the exploration by incorporating a dynamic population size adaptation strategy based on the fitness values of individuals.", "configspace": "", "generation": 57, "fitness": 0.2038379351084684, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4206774360245932, 0.409549560485046, 0.4166675023095566, 0.4193026074296766, 0.4440843171769526, 0.4117444154264587, 0.38635196142461903, 0.41319255125177656, 0.39706133175534386, 0.036818526593639045, 0.02700497526990986, 0.031173543749388744, 0.021268309364348204, 0.03847533912661416, 9.999999999998899e-05, 9.999999999998899e-05, 0.03901976348409242, 9.999999999998899e-05, 0.10349492453436537, 0.15312507860761615, 0.13782628276507947, 0.10606314241534931, 0.10771466970992316, 0.10601975684149767, 0.08962394234255167, 0.11466378896803131, 0.09366014551506163, 0.11181831749458016, 0.10385226844189344, 0.08677978987411117, 0.11271520215545239, 0.06531920464818664, 0.10175213706411379, 0.1027832418401664, 0.10052702230026844, 0.09544654489636428, 0.7991498307484067, 0.7540252596529377, 0.7716303902320235, 0.5865208034781392, 0.7340060839800212, 0.5950215978574596, 0.6237445478125476, 0.6154883738578092, 0.6211501646935678, 0.25772346956091585, 0.27267639667302535, 0.22466389705296463, 0.2783753848169963, 0.22898034094667086, 0.29138386606042677, 0.2718311676769869, 0.2396990666516643, 0.24078057989080814, 0.29960466998602187, 0.26770032459228676, 0.2086934419880505, 0.2696856859617225, 0.2556298184594047, 0.2512242439753418, 0.22756604358556787, 0.36131681710931574, 0.2625080338995932, 0.16010839071366934, 0.18631171761736354, 0.14125248582637395, 0.15686902573228378, 0.20335785133132644, 0.11114235683792284, 0.16242766929264507, 0.1826726729431446, 0.17217451618300694, 0.14707189520167263, 0.1441053589820671, 0.13558344381359289, 0.1536584153710111, 0.1887459852440332, 0.1233556034075598, 0.16649676298793092, 0.1707769539717443, 0.1294588825006967, 0.00016960018010581113, 0.010816988793319604, 0.02111763464751859, 0.04553279126574139, 0.040807406535941615, 0.01180787276267059, 0.06340121090900752, 0.00034508752737860693, 0.020892141087915816, 0.12674035887748303, 0.1245263274568037, 0.20404071135470403, 0.03254780419969161, 0.03815063072742886, 0.03698841028283639, 0.12160009897339774, 0.09723404114607415, 0.11732720307245259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09286445103630181, 0.11925700986164378, 0.08593291150091265, 0.10883324720752663, 0.08387384232553907, 0.08372040520272162, 0.0703452183287474, 0.07820100753295678, 0.08727348889733089, 0.363521511844905, 0.39462120546991597, 0.37829060729529074, 0.38649142449913376, 0.41775384222450507, 0.38667956037326157, 0.38580102986049647, 0.38436965077458995, 0.39421965000248627, 0.06003176639892005, 0.09047608560563436, 0.08211355464431491, 0.09099264866519352, 0.08475933060530572, 0.09314258726958036, 0.11224753386359876, 0.09457605912100153, 0.13001051733206548, 0.1698618416430987, 0.24501918761896113, 0.20709145102397475, 0.21880175508995403, 0.24112594464529025, 0.22464970529456596, 0.14205249176361723, 0.14503349751972205, 0.2139739223464181, 0.19091633979873734, 0.24302836996094135, 0.27319340338622056, 0.2861059885404553, 0.24165682983252224, 0.2646312715186123, 0.21419107699275353, 0.28454023024571595, 0.22761090777961768, 0.20401081342532312, 0.1980510436068601, 0.193016918485592, 0.21558757903774628, 0.18158237578353464, 0.23523421221427854, 0.1668225843761214, 0.2160809528513843, 0.18761572969430518, 0.22059196509170798, 0.24013283850464173, 0.22122753700060238, 0.2851483307002953, 0.21758157536044365, 0.21969159058571408, 0.22092445845857678, 0.2606020892369514, 0.23496912451324758, 0.19412114475127773, 0.18242661952371564, 0.17322618317111138, 0.1738164654414861, 0.19867315448070666, 0.1759485664478887, 0.17062415303768008, 0.18896988702733575, 0.17176087650731386, 0.18393801889296746, 0.1870780398844808, 0.179712989047494, 0.5291049120538902, 0.1957374570853584, 0.6069369953897399, 0.645603832020031, 0.1775741863896706, 0.7308588749547149, 0.40505664022704846, 0.2094020340195588, 0.0734998070554137, 0.621026075010569, 0.09240744486747077, 0.1482727317021919, 0.35684060693465036, 0.5210551883317411, 0.3965233660052129, 0.18594297561294093, 0.19424672688565803, 0.17571564603022038, 0.18462130615148864, 0.17796459210348314, 0.18997709673085839, 0.20320460775864635, 0.1886558388592432, 0.19784443249463513, 0.0847156581901618, 0.09181613132523403, 0.07996204631271409, 0.07964754941095564, 0.09473281430888714, 0.07890740702474663, 0.08667919457119044, 0.0947853166412368, 0.08944810083794363]}, "mutation_prompt": null}
{"id": "58d257a3-4e04-42aa-9dca-bf1b19535b48", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyLevyAlgorithmRefined", "description": "Enhancing the exploration capability by incorporating a dynamic adaptive population size adjustment mechanism.", "configspace": "", "generation": 58, "fitness": 0.18401173671654344, "feedback": "The algorithm EnhancedDynamicMutationFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.3876186187239752, 0.3675291983971106, 0.3454161082862669, 0.34060293638009653, 0.33266639824730715, 0.3456806572711473, 0.43792128168647315, 0.3901421845250015, 0.37240203503888314, 0.010496525297185921, 9.999999999998899e-05, 0.02395930507737498, 0.01508172547680009, 0.006211623296137669, 9.999999999998899e-05, 9.999999999998899e-05, 0.025570628353747127, 9.999999999998899e-05, 0.08504745765822375, 0.15429842148722872, 0.09696763207851, 0.09471655523510614, 0.0973576008547078, 0.10880166650266987, 0.07957130975006388, 0.08840293395273857, 0.07794099363461615, 0.07908402841513251, 0.07495258860293275, 0.08161596516088576, 0.08737422000784423, 0.06935686621391401, 0.07355053692654945, 0.09734766212071189, 0.08082985359413053, 0.06902197976700752, 0.6740489085113341, 0.7084534054985849, 0.7315002656387515, 0.5150216204690521, 0.6375911703020819, 0.7051548880627654, 0.7039023332067829, 0.6132101833821493, 0.6738521135417553, 0.20957343625528724, 0.19717435425271645, 0.19620441118013965, 0.220505753022174, 0.19545754350053057, 0.21179930959093052, 0.2232900890289462, 0.2199297631046816, 0.23378306508445534, 0.21967308780456685, 0.2586926406150858, 0.2249274281973106, 0.2639529170172269, 0.35467041987848547, 0.23812323513026845, 0.20717184931212063, 0.23010030512870927, 0.22424627321399504, 0.11969639030929591, 0.11788237639071553, 0.13409470737258145, 0.16117254758720223, 0.17095176714480842, 0.1213720826130742, 0.12962879726585852, 0.1207218171327279, 0.13116369592476762, 0.13216929630083596, 0.13721830922698575, 0.11383785334721741, 0.12611965560702798, 0.15373220938526733, 0.11819679239382641, 0.15954342942613198, 0.13912721921452598, 0.1253815559157485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007132722817999593, 9.999999999998899e-05, 0.003756847102524996, 9.999999999998899e-05, 0.03328134515750403, 0.16037114187202606, 0.09684648939925777, 0.17218054578296615, 0.038282430232249864, 0.036063521825665856, 0.03373354793043526, 0.09886089053588498, 0.08508536799646171, 0.12871125175842169, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04898004070401807, 0.04232462067012599, 0.09165325046956063, 0.06455425417634342, 0.07439985462271559, 0.06925425158520937, 0.05502696402849183, 0.07520686994798653, 0.05880910129609729, 0.3421135260893827, 0.36020470341947153, 0.38076197060725203, 0.36432046738586676, 0.3617080898912983, 0.35607602496278534, 0.3186826800149415, 0.3429543630145657, 0.33514562425159644, 0.10794586077715773, 0.09389240408134081, 0.07683442375133687, 0.0922552099263999, 0.09236779245883953, 0.09042945108190958, 0.0920693847853441, 0.0953053907485335, 0.10597591629976455, 0.1624683845932795, 0.14880768010320966, 0.12589916939049695, 0.18842838740244838, 0.20787242687962648, 0.20638422752289587, 0.13023222267278256, 0.14464807762433318, 0.1672934153645057, 0.18841182100486764, 0.2402007697414098, 0.2696621015809957, 0.2714081935381012, 0.2250581517209682, 0.25036392001611507, 0.23144755889865887, 0.2463886593269986, 0.24181219350764116, 0.19256456647674192, 0.18762608399721437, 0.17830339747648816, 0.17731509646091403, 0.1784297188035614, 0.17268121979556494, 0.16979386705523336, 0.20649686850742177, 0.17763488186644705, 0.20733564545686245, 0.21340842624427125, 0.19777010448702625, 0.2392303632664562, 0.2277781948042672, 0.22691127962534052, 0.2084716343994959, 0.21308393852110208, 0.19832132910932054, 0.2064560063068177, 0.18005602648717034, 0.18022137651577064, 0.16434141473863273, 0.18158968623463012, 0.1804358033368315, 0.16664291970126466, 0.17808910479370077, 0.1723896731422998, 0.18314725370345109, 0.1849040393860364, 0.1751682906742137, 0.48608633347458496, 0.19443097446615398, 0.48049670130616084, 0.5609998820790953, 0.176460118175653, 0.5460066797487473, 0.4776426935501017, 0.20771146505780858, 0.09184621789046721, 0.4510451048417794, 0.15860155655424446, 0.14150498945907786, 0.28975295389041245, 0.37796883926561986, 0.29264214092130725, 0.1823838722879031, 0.19216418043343075, 0.18157150287842994, 0.17696999178161388, 0.2030344686343748, 0.1779333256458152, 0.2132293647832788, 0.1817657729093648, 0.19784443249463513, 0.07949036007235644, 0.09172888887349695, 0.07796265063308272, 0.09079843398479281, 0.09398029028264632, 0.07619246341803665, 0.0815513035754013, 0.07826072914704141, 0.08249296255908667]}, "mutation_prompt": null}
{"id": "35f4bde8-1b26-4e97-a919-95a14c8b6961", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                for j in range(len(population)):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if _ % int(0.1 * self.budget) == 0:\n                best_index = np.argmin(fitness)\n                mean_fitness = np.mean(fitness)\n                std_fitness = np.std(fitness)\n                if std_fitness < 1e-6:\n                    break\n                threshold = 0.9\n                if fitness[best_index] < threshold * mean_fitness:\n                    population_size = int(1.1 * population_size)\n                    new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                    population = np.vstack([population, new_population])\n                    fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyLevyAlgorithm", "description": "Introducing adaptive population resizing based on the fitness progress to enhance scalability and convergence of the algorithm.", "configspace": "", "generation": 59, "fitness": 0.19773899802671413, "feedback": "The algorithm EnhancedDynamicMutationFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4238000654452537, 0.42840842197638196, 0.41178601217489097, 0.4107847175841267, 0.41611165362382496, 0.42395145267283196, 0.42767961419741785, 0.41997477525161686, 0.4048569498492596, 0.05223795980604662, 0.023106386730116335, 0.018114676063036517, 9.999999999998899e-05, 0.01856233549547559, 9.999999999998899e-05, 9.999999999998899e-05, 0.043706906755971664, 9.999999999998899e-05, 0.11074936888736198, 0.14011196367481593, 0.13364483145230188, 0.10827354296222269, 0.09258831730378947, 0.09356728644425094, 0.08773685254532959, 0.11331044214127084, 0.09837396557644484, 0.09371573638627739, 0.10519651815772557, 0.0679067786506885, 0.1139091158199057, 0.07656053243876615, 0.08150809147344351, 0.09630011230987379, 0.10299228839275043, 0.08749208957147714, 0.7384879440277494, 0.7291711689015767, 0.6855844797456012, 0.4831151129486255, 0.5254530232162734, 0.6175101766006523, 0.5597393498448852, 0.5093643186457615, 0.6103122926612974, 0.23459452643257495, 0.2486580672110893, 0.20785450747248135, 0.2752719301715053, 0.26481185278307606, 0.2550030153482209, 0.268650116006087, 0.23766313342885736, 0.23797300180679004, 0.31800522734760284, 0.22733765941376238, 0.31041736044977575, 0.34404832859757484, 0.31495127318556837, 0.26406193001752487, 0.14789023700024695, 0.30090694481699964, 0.2295841856735169, 0.21632363353065331, 0.158760329248524, 0.1320745217564292, 0.14827935350893673, 0.1739277650210861, 0.1020879219674713, 0.15872714956268896, 0.23220670289829892, 0.18322287953645355, 0.15186243981940284, 0.14529697614670023, 0.12935431540363385, 0.15036470343440556, 0.18045476891540146, 0.1272116845982455, 0.16523193664699154, 0.14962617724909544, 0.12494498221341788, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024235429343533177, 0.006944387825705944, 0.030038519603042046, 0.008270739509899427, 0.022081751300516594, 9.999999999998899e-05, 0.01194583075009037, 0.14227965899070494, 0.0928572782806294, 0.1682809762602927, 0.03796167280809404, 0.029464315812405273, 0.03581720011680023, 0.10508639570446143, 0.09516597159483897, 0.15363566284169805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09272577985882469, 0.09689145357496687, 0.11309308225238479, 0.07701663053979324, 0.08838283419904869, 0.08082310959176098, 0.06327388631723574, 0.10465717581029299, 0.0617768868227615, 0.3917509196494988, 0.40379696587967884, 0.3738030238223531, 0.3874723421226859, 0.3960428138836073, 0.41053784001408944, 0.3873459307750027, 0.40189175399669397, 0.40477755851328845, 0.08762408175196434, 0.10658178345370817, 0.09301416249907146, 0.08933685028110672, 0.07839998217301114, 0.09977837640151388, 0.11359312010106515, 0.09945281102407444, 0.10715886121644502, 0.223384395766266, 0.26709533503529403, 0.16219683701583398, 0.1843290815835108, 0.24847806113364446, 0.25722764243728324, 0.1425502246954795, 0.13440218574127905, 0.15552105039709097, 0.2136859190102104, 0.19285978686574057, 0.26300479873777227, 0.27706165292880447, 0.24499513883299628, 0.28389509810930336, 0.22127391603942492, 0.2710264264181059, 0.22191306301275815, 0.20390461833162643, 0.2105464341402531, 0.17890620420590764, 0.2244060532077925, 0.18177878884082554, 0.22062422706894924, 0.18750155490829545, 0.20306382338177775, 0.1507818586069416, 0.20860914788309426, 0.2601653193617848, 0.19941468195873435, 0.2694052431470306, 0.2003326986862508, 0.23185055925765774, 0.2624542036991129, 0.2376439347364122, 0.23899258164754777, 0.17809313227563794, 0.18357614808391476, 0.16906734095206355, 0.17260295976877682, 0.19131075656411667, 0.18323469828421002, 0.193700903877289, 0.18389962460965814, 0.1725957464616249, 0.1839912209364325, 0.18722304332546869, 0.17918007962312166, 0.5430872336100738, 0.1955382075657086, 0.6274146974828736, 0.6000928162541286, 0.17740299334068022, 0.6245042480380555, 0.3796838038569401, 0.20859019014351665, 0.07346490739489253, 0.5019787033938928, 0.11539187945882967, 0.14542250571596993, 0.32917099659067006, 0.5323798506913688, 0.31217004447411856, 0.18272105062838806, 0.19095202566080294, 0.18644533653682982, 0.18571617872601232, 0.18801709399864708, 0.18244336278480677, 0.20320460775864635, 0.17960722645192106, 0.19784443249463513, 0.0860558314174481, 0.0842445313404947, 0.0787346618711523, 0.09551593948334014, 0.10172063755078542, 0.07526772209103927, 0.0822856306685309, 0.08522362854987897, 0.08950049690505768]}, "mutation_prompt": null}
{"id": "93652f08-c3b3-4492-bb11-d4c37383daec", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "b2ed7a64-ffb2-4b3e-84d9-49ce37b6d7b6", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "5d75f948-bc5a-470b-8fbd-57a1d341ca8c", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if _ % (self.budget // 10) == 0:\n                diversity_ratio = np.std(population) / np.mean(population)\n                if diversity_ratio < 0.2:\n                    population_size += 5\n                elif diversity_ratio > 0.8:\n                    if population_size > 10:\n                        population_size -= 5\n\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Enhancing diversity through adaptive population size adjustment and Levy flight-driven exploration while maintaining dynamic mutation scaling for improved convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {}, "mutation_prompt": null}
{"id": "7b1d4c61-b706-4f0f-bcf7-7e4e23de0724", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self, fitness):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / (self.gamma + np.mean(fitness)))\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight(fitness)\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic levy flight step size adjustment based on the fitness landscape to enhance exploration capabilities.", "configspace": "", "generation": 63, "fitness": 0.18242719848434577, "feedback": "The algorithm DynamicMutationEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.14.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4544069777844373, 0.48313278162297457, 0.47593325935571307, 0.44647034343312, 0.4576527249974113, 0.4477597921308085, 0.45597404854372703, 0.43878353606547993, 0.493155582689599, 0.07843160703586904, 0.0023499176852279646, 0.04119110357815026, 9.999999999998899e-05, 0.007852380486155885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009762920156859423, 9.999999999998899e-05, 0.1273879652801092, 0.13469159140572318, 0.04864147442021671, 0.09512773284619658, 0.08236924513225219, 0.1071120611102282, 0.07934029061722758, 0.07626423574303443, 0.10169683754607961, 0.07924457941519991, 0.056428027947819426, 0.06270037719889532, 0.08339027659813114, 0.049048607419906354, 0.047832246666089984, 0.09972627916731713, 0.08023966452087206, 0.05526983620031767, 0.5243017317667982, 0.5474525365723106, 0.4917668523970542, 0.11687337990998237, 0.3263073371332069, 0.5164660876359249, 0.42987006994492527, 0.1240003056909631, 0.43830486480686826, 0.2953695205397967, 0.293429906728528, 0.24230812760771336, 0.292410734194853, 0.2980060143033503, 0.32307085971058147, 0.29887280873147837, 0.2387338747723955, 0.27718922931404033, 0.21886138189673676, 0.22758463982142507, 0.14145376596383308, 0.2765034924130221, 0.27221958530803614, 0.16223326876622046, 0.11296738165711684, 0.1314954707523026, 0.11615043968110239, 0.24585668801594907, 0.12456615230364987, 0.16166207037464242, 0.14311279925625586, 0.1862749852331994, 0.1193723833236261, 0.19788610314572075, 0.19467375975064993, 0.17623203512694396, 0.16703963466593774, 0.18172146512367393, 0.14642758880704843, 0.1263819242374037, 0.1831440062217803, 0.1332587523225599, 0.21807599266558853, 0.23603655832519954, 0.1703201710658777, 9.999999999998899e-05, 0.025521396700483145, 0.025674348034300576, 0.04742580762099369, 0.008286015109595257, 0.0249962494702326, 0.03124423165967105, 9.999999999998899e-05, 0.031163705437368683, 0.19177886458581694, 0.06685253234275168, 0.13170437003604496, 0.033747349121031944, 0.031503379359962724, 0.027297711758505483, 0.09184948020089356, 0.10659091869805903, 0.10867404413595083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11789761226143669, 0.12233624396509857, 0.1126096255469714, 0.07929229304544638, 0.09919415034838241, 0.1258462656626903, 0.0959609715142613, 0.09228126068982401, 0.0855049301722649, 0.4282363213540411, 0.39390226930674166, 0.42214666874840956, 0.40785949672618615, 0.42248280199030563, 0.4085511455505594, 0.4728770128005261, 0.4536624516249893, 0.4306602175614527, 0.024097414450049648, 0.030233269243643335, 0.07951713685798745, 0.08945915694929774, 0.06867014851811437, 0.06544557383122518, 0.10642528871438994, 0.11043639924196946, 0.07734531233634934, 0.1819002931746293, 0.17193157125346792, 0.13354178648103665, 0.2497408771504832, 0.18578175787219353, 0.27040784492818604, 0.15881183325818804, 0.15659256111692998, 0.15319536322640726, 0.17394747371209962, 0.18959107392446373, 0.21241974996921054, 0.2795161734112357, 0.21047313079576913, 0.2046923203519585, 0.1657837599387334, 0.22433124242845015, 0.22013465910757213, 0.10801527496450147, 0.22785457543955523, 0.21851086254172125, 0.16423253395128212, 0.21236034035639395, 0.1655934657184569, 0.16392458854235537, 0.21219446142306486, 0.1976491974056621, 0.20760866868937566, 0.2290330985923471, 0.1774519524943564, 0.25396919776973004, 0.255998702807958, 0.21205981606807722, 0.24598712068041595, 0.22641861020674525, 0.21267789481999422, 0.1689889113865083, 0.19463929717172523, 0.17753635693663983, 0.18742486102497047, 0.19338749418416, 0.16141645842025287, 0.16719186359956206, 0.16923837153912102, 0.17091872312088485, 0.18347844416840664, 0.1879276406425744, 0.1840267338328444, 0.22133887608743208, 0.13905070314414425, 0.4698208308524694, 0.15306867320998785, 0.16147665089144614, 0.6823191860961326, 0.5526900809422737, 0.20604882463850338, 0.07355950700364178, 0.20261920226901942, 0.13717028207221194, 0.14789071347388705, 0.44242815519693746, 0.5450876698655208, 0.4490948587255035, 0.1879486141750324, 0.1787001302301403, 0.18455549872347643, 0.17560428832847097, 0.20833139774101228, 0.20629267364522563, 0.17986991135598795, 0.18821471898176134, 0.18490467526130017, 0.08041954410195362, 0.08150442936206415, 0.06331804255031548, 0.08936384983081225, 0.09060514064417258, 0.07418702207969907, 0.08124444024552235, 0.0973292190062437, 0.08213781335519887]}, "mutation_prompt": null}
{"id": "a4805062-b9e1-4d83-991b-ce0f7950c388", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "939d60ba-131b-4752-ae1b-e82036a5cb24", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyLevyAlgorithmRefined", "description": "Enhancing the population diversity by introducing a dynamic adjustment in the population size to encourage exploration while maintaining individual fitness-based dynamic mutation scaling.", "configspace": "", "generation": 65, "fitness": 0.18401173671654344, "feedback": "The algorithm EnhancedDynamicMutationFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.3876186187239752, 0.3675291983971106, 0.3454161082862669, 0.34060293638009653, 0.33266639824730715, 0.3456806572711473, 0.43792128168647315, 0.3901421845250015, 0.37240203503888314, 0.010496525297185921, 9.999999999998899e-05, 0.02395930507737498, 0.01508172547680009, 0.006211623296137669, 9.999999999998899e-05, 9.999999999998899e-05, 0.025570628353747127, 9.999999999998899e-05, 0.08504745765822375, 0.15429842148722872, 0.09696763207851, 0.09471655523510614, 0.0973576008547078, 0.10880166650266987, 0.07957130975006388, 0.08840293395273857, 0.07794099363461615, 0.07908402841513251, 0.07495258860293275, 0.08161596516088576, 0.08737422000784423, 0.06935686621391401, 0.07355053692654945, 0.09734766212071189, 0.08082985359413053, 0.06902197976700752, 0.6740489085113341, 0.7084534054985849, 0.7315002656387515, 0.5150216204690521, 0.6375911703020819, 0.7051548880627654, 0.7039023332067829, 0.6132101833821493, 0.6738521135417553, 0.20957343625528724, 0.19717435425271645, 0.19620441118013965, 0.220505753022174, 0.19545754350053057, 0.21179930959093052, 0.2232900890289462, 0.2199297631046816, 0.23378306508445534, 0.21967308780456685, 0.2586926406150858, 0.2249274281973106, 0.2639529170172269, 0.35467041987848547, 0.23812323513026845, 0.20717184931212063, 0.23010030512870927, 0.22424627321399504, 0.11969639030929591, 0.11788237639071553, 0.13409470737258145, 0.16117254758720223, 0.17095176714480842, 0.1213720826130742, 0.12962879726585852, 0.1207218171327279, 0.13116369592476762, 0.13216929630083596, 0.13721830922698575, 0.11383785334721741, 0.12611965560702798, 0.15373220938526733, 0.11819679239382641, 0.15954342942613198, 0.13912721921452598, 0.1253815559157485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007132722817999593, 9.999999999998899e-05, 0.003756847102524996, 9.999999999998899e-05, 0.03328134515750403, 0.16037114187202606, 0.09684648939925777, 0.17218054578296615, 0.038282430232249864, 0.036063521825665856, 0.03373354793043526, 0.09886089053588498, 0.08508536799646171, 0.12871125175842169, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04898004070401807, 0.04232462067012599, 0.09165325046956063, 0.06455425417634342, 0.07439985462271559, 0.06925425158520937, 0.05502696402849183, 0.07520686994798653, 0.05880910129609729, 0.3421135260893827, 0.36020470341947153, 0.38076197060725203, 0.36432046738586676, 0.3617080898912983, 0.35607602496278534, 0.3186826800149415, 0.3429543630145657, 0.33514562425159644, 0.10794586077715773, 0.09389240408134081, 0.07683442375133687, 0.0922552099263999, 0.09236779245883953, 0.09042945108190958, 0.0920693847853441, 0.0953053907485335, 0.10597591629976455, 0.1624683845932795, 0.14880768010320966, 0.12589916939049695, 0.18842838740244838, 0.20787242687962648, 0.20638422752289587, 0.13023222267278256, 0.14464807762433318, 0.1672934153645057, 0.18841182100486764, 0.2402007697414098, 0.2696621015809957, 0.2714081935381012, 0.2250581517209682, 0.25036392001611507, 0.23144755889865887, 0.2463886593269986, 0.24181219350764116, 0.19256456647674192, 0.18762608399721437, 0.17830339747648816, 0.17731509646091403, 0.1784297188035614, 0.17268121979556494, 0.16979386705523336, 0.20649686850742177, 0.17763488186644705, 0.20733564545686245, 0.21340842624427125, 0.19777010448702625, 0.2392303632664562, 0.2277781948042672, 0.22691127962534052, 0.2084716343994959, 0.21308393852110208, 0.19832132910932054, 0.2064560063068177, 0.18005602648717034, 0.18022137651577064, 0.16434141473863273, 0.18158968623463012, 0.1804358033368315, 0.16664291970126466, 0.17808910479370077, 0.1723896731422998, 0.18314725370345109, 0.1849040393860364, 0.1751682906742137, 0.48608633347458496, 0.19443097446615398, 0.48049670130616084, 0.5609998820790953, 0.176460118175653, 0.5460066797487473, 0.4776426935501017, 0.20771146505780858, 0.09184621789046721, 0.4510451048417794, 0.15860155655424446, 0.14150498945907786, 0.28975295389041245, 0.37796883926561986, 0.29264214092130725, 0.1823838722879031, 0.19216418043343075, 0.18157150287842994, 0.17696999178161388, 0.2030344686343748, 0.1779333256458152, 0.2132293647832788, 0.1817657729093648, 0.19784443249463513, 0.07949036007235644, 0.09172888887349695, 0.07796265063308272, 0.09079843398479281, 0.09398029028264632, 0.07619246341803665, 0.0815513035754013, 0.07826072914704141, 0.08249296255908667]}, "mutation_prompt": null}
{"id": "fb318df0-35f7-4c78-abdb-e38012cd0d56", "solution": "import numpy as np\n\nclass DynamicPopulationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if _ % int(0.4 * self.budget) == 0 and population_size > 10:\n                population_size = int(np.mean(fitness) * 100)\n                population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                fitness = [func(individual) for individual in population]\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicPopulationEnhancedFireflyLevyAlgorithmRefined", "description": "Improving the exploration capability by incorporating a dynamic population size adjustment based on fitness values.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {}, "mutation_prompt": null}
{"id": "15cb0aaa-1909-4d5b-9a2b-c80ccb55f219", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if _ % (self.budget // 10) == 0:\n                best_index = np.argmin(fitness)\n                worst_index = np.argmax(fitness)\n                population[worst_index] = population[best_index] + np.random.normal(0, 0.1, self.dim)\n                fitness[worst_index] = func(population[worst_index])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyLevyAlgorithm", "description": "Introducing a dynamic population size adjustment mechanism based on fitness progression to enhance exploration and exploitation balance.", "configspace": "", "generation": 67, "fitness": 0.20102064070521516, "feedback": "The algorithm EnhancedDynamicMutationFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4100741187633946, 0.38914210092466506, 0.4211663948072457, 0.3908014499959839, 0.4377158869407619, 0.4115639313952929, 0.4588434443130368, 0.42787118564940485, 0.39806511813776235, 0.07512328612239982, 0.024588332381226263, 0.04264745218759869, 0.01032506503015962, 0.05713391452874006, 9.999999999998899e-05, 0.00038426066803909364, 0.04621598978035779, 9.999999999998899e-05, 0.10860278319477479, 0.1301844713101662, 0.10372203331467789, 0.11512194968998479, 0.1119965402184232, 0.11231535825789851, 0.11505734789021149, 0.09416004439336845, 0.10036984107940183, 0.08919597724609918, 0.10810213144944192, 0.09450497807631797, 0.11577491592184175, 0.08215274162198216, 0.08039905183176144, 0.10585445968153961, 0.0949412084256317, 0.09515930582628862, 0.7571788919833374, 0.7583845179783724, 0.7349148396390152, 0.6272609159311082, 0.6150140342002701, 0.620669159005952, 0.5974902498151444, 0.5344777059214383, 0.7033626892273359, 0.23393718265769603, 0.2385281603167354, 0.2281954633466562, 0.2759610563638326, 0.2764080943667303, 0.2631438411436936, 0.2800644313677325, 0.23597964150952488, 0.25162447866679327, 0.2818981915284692, 0.23245031576887254, 0.22662436271818087, 0.27203173935399305, 0.28706768421029494, 0.23617610604223604, 0.2221589280319023, 0.21974843249230103, 0.2818431066724959, 0.1896710757626252, 0.18514873663609532, 0.13835282099422297, 0.1804227364678198, 0.17129668967483436, 0.12863225715484206, 0.17330572869826233, 0.18670858640661558, 0.1689670479007478, 0.15152127601661103, 0.14034239262979098, 0.14813314630727126, 0.14540224320118178, 0.19358535730774873, 0.1302990654007523, 0.15929613447990887, 0.18193963358506793, 0.1413886158567058, 9.999999999998899e-05, 0.009921462047969731, 0.02271060347563103, 0.03495918605378279, 0.023596425684759947, 0.019596037621190776, 0.006545881713638346, 9.999999999998899e-05, 0.02952552370557715, 0.13176247060027546, 0.09853693974828404, 0.1973905144077548, 0.04640878880819854, 0.03664031813746482, 0.03228752179636318, 0.10136744102054196, 0.09820225141270655, 0.12089723256751095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09102481864145429, 0.08943841511571116, 0.09889201171016482, 0.10175510327851411, 0.08157500087308966, 0.08848807894243671, 0.07461753959222328, 0.0926604278589479, 0.06264832562412825, 0.4022458904340993, 0.4088380985244583, 0.36984053617344703, 0.39268296002019665, 0.3766006894505671, 0.4313414679369434, 0.38377814523046705, 0.40927877732165496, 0.3813007592916833, 0.06026429185588422, 0.10439487239966216, 0.08122180500602683, 0.08785735749193069, 0.06900513008958131, 0.10245244287304578, 0.10027793535590901, 0.09064918012791823, 0.1030618975429245, 0.2531434711845826, 0.2735647746759896, 0.2022581920127916, 0.24473907618826884, 0.23586131448083247, 0.28461344614471196, 0.17487665689141052, 0.14862779530433012, 0.17783510798750524, 0.22030649722428308, 0.1935116069558055, 0.2806775133270424, 0.28727599732302944, 0.24087739467966196, 0.29747494657612983, 0.21285533874552443, 0.2674084291343747, 0.22389274195674702, 0.1874093947904809, 0.2146851818366955, 0.17156299709404743, 0.20631112133637775, 0.19404683076772788, 0.22675289681026067, 0.19926002290893452, 0.2248210310182267, 0.19023949816295083, 0.2089918989054489, 0.21379221499493095, 0.1917007919042485, 0.2698794029708702, 0.2323906865714177, 0.2432655708763819, 0.27100847233237535, 0.22095368805019444, 0.2340617322052322, 0.18469613612726876, 0.1922203744300247, 0.17182345642912, 0.17984943464190406, 0.19080888041476052, 0.17418003640055157, 0.17039010713053504, 0.20240338507174516, 0.17190579555555285, 0.18406361990383635, 0.1873026764861181, 0.1791880441703605, 0.5824445626586083, 0.1956100432911364, 0.554511885733604, 0.5730155124156491, 0.17726495263009578, 0.6382516235997919, 0.47359009655529594, 0.20909174379349338, 0.07449033657567994, 0.479423030867133, 0.09152395718305795, 0.1469512852391861, 0.28595396620876434, 0.41497627453574737, 0.3668571494217524, 0.17903629040901192, 0.18547024826578462, 0.174994475035538, 0.1849824287341355, 0.17721370909908385, 0.19393154710918914, 0.20320460775864635, 0.180572563504511, 0.19784443249463513, 0.07506153162024731, 0.08713983212971632, 0.07784589807438946, 0.08251495544727672, 0.09638123734190318, 0.0810579386848751, 0.0849427479653343, 0.08998355904166533, 0.08043289444810997]}, "mutation_prompt": null}
{"id": "882c7e43-dfe6-41b2-98ce-286f93fd75da", "solution": "import numpy as np\n\nclass DynamicPopulationSizeAdaptationEnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if np.random.rand() < 0.1:  # 10% of the time, adapt population size\n                fitness_diff = np.abs(np.mean(fitness) - np.min(fitness))\n                if fitness_diff > 0.1:  # Only adapt if there is a substantial fitness improvement\n                    population_size = int(population_size * (1 + np.random.uniform(-0.1, 0.1)))\n                    new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                    population = np.vstack([population, new_population])\n                    fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicPopulationSizeAdaptationEnhancedFireflyLevyAlgorithm", "description": "Implementing a dynamic population size adaptation based on fitness improvement to enhance convergence speed and diversity in the search process.", "configspace": "", "generation": 68, "fitness": 0.200633050162062, "feedback": "The algorithm DynamicPopulationSizeAdaptationEnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.42881901138875655, 0.4184714990266132, 0.42761850991363004, 0.39884199403672604, 0.4144211859879662, 0.4194103178854419, 0.41480820458765255, 0.41732022009150016, 0.44589733001252174, 0.03547025255310199, 0.034837360754885194, 0.04215849720346054, 0.012518554768107593, 0.052925488146861044, 9.999999999998899e-05, 0.005206192930892528, 0.08918667728165397, 9.999999999998899e-05, 0.11901904961557497, 0.12052638277066285, 0.10486026215031019, 0.1167490889625098, 0.0903165165713331, 0.0962981408617668, 0.09122252125277208, 0.12027671628855163, 0.12295572297472968, 0.09100405487578445, 0.09477681121462078, 0.07211068062489778, 0.09465062391816048, 0.07607425966141945, 0.08864036818019161, 0.08296365553349938, 0.09168267856746537, 0.10662694539353745, 0.698205061278913, 0.5173027950339921, 0.7327565185311957, 0.6497516150714805, 0.5040546244900788, 0.7021125086209213, 0.5183524004100135, 0.5817274081342823, 0.7159369946911327, 0.2554254485674887, 0.2673943286491681, 0.2113230414537638, 0.2697765979985469, 0.3044068010382621, 0.25762171014256496, 0.2771810039961494, 0.27347653526562876, 0.22505107640591027, 0.32043058149308923, 0.35865141363394937, 0.2616389611441007, 0.27425147389700755, 0.30966836651686935, 0.25346059974210144, 0.22151855989513458, 0.29315243865858187, 0.22913229882563124, 0.2001993829492833, 0.17926417898468772, 0.14260487752368567, 0.18331406755788993, 0.20970153589335094, 0.11173241068104267, 0.17979241393410372, 0.18657068074851546, 0.1631986049492814, 0.1520874758840144, 0.13476877946441512, 0.1308430039223233, 0.1400658953435977, 0.20598978803988943, 0.12219850042888669, 0.16500317935185527, 0.16422711698310577, 0.13619148778444012, 0.0007067508892585339, 9.999999999998899e-05, 0.020915149839526914, 0.007970412719932374, 0.0319736082951706, 0.01154514236362536, 0.008765025748678323, 9.999999999998899e-05, 0.03084293610086264, 0.16241832116673338, 0.11939501145207232, 0.16352069414877202, 0.036257710183508096, 0.0338972540745861, 0.03821993495763021, 0.10149119785173466, 0.09320805059763371, 0.1317506171895959, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09781771086844038, 0.1209292549017642, 0.09361676437743538, 0.09066615138260381, 0.09736138886672452, 0.09309228917486778, 0.0784186907696498, 0.0913641865820578, 0.0644021562026923, 0.45616720124768206, 0.395051518460128, 0.38747128002947906, 0.3798730149866687, 0.4012605165269225, 0.4143909193761146, 0.3767256706375979, 0.37676502947767065, 0.463094982649772, 0.07859973976878898, 0.10884121419508375, 0.09896190655270987, 0.08896360849685203, 0.09684350403668829, 0.1009607641877246, 0.10988897852040791, 0.12800089219811506, 0.09414928904379016, 0.1926843148060201, 0.28668206203133695, 0.17943495400451215, 0.16772898496002986, 0.2328836287157574, 0.27660821583016526, 0.20067684774353534, 0.120441358405187, 0.20439370649477773, 0.18413019524479302, 0.21448380427324387, 0.28041852497541886, 0.2956385888462745, 0.23769068250470182, 0.28477358421841525, 0.22364512432410322, 0.25296160411219415, 0.23195380349796857, 0.1946530747354196, 0.19166553513817475, 0.19073303083477766, 0.21645394704045562, 0.18310735836264225, 0.23278533919782263, 0.1866919787502438, 0.2221421131267558, 0.14989221113078544, 0.20722994588536436, 0.2156766181332952, 0.19951253518843048, 0.2403847618039331, 0.2330202757848715, 0.21150580565433497, 0.22437992063330614, 0.23920020710790924, 0.23697990181521744, 0.17766015312368255, 0.25592846820008386, 0.17925882843286745, 0.18592206090597674, 0.18870031521192732, 0.18291657059757305, 0.1760986284705175, 0.19935545581599878, 0.18172012044428076, 0.1838472861469277, 0.1871257577463059, 0.17914532119150517, 0.5171318049480931, 0.19513344093164542, 0.5576071513141532, 0.6295557844022597, 0.17732049953766038, 0.5812321220136689, 0.4309650278390842, 0.20877918434584586, 0.07348703294156333, 0.4217897506586723, 0.13644683192882823, 0.14643738735710143, 0.33863961281141564, 0.4283565618897671, 0.31892485869011333, 0.17933944018339787, 0.19280234938812202, 0.17629655095286545, 0.17433443475461208, 0.17423943136937725, 0.17976323853523868, 0.20320460775864635, 0.18334920122824905, 0.20985007881247553, 0.08488584255888476, 0.091735395439696, 0.08180961474695847, 0.08282623800862965, 0.09286267097079981, 0.08065029956488456, 0.07706852781912343, 0.09167672455047882, 0.08927686405761781]}, "mutation_prompt": null}
{"id": "50dae1ee-4151-4815-9c7d-eab433d25095", "solution": "import numpy as np\n\nclass DynamicPopulationSizeAdaptiveFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            # Dynamic population size adaptation based on fitness trend\n            fitness_trend = [1 if fitness[i] < fitness[i - 1] else 0 for i in range(1, population_size)]\n            if sum(fitness_trend) > population_size * 0.6:\n                population_size += 5\n            elif sum(fitness_trend) < population_size * 0.4:\n                population_size -= 5\n\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicPopulationSizeAdaptiveFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic population size adaptation mechanism based on fitness trend to balance exploration and exploitation effectively.", "configspace": "", "generation": 69, "fitness": 0.20036305338699062, "feedback": "The algorithm DynamicPopulationSizeAdaptiveFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4238000654452537, 0.4272359703183821, 0.41178601217489097, 0.4107847175841267, 0.41611165362382496, 0.42395145267283196, 0.40867742317809064, 0.4628321789533977, 0.4048569498492596, 0.02267060958928091, 0.023355827561324483, 0.028341039738450147, 0.0293948097002793, 0.03510578623572691, 9.999999999998899e-05, 9.999999999998899e-05, 0.06545789607489005, 9.999999999998899e-05, 0.10495957246577159, 0.14011196367481593, 0.11224606439804485, 0.11403027884551498, 0.10826225814824653, 0.09856436065860585, 0.09094423632259407, 0.10676817442101239, 0.09710546620694804, 0.09614668293173267, 0.08436376591568318, 0.08907406368516291, 0.0941171321495442, 0.08053213571352824, 0.07683283372922145, 0.1076645951713775, 0.10014097127131427, 0.09878662047772901, 0.7285055553425095, 0.7430167869238811, 0.7331924797469171, 0.4831151129486255, 0.5254530232162734, 0.6175101766006523, 0.6261470538695829, 0.6242032968869766, 0.7226885143333117, 0.277612393934376, 0.29715748925538377, 0.19857182077880087, 0.26984000876229886, 0.27842626939287785, 0.26002431945918814, 0.25182444305368423, 0.23492998382655128, 0.255844645701935, 0.32708852529454857, 0.22761155665328137, 0.23189835600940512, 0.29945552101651485, 0.2830277880229515, 0.2467021421148321, 0.17151005810404496, 0.2278533121616576, 0.22862109659535057, 0.1844502572867387, 0.18377105202905963, 0.1320745217564292, 0.16146002011598048, 0.18853067422112357, 0.08990758657399989, 0.15851634795864888, 0.17550789624272822, 0.1679594900191489, 0.15527467990909705, 0.13492317892029315, 0.12467824823372009, 0.14513703969566827, 0.18394134689843122, 0.13057857228280134, 0.16843444885088232, 0.15163113904929526, 0.1482877142870389, 9.999999999998899e-05, 0.004182948478362647, 0.02031914331046536, 0.03588204580961607, 0.04615010240575523, 0.00938052421001534, 0.026387658914957535, 9.999999999998899e-05, 0.019530364543985157, 0.1823019074915121, 0.10248940559217568, 0.21041738706607815, 0.03943090666195914, 0.038096543138130046, 0.03265594019554441, 0.111257868637478, 0.09402197309381866, 0.13818747363862427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09823814379263207, 0.09204495967625803, 0.08754351486015621, 0.07701663053979324, 0.08706298440221849, 0.08082310959176098, 0.07047443256515218, 0.10033015451543525, 0.0617768868227615, 0.3774288635149984, 0.39416131526958387, 0.4022365198023721, 0.3727520558461004, 0.38440041020804416, 0.3894843068620617, 0.3873459307750027, 0.40189175399669397, 0.40477755851328845, 0.08762408175196434, 0.10658178345370817, 0.09301416249907146, 0.09172041716488033, 0.09771304490140942, 0.1115288316707016, 0.09198292758861659, 0.10561496386386315, 0.10571136663329184, 0.20265912999820235, 0.24779810744676467, 0.16387356127079367, 0.2070742483376664, 0.29766060005234074, 0.23681813850214795, 0.16948548873683955, 0.14223647040068466, 0.18587119880408942, 0.20623942224954395, 0.19361485150871494, 0.2874536071904247, 0.29041624532296473, 0.24499513883299628, 0.29504266242115684, 0.22127391603942492, 0.2710264264181059, 0.22191306301275815, 0.2017607233618619, 0.20773090336330757, 0.2141422701791713, 0.19800461088198829, 0.22262899612346154, 0.23498785766899954, 0.18750155490829545, 0.20306382338177775, 0.18275992878601122, 0.19712579057995216, 0.21340842624427125, 0.18808532009693213, 0.2694052431470306, 0.2003326986862508, 0.23185055925765774, 0.2624542036991129, 0.2376439347364122, 0.23899258164754777, 0.18792535671061827, 0.21512797786492954, 0.16773102676109897, 0.16664501604642212, 0.17508374572638963, 0.17516305016570022, 0.18110620439556446, 0.18341837055873778, 0.17860599835330382, 0.1839685176301722, 0.18707849503943985, 0.17935487894604885, 0.5612517345453625, 0.1958357411014524, 0.5156546690103047, 0.6743317741099146, 0.17793657670978158, 0.6158657205157845, 0.5084389682927876, 0.20935513181516363, 0.07349751364334567, 0.5019787033938928, 0.1154108484438573, 0.14542250571596993, 0.2759228608882942, 0.4540337179392213, 0.36168745032998273, 0.18125551648977456, 0.19128242809385998, 0.18814185331626387, 0.19234682480919063, 0.1767033940190229, 0.18154445234195293, 0.20320460775864635, 0.19151789350265536, 0.204328214287125, 0.0908171994098591, 0.08715207867388997, 0.08118210605677068, 0.08718525421389589, 0.10277055231392696, 0.07591385319798805, 0.09380497090789108, 0.09677421302985445, 0.08204704372355154]}, "mutation_prompt": null}
{"id": "28768a12-4e66-4ee1-8ab2-e4f6a8ea2df9", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        dynamic_coefficient = 0.1 + 0.4 * (1 - np.tanh(np.mean(v)))\n        return step * dynamic_coefficient\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmImproved", "description": "Introducing a dynamic coefficient for levy flight step size to adapt to the optimization landscape dynamically.", "configspace": "", "generation": 70, "fitness": 0.19777548251252394, "feedback": "The algorithm DynamicMutationEnhancedFireflyLevyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.49377062588271803, 0.5019030346485819, 0.4955169489209025, 0.45776601457176724, 0.45505699763822816, 0.4664871158473357, 0.47243160386788297, 0.45438024312823133, 0.4517546142284553, 0.11004496969658872, 0.051511074494628106, 0.06139322232686295, 0.0270822391128831, 0.06383752092601358, 0.018196703306251782, 9.999999999998899e-05, 0.07502118146180237, 0.029128158629926792, 0.12229812318816713, 0.12602498576684773, 0.10071342116984872, 0.12953126240902968, 0.09223629314900395, 0.09641572341246807, 0.0885166787584889, 0.11873946114376288, 0.10527011873435532, 0.09020006147863568, 0.08438078127269821, 0.08595235330781781, 0.09064730249845199, 0.06807192840553522, 0.06147685270839176, 0.1000062805018248, 0.08441034862965191, 0.09528852830784384, 0.6788465700623623, 0.6899195081001347, 0.6321763285747387, 0.5234923029880434, 0.524516923506451, 0.6063023834301533, 0.565875435250895, 0.4929476984014566, 0.6396129235854027, 0.32418534677128574, 0.28274528271241983, 0.25649777355943404, 0.28228516998597175, 0.3220905534746378, 0.29728903705260923, 0.3122736410510395, 0.2652423630569265, 0.3036114295183283, 0.18353049228621043, 0.22778248264173873, 0.1415055968495631, 0.272449780551702, 0.26200550802959666, 0.18210513001693107, 0.12928423548138346, 0.1498346248338439, 0.4797712483508888, 0.31115314210157985, 0.16314524970777167, 0.15397513969657506, 0.1363283599052444, 0.22718520887126625, 0.15609999558913823, 0.18352888211072582, 0.28159398847274997, 0.16513787009736602, 0.18956733762053468, 0.1475405847065422, 0.12636564467241174, 0.15903358788662758, 0.15077473418539467, 0.161034145735508, 0.1850767678790658, 0.08719977933371992, 0.17762782527397136, 0.03491655829226348, 0.0014530992590471303, 0.01959562139454707, 0.042724091883156845, 0.007277408872711333, 0.021464248407609965, 0.008264853690562624, 9.999999999998899e-05, 0.08635144158040298, 0.1505254199405467, 0.07685361382449685, 0.13671707926204124, 0.042911311009376396, 0.03569561886210104, 0.03362492886735147, 0.10001346814521839, 0.08666251315637163, 0.12105176979850307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009791681878750347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12562505878028718, 0.13813470409422368, 0.1408508569534328, 0.11388159757038252, 0.12161125464566414, 0.09884600730822002, 0.06824463522012991, 0.11188754015881619, 0.07497237241472976, 0.42268187133664004, 0.41144884616325395, 0.4556779694386168, 0.4084585378911616, 0.42606207825729614, 0.40821368749287923, 0.43328429352001374, 0.4420737903126509, 0.4463009233723585, 0.04184248373090993, 0.04524028691305115, 0.05032646050421541, 0.09797479932238606, 0.06989481525854213, 0.09490157054869541, 0.11103701721267967, 0.09269044838752194, 0.07968036517272936, 0.17586114437046652, 0.2164755234199771, 0.16685180860003346, 0.1584819769338639, 0.208932750039582, 0.31655245613282934, 0.2016601448919374, 0.22618810012368695, 0.17499822782151164, 0.19803742351920395, 0.21555158077487924, 0.23580296910499865, 0.32141036064143624, 0.21640361663977215, 0.27583858609174106, 0.1780303326434508, 0.2653266860580943, 0.22933287959284565, 0.12318245059773913, 0.20323269847192182, 0.21264508473072274, 0.17753187899548362, 0.2016222515246302, 0.22468403933942704, 0.16959877268451184, 0.1976061556399643, 0.21001123695260981, 0.2007688522400206, 0.18645109858690656, 0.19904816453191643, 0.22005058566135183, 0.24072903104647703, 0.2331698613062666, 0.2641960816638732, 0.22972045892922943, 0.22926887505871796, 0.18308106262535873, 0.1759615480495591, 0.17264260283745803, 0.18077886128697684, 0.19183420906024018, 0.16909818337227056, 0.18951637456827797, 0.18206388158583564, 0.1767410303531466, 0.17992285079766224, 0.18680064250487427, 0.18157048458194958, 0.17165265952321684, 0.14165798399041762, 0.11458206118250092, 0.16200047088610137, 0.1601185968616925, 0.7235039839390727, 0.5065082393186193, 0.21124087110905254, 0.07358239508751518, 0.30961607041104255, 0.14312610536662196, 0.14967636460177547, 0.4497795510710736, 0.5137413868698528, 0.43954527979221725, 0.17921462661829757, 0.18458321176284187, 0.17719855663948314, 0.1827355641147087, 0.17342781764966197, 0.17747830135632225, 0.18566406101230126, 0.19255653611691104, 0.18649176509453746, 0.08650462066985798, 0.08085539690192001, 0.08037609250428046, 0.0787287931004601, 0.10735549863707872, 0.07943495051094052, 0.0770381279505522, 0.09567950008607318, 0.08383311737370625]}, "mutation_prompt": null}
{"id": "443ea21c-ab1e-4acd-ab97-29885ad532e6", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "95dc01d5-1fdc-475c-87c4-82b28d9d0049", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def gaussian_mutation(self, population, i):\n        delta = np.random.normal(0, 1, self.dim)\n        return delta\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.gaussian_mutation(population, i)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Improving the exploration capability by introducing a hybrid mutation strategy combining Levy flights with Gaussian mutations.", "configspace": "", "generation": 72, "fitness": 0.16850654535633589, "feedback": "The algorithm ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4102974321306838, 0.3906130882193465, 0.40015818282062343, 0.3542660538864485, 0.374289968831201, 0.3952544888842492, 0.22867490553695868, 0.23399245413252834, 0.24560497146775984, 0.027433337913782996, 0.028742414609324585, 0.034785533710742444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022824657683674032, 9.999999999998899e-05, 0.07677979078992414, 0.07523297223250758, 0.07190687647126048, 0.09932837544499595, 0.10495663355121143, 0.10544516604969179, 0.09010757627377675, 0.10272653425681588, 0.11419975498248092, 0.06505301130260066, 0.06064112893078477, 0.054304709070067125, 0.09362904841018627, 0.07735698218961296, 0.08100031340191782, 0.09068194197143897, 0.08928319479840774, 0.07060452374742654, 0.1678145736944936, 0.5036814054264942, 0.7460778799667546, 0.3641958234732915, 0.610768864521906, 0.42481628734621946, 0.6471328572887469, 0.5418132417665372, 0.5631016206989774, 0.22256732265692547, 0.20841460479825769, 0.22603515401005259, 0.23181216750588884, 0.2499222492990678, 0.2627345388500856, 0.13566048903676653, 0.14354352240798818, 0.1512055015708531, 0.21940454346020155, 0.2581728212146921, 0.20701229707888502, 0.2662913962845308, 0.3150319229824958, 0.2880784139139074, 0.23128299903372151, 0.24913275175862815, 0.19511267865206927, 0.145313520494725, 0.13415096244239688, 0.1268816713174563, 0.0669258760098661, 0.07201213024799835, 0.05975451505979068, 0.15150167333212905, 0.1681029833867519, 0.14263529632376226, 0.1568979789295718, 0.13094828421713955, 0.1428263331745362, 0.13225305013496347, 0.14932655138211903, 0.15469859688712218, 0.15343131575205549, 0.15525703603746355, 0.15742284702751563, 9.999999999998899e-05, 9.999999999998899e-05, 0.01262462369071804, 0.0157320636292394, 9.999999999998899e-05, 0.0001040004914768522, 0.014068790436099099, 0.0020569136120480724, 0.004735529608036471, 0.15188230398591607, 0.1266063399351215, 0.13885235002941976, 0.041315019467303316, 0.03507026679032099, 0.043370475633837335, 0.12830425710543136, 0.08109423026470153, 0.1152894495574236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06707277905597475, 0.08162642133376963, 0.06297712754579565, 0.0680194818083577, 0.08423087631597159, 0.07701064167089933, 0.02459946842970806, 0.017381019786099516, 0.020235542709473475, 0.2548775766079562, 0.26248708348044036, 0.267384985962834, 0.26034188542744774, 0.25980875512349466, 0.2583366703507828, 0.36827154940281215, 0.3811219312642299, 0.3722568530262743, 0.07378964988063708, 0.07471719064131177, 0.08396690911030602, 0.08912119203504987, 0.10542307524153982, 0.0963285103258622, 0.07736847915685852, 0.07155096031002339, 0.08676068404405435, 0.18167710617866795, 0.1528537977100064, 0.15003630654786937, 0.1292463220619804, 0.12304325317819964, 0.14395182603471968, 0.24039686372163782, 0.20343841448873, 0.13683499469641192, 0.21272892717304126, 0.19564342424718173, 0.20299471174984252, 0.2859705450127925, 0.27565327365032, 0.26555427412064625, 0.23425884462946756, 0.24327882123558786, 0.2251286036188801, 0.14742935272451618, 0.1757056128568132, 0.14491335958035056, 0.17897302008746607, 0.19082814967822515, 0.21476389274994068, 0.16828473011817058, 0.19187795576346034, 0.1874890344198602, 0.19046566279774113, 0.1917135451622729, 0.18825466069461505, 0.2233055337659, 0.2310369642844896, 0.23087989187788294, 0.19575568542399968, 0.22519518582220133, 0.24338449325981382, 0.16442196625252292, 0.17819543581708164, 0.16349192045524852, 0.17334346481385055, 0.19001554484900351, 0.17475613349194352, 0.18302113392338593, 0.1707211053523613, 0.16791452961775633, 0.18253983127195317, 0.18513204731880473, 0.18190071987394163, 0.5001009499350312, 0.18507641566918376, 0.429485365584376, 0.24730695362247734, 0.28608422334820804, 0.27612789998934784, 0.2533151633605868, 0.39745723817560763, 0.25962866775939986, 0.44238562755298494, 0.13909643589521803, 0.1474792280199495, 0.2523229787759529, 0.21013217494099545, 0.13662475267806318, 0.18390700775149937, 0.19037151874477376, 0.18121555138897627, 0.18759331609796515, 0.1782654815968865, 0.19176817529360524, 0.20027389610386537, 0.18135864035993166, 0.1823372685452711, 0.0854247764583057, 0.07663141599278556, 0.06020723333633593, 0.08376590723908994, 0.09425906197101996, 0.09784252318850051, 0.07921264732249766, 0.08721451762208476, 0.09353141964292022]}, "mutation_prompt": null}
{"id": "8cdcf4f9-513b-4693-bb73-dc43e3581a21", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if _ % (self.budget // 10) == 0:  # Dynamic Population Resizing Start\n                improved_fitness = [func(individual) for individual in population]\n                improved_indices = np.where(np.array(improved_fitness) < np.array(fitness))[0]\n\n                if len(improved_indices) > 0:\n                    population = np.vstack([population, np.random.uniform(-5.0, 5.0, (len(improved_indices), self.dim))])\n                    fitness.extend([improved_fitness[idx] for idx in improved_indices])\n            # Dynamic Population Resizing End\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic population resizing strategy based on fitness improvement to enhance exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": 0.20061563308904448, "feedback": "The algorithm EnhancedDynamicMutationFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.42337006391253473, 0.42777989926335136, 0.41122505288139044, 0.4096503693151431, 0.41480906119306704, 0.4232931681548816, 0.40827802707512917, 0.4622309899569371, 0.40963413944738536, 0.022392443864094447, 0.02314340472746823, 0.02806866299498545, 0.02903594232680662, 0.034783730488208486, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506629142463449, 9.999999999998899e-05, 0.10466550039712763, 0.12126650048196264, 0.11184856603297633, 0.11388506066244719, 0.1081360215576116, 0.09842961999719191, 0.09078660669413297, 0.10711637962950737, 0.09679764225714083, 0.09591207097719379, 0.08414012071505317, 0.0888392952381335, 0.09399395151202317, 0.08028131999242683, 0.07666834221004626, 0.10726956991964376, 0.09989576979541648, 0.09839780367074036, 0.7238822030846854, 0.7384344747004989, 0.728517607535092, 0.47854803903486964, 0.5208744661142142, 0.6128458455501239, 0.7052065868931847, 0.619497965046691, 0.7180620841523994, 0.2763046616706558, 0.2956987821869076, 0.22449197341439164, 0.2691860279220647, 0.27728164926482246, 0.25887844365738133, 0.25098348378381774, 0.23379712906286332, 0.25468648963482143, 0.32614981605844195, 0.2272366460897891, 0.3095564138168059, 0.29856222345181405, 0.28352976828575516, 0.2448967644637291, 0.2173393482171878, 0.226291652684242, 0.22823048727042894, 0.1839257552388046, 0.1829307771636155, 0.1369169107457141, 0.16054216690235867, 0.18843391669648568, 0.08929149116757562, 0.1581127272052748, 0.17471805676952645, 0.16763904476913472, 0.1651666285095229, 0.13468577826713735, 0.1307049965598831, 0.13754387972901072, 0.18333216956299814, 0.13027954463628066, 0.168359372721406, 0.15102598735799655, 0.1479423132656824, 9.999999999998899e-05, 0.004005046224017539, 0.020102800270664023, 0.035494281382579485, 0.04584320140729237, 0.009238252347428144, 0.02614665405696126, 9.999999999998899e-05, 0.019245367625526755, 0.18153690744028228, 0.10224824489362894, 0.21002730730049401, 0.039363597787549276, 0.037924669926533316, 0.032442121661875545, 0.11086319216380269, 0.09355018909557988, 0.13784562665514766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09099664391186413, 0.09145562775017735, 0.08718677027686805, 0.09644583892140979, 0.0865603140358644, 0.09484397669146416, 0.07018069727689413, 0.0997800891115983, 0.06860062043481119, 0.3769880050506067, 0.39369537012835476, 0.40138218987996066, 0.3723930172108799, 0.3838810660501143, 0.3890151608461009, 0.3865955729809015, 0.40114931404457355, 0.40400797623630214, 0.08727435943132245, 0.10615944935486965, 0.0927163265133426, 0.09159978514460831, 0.09739378210350225, 0.11121305428339223, 0.09174763313151468, 0.10537014401971379, 0.10539954866138523, 0.20205555739263614, 0.24719035685899438, 0.16343923470737076, 0.20636900570196348, 0.25011041981498716, 0.23627434261078684, 0.1691305411886368, 0.14198269408166164, 0.18544102686785058, 0.2057067052524687, 0.19343757645869686, 0.2871092488943514, 0.28994552386555794, 0.24478588689091674, 0.2946175664944346, 0.2208921054673112, 0.27063163198384454, 0.22168111605577345, 0.20121772013585482, 0.207047806502206, 0.21377278841783887, 0.1976369167435107, 0.22207239529644973, 0.23454141032045006, 0.18715530762764054, 0.20291582525074692, 0.15033554523667958, 0.1970060286974754, 0.21340842624427125, 0.1879338582873894, 0.2692049380780088, 0.20011464199587403, 0.23159295924356615, 0.2619262101488873, 0.23727039919548343, 0.23862688518994224, 0.18775556334028065, 0.21475303886863362, 0.1676759774098271, 0.1665426627133244, 0.17494827189108442, 0.1750137088798891, 0.18091762163283243, 0.18332118669107944, 0.17839397700484239, 0.18380568777175332, 0.18699155370107134, 0.1789968569874738, 0.5587327845857615, 0.19565161571247214, 0.5133753148074268, 0.6735769056918413, 0.17788597771911807, 0.6142136602740846, 0.5066650564975215, 0.20927439935232972, 0.07349507266214694, 0.4990514074005603, 0.11499254457363439, 0.14512777990535053, 0.274009001057559, 0.45209093916847753, 0.36004269321275717, 0.18115094044676916, 0.19120525593546123, 0.18804779158759977, 0.1921868343733294, 0.1766367474816568, 0.18141715033738015, 0.20320460775864635, 0.19128690198431653, 0.20428261807198633, 0.09061390878433173, 0.08708252238162006, 0.08108066814092019, 0.08702343373235566, 0.10263341632025624, 0.07579373101319853, 0.08665727383045618, 0.09658573734447728, 0.08128161219055563]}, "mutation_prompt": null}
{"id": "8a2f9b28-5405-4448-a12b-cc7974d13d43", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationEnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha_min = 0.1\n        self.alpha_max = 0.5\n        self.gamma = 1.5\n\n    def levy_flight(self, gamma, dim):\n        sigma = (np.math.gamma(1 + gamma) * np.math.sin(np.pi * gamma / 2) / (np.math.gamma((1 + gamma) / 2) * gamma * 2 ** ((gamma - 1) / 2))) ** (1 / gamma)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, len(population[0]))\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness, best_fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(best_fitness - fitness))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            best_index = np.argmin(fitness)\n            best_fitness = fitness[best_index]\n\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = 0.2 + 0.8 * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight(self.gamma, self.dim)\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + (self.alpha_min + (self.alpha_max - self.alpha_min) * (_ / self.budget)) * step + mutation * self.dynamic_mutation_scale(fitness[i], best_fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedDynamicMutationEnhancedFireflyLevyAlgorithm", "description": "Improving exploration by dynamically adapting the levy flight step size and mutation strategy based on the best individual's fitness value.", "configspace": "", "generation": 74, "fitness": 0.20130189164295959, "feedback": "The algorithm ImprovedDynamicMutationEnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4113934689645238, 0.4465795331408542, 0.4221979568404066, 0.4367675668262567, 0.43342764027628145, 0.4136022232891041, 0.41297246763116846, 0.40332742224025186, 0.43754761374508344, 0.04677911986230232, 0.04010602288097831, 0.003726201986648081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01436885393894094, 0.018749099993685348, 0.0004435099612055682, 0.12386027372680308, 0.10178124715215453, 0.09469197291714082, 0.09354996922650316, 0.08607594189039158, 0.07107439449786124, 0.09293827923862841, 0.11575493272473558, 0.1117206394667053, 0.0949150129291978, 0.07922714063825276, 0.08724062089801665, 0.10015909076904406, 0.06710054829322054, 0.1008210394788881, 0.10022381015122805, 0.09519844796555388, 0.09173116394422964, 0.8262844675008281, 0.739338675347188, 0.8484893729308939, 0.7720534442377083, 0.7972051900227966, 0.809710352524776, 0.784855527257952, 0.7731132079976325, 0.8212318789440851, 0.2793327087149079, 0.2725887369663712, 0.23700427871546204, 0.27300839620640516, 0.28417674328905673, 0.2668526756500038, 0.3038852263486622, 0.24393466942187936, 0.2741514111046205, 0.3609716287071324, 0.3546030353452281, 0.15917798527891358, 0.2662423390468617, 0.27107724045071224, 0.19459632723510156, 0.16557813562683732, 0.17681567836618384, 0.2159969731516741, 0.18426804509654815, 0.1212058978827879, 0.13649151337360477, 0.10216472385505171, 0.17058412760337505, 0.18243795870751545, 0.20954920817524625, 0.12173637069163123, 0.147766530019237, 0.13939401934767048, 0.12748946995394395, 0.15662367817819955, 0.15735028780318638, 0.15013892905182058, 0.16791461251580253, 0.18667303295484894, 0.053463267571914885, 0.12874906395192287, 0.002992116879017348, 9.999999999998899e-05, 9.999999999998899e-05, 0.02159471628045162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045770632427657665, 0.1564541717005925, 0.1043340640315864, 0.14984088606044532, 0.033170034450429875, 0.0484439078262201, 0.024877288622078053, 0.08179774797741501, 0.07376586095183157, 0.10124384887513549, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10323804282569438, 0.09385003773158973, 0.07615834994666837, 0.08540794838691368, 0.09752251331784423, 0.09601687113669544, 0.08962473768182222, 0.11354437106544413, 0.06534708998542593, 0.4050803861082293, 0.41660041662823766, 0.3927720828506235, 0.36461567667298744, 0.4015303571301829, 0.3893881290188026, 0.4105901057535396, 0.38755235649893716, 0.41341234169200036, 0.0957479740479541, 0.11090658825451716, 0.07727868056044607, 0.11503934309492525, 0.09520976299990491, 0.0847040284035504, 0.11090599740224283, 0.11503556566395179, 0.0899800968275718, 0.14988299766694602, 0.26400716304771155, 0.1789273905895158, 0.2383003058929527, 0.2980298157755803, 0.24591636211238277, 0.21624855189672543, 0.19588555084181025, 0.19639504266963803, 0.16942283427012172, 0.31614517893195904, 0.2964039268148688, 0.27773037915180154, 0.2299679312347056, 0.2705857619441716, 0.23717635772102053, 0.30580814204770035, 0.23233608339110678, 0.2010412676420612, 0.22543630854489405, 0.22401009679134498, 0.2376392082519856, 0.1617845866398817, 0.2050595783336302, 0.1914106466614448, 0.2377173113915072, 0.21428526574809925, 0.21563669043677847, 0.22666274974628486, 0.18766234268613646, 0.24608772257175338, 0.21340633039897572, 0.2034138863678845, 0.22194599276770177, 0.19315391216696876, 0.18755219315385152, 0.17775751161501196, 0.2058976946013651, 0.20570178735902267, 0.20004859649692341, 0.2266846299907851, 0.24097878188312094, 0.18073794272040467, 0.20616886938526202, 0.18101556387823436, 0.18797783270982527, 0.12626513145847806, 0.18850140550225258, 0.665340267144444, 0.20162102083233457, 0.19656783662365696, 0.15705929269396202, 0.5454436468713295, 0.20940743727692157, 0.5436447238239693, 0.20530949483502425, 0.0735724643546748, 0.46018207496101327, 0.16268691785873202, 0.16907349042292186, 0.10469273000896995, 0.35312932966001487, 0.34402317718771436, 0.18369033896527676, 0.17230761407117479, 0.18154912888894337, 0.18774328860022205, 0.19439019992850448, 0.19378673497049725, 0.18246078853336234, 0.17699136224368395, 0.1837935129150995, 0.09551860130509016, 0.06442975128302075, 0.08943279126266934, 0.09331012486286616, 0.09268375252410532, 0.08232127761244468, 0.09321068430204271, 0.08331321850580953, 0.08823450726619309]}, "mutation_prompt": null}
{"id": "daa9e3c3-01d2-4648-95fb-d2889d745613", "solution": "import numpy as np\n\nclass DynamicPopulationResizingFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n            elif population_size < len(population):\n                worst_indices = np.argpartition(fitness, population_size)[:len(population) - population_size]\n                population = np.delete(population, worst_indices, axis=0)\n                fitness = [func(individual) for individual in population]\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicPopulationResizingFireflyLevyAlgorithm", "description": "Implementing a dynamic population resizing strategy based on fitness values to adjust the search space exploration for improved optimization performance.", "configspace": "", "generation": 75, "fitness": 0.20209389163695185, "feedback": "The algorithm DynamicPopulationResizingFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4173642346796175, 0.42496761912839176, 0.41817966077758906, 0.4467816440196418, 0.40606140653836453, 0.44805103110743716, 0.40870804511786174, 0.40297996128758684, 0.44524451472202775, 0.009371370497726406, 0.037691070720138664, 0.06551520492689011, 0.00019827059574184513, 0.042621409986347336, 9.999999999998899e-05, 9.999999999998899e-05, 0.09083768310508589, 9.999999999998899e-05, 0.09115838447249047, 0.14525484505922392, 0.10636006484269078, 0.10484030856778515, 0.10355991829361977, 0.1040167030947543, 0.09634048087428015, 0.12887748501817065, 0.08714151731944675, 0.09976575664532505, 0.0923681609684085, 0.0870954768636355, 0.08849114387083279, 0.07076062914407899, 0.07093052062936478, 0.1108619276506615, 0.08847812916320708, 0.09092481129800034, 0.7285604829902487, 0.7294240542229653, 0.7283537205692419, 0.6851065765291497, 0.6705133489288335, 0.6632256318119545, 0.6058574738189075, 0.5504352615791146, 0.6897479476636244, 0.25379345563120825, 0.25575496332967784, 0.23674831227538562, 0.28417092046414527, 0.24550379437546177, 0.273056688175745, 0.2670876377725323, 0.24044432820571982, 0.25433964214189797, 0.3425287193734714, 0.22716325206110255, 0.22609897626349973, 0.2734417901355104, 0.2680967712785227, 0.2658774726031544, 0.21413251824546464, 0.24635238269493154, 0.2804590454633211, 0.15880103248892719, 0.1853237542771472, 0.20919026939864527, 0.1892936713630896, 0.17095176714480842, 0.09246336767090213, 0.16622453080901867, 0.18809870775747073, 0.1773151984678829, 0.14098625463488446, 0.1430961742340151, 0.12158654049455986, 0.13967616659652926, 0.21439698176858424, 0.12794523809254277, 0.17578658794155455, 0.203859977428132, 0.13228265790044458, 0.003707874740828121, 0.012616757607544216, 0.008584105071597348, 0.02297543719509576, 0.036316185215533925, 0.004901091678036984, 0.03060327100681659, 9.999999999998899e-05, 0.03190762876212461, 0.1725829330029206, 0.09325597491369753, 0.2881317210953507, 0.03564476568597785, 0.03782370185276418, 0.0363777947992292, 0.12129556129452235, 0.0982378183272844, 0.1355788735913136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10736478615880529, 0.10964171610674733, 0.09763602579740505, 0.08489344574449786, 0.09251932469316326, 0.08176870330804142, 0.06890327789382045, 0.07638050229799787, 0.061830780109800476, 0.38367897582244537, 0.41420527217183767, 0.3567635984309975, 0.4283248293753724, 0.40603674694635816, 0.4185795246550785, 0.3969873507650594, 0.39936061981637283, 0.39128846137201745, 0.07207755283726325, 0.12015800784925812, 0.07632220789467159, 0.09576910611290934, 0.08888093987439316, 0.08709396820879534, 0.10863421967722497, 0.10058646269552518, 0.10557398633635262, 0.21558861625061476, 0.25091142349596096, 0.21474599691785545, 0.16400123472968786, 0.22460787770981594, 0.2570504763950414, 0.15716915730368697, 0.20355188587365702, 0.22232803195060757, 0.1773520986114987, 0.23961472757638036, 0.2765800240169334, 0.28752474064246825, 0.23236661046016394, 0.28685737418877466, 0.20219239978293668, 0.2485972200345421, 0.22882466964323334, 0.18758328987123718, 0.21149732375098607, 0.2120689791512822, 0.16847354460809782, 0.17508200786654537, 0.23566793271366526, 0.18743520667242142, 0.19265728089453737, 0.1840117976273824, 0.204727218113802, 0.24675139602196994, 0.2158902707007423, 0.2366529432757173, 0.21933935272963767, 0.22380348230095493, 0.22595592498001993, 0.25282665442450847, 0.21862938722563952, 0.18142411029515015, 0.19005546412896956, 0.17619123164172557, 0.17307279689252897, 0.17460255895439802, 0.1775146612938202, 0.18191577521761693, 0.19461425007836952, 0.18080882810811294, 0.18366629497948783, 0.1873491558553455, 0.1778011495271199, 0.5721614475408119, 0.19081339387463792, 0.5953812438609332, 0.5879358406141133, 0.17670849794156207, 0.605716745446437, 0.4032302345405092, 0.2082428637679874, 0.07350244785135451, 0.4822187145259599, 0.13927952574381308, 0.14503190212290706, 0.32944401320823946, 0.42188697608049464, 0.30810461342119044, 0.17571948841504692, 0.18516576281917485, 0.17876398090178713, 0.17872248896173226, 0.187895382563518, 0.19006329886338058, 0.20367155524053748, 0.18664252644609491, 0.19784443249463513, 0.08107910062875412, 0.09441986023488247, 0.07909393810489895, 0.08963404995679158, 0.08923374493472713, 0.08454251286041858, 0.07760632974674087, 0.092299726721225, 0.0938337908074458]}, "mutation_prompt": null}
{"id": "b8705fb7-3f07-4b9c-9c0a-1262c10152cc", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            fitness_progress = np.mean(fitness)\n            population_size = int(40 + 10 * np.sin(fitness_progress * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Enhancing the algorithm by incorporating a dynamic population size adjustment strategy based on fitness progress during optimization to improve convergence and exploration.", "configspace": "", "generation": 76, "fitness": 0.20209239585370267, "feedback": "The algorithm EnhancedDynamicMutationEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4592866464200246, 0.45763958747111333, 0.43135797823651734, 0.40967450659011584, 0.40819523469727326, 0.4052768167178499, 0.4263293408836386, 0.42174096851526155, 0.40847640563757126, 0.029911750192086584, 0.03575810166932192, 0.04087246864726746, 9.999999999998899e-05, 0.04768053759270319, 0.03816098267080048, 9.999999999998899e-05, 0.03346197558126862, 9.999999999998899e-05, 0.1120348021927502, 0.12025800159885824, 0.10808217655181629, 0.10393920561420966, 0.10506086586932384, 0.10195109182944251, 0.1378246455408273, 0.10315195171494995, 0.09503458847635826, 0.11345621736902667, 0.0886675360491197, 0.09297553107864664, 0.08975712704368599, 0.06441974825292196, 0.07058915895104734, 0.10563919274857259, 0.10865448262667199, 0.08841942787794799, 0.6932676684475103, 0.7632251813981583, 0.7316252483444728, 0.6017978322155421, 0.6547826092083116, 0.6395244455734987, 0.6125420018050993, 0.4820690988794549, 0.6796102288953029, 0.24942294578878377, 0.26238676205246103, 0.23070675238454275, 0.2802963487067994, 0.26751512546746603, 0.2592434296189414, 0.2825810748894233, 0.2550030431595407, 0.26529856586260725, 0.3509481205023487, 0.2275236455163595, 0.20868382131040109, 0.3600192465471528, 0.32602285026964484, 0.2406911119399049, 0.21897464888605578, 0.2267150736853688, 0.21407409295852153, 0.22307892971435517, 0.19582044858465708, 0.18020221351667665, 0.2003834962314821, 0.17095176714480842, 0.10928618528466849, 0.16644523483364226, 0.167940630969184, 0.16255359757948684, 0.1431233590030626, 0.1321967238770756, 0.138850224603975, 0.14858364766441812, 0.2078152811680355, 0.1295630288148143, 0.17500855495688705, 0.1301137652860025, 0.14658286925619157, 9.999999999998899e-05, 0.0017006594211382842, 0.04899355461731325, 0.06402758262266539, 0.01010229310386368, 0.0032759239706200427, 0.06775107849442596, 9.999999999998899e-05, 0.010646129674651283, 0.16261977894189494, 0.09451010747670752, 0.24291572265736872, 0.03876589395613961, 0.0293473511458211, 0.03324194337405684, 0.17192107659648026, 0.09331368933574935, 0.12184214676625105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08669961326462217, 0.12445467973697211, 0.09438374637382896, 0.09946660023068177, 0.09152763705064881, 0.0742182802809408, 0.0749043432336719, 0.09498960738441287, 0.06627798749355551, 0.4005892947414512, 0.3917465593946645, 0.38498116140284633, 0.37807855115496236, 0.4097249689502326, 0.39852645495604655, 0.4105370705430966, 0.37803256486262327, 0.3971101132632058, 0.06117885535402434, 0.0967624094905497, 0.08142230425838248, 0.09823821995066795, 0.09027998117239044, 0.09730716365621606, 0.10080927228472614, 0.12021364313545801, 0.10326446641917897, 0.2108614694737515, 0.26486288620333565, 0.1653939347457235, 0.15150036147902957, 0.2328538355277613, 0.24996167111795997, 0.1414037970936044, 0.14475368456521243, 0.25812233920760497, 0.2273706070432936, 0.1967586025204624, 0.28808695969270703, 0.2852852282210343, 0.2602637653861104, 0.2824006348123327, 0.20166710665893162, 0.29196599922615274, 0.23741764723994563, 0.18441025479694273, 0.21185277035809502, 0.20490933108686538, 0.1952021631888443, 0.1899940459243855, 0.22617917248032648, 0.19516241781764, 0.21066000375696836, 0.1759629231424633, 0.2157426032627262, 0.21340842624427125, 0.19957918720089673, 0.2452997414078789, 0.2307011930216757, 0.22686766328215746, 0.21553178879210577, 0.23648138746995895, 0.2110770271519652, 0.19642681621996316, 0.17572612640600438, 0.1760627270007632, 0.17575167390636381, 0.1790858890796777, 0.17604692668123734, 0.17842508877928231, 0.2037205442094311, 0.182522379804545, 0.18425392045067834, 0.18700824586528342, 0.17966334905617698, 0.514926939607818, 0.1937822022571435, 0.5491087982494551, 0.5775286740605123, 0.17676475015023263, 0.622363620881969, 0.4439574691576721, 0.2084488036005464, 0.07353883364578706, 0.4860645496141113, 0.12643689079870835, 0.1486305335354502, 0.3761606434903142, 0.4311374563568169, 0.3575681407073753, 0.18923354046581364, 0.18516576281917485, 0.17636021884960906, 0.18976750063113845, 0.17880851479344528, 0.1987649248788631, 0.20320460775864635, 0.2155913754355625, 0.19784443249463513, 0.08468427813649537, 0.09116910761198194, 0.08362275127292818, 0.085944868822309, 0.10088275649515854, 0.07198905157987612, 0.08288294934262286, 0.09176225861923049, 0.08432351231054558]}, "mutation_prompt": null}
{"id": "a605fe47-c935-4bd3-8771-d01db337fe91", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationCuckooAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def local_search(self, population, i, func):\n        step_size = 0.1\n        for _ in range(5):\n            candidate = population[i] + np.random.normal(0, step_size, self.dim)\n            candidate = np.clip(candidate, -5.0, 5.0)\n            if func(candidate) < func(population[i]):\n                population[i] = candidate\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n                self.local_search(population, i, func)\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationCuckooAlgorithmRefined", "description": "Introducing a novel local search mechanism inspired by cuckoo search to enhance exploitation capability and converge faster.", "configspace": "", "generation": 77, "fitness": 0.1921709467226661, "feedback": "The algorithm EnhancedDynamicMutationCuckooAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4154302996227519, 0.3932628622620583, 0.4351312979723886, 0.414087853032696, 0.44356917552859454, 0.3954783115169699, 0.4129031193786291, 0.4456791756094505, 0.39781382533657217, 0.03609270476782622, 0.04417529566795786, 0.026930707122651998, 0.00040311690429228886, 0.01657316103233475, 0.004716562751513664, 9.999999999998899e-05, 0.02977319464974093, 9.999999999998899e-05, 0.12393334892373553, 0.0968310489556874, 0.12584806865201148, 0.1105007609774804, 0.10471417055954502, 0.1017797323546904, 0.10027621799955555, 0.10445244517678742, 0.10557266581579894, 0.07873733450078779, 0.09426056771747682, 0.08736608040415772, 0.1181951908971367, 0.094000875920768, 0.07618185714166725, 0.09513168475699951, 0.08704513860520713, 0.08280809231236541, 0.6790473136788389, 0.6017923654487222, 0.6311832494198741, 0.6316428152538219, 0.5469236396680681, 0.4966740524424831, 0.5801525150252301, 0.5412056322901724, 0.6582063395084664, 0.26612500483362445, 0.26968966172439635, 0.23765523621574092, 0.22804197740765886, 0.25490474234828064, 0.25146429796176073, 0.26458972505709766, 0.2618008865325806, 0.24445997039810552, 0.2642568227195846, 0.26341929478205817, 0.1705239481099936, 0.274735973122893, 0.34111182798326145, 0.30949676072553234, 0.1947342552576099, 0.22762369877322375, 0.2202864535048552, 0.1972323989488517, 0.1229820641168411, 0.14528578750367438, 0.17020335601781067, 0.11321231134760223, 0.12497064791835688, 0.16981067357923507, 0.20549353761814904, 0.1864216745842453, 0.1593200297067935, 0.14837509876938326, 0.17394265436699574, 0.13409177789160653, 0.15699935063382597, 0.1271982802816417, 0.17037184931217364, 0.169209632812249, 0.148396491783632, 0.0005448785311548132, 0.014983120848390485, 0.013834649878581295, 0.030803014000519435, 0.023830528575251586, 0.001148660367121912, 0.011785347839141647, 9.999999999998899e-05, 0.01706300527318383, 0.21261656392865347, 0.08200047419784606, 0.1451309649889141, 0.03261084831282102, 0.028478619849530706, 0.03666342408797296, 0.15057577564273383, 0.11486248087767459, 0.10907082576942906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08847943629411037, 0.089848489209571, 0.1005172966970147, 0.08651233234325806, 0.09003578545864288, 0.10345837219128684, 0.0882089433286588, 0.08028722451972403, 0.07561782261840366, 0.39726529697215307, 0.3998846480742413, 0.4016172908651823, 0.4116162294010325, 0.36993145667228733, 0.39750667359024994, 0.3951297989891368, 0.3737281214774354, 0.39761301406346683, 0.07674285883719967, 0.1120920990080656, 0.07679322790479659, 0.10341082106673183, 0.12681530561399612, 0.0894683192526956, 0.09450771470740527, 0.1220573240740832, 0.09649306882849729, 0.20112191716935068, 0.19040583451975512, 0.16705561014177606, 0.20445560338529034, 0.2581897683615393, 0.2527735361932463, 0.1645480189899663, 0.15448579808859253, 0.16956563014985981, 0.18680056693335845, 0.20802200673324478, 0.2778436809312228, 0.247657588223415, 0.21259511483006877, 0.27004280179515927, 0.21814433346951734, 0.2904246420900749, 0.21019799109754544, 0.173851714983133, 0.20643590510320775, 0.2093446053940632, 0.21184821394599263, 0.19106735075574366, 0.1873194454792999, 0.1883130652681363, 0.20492001303669805, 0.18494149673260218, 0.20387583924016772, 0.2201267600679343, 0.17711671336125978, 0.20353344485919433, 0.24026513781143544, 0.22570810502854888, 0.22933141010353886, 0.21572299080542812, 0.24291259851839697, 0.1921900912586222, 0.18786423784387707, 0.18654258003370894, 0.187134319144579, 0.17953002269859586, 0.202185974321074, 0.1917474582236619, 0.19867514808340492, 0.18076399407565202, 0.18099219817131795, 0.18486662587095293, 0.18006620424105568, 0.6184404725048637, 0.19266794957871902, 0.1938943400246208, 0.1605477094866664, 0.15587344726876762, 0.6580113690317415, 0.5172460379240864, 0.21135525662196963, 0.07346228066725913, 0.14939367499517753, 0.13794140724430148, 0.14802455560443117, 0.4530476782413835, 0.5340064485748459, 0.3639235146019948, 0.1752997688928859, 0.18154655390928232, 0.17322458407139785, 0.18420555181344578, 0.18872239306381533, 0.1715451809572185, 0.1841214715595948, 0.17836449507170105, 0.18206231986430776, 0.09459327565353692, 0.07709825141416637, 0.08091373208992558, 0.08745952876239949, 0.08986350381001573, 0.08306171358155712, 0.08136514046274079, 0.08610510390660964, 0.08024749603264592]}, "mutation_prompt": null}
{"id": "037654f6-0a73-4496-9d9e-1e10409e5649", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "9910bd24-e745-4fe0-b9a8-be5c14b7df2b", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "82ecc795-cd66-41d9-9694-c9acd35e5c06", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self, fitness):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma) * np.sqrt(1 - np.tanh(np.mean(fitness)))\n        return step\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight(fitness)\n                        mutation = np.random.uniform(0, 1, self.dim) * (population[j] - population[i])\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyLevyAlgorithm", "description": "Enhancing exploration by introducing a novel adaptive levy flight strategy based on individual fitness values.", "configspace": "", "generation": 80, "fitness": 0.1646925397864434, "feedback": "The algorithm EnhancedDynamicMutationFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.14.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.3570651643043621, 0.31938753146918164, 0.597762318209291, 0.3475108903968781, 0.3240915966313609, 0.6594118088686662, 0.3764625213536057, 0.4052279598881795, 0.36091169491131425, 0.008203368543328704, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032850876457957146, 0.04607590237112125, 9.999999999998899e-05, 0.06694302709163003, 0.023775545149589572, 9.999999999998899e-05, 0.11815153900739661, 0.09212213439985606, 0.09374439559365, 0.10286262573138105, 0.09074937817069462, 0.07222513022432231, 0.0619455427041703, 0.1373659005550606, 0.13691807985477322, 0.0704228308808057, 0.07605883502990385, 0.10701281015182562, 0.08118596906910303, 0.07091159298845684, 0.05599497358382055, 0.4160767995763007, 0.036427974638148064, 0.0266867129444468, 0.7584858830900308, 0.5587231798505761, 0.5416980615406141, 0.08785264952187066, 0.10971024273619023, 0.06327554883371667, 0.10808078792128673, 0.11612209612088731, 0.19283550777419245, 0.11015153401730637, 0.12754160985271934, 0.04987065475270591, 0.09407065153554883, 0.07480859700733511, 0.12104548676865579, 0.24945111947751697, 0.23387885683894416, 0.2624488359682835, 0.8650819560328119, 0.24487742513484778, 0.13931346091791352, 0.18096077065768845, 0.19890327931556762, 0.08525808594048667, 0.13798854453139486, 0.1192424296985306, 0.11265615695678066, 0.23313883652758194, 0.14252900483901032, 9.999999999998899e-05, 0.11511857503083445, 0.1537614042495703, 0.12934210721170003, 0.16970060195257097, 0.12131431590074548, 0.19610512027616112, 0.22124325699890657, 0.0785152945632519, 0.14899830893633825, 0.12126266919208994, 0.0064215097256378195, 0.1314991043451761, 0.1439828274086079, 0.06572086027607038, 0.12322998014571473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.114715975120395, 0.07166315104165766, 0.039684103893126266, 0.16938374273043555, 0.01642018413931623, 0.007722538169584681, 0.008437708039957359, 0.08102848877848468, 0.11120355655828063, 0.07350820483419596, 9.999999999998899e-05, 0.0476319964251567, 0.15565891854295966, 9.999999999998899e-05, 0.0552996992495709, 0.10082270563484086, 0.20233968818899006, 0.11402063982253208, 9.999999999998899e-05, 0.129294158078596, 9.999999999998899e-05, 0.06619000660747387, 0.007042507667370357, 9.999999999998899e-05, 0.10224020324252125, 0.07714898724726371, 0.06923125496138327, 0.08512546708003921, 0.3533213855286389, 0.3687875229905824, 0.40917708581685786, 0.40194762005585793, 0.36794787151131814, 0.40723836907849775, 0.3869084396557171, 0.3580897280247366, 0.47122176136194993, 0.05412602934192834, 0.07075579917785357, 0.05319712523798448, 0.1201367457360677, 0.048698286147233594, 0.08025945581403626, 0.0677283785365338, 0.11573024611643246, 0.09129310368993016, 0.15747196865334046, 0.1948319421600515, 0.19104184811500502, 0.1616124469812521, 0.2175801768023241, 0.21338890410784095, 0.16440613608344612, 0.18539010311847737, 0.1793311999275311, 0.24795198941949048, 0.24973587613214276, 0.25016183772607026, 0.2126326300771133, 0.18924302303104368, 0.21456840218559814, 0.21530856591665193, 0.24705664574188835, 0.25960422386725335, 0.19433278341812854, 0.19427671019040893, 0.20771165095060962, 0.135095722006912, 0.1420978809375527, 0.2558752183407126, 0.20764546676769025, 0.2395555464379041, 0.18593541859539287, 0.20350036059415344, 0.24051112846270706, 0.19132285806986993, 0.2285684454835919, 0.15118236222585368, 0.21474569334977323, 0.22322492930127424, 0.1843267871465204, 0.2294235431084537, 0.1782449519854945, 0.17886666259825745, 0.18691123746541027, 0.17842784282434387, 0.19024290382838904, 0.16549165490162354, 0.16396353854970291, 0.1680124337312212, 0.17152274124659306, 0.12591521782322146, 0.17038187504564717, 0.2673730164313981, 0.5549157212295581, 0.19940767700698647, 0.1923124453932713, 0.15208014955905347, 0.1564576550936967, 0.5239153181446624, 0.38726732933942143, 0.2122520286423567, 0.07335636097246301, 0.20046752010603563, 0.11443250664067361, 0.14602816507333904, 0.10477410862593173, 0.1655419010310092, 0.3137602792071631, 0.20254014991498315, 0.19765930554617972, 0.21318053269111037, 0.20271270124058915, 0.19550166702738903, 0.19329163096464086, 0.18352163764922824, 0.16936280614174726, 0.19189978264276042, 0.09410117220943426, 0.06698397984120075, 0.06318338568986814, 0.06094660020408316, 0.07000167665320556, 0.05728471594958262, 0.08394320588206261, 0.07459560944912424, 0.10948727293576888]}, "mutation_prompt": null}
{"id": "ea7145b7-2143-4ee6-a8e0-6cbc96d0dbcd", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "69f1ca04-068f-4136-8737-e03df565ea73", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "9530aad8-2d59-41c2-86a3-3b3b9523322b", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "3fc412c2-43a8-498f-88f4-b9a475dfda59", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha_min = 0.1\n        self.alpha_max = 0.5\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.alpha_min + (self.alpha_max - self.alpha_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha_min * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            self.gamma = 1.0 + 0.5 * np.sin(_ / self.budget * np.pi)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDynamicMutationFireflyAlgorithm", "description": "EnhancedDynamicMutationFireflyAlgorithm: Combining dynamic mutation, levy flights, and firefly optimization with adaptive strategies to improve exploration and exploitation balance.", "configspace": "", "generation": 84, "fitness": 0.14488735749197457, "feedback": "The algorithm EnhancedDynamicMutationFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.30149936422786716, 0.3251111741213689, 0.2892418087041154, 0.2804304917211392, 0.26865192127390447, 0.28257134260118155, 0.3856880198638031, 0.38003197719866044, 0.35916516930569375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07923893760952738, 0.09207069201843932, 0.09149827000336319, 0.06321316454591164, 0.07491436928215667, 0.07893830952244751, 0.07111755171286549, 0.09736021342696533, 0.11106157807020822, 0.08797426647397621, 0.08085938791252378, 0.08145760482462883, 0.07048593973286077, 0.06622501890046639, 0.07887514824378739, 0.07163751012061781, 0.06833488461358539, 0.06283660357531629, 0.13393781392450366, 0.1572318469935331, 0.13718336247348162, 0.11826915086286915, 0.1263094875581552, 0.14698429271727276, 0.16443674918123963, 0.10484926846460985, 0.15704771305127685, 0.13132303311855031, 0.1533654813029245, 0.13303823372368007, 0.1466796332992648, 0.15149153320939457, 0.18109201055078938, 0.15357438418216385, 0.16824722567610806, 0.1520249176199321, 0.1954349722989499, 0.21080489699915173, 0.17656453031451114, 0.23737666787381928, 0.26827582791404636, 0.19456793123140503, 0.17692101972492602, 0.16807427925247154, 0.18328393708897384, 0.11992688016964115, 0.09319455027897494, 0.10661711402571183, 0.11150175011495267, 0.11444968042366233, 0.11943544671508333, 0.10813149418056278, 0.10278946218450002, 0.09488315056553898, 0.13462543372586955, 0.1232271135411458, 0.09178315845015839, 0.09799358416260473, 0.11534591049592513, 0.10331903782711127, 0.13101783913738818, 0.10967804560574679, 0.09165588172876682, 9.999999999998899e-05, 0.008447600304237857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10564076009601686, 0.08601834019948984, 0.1347262627577389, 0.058618285341891174, 0.059650591144336795, 0.0543590586634346, 0.10290222477660138, 0.08156690321504578, 0.07491815408686875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04006562536235414, 0.058824414927625135, 0.03811050415456174, 0.030860311067245183, 0.04292620503909039, 0.03725139789449805, 0.06239066472471999, 0.06535958097609496, 0.0385121163233938, 0.3487190799125085, 0.35290619283842006, 0.3462202337273228, 0.3409519506931963, 0.31843409583472937, 0.32802530876928393, 0.29657571143766703, 0.27644043640540206, 0.28056503073352623, 0.07121975024574512, 0.08599323423808403, 0.07004383388537694, 0.09443965757413775, 0.09974840616516178, 0.0711351761263802, 0.1179333480513024, 0.0963044006838174, 0.08759595260167696, 0.15514580383525622, 0.14940528636535655, 0.1410689015349188, 0.23775354640059532, 0.23471359826115534, 0.1930560405329914, 0.1277567588334627, 0.15319279061832625, 0.14439768913086903, 0.20674916616800365, 0.23016419501007013, 0.23320098345973506, 0.22674353976435202, 0.2258437398417794, 0.21206371718166084, 0.20274028074187833, 0.2042125757299753, 0.21961893818018563, 0.1773209493160759, 0.18894698669023036, 0.17438972030484057, 0.15438198948187543, 0.17287589424776673, 0.15759505900761672, 0.16384749284671585, 0.17445464793924326, 0.1487649929828151, 0.21552363756480508, 0.21200807298244206, 0.20536658663018004, 0.2154395400354686, 0.22228163901255216, 0.19691783668810692, 0.22318786805527413, 0.2335464421002469, 0.203111428660965, 0.18335132148035105, 0.1968113742455998, 0.1724317279864852, 0.17861400967286045, 0.16344144019118922, 0.17279972517714048, 0.16758646783706077, 0.1693380912454182, 0.16639105815891075, 0.17192341224820762, 0.17632440291461537, 0.1692257441188476, 0.360002654100975, 0.26302782495480936, 0.3157300753228962, 0.4806332258931595, 0.14749174841018087, 0.5655848264244068, 0.38281219435531477, 0.20627686636655584, 0.15674857296045464, 0.26817692371125434, 0.22991570439976816, 0.12826820146646756, 0.2594296716202107, 0.3308188889303867, 0.2151334622816221, 0.18262958188884115, 0.18888931989830482, 0.18927304432978442, 0.1824196503315092, 0.19550855096819597, 0.20000942937573596, 0.17881103934551612, 0.1987882884649972, 0.19086232447764073, 0.07103386195332018, 0.07597688647026446, 0.06618808701328693, 0.08581099854626972, 0.08113273994403714, 0.07234801357861798, 0.07674915720501763, 0.07705732380123576, 0.08064571353326833]}, "mutation_prompt": null}
{"id": "95bb311c-4fb0-458a-9a62-1a0dd614473a", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmTournamentSelection:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def tournament_selection(self, fitness, k=4):\n        selected_indices = np.random.choice(len(fitness), k, replace=False)\n        return selected_indices[np.argmin(np.array(fitness)[selected_indices])]\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                j = self.tournament_selection(fitness)\n                r = np.linalg.norm(population[i] - population[j])\n                beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                step = self.levy_flight()\n                mutation = self.particle_swarm_mutation(population, i, j)\n                population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                population[i] = np.clip(population[i], -5.0, 5.0)\n                new_fitness = func(population[i])\n                if new_fitness < fitness[i]:\n                    fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmTournamentSelection", "description": "Enhancing the selection process by incorporating a tournament selection mechanism to emphasize exploitation and improve convergence speed.", "configspace": "", "generation": 85, "fitness": 0.13583014090789058, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmTournamentSelection got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.42537094048645396, 0.35028967693777735, 0.395315052373988, 0.3256782404948966, 0.3440491373264306, 0.2938136249054851, 0.3696516096832462, 0.3287634737376679, 0.3465261267266493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07453139882009596, 0.08379454164189903, 0.0646270686777296, 0.08351115081068328, 0.08081775209055009, 0.07791973291302545, 0.07091628062820943, 0.0672537173142349, 0.06710360027537077, 0.059746313336755286, 0.061540013318804765, 0.0798344181316486, 0.07969994232069022, 0.07618226489550839, 0.07211080438160422, 0.09101410634555374, 0.03966103587947034, 0.06487452699680563, 0.07022765217818128, 0.08504801553588892, 0.07735117058833363, 0.06619039988899933, 0.10104602354268022, 0.08226670989135543, 0.06904684483198087, 0.08827818425864642, 0.07665493092010711, 0.1494305630998113, 0.10496749384501913, 0.14386081391527095, 0.14062820393514264, 0.11561776092719989, 0.13913032914389623, 0.15268596676179402, 0.16064260067071556, 0.11196592731579369, 0.21273899920183814, 0.20731838993059926, 0.13506417807439453, 0.2375910468472745, 0.2524015598772942, 0.24950432568930836, 0.1519039433571936, 0.1511591424123484, 0.18760828207406632, 0.07350561130879318, 0.10941276153870061, 0.1098590346371473, 0.06319454993060647, 0.11839689542424803, 0.07331946576647042, 0.09466416307004477, 0.13076315734754917, 0.13280379193371739, 0.12478844775085896, 0.13335347512726115, 0.12656957589230822, 0.117096781143057, 0.1342597600431864, 0.1324791096847594, 0.15200469380428128, 0.12732019059410793, 0.14365901990836338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05249647825487136, 9.999999999998899e-05, 9.999999999998899e-05, 0.09711679909824522, 0.12185544303714269, 0.1130899152718794, 0.042754154067663475, 0.04726883048647801, 0.04060622222074306, 0.08645977371032387, 0.08611362728912231, 0.11497990319146689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039791276828875954, 0.036083716581114644, 0.05731550525731688, 0.06427349337052324, 0.056257912257996256, 0.08489540718043842, 0.023729430465935897, 0.050376732114756906, 0.03185867608657411, 0.3166519891237096, 0.3282135573866163, 0.343598997293056, 0.32067537704725735, 0.3092386885607229, 0.31764195739894896, 0.3578226434564873, 0.3442939336747525, 0.36375085557785836, 0.06887409935512656, 0.048800604541731074, 0.05333296350483174, 0.0740662994434389, 0.07967368228023497, 0.07950704830960709, 0.07404453697999636, 0.10369085471438133, 0.0847840225205877, 0.11843633577939394, 0.1370735618567378, 0.15641504718631072, 0.12987786014193592, 0.17183870508556498, 0.1346476513830407, 0.16098430119452278, 0.13629968241721147, 0.14461330846127407, 0.22874070050732453, 0.18405648803164132, 0.2211157946741379, 0.2664665679685774, 0.20544003820751555, 0.24870257476490043, 0.1773512601548295, 0.17377774300845283, 0.19105243012159823, 0.1823933471796364, 0.1715825124156467, 0.14760422976625176, 0.18834457317126974, 0.14739855453603357, 0.1814498812345925, 0.1482654946373736, 0.12212355426192734, 0.12390659136978777, 0.2682408356036502, 0.1935213325261882, 0.24143987307793358, 0.2405729865384425, 0.24890578403163965, 0.20222466773842962, 0.21584863535987275, 0.22378185411831797, 0.2344189011612352, 0.16751318187809794, 0.1706309753536841, 0.1686381720557374, 0.1683212992069406, 0.17071764930135958, 0.17591845738325207, 0.16945664688460294, 0.1605273529793083, 0.17664976672074695, 0.17976849354647262, 0.18530107879176727, 0.17948308621477205, 0.14777920094209507, 0.3617962693686061, 0.16741997448609236, 0.14798531015922423, 0.13752518930297242, 0.15825582435206653, 0.38370211122272946, 0.209510774515287, 0.18885065990886474, 0.15034566593944743, 0.09768915533362199, 0.16469829174545847, 0.23384385252666395, 0.25407769788086687, 0.20951714210660066, 0.18224188737343106, 0.19299274044776016, 0.18731176249993364, 0.1838467065419318, 0.17837933623922397, 0.17819436632541752, 0.1830450098912163, 0.1883119956774123, 0.1816005540301695, 0.0789851781161407, 0.08432338003290918, 0.05813591443872579, 0.08691389678011163, 0.0760243989981243, 0.06875710891970943, 0.0802458607195482, 0.09603372995062986, 0.08816776632878687]}, "mutation_prompt": null}
{"id": "307c08e6-0fff-433a-afb7-f82aee853e2f", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "314aa8e6-7c87-46d3-b7ac-6eec1aac0e7b", "solution": "import numpy as np\n\nclass EnhancedFireflyLevyAlgorithmWithOpposition:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def opposition_based_learning(self, solution):\n        return -solution\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n            # Apply opposition-based learning\n            for idx, ind in enumerate(population):\n                opposite_solution = self.opposition_based_learning(ind)\n                opposite_fitness = func(opposite_solution)\n                if opposite_fitness < fitness[idx]:\n                    population[idx] = opposite_solution\n                    fitness[idx] = opposite_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedFireflyLevyAlgorithmWithOpposition", "description": "Enhancing the exploration by incorporating opposition-based learning to search in the opposite direction of solutions to improve diversity and convergence.", "configspace": "", "generation": 87, "fitness": 0.2037027878067745, "feedback": "The algorithm EnhancedFireflyLevyAlgorithmWithOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.42881359193962165, 0.42999731778746075, 0.4108073980413224, 0.41328108224890525, 0.4297630513563375, 0.4302465275770192, 0.4022275405425424, 0.42998811173495677, 0.4020559930252935, 0.011310587577435083, 0.04653362989270515, 0.030216156691969864, 0.05532040236680824, 0.058215402466470945, 9.999999999998899e-05, 0.01656820938121817, 0.019295785216956407, 9.999999999998899e-05, 0.10504446806979284, 0.1316199544634694, 0.10781547360413735, 0.10881463607231401, 0.09195738337461046, 0.10008602182937743, 0.10535996624403521, 0.11855923540211921, 0.10977345378355352, 0.08539413181939748, 0.07458963143929087, 0.09587464726719008, 0.09553766036332012, 0.07253190083965033, 0.08233815419063195, 0.09115697188288885, 0.10095914515288262, 0.09255268977178044, 0.6966183109808547, 0.7479760744397097, 0.6825750638367871, 0.6173109381080266, 0.6143583265613854, 0.7019093414445753, 0.5303485822722512, 0.6917812458209449, 0.6569799053985566, 0.28969947441858457, 0.2608573326961603, 0.23281106709736643, 0.28937643795933454, 0.25473588635638367, 0.25127473852782456, 0.2763591973485221, 0.26650119521807114, 0.2498326586502353, 0.22750001022555733, 0.22703957855172874, 0.20851703068226612, 0.30863669725871345, 0.3038712813169063, 0.25805282694969944, 0.2715284223745561, 0.3012948650433678, 0.29352172538611776, 0.17870289037688358, 0.19033342773859363, 0.1866762694081704, 0.1746165302102357, 0.19827057028907424, 0.10778734490637798, 0.1611057137251457, 0.2020712973847988, 0.15514774313049218, 0.14880455106207335, 0.16622471015638351, 0.15866257289119967, 0.15931838561735, 0.1924199305027421, 0.12735965132162586, 0.16615580092950932, 0.15918053740058968, 0.1488903430697217, 9.999999999998899e-05, 0.004201395462486435, 0.02545529590076434, 0.025442555370492448, 0.015110901642671482, 0.012351704040170497, 0.024689456052852665, 0.00230513527348708, 0.018223090431000122, 0.17602441433385407, 0.10804169682129794, 0.19844473021179965, 0.03478052061858927, 0.04286028956983956, 0.032163888207594526, 0.10921935871788757, 0.09678036003573509, 0.14375593411228316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09123165776822206, 0.0908069563496876, 0.09673800250728093, 0.09937580119506162, 0.08887245024693002, 0.08710810748348052, 0.07244782166845087, 0.07192629281807661, 0.07467953367846858, 0.40412096331444103, 0.38968774326567335, 0.3781897640880669, 0.38681207299818654, 0.37215984102949595, 0.37427710666163116, 0.3808137921926883, 0.38704186262464724, 0.3919141914218943, 0.07951734499461638, 0.08718839309708615, 0.0623349675690017, 0.09971696202712699, 0.08547366272077883, 0.11213972779704362, 0.10172534213180029, 0.09578879919186734, 0.10141682977236854, 0.12942952605420666, 0.21878337924429436, 0.15505519606186458, 0.1847571271563131, 0.2200908108648938, 0.2994115247429029, 0.1578435635869515, 0.1565763299776448, 0.21515461296188776, 0.24807496060874779, 0.17324917022059239, 0.27642478594742237, 0.2784728382834841, 0.24182010957757127, 0.3003264072579733, 0.20075532925395878, 0.26886988093554975, 0.22402430703839937, 0.20440846169289784, 0.19567094529575146, 0.18954809186005983, 0.203690383339863, 0.19515840133726814, 0.24033172302371575, 0.19178939442303178, 0.2032634293553207, 0.18193775416740954, 0.2193798798166975, 0.24563378978162598, 0.1984062035905162, 0.28883940590009416, 0.21515843624173026, 0.2453930263896682, 0.23834236760993732, 0.26836939064066423, 0.24030865973813298, 0.2023138077879031, 0.19669542063755951, 0.1779064763147178, 0.17239749955987516, 0.18739168333644451, 0.1699225866139279, 0.17393062725194164, 0.20803340090985156, 0.17993094195027937, 0.18405098934340947, 0.1869456076052327, 0.17873298049561892, 0.5323219035067337, 0.1950823784286282, 0.5272969234781701, 0.6319105012330137, 0.17710669869890938, 0.5955715794393757, 0.5676462873312268, 0.2083003865789982, 0.0735042326230041, 0.5546032217785758, 0.15786837307627843, 0.3803031558506673, 0.3341987556111783, 0.47969626708958857, 0.3827075955774303, 0.18744215083144167, 0.1884319490869779, 0.18986536155262523, 0.17715032011374132, 0.18540723605187936, 0.18161445053425262, 0.20320460775864635, 0.1801442878079641, 0.19784443249463513, 0.08574616286814707, 0.0934238492479812, 0.0820586917943823, 0.06947603113165679, 0.08768912364097392, 0.08262114064985182, 0.08974385255551787, 0.0895366274824797, 0.0851224886927534]}, "mutation_prompt": null}
{"id": "36828389-a844-4b4d-b19b-37cedb613b59", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "9713e6d2-ad30-4470-9013-1cb8e9298467", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefinedEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n            if np.random.rand() < 0.2:  # 40% change: Add dynamic population adjustment\n                for _ in range(len(population)):\n                    if np.random.rand() < 0.5:  # Adjust population size based on fitness\n                        if np.random.rand() < 0.3:\n                            population = np.delete(population, _, axis=0)\n                            fitness.pop(_)\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefinedEnhanced", "description": "Improving the exploration strategy by incorporating a dynamic population adjustment based on individual fitness evaluations.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 44 is out of bounds for axis 0 with size 44').", "error": "IndexError('index 44 is out of bounds for axis 0 with size 44')", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {}, "mutation_prompt": null}
{"id": "b2733854-1a56-4d61-9722-1afab450ccd0", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            diversity_threshold = 0.5\n            diversity = np.mean(np.std(population, axis=0))\n            if diversity < diversity_threshold:\n                population_size += 5\n                new_population = np.random.uniform(-5.0, 5.0, (5, self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic population resizing strategy based on population diversity to adapt the population size during optimization.", "configspace": "", "generation": 90, "fitness": 0.19834328111058255, "feedback": "The algorithm DynamicMutationEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.431587634692554, 0.44252763340760304, 0.42311618579866617, 0.4058064289874629, 0.38936971338704174, 0.41402889636508944, 0.412629305369581, 0.4628321789533977, 0.40978414556048914, 0.012505711005642683, 0.021315911365656803, 0.04968714411286068, 0.04605106694959482, 0.045439101735497034, 0.0026693588330189977, 9.999999999998899e-05, 0.05854105331938686, 0.0018206045190286568, 0.113539280884148, 0.11680675901488557, 0.10936549611797908, 0.11403027884551498, 0.10842218294125228, 0.10568761115869552, 0.10213330537036691, 0.11674008963840443, 0.09596008277060741, 0.08832734342609128, 0.09335984758440607, 0.09622383027725823, 0.09623488371505173, 0.07960788147002318, 0.08588705355590687, 0.07930939084880861, 0.10014097127131427, 0.09370724618416792, 0.6606223569153937, 0.532342077279812, 0.7331924797469171, 0.5380850128577348, 0.5022562930487389, 0.6657492812344578, 0.6293382748872887, 0.5672425144031009, 0.6061875638526565, 0.26564767657066846, 0.25193479679577657, 0.22454919445418087, 0.2762648644713406, 0.24887204109659067, 0.26213917929045105, 0.2529049205820628, 0.23528090948591796, 0.2867987773676509, 0.3274062984521239, 0.23437222331371454, 0.2211472213468586, 0.27489549705553873, 0.2722441422983872, 0.20679322792797372, 0.2189674453557754, 0.2255612763765582, 0.3991970721385244, 0.1879478946299773, 0.1753971427891845, 0.1387827383886121, 0.15806011847687473, 0.201680630937091, 0.0830190164869582, 0.1579307200753285, 0.2007280462728912, 0.1603467874843143, 0.14715369410188728, 0.1495710899909738, 0.13226119769552858, 0.1377201738698135, 0.18125752603496026, 0.12386641415765731, 0.16082944673049837, 0.15668671873713924, 0.13030082257028386, 9.999999999998899e-05, 0.060574885150686875, 0.0033154772187770076, 0.036197379947227826, 0.046130589699771574, 0.017778723668062546, 0.017430323406284698, 0.0021955241040614304, 0.0010078513459115257, 0.17292518073118024, 0.10744171545685599, 0.17902024846252718, 0.044028062338126395, 0.033483104504810624, 0.028635628782663347, 0.10832467139598212, 0.0928593629151443, 0.13645921956369889, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09965595781790304, 0.1039723059311235, 0.1217794774338743, 0.10394734845823128, 0.10263976247708884, 0.09500721503019627, 0.07186450816149426, 0.09456561472588876, 0.058167307437521076, 0.40481109091857825, 0.39416131526958387, 0.3970849553524829, 0.36629244100792047, 0.3825321013022698, 0.3939758296054693, 0.3881233417536383, 0.4078969159700917, 0.39124104200031906, 0.08056180752374531, 0.10779823588322757, 0.08221644713806142, 0.08980985720977808, 0.09822826462649414, 0.10086724875606201, 0.09462465667732212, 0.10529277304608553, 0.12542426730786616, 0.19968557703452683, 0.2711550318870608, 0.17660233402529013, 0.22483225807819263, 0.25071234418601407, 0.2135068384340949, 0.16948548873683955, 0.1521068787894122, 0.21397085250181014, 0.19943571659522097, 0.1944633016517343, 0.2833495227731443, 0.30837928448520213, 0.2290494005090442, 0.2951564687260878, 0.21489337670437159, 0.2552905409006443, 0.22376576694202088, 0.20287586086361054, 0.20807177955100442, 0.20595048844599673, 0.19775673716966335, 0.20002570835507782, 0.22151609726242105, 0.19099327960116153, 0.20306382338177775, 0.17378512728863849, 0.20663314514382458, 0.21340842624427125, 0.18808532009693213, 0.2749009191391242, 0.21107759688205574, 0.2311302221212661, 0.24211617504211858, 0.26186931446557826, 0.21568881285597397, 0.18819902515445752, 0.21294744991985004, 0.1693759837696872, 0.16879080694561566, 0.17197779038579086, 0.17834416534314113, 0.1816593966178477, 0.1904807303183247, 0.17323688187979536, 0.18443806051113298, 0.18689508709113622, 0.17945825044181452, 0.5463858841496334, 0.1958086427257203, 0.5510651831383395, 0.5739570231611445, 0.17772552008209497, 0.6139929524406602, 0.4934715426884496, 0.20936056621523835, 0.07349726625616237, 0.4912204934100973, 0.11980138972950904, 0.1452256924163866, 0.2911349901160306, 0.38232254715166114, 0.29512125186681337, 0.17995511097628236, 0.18516576281917485, 0.186092074596099, 0.19234682480919063, 0.1834057638333284, 0.19747030266039722, 0.2050951979757658, 0.18763615005233492, 0.204328214287125, 0.0835984474014535, 0.08568631597149123, 0.085286365174713, 0.08464332161494315, 0.09572193903108728, 0.0732627145162611, 0.08675692853980344, 0.08628529590217549, 0.08854915393875129]}, "mutation_prompt": null}
{"id": "6b5271ba-c93d-4d16-99a0-887e7c8e0d2e", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "1f65e1a5-e2dc-4ac3-b47f-faca935a909e", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "0bd79dc4-613a-4123-b1e1-d613ecfdaaa2", "solution": "import numpy as np\n\nclass DynamicPopulationResizingEnhancedFireflyLevyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            if _ % int(0.1 * self.budget) == 0:\n                sorted_indices = np.argsort(fitness)\n                population = population[sorted_indices[:population_size]]\n                fitness = [func(individual) for individual in population]\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicPopulationResizingEnhancedFireflyLevyAlgorithm", "description": "Incorporating a dynamic population resizing strategy based on fitness values to adaptively adjust the population size during optimization.", "configspace": "", "generation": 93, "fitness": 0.20187856458382733, "feedback": "The algorithm DynamicPopulationResizingEnhancedFireflyLevyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4127735857090383, 0.41316871574029324, 0.4338480180659581, 0.3971006041213848, 0.4126345823348201, 0.43648905724440146, 0.4142043551926742, 0.4020077032656658, 0.4325421047154794, 0.009244582368040155, 0.02388534982470314, 0.035096625010544114, 9.999999999998899e-05, 0.03763824791624082, 0.0035696130834634854, 0.002088861777652662, 0.04675862258025698, 0.0020028985351633333, 0.10473392060081443, 0.13938466361523405, 0.1262233663048895, 0.1275490549838031, 0.10080980265245432, 0.10346454023176832, 0.08634431566316902, 0.12850449024216537, 0.0892678466092588, 0.08274322115548638, 0.09642571239819231, 0.08561503610884569, 0.09311260692004486, 0.08987112737470837, 0.07994995909896241, 0.07429271338051135, 0.1007766759112041, 0.081613067747619, 0.7557138859915019, 0.7584726132726836, 0.7287265874245779, 0.44123894611022674, 0.6317527276747397, 0.6297925428316801, 0.5659474399641322, 0.629741416979192, 0.6673791931711082, 0.25855360741034605, 0.2550860055891787, 0.218057941348071, 0.26636590789795345, 0.2854149771366947, 0.2564323498961062, 0.2606688755752211, 0.2420756687091481, 0.2632886985403916, 0.32326948520012133, 0.20958633164965446, 0.2086188444510707, 0.27329159337937836, 0.31800249874721565, 0.24305830403218898, 0.2210224091713887, 0.29153591836729653, 0.2301518586622322, 0.1910385214255057, 0.1996587781466489, 0.13205633709280973, 0.16367113130839406, 0.19403788641505815, 0.10920983221350689, 0.15347531552197746, 0.18274061370115902, 0.16344241093304412, 0.15510112100351325, 0.1456451247348497, 0.12272041864900307, 0.1307685165626945, 0.1989499641638196, 0.12510164445462268, 0.18630140516948002, 0.16591978544184893, 0.15309111983011003, 9.999999999998899e-05, 0.024145723200513558, 0.024134627893408478, 0.02125894554673069, 0.019122029064121526, 9.999999999998899e-05, 0.01711515130933383, 9.999999999998899e-05, 0.03557835186800862, 0.17098133828517093, 0.09435519255195834, 0.20444320776154068, 0.0490269553413496, 0.03010624017221164, 0.02838747799147079, 0.11322241911482211, 0.10219481170644429, 0.11851819830731425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09087453936467571, 0.09831167243465011, 0.12360614530696223, 0.08630250321715338, 0.08486470555040482, 0.0931382069276473, 0.0799758287656428, 0.07694787702335726, 0.06599309818433452, 0.3893435679904793, 0.3913351379618163, 0.38398447986495066, 0.38551300551817136, 0.3881383635106955, 0.4207320820477236, 0.3978741973336333, 0.4008584618988662, 0.45936256247264007, 0.0867352916063574, 0.1044503065399549, 0.08056112160559792, 0.09298420708647259, 0.1088934154369634, 0.12604566238736203, 0.09910856479566188, 0.11580395127350507, 0.10573155457965044, 0.2607112982163573, 0.2471991903143722, 0.160468201299365, 0.25175407110650594, 0.26267830253265523, 0.24411159601840438, 0.12950211452595317, 0.1578637618591252, 0.20923746912357055, 0.26533272154136234, 0.2316874870166291, 0.25917163267689525, 0.267310409028385, 0.23683604443045148, 0.2956948391064649, 0.22737683167234535, 0.2583786256760511, 0.2210109213273398, 0.19732572886172095, 0.21949736036504475, 0.20666893615695658, 0.2202048341321542, 0.18396614360792563, 0.23905109286335602, 0.20129750253125822, 0.22096384831102778, 0.22209195890725741, 0.24067904724615685, 0.24863183195254324, 0.20548396524582047, 0.24874475470930446, 0.21501287208743902, 0.23074047729650082, 0.22264105786836108, 0.24748314516527503, 0.23463390190037592, 0.17781569349778437, 0.1908986751106524, 0.17319203541415373, 0.17590283596777567, 0.19293155800355322, 0.1916745237286014, 0.18221248013328617, 0.21319422418063805, 0.18174995524109694, 0.18371921046914985, 0.18735261661049551, 0.17910614852537488, 0.5830781413321636, 0.19579514484838578, 0.5319285798334206, 0.5944394357293907, 0.17729831340262459, 0.6163018878284504, 0.4473605377685178, 0.20909457048190294, 0.0735199210455949, 0.5619651178424232, 0.14252422647613983, 0.14813692805137257, 0.31092181711155986, 0.44387385593170847, 0.2866657276211486, 0.18879402589498095, 0.18711101468943925, 0.18240774871028897, 0.17419991210324237, 0.17692913110509156, 0.177186373299986, 0.20320460775864635, 0.18606007885683074, 0.19784443249463513, 0.09306905328811266, 0.0910974801188984, 0.07543221149333545, 0.07896297334498736, 0.10326620467941428, 0.07727330590709447, 0.08675399983685461, 0.09745854458580361, 0.08134732783479082]}, "mutation_prompt": null}
{"id": "0b4d92b3-1ac3-4ddf-b558-bfc5124f6b36", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "5178f344-5794-452e-8ced-6114abc988f9", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "22c9a951-17b6-459c-87cd-2ee902f391f9", "solution": "import numpy as np\n\nclass HybridFireflyLevyDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n        self.cr = 0.5\n        self.f = 0.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def differential_evolution_mutation(self, population, i):\n        candidates = [ind for ind in population if not np.array_equal(ind, population[i])]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n        return mutant\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.differential_evolution_mutation(population, i)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridFireflyLevyDEAlgorithm", "description": "Implementing a hybrid strategy by incorporating differential evolution for enhanced global exploration and exploitation in the optimization process.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {}, "mutation_prompt": null}
{"id": "a2761751-9fd9-4a46-8bc3-b81b28ea7974", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "2bbc7eb7-39c2-4a3b-845c-eeabe63d289b", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "DynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introducing a dynamic mutation scaling factor based on individual fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.4298245271446661, 0.4310512675641961, 0.4113465396277124, 0.41518260026016907, 0.43169003304875686, 0.43177870947571495, 0.403338861262177, 0.4310706550049357, 0.402754153078022, 0.011793007910658515, 0.04746104878817836, 0.03500005293184949, 0.056562451803673475, 0.060668084889704765, 9.999999999998899e-05, 0.018574529706783305, 0.021780210805647182, 9.999999999998899e-05, 0.10568245406503407, 0.13251933692822515, 0.10961693777573489, 0.10894255559332855, 0.09206386073970352, 0.10045087180273204, 0.10646997037634831, 0.11959367230477624, 0.11014914509186224, 0.0868362491438287, 0.06803109393916529, 0.0965422676182146, 0.09611100183983057, 0.07435447410139007, 0.08347321618903514, 0.09248538152458763, 0.10140805002460418, 0.09333572973117898, 0.7182296579752674, 0.7646921319136633, 0.7047806861549666, 0.6389629643139375, 0.6401527604407833, 0.7194702752144593, 0.5597987407855416, 0.7099835403713375, 0.6818183957011272, 0.29592661104035256, 0.26382269309427764, 0.23947089255875453, 0.29372802911985674, 0.26079597078932937, 0.2547241350411955, 0.27936799252212896, 0.2709300448367369, 0.25244071616696484, 0.2272962971610003, 0.23632757940970528, 0.22699706719704782, 0.31107005293179, 0.30812526484547853, 0.2593214534953787, 0.2782157392689665, 0.30527013397890446, 0.2969886859474016, 0.22307892971435517, 0.19128121926731634, 0.1906412142308852, 0.17693782599542685, 0.19886316905575574, 0.11167924047171596, 0.16167533926515465, 0.20349595768721795, 0.15601844991152825, 0.15797323537558572, 0.13633189956729908, 0.15133803005565238, 0.15044775057971516, 0.19946692010436318, 0.1291307141545962, 0.17222642080138428, 0.22116286578839228, 0.12684980881575525, 9.999999999998899e-05, 0.006546104386227269, 0.026743750377094533, 0.026020207617840962, 0.015427761336619938, 0.013737510412275, 0.04506258390359963, 9.999999999998899e-05, 0.023235072541395896, 0.17881063944409104, 0.1093003276223975, 0.20105847320034476, 0.035238523437172486, 0.044513021369472106, 0.0328896219844077, 0.11125620440123662, 0.09784930910149503, 0.14622141273699385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09247139568309126, 0.09207145045614884, 0.09737871224631067, 0.10059692842430779, 0.08980898265333237, 0.08737602974482994, 0.07295944379837527, 0.0723528999715034, 0.0751727015150998, 0.4052029825728021, 0.39113709555934095, 0.3808218935347979, 0.38705612909584663, 0.3731033849812664, 0.37500986983965656, 0.38203303616586715, 0.3878815922816716, 0.3931350106876693, 0.08009623005377686, 0.08820927514394883, 0.0631483662504626, 0.1006915451062318, 0.0865048672239318, 0.11303661095215634, 0.10203962394490207, 0.09636956168239152, 0.10233619674788241, 0.13754272694013248, 0.2267058138848297, 0.18991515184630037, 0.19472284773325899, 0.24130492315283847, 0.25782769083222845, 0.18368987329025444, 0.13917031478011033, 0.21505691362291213, 0.2513305915629911, 0.17350122338979712, 0.2790477829620909, 0.2942509273965852, 0.24256526592505556, 0.2857838096227404, 0.2023562640908213, 0.269957475785488, 0.22451325786878784, 0.20541409998924887, 0.1962493627734072, 0.19062355032182832, 0.1867598300972828, 0.1960824165097549, 0.21860935559271155, 0.19273348501030363, 0.20392152866496682, 0.18417754608134895, 0.21186190225327994, 0.261737587979064, 0.199312084361005, 0.25260769652756676, 0.19068466620871471, 0.2193469029268149, 0.21826674764159915, 0.24004319920598294, 0.2152564020758141, 0.2039888412202494, 0.19722727995219058, 0.17840382134957022, 0.1729755395194683, 0.19097135005333543, 0.1706637724479262, 0.17483278797534008, 0.21039532040974274, 0.180737096188334, 0.1840367982727512, 0.18723353291976397, 0.1784634533656696, 0.5673501910463844, 0.19561606311681567, 0.5909475426568165, 0.6323732792081214, 0.177547579629324, 0.5997713393643129, 0.5743951185818836, 0.20878129235719345, 0.07350727494977038, 0.49293651348466105, 0.15737935562901384, 0.14776896479823132, 0.29280597446336365, 0.4842754711711401, 0.32276909977715773, 0.1780108195602228, 0.19309093589316229, 0.1881675189386175, 0.18626237550411784, 0.17922798555370678, 0.19050038771045374, 0.20320460775864635, 0.17575741951922463, 0.19784443249463513, 0.08422989136160597, 0.09035004060685892, 0.08392152572113809, 0.06996162955361085, 0.09370431377588462, 0.08402818949633584, 0.07969007864160227, 0.08773537336283443, 0.08695882154819701]}, "mutation_prompt": null}
{"id": "0de4fc87-39a6-4a27-b312-04533b5cb8f6", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.5\n\n    def chaotic_map(self, x):\n        return 3.9 * x * (1 - x)\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.gamma) * np.math.sin(np.pi * self.gamma / 2) / (np.math.gamma((1 + self.gamma) / 2) * self.gamma * 2 ** ((self.gamma - 1) / 2))) ** (1 / self.gamma)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / self.gamma)\n        return step\n\n    def particle_swarm_mutation(self, population, i, j):\n        delta = np.random.uniform(0, 1, self.dim)\n        return delta * (population[j] - population[i])\n\n    def dynamic_mutation_scale(self, fitness):\n        return 0.1 + 0.4 * (1 - np.tanh(np.mean(fitness)))\n\n    def __call__(self, func):\n        population_size = 50\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = [func(individual) for individual in population]\n\n        for _ in range(self.budget):\n            for i in range(population_size):\n                for j in range(population_size):\n                    if fitness[i] > fitness[j]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r ** 2)\n                        step = self.levy_flight()\n                        mutation = self.particle_swarm_mutation(population, i, j)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * step + mutation * self.dynamic_mutation_scale(fitness)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        new_fitness = func(population[i])\n                        if new_fitness < fitness[i]:\n                            fitness[i] = new_fitness\n\n            alpha_min = 0.1\n            alpha_max = 0.5\n            self.alpha = alpha_min + (alpha_max - alpha_min) * (_ / self.budget)\n\n            population_size = int(40 + 10 * np.sin(_ / self.budget * np.pi))\n            if population_size > len(population):\n                new_population = np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim))\n                population = np.vstack([population, new_population])\n                fitness.extend([func(individual) for individual in new_population])\n\n            # Introduce chaos theory-inspired chaotic mapping for population diversity\n            for i in range(population_size):\n                population[i] = np.clip(self.chaotic_map(population[i]), -5.0, 5.0)\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined", "description": "Introduce chaos theory-inspired chaotic mapping to enhance population diversity and exploration capability in the optimization process.", "configspace": "", "generation": 99, "fitness": 0.1242395626126755, "feedback": "The algorithm ImprovedDynamicMutationEnhancedFireflyLevyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "0449a9b2-14ac-4787-9e83-d100dfed468e", "metadata": {"aucs": [0.3509787938850085, 0.3239462956520397, 0.3147481491258539, 0.21669027649047978, 0.2125473200896416, 0.3145381298127181, 0.3402287491637055, 0.3574100740107735, 0.3436753961349076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05684772115330561, 0.07680599526679488, 0.06561727782079874, 0.0885067309896842, 0.0881683699688276, 0.0808307464932988, 0.06588482557214648, 0.07218665326985851, 0.05967943108708973, 0.06264857326119677, 0.05518338744707307, 0.05426953650419841, 0.07728685195379348, 0.04261445801222541, 0.054850400418351875, 0.048619932554920475, 0.05576635215478232, 0.045836774971566796, 0.07395821067982888, 0.08180185051582123, 0.06387174822853137, 0.085377779332653, 0.08685053816177479, 0.09316922197737709, 0.7926559778695894, 0.13908364260533457, 0.301976168076698, 0.08742258709840167, 0.0697763849270201, 0.026764456927461433, 0.1696512285324001, 0.10491030473226892, 0.08080723894689723, 0.1281444465317071, 0.05910843830135326, 0.08353364784772654, 0.1955336224427059, 0.2096649644862204, 0.1932650531629987, 0.19069400739616593, 0.17243550800116825, 0.15437543997238357, 0.12728548381805727, 0.13844416021417583, 0.16013613199250143, 0.09496877599272302, 0.03967548169189339, 0.023077890539880852, 0.03109525642163935, 0.17095176714480842, 0.10449514733439269, 0.097476468573654, 0.03665649211004707, 0.12601954112474856, 0.11316566220847979, 0.10791583686447326, 0.043747212038108385, 0.10657313589658912, 0.07980493825048396, 0.07720889942597109, 0.15899551510765064, 0.05483429308197807, 0.11508181930891859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026991720848059675, 9.999999999998899e-05, 9.999999999998899e-05, 0.07308757253206788, 0.08440890656222622, 0.1621242287454432, 0.030997438078223638, 0.01790594848491378, 0.0025218775695334816, 0.05213853476248875, 0.054863343173010226, 0.1137057530222122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00890565901929874, 0.029592133758819417, 9.999999999998899e-05, 0.002503186133258395, 0.06655093355152619, 0.02346388142723066, 0.013992292098443215, 0.011956444864771543, 0.29939506062250165, 0.31083330114895624, 0.25764820320079196, 0.3426325672103496, 0.30617537869292033, 0.3105674993155326, 0.26125783105319755, 0.2684753294539367, 0.2784225006330411, 0.03742499331555149, 0.055029949528125344, 0.04975120713477188, 0.07311768534304175, 0.0575277592124841, 0.06099975234731814, 0.058320236278789905, 0.07422730640597419, 0.05192050356905109, 0.12338839220745135, 0.1483115160358015, 0.11842175776965747, 0.10378464832186673, 0.14942149993651133, 0.14885825963561272, 0.15129171081723203, 0.17727872098191744, 0.16306743751430897, 0.14962683080200279, 0.16175265856817422, 0.23453144474837362, 0.2105277151522128, 0.21066850539719173, 0.22609935029825545, 0.16043217359010398, 0.21196631714154124, 0.18172484535721511, 0.11896288869558724, 0.1383705698705482, 0.15600759995837232, 0.135327040493322, 0.13753307099849865, 0.15727841283258404, 0.12871967815792051, 0.17789964863066687, 0.11383756676500234, 0.18276640961087431, 0.21340842624427125, 0.16230261791047118, 0.23389916661247145, 0.16472848486706693, 0.1918120568294961, 0.19060768046660914, 0.20578843917467815, 0.18720333074830264, 0.16315506403362046, 0.16303374600981047, 0.16546802707031638, 0.15738119342181722, 0.16134742551572911, 0.1543913324868319, 0.1603941835482221, 0.16814644432156112, 0.16341264326876448, 0.1550072768342874, 0.1716418291568591, 0.1162508444205902, 0.20650999739741915, 0.16355981942973796, 0.16784818623991793, 0.5609998820790953, 0.1688876108574806, 0.38144981679552703, 0.22670447880066036, 0.19494162925648773, 0.08009062492448904, 0.20985890040065835, 0.08971889237135855, 0.09765059259145381, 0.11333213819726773, 0.26850985337536326, 0.17159437245870435, 0.1831567955647181, 0.19539205337883936, 0.1870530195114738, 0.17759599218351374, 0.176185718528162, 0.18950445605025268, 0.20320460775864635, 0.18810271258852007, 0.1985795485845121, 0.061805762999252334, 0.07989760396680323, 0.06611676904687924, 0.0660159440065774, 0.0810065198235761, 0.07127763399864595, 0.06999301333319685, 0.06483594581927954, 0.06037379929354214]}, "mutation_prompt": null}
