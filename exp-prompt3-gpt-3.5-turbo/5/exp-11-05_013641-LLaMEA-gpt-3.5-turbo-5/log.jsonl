{"id": "f4526732-4d7a-449d-9455-fed3ac211b0a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.15930948501050674, "feedback": "The algorithm HybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "f4526732-4d7a-449d-9455-fed3ac211b0a", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "95c836d3-9b0b-4e70-833d-1a3258ad4c8b", "solution": "class DynamicLocalSearchPSO(HybridPSOLocalSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.dynamic_search_threshold = 0.1\n\n    def __call__(self, func):\n        def dynamic_local_search_radius():\n            nonlocal population\n            avg_fitness = np.mean([func(ind) for ind in population])\n            best_fitness = min([func(ind) for ind in population])\n            ratio = (avg_fitness - best_fitness) / avg_fitness\n            self.local_search_radius = 0.1 * (5.0 - (-5.0)) * (1 - ratio)\n\n        def optimize():\n            nonlocal population\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                dynamic_local_search_radius()\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n        return optimize()", "name": "DynamicLocalSearchPSO", "description": "Enhancing the exploration capability by adding a dynamic adjustment to the local search radius based on the function landscape. ", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"no binding for nonlocal 'population' found\").", "error": "SyntaxError(\"no binding for nonlocal 'population' found\")", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {}, "mutation_prompt": null}
{"id": "fbffd2ad-d75a-4982-ad52-715220a5ec39", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch(HybridPSOLocalSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.diversity_weight = 0.5\n\n    def __call__(self, func):\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n            \n            inertia_weights = np.full(self.population_size, self.inertia_weight)\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                avg_distance = np.mean([np.linalg.norm(population - np.mean(population, axis=0)) for population in population])\n                diversity = np.exp(-avg_distance)\n\n                for i in range(self.population_size):\n                    inertia_weights[i] = self.inertia_weight + self.diversity_weight * diversity\n                    velocities[i] = inertia_weights[i] * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "EnhancedHybridPSOLocalSearch", "description": "Integrate a dynamic inertia weight adaptation mechanism based on population diversity to improve convergence and exploration capabilities.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {}, "mutation_prompt": null}
{"id": "83a4bf2f-d9d4-4802-8abc-717d8916f5f6", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "9079b90e-11e0-4ce9-a3ec-2ce074c3840f", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "77db6340-616d-425d-b99c-22698761f644", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "9c207dd0-f83e-4494-9012-1768631bf19c", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "1fd6024a-6753-4b7b-8f09-9be7e43c03f9", "solution": "import numpy as np\n\nclass ImprovedHybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = np.random.uniform(0.5, 1.0)  # Adaptive inertia weight\n        self.cognitive_weight = np.random.uniform(1.0, 2.0) # Adaptive cognitive weight\n        self.social_weight = np.random.uniform(1.0, 2.0)    # Adaptive social weight\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n                # Update adaptive weights\n                self.inertia_weight = max(0.4, min(0.9, self.inertia_weight - 0.001))\n                self.cognitive_weight = max(0.9, min(2.2, self.cognitive_weight + 0.001))\n                self.social_weight = max(0.9, min(2.2, self.social_weight + 0.001))\n\n            return global_best\n\n        return optimize()\n        \nImprovedHybridPSOLocalSearch(budget=1000, dim=10)", "name": "ImprovedHybridPSOLocalSearch", "description": "Introducing adaptive parameters for inertia, cognitive, and social weights to dynamically adjust their values during optimization.", "configspace": "", "generation": 8, "fitness": 0.15900305696109035, "feedback": "The algorithm ImprovedHybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.259657986657558, 0.31748978516535076, 0.2726420270747473, 0.28189181200972735, 0.27772537134129693, 0.25980291265688515, 0.2531097767034365, 0.2658027882690248, 0.25397570971177397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05884193478195299, 0.08165417919027729, 0.09116075252446842, 0.07434863775415002, 0.08819355042502752, 0.07122270106143203, 0.07785347196151138, 0.0905555002222167, 0.07256266815702495, 0.05933102998394857, 0.07280216764780656, 0.06403843541319931, 0.0628874245052854, 0.06081945796027377, 0.07339039535830394, 0.07049464424058893, 0.07064735714652493, 0.09035438676209506, 0.9681799481745128, 0.8845535550628032, 0.9524984090447881, 0.9619115503824414, 0.9313693570135037, 0.954751670684874, 0.9771687760096385, 0.9543688120302014, 0.9894168409631737, 0.1455592163076619, 0.14888790574212596, 0.16236863902846066, 0.17181213410862184, 0.16438033562945598, 0.15016425706156133, 0.14244976554758648, 0.14116220690099857, 0.20139374360604478, 0.20697665849764169, 0.18977360823241018, 0.20491170897518618, 0.19128472541535624, 0.18750962824863593, 0.2062531894727686, 0.1843576188682523, 0.20711696158714243, 0.18508933009828255, 0.055352038451982666, 0.07723375032532309, 0.0910102078573487, 0.14125640113546234, 0.07142811301581586, 0.06433507020909857, 0.08922995798051758, 0.12978638695433742, 0.07693504175400412, 0.02057807395647193, 0.11710569691208106, 0.08414070831562526, 0.05072343992435069, 0.0883810570500354, 0.08486802251518133, 0.05374915010514991, 0.08137058824806498, 0.09077221281283088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05322287061738007, 0.08296870398979683, 0.054427758961944295, 0.027593462158401083, 0.0699919272130124, 0.01483733202274029, 0.047097415343689164, 0.07631668084192134, 0.05682945705833753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012257107870699113, 0.02429754405874518, 0.03053939120651017, 0.012087337150488375, 0.029327053573277362, 0.03129524816169327, 0.01724363883397073, 0.028799082935238585, 0.03166029183287278, 0.2742729176577947, 0.2811785916234204, 0.28677455122227824, 0.2742007187486686, 0.27022583409057765, 0.28200492231790053, 0.24128645123947767, 0.2693322507977497, 0.27665144106626005, 0.06536965372374237, 0.06967962806508132, 0.07600827622035444, 0.07116860399350078, 0.0922860436503199, 0.0834801935956786, 0.09706156274896438, 0.09637601207282243, 0.07352214011725733, 0.13321675596800853, 0.127637572049645, 0.15078273576461065, 0.1596636022564859, 0.16109754057163428, 0.1695971565789649, 0.13112392809712348, 0.15049511315876718, 0.12604131320556078, 0.27602134792234245, 0.2078982907692869, 0.21147064866145182, 0.198310407512588, 0.20706321411376927, 0.21179405386871042, 0.19152178849660062, 0.20378144230145412, 0.18145071403370971, 0.14466945779529028, 0.16288056843636312, 0.15098961290111823, 0.1458742392326312, 0.16643391587073297, 0.14876279444445173, 0.13013517288816168, 0.15763853286231133, 0.14904021916852217, 0.1801247816688708, 0.18718193910210756, 0.1811801656662736, 0.18681443047563484, 0.19154755471497265, 0.1926228892798093, 0.18321843177721397, 0.20424859958711705, 0.2175810967286531, 0.16999754466187966, 0.18217808625095744, 0.18896150732674444, 0.1718117337460635, 0.16981295498509097, 0.17173959316876186, 0.1651780913096813, 0.1746137123444016, 0.17286363769258695, 0.15156526239718082, 0.13265902940842644, 0.16891439667835717, 0.15112868271238367, 0.17929381230396535, 0.13870104061695654, 0.171225793054126, 0.26847078730483587, 0.1548536286871165, 0.11686063433094473, 0.19696525486450667, 0.16580750766262298, 0.3339007977980938, 0.30425329004182533, 0.1187325828648158, 0.268450555740795, 0.21685691455110545, 0.14519172963860016, 0.17112870385465107, 0.16937872791162267, 0.17041200845326854, 0.17797980938602975, 0.17915102590395982, 0.1678707713385409, 0.17241775936268333, 0.17242661204289111, 0.1664042530134282, 0.07193574849108031, 0.07074495895075683, 0.07758311222712633, 0.07167178916882933, 0.07848782983712621, 0.07552014396338713, 0.07392098044832673, 0.08698840435118305, 0.06818164313058439]}, "mutation_prompt": null}
{"id": "02a647b8-3c5d-4ffd-92e4-0f65fdfd0ea8", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "f938f74a-358e-44c5-8b2a-1060585248f3", "solution": "class AdaptiveInertiaHybridPSOLocalSearch(HybridPSOLocalSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.initial_inertia_weight = 0.7\n\n    def __call__(self, func):\n        def optimize():\n            inertia_weight = self.initial_inertia_weight\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n                inertia_weight = self.update_inertia_weight(inertia_weight, func(global_best))\n\n            return global_best\n        \n        def update_inertia_weight(inertia_weight, best_fitness):\n            if best_fitness < func(global_best):\n                return max(0.4, inertia_weight - 0.05)\n            else:\n                return min(0.9, inertia_weight + 0.05)\n\n        return optimize()", "name": "AdaptiveInertiaHybridPSOLocalSearch", "description": "Implement adaptive inertia weight in the HybridPSOLocalSearch algorithm to dynamically adjust the exploration and exploitation balance during optimization.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {}, "mutation_prompt": null}
{"id": "80dcf577-672c-4f4e-9fa4-b84ff02e9302", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "30d1873d-45c5-46c3-9c35-afbccf93535f", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "ac9ed6d4-ac6b-4679-977a-08002d407aed", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch(HybridPSOLocalSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.dynamic_search_rate = 0.1\n\n    def __call__(self, func):\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    # Dynamic adaptation of local search radius\n                    current_local_search_radius = self.dynamic_search_rate * np.linalg.norm(velocities[i])\n                    local_search_radius = np.clip(current_local_search_radius, 0, self.local_search_radius)\n                    population[i] = local_search(population[i], local_search_radius)\n\n            return global_best\n\n        return optimize()", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhanced HybridPSOLocalSearch with dynamic local search radius adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {}, "mutation_prompt": null}
{"id": "1cd2d12f-09f6-4f06-9c78-e13148106cff", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "0246153b-6926-435a-aff1-38b997326614", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "34bd22f3-551e-4443-8d47-ebeb2f9affb6", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight_min = 0.4\n        self.inertia_weight_max = 0.9\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius_min = 0.05 * (5.0 - (-5.0))\n        self.local_search_radius_max = 0.2 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.inertia_weight_min + (_ / self.budget) * (self.inertia_weight_max - self.inertia_weight_min)\n                local_search_radius = self.local_search_radius_min + (_ / self.budget) * (self.local_search_radius_max - self.local_search_radius_min)\n\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "AdaptiveHybridPSOLocalSearch", "description": "Introducing adaptive mechanisms for inertia weight and search radius to dynamically adjust exploration and exploitation trade-off.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'AdaptiveHybridPSOLocalSearch' object has no attribute 'local_search_radius'\").", "error": "AttributeError(\"'AdaptiveHybridPSOLocalSearch' object has no attribute 'local_search_radius'\")", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {}, "mutation_prompt": null}
{"id": "a1c12388-a5de-481f-b6f7-438f87888e9e", "solution": "import numpy as np\n\nclass DynamicHybridPSOLocalSearch(HybridPSOLocalSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.dynamic_weight_range = 0.5\n\n    def __call__(self, func):\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                dynamic_cognitive_weight = np.random.uniform(max(0.5, self.cognitive_weight - self.dynamic_weight_range), self.cognitive_weight + self.dynamic_weight_range)\n                dynamic_social_weight = np.random.uniform(max(0.5, self.social_weight - self.dynamic_weight_range), self.social_weight + self.dynamic_weight_range)\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + dynamic_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + dynamic_social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n        return optimize()", "name": "DynamicHybridPSOLocalSearch", "description": "Introducing dynamic adjustment of cognitive and social weights during optimization to enhance convergence and exploration capabilities.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {}, "mutation_prompt": null}
{"id": "39180921-88fb-47e9-8789-bbf2498a4cf4", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "0cc712ab-71c6-4e9b-a4f0-2d66c9817cf6", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()\n        ", "name": "HybridPSOLocalSearch", "description": "Utilizing a combination of Particle Swarm Optimization and Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2516431993237823, 0.24890650278386306, 0.25760178201926087, 0.28283378690414174, 0.30212052521221566, 0.27419672307321274, 0.26539895041882, 0.2844089765491289, 0.2479935766570367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226394828179095, 0.09108240423643887, 0.07804768066204049, 0.09981686266288547, 0.10975188400471503, 0.06786266210522007, 0.09073285112274188, 0.07215747556654639, 0.07236304580827602, 0.06868954586701981, 0.06234330021079981, 0.08041372288037396, 0.0793332633948739, 0.05901502843703399, 0.05974235245792714, 0.0677623530209348, 0.057117464661489814, 0.05286603920677169, 0.9450543600788507, 0.9329416914485626, 0.9943020046114414, 0.939751703675675, 0.946789873028586, 0.9435418775286756, 0.9715111092410015, 0.9810087636757228, 0.9857714852857629, 0.16760248508965592, 0.21664449140576458, 0.1268987726031492, 0.1783613940421387, 0.16580142788966679, 0.16827706362836192, 0.15033643805141106, 0.13971304838338494, 0.14445431612887405, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.04550183383045314, 0.07375574445610322, 0.020088236670304127, 0.033937182581307956, 0.09153554844323064, 0.07327954305597906, 0.08138490748393779, 0.09651367793720078, 0.07319592619460669, 0.09891894601717088, 0.07786747456298926, 0.0945605017510518, 0.07104115599812322, 0.08266518133429179, 0.11820653311589435, 0.09339264274267622, 0.07822907293116055, 0.10569174631734657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09434512851345755, 0.06363300924327142, 0.057645769982388795, 0.036015009941913534, 0.07433877659565191, 0.016615144374101498, 0.09445227674235379, 0.07814543432975696, 0.052814709879296595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020053708903748024, 0.015350672781912933, 0.027141864113181646, 0.019613530099789167, 0.04082330429224601, 0.02088814486929258, 0.02855252866797886, 0.024050981714021535, 0.020763893238158193, 0.29448333716897934, 0.26965997749522874, 0.2652126888262104, 0.2645670517928699, 0.2615631184847631, 0.2691048545698784, 0.27336860053229617, 0.2611962577512561, 0.2670164950712498, 0.08720365419365939, 0.06802227534212857, 0.07944272868225666, 0.07934977142994737, 0.06714830932923799, 0.09822214948973229, 0.0710669994566202, 0.08897581226289275, 0.0720349605073568, 0.13179977867201398, 0.12416778700953268, 0.12249749257070541, 0.14907472635292507, 0.14353935380776495, 0.12115795837953647, 0.13837355237308746, 0.12795655256898586, 0.13997476925409313, 0.21469993152120048, 0.21691048289720283, 0.21383687645365612, 0.22258880459941088, 0.2079452862259623, 0.19480125438561413, 0.18980196807333538, 0.2259613891204837, 0.21441240175908638, 0.148304031406992, 0.13999717187763838, 0.11772959544933925, 0.14769435844161238, 0.16826187826742878, 0.13936920880592985, 0.13996750925364954, 0.15557689049256096, 0.14358281131992734, 0.17988515616000655, 0.19129190630234494, 0.1752538195334582, 0.20795850464867816, 0.1931235533423724, 0.18825558484140603, 0.18532802133920967, 0.20796416877289248, 0.1941578715894141, 0.1639126034338837, 0.17253060592446368, 0.16829226816850862, 0.17608526261122592, 0.17294735013686025, 0.1709346744957264, 0.17118860261902513, 0.17428515389667898, 0.16386447715658836, 0.17047599646633194, 0.17599769069255178, 0.1507176900298426, 0.3614466420641216, 0.1863341554931227, 0.3112069298881581, 0.12020802973885747, 0.16592093048620227, 0.14825483346680757, 0.09651500703236837, 0.18091454268739626, 0.2846429904695239, 0.1784233135106108, 0.16442228783419233, 0.1777897475271828, 0.1747469984991845, 0.3258855989829733, 0.25970127219588546, 0.1777034443358949, 0.17540925756725845, 0.1747584998121824, 0.18761645310062436, 0.17231396465529691, 0.17009215542420375, 0.17833042061566173, 0.1627706684900153, 0.19254034955641486, 0.07270906794047294, 0.07066603500799151, 0.0670818352869077, 0.0690169696360643, 0.06799778380750177, 0.08134421934776515, 0.0738832419861003, 0.08003465101587148, 0.07360478134277415]}, "mutation_prompt": null}
{"id": "7a65f612-4917-4a7a-adee-98da7f7b4679", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for t in range(1, self.budget+1):\n                inertia_weight = 0.5 + 0.2 * np.cos(0.5 * np.pi * t / self.budget)  # Dynamic adjustment of inertia weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + self.social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "HybridPSOLocalSearch", "description": "Introducing dynamic adjustment of inertia weight during optimization to enhance convergence and avoid premature stagnation.", "configspace": "", "generation": 20, "fitness": 0.15929846459174743, "feedback": "The algorithm HybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.25164166674236577, 0.24890879141000977, 0.2576026468293656, 0.2828338939151108, 0.3021217223719377, 0.27419698555909366, 0.26539893642120893, 0.28440520874498687, 0.24799052584096393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226363999736496, 0.09108172730194453, 0.07804749419774637, 0.09981683740571057, 0.10975203167200376, 0.06786720165007953, 0.0907410267737252, 0.07215624709447388, 0.07234770100554766, 0.06869054856455081, 0.06234301478963622, 0.08040302666906629, 0.07931787097973664, 0.059012760355349414, 0.05974340939162981, 0.06775919872204872, 0.05711580012361106, 0.05285813225793501, 0.9450543595034395, 0.932941692066514, 0.9943020046092558, 0.9397517033281697, 0.9467898729634077, 0.9435418775080091, 0.9715111092437564, 0.9810087636794291, 0.9857714852834024, 0.1676030996827138, 0.21664369227349878, 0.12689823720798465, 0.17821953204899965, 0.16579880827182514, 0.16827686875260484, 0.15033592287621522, 0.1397120525981851, 0.14445468822663665, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.045514495255894905, 0.07375604488737686, 0.020091729505633205, 0.03393095881185182, 0.09153880231324651, 0.07327933879546833, 0.08138153156845163, 0.0965149093796932, 0.07319608195923755, 0.09891911929233577, 0.07786773190932594, 0.09456118577893902, 0.07103611398769605, 0.08266613440629134, 0.1182095607446334, 0.09340002491461497, 0.0782290731368177, 0.10569352608379612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09420851010953879, 0.06358315684612059, 0.057492810618756995, 0.03603731186308756, 0.07430128995797602, 0.0166057524741815, 0.09441917861096605, 0.07818004514137189, 0.05282492780828818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020051914525599623, 0.015352031336560268, 0.027141868304228822, 0.019609325655967624, 0.04082455291970477, 0.020888044781968484, 0.02855195562762014, 0.02405540993255617, 0.02076381830824303, 0.29447693170620404, 0.2696599831347096, 0.26521283622939495, 0.26456215961450436, 0.2615608322621552, 0.26910504892873166, 0.2733687438804969, 0.261195380620616, 0.26701653464600417, 0.08722191984658312, 0.06801163332232463, 0.07943791990362536, 0.07935267896579568, 0.06715259373403515, 0.09822130978148358, 0.0710693490274773, 0.08898147263486933, 0.07203718068846177, 0.13203254460253733, 0.12419939718880124, 0.12250136755231655, 0.1489323581527211, 0.1435636905139288, 0.12116205178595241, 0.13820634404508636, 0.12785742410685452, 0.13997903611592866, 0.214683176063462, 0.21691968837472864, 0.21382639079265675, 0.2225839857436347, 0.20795475097700766, 0.1947956810514333, 0.1897813722880013, 0.22596137806928096, 0.21441290681493652, 0.1483057921111235, 0.14001341491738772, 0.11773381789760606, 0.1476606420185591, 0.16825284525217177, 0.1393767480419703, 0.13992645982887553, 0.15556586316476628, 0.14357700824488095, 0.17994359111328917, 0.19132595187012935, 0.174399500097135, 0.20792420689598734, 0.1926656634994609, 0.18857730327012845, 0.18228610699726255, 0.2078958871463722, 0.18610220140314881, 0.1639143675090956, 0.17253765801796306, 0.1682909461906411, 0.17608542389196968, 0.17294554332069734, 0.17093552644916887, 0.17118752802594295, 0.17428472778926085, 0.1638643787661226, 0.17047602487725222, 0.17599826048890443, 0.15071804087601848, 0.3614508358898485, 0.18633460971994376, 0.3112135849655764, 0.1202080462500057, 0.16592126853077538, 0.14825483015836705, 0.09651631663409621, 0.18091578380625972, 0.2846484699217837, 0.17842327478525055, 0.16442238350329297, 0.1777926004995667, 0.17473776408392072, 0.32588345774875016, 0.2597004048239664, 0.17730057885350692, 0.1755738347398188, 0.17487308783068023, 0.1876695373913816, 0.18181442687007054, 0.1704743617473965, 0.1788546652801566, 0.16285210268039396, 0.1925786699066684, 0.07272928565788284, 0.0706619140534851, 0.0670878736956978, 0.06902771848284084, 0.06800507533387101, 0.08134444381000872, 0.07388966464415803, 0.08002289920862549, 0.07355311216028682]}, "mutation_prompt": null}
{"id": "7cc1b0ba-b3b2-483c-a93a-d6dbd7236f50", "solution": "import numpy as np\n\nclass AdaptiveLocalSearch(HybridPSOLocalSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.adaptive_step_size = 0.1\n\n    def local_search(current_position):\n        step_sizes = np.random.uniform(low=-self.adaptive_step_size, high=self.adaptive_step_size, size=self.dim)\n        candidate_position = current_position + step_sizes\n        return candidate_position", "name": "AdaptiveLocalSearch", "description": "Enhancing the local search by incorporating adaptive step sizes for more effective exploration in the search space.", "configspace": "", "generation": 21, "fitness": 0.15929846459174743, "feedback": "The algorithm AdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.25164166674236577, 0.24890879141000977, 0.2576026468293656, 0.2828338939151108, 0.3021217223719377, 0.27419698555909366, 0.26539893642120893, 0.28440520874498687, 0.24799052584096393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226363999736496, 0.09108172730194453, 0.07804749419774637, 0.09981683740571057, 0.10975203167200376, 0.06786720165007953, 0.0907410267737252, 0.07215624709447388, 0.07234770100554766, 0.06869054856455081, 0.06234301478963622, 0.08040302666906629, 0.07931787097973664, 0.059012760355349414, 0.05974340939162981, 0.06775919872204872, 0.05711580012361106, 0.05285813225793501, 0.9450543595034395, 0.932941692066514, 0.9943020046092558, 0.9397517033281697, 0.9467898729634077, 0.9435418775080091, 0.9715111092437564, 0.9810087636794291, 0.9857714852834024, 0.1676030996827138, 0.21664369227349878, 0.12689823720798465, 0.17821953204899965, 0.16579880827182514, 0.16827686875260484, 0.15033592287621522, 0.1397120525981851, 0.14445468822663665, 0.19358950701222288, 0.19179371732111472, 0.19089365818605952, 0.18271214419326742, 0.18731090898649427, 0.1942014898681318, 0.17707419228814048, 0.16927879523223588, 0.1946954874561121, 0.045514495255894905, 0.07375604488737686, 0.020091729505633205, 0.03393095881185182, 0.09153880231324651, 0.07327933879546833, 0.08138153156845163, 0.0965149093796932, 0.07319608195923755, 0.09891911929233577, 0.07786773190932594, 0.09456118577893902, 0.07103611398769605, 0.08266613440629134, 0.1182095607446334, 0.09340002491461497, 0.0782290731368177, 0.10569352608379612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09420851010953879, 0.06358315684612059, 0.057492810618756995, 0.03603731186308756, 0.07430128995797602, 0.0166057524741815, 0.09441917861096605, 0.07818004514137189, 0.05282492780828818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020051914525599623, 0.015352031336560268, 0.027141868304228822, 0.019609325655967624, 0.04082455291970477, 0.020888044781968484, 0.02855195562762014, 0.02405540993255617, 0.02076381830824303, 0.29447693170620404, 0.2696599831347096, 0.26521283622939495, 0.26456215961450436, 0.2615608322621552, 0.26910504892873166, 0.2733687438804969, 0.261195380620616, 0.26701653464600417, 0.08722191984658312, 0.06801163332232463, 0.07943791990362536, 0.07935267896579568, 0.06715259373403515, 0.09822130978148358, 0.0710693490274773, 0.08898147263486933, 0.07203718068846177, 0.13203254460253733, 0.12419939718880124, 0.12250136755231655, 0.1489323581527211, 0.1435636905139288, 0.12116205178595241, 0.13820634404508636, 0.12785742410685452, 0.13997903611592866, 0.214683176063462, 0.21691968837472864, 0.21382639079265675, 0.2225839857436347, 0.20795475097700766, 0.1947956810514333, 0.1897813722880013, 0.22596137806928096, 0.21441290681493652, 0.1483057921111235, 0.14001341491738772, 0.11773381789760606, 0.1476606420185591, 0.16825284525217177, 0.1393767480419703, 0.13992645982887553, 0.15556586316476628, 0.14357700824488095, 0.17994359111328917, 0.19132595187012935, 0.174399500097135, 0.20792420689598734, 0.1926656634994609, 0.18857730327012845, 0.18228610699726255, 0.2078958871463722, 0.18610220140314881, 0.1639143675090956, 0.17253765801796306, 0.1682909461906411, 0.17608542389196968, 0.17294554332069734, 0.17093552644916887, 0.17118752802594295, 0.17428472778926085, 0.1638643787661226, 0.17047602487725222, 0.17599826048890443, 0.15071804087601848, 0.3614508358898485, 0.18633460971994376, 0.3112135849655764, 0.1202080462500057, 0.16592126853077538, 0.14825483015836705, 0.09651631663409621, 0.18091578380625972, 0.2846484699217837, 0.17842327478525055, 0.16442238350329297, 0.1777926004995667, 0.17473776408392072, 0.32588345774875016, 0.2597004048239664, 0.17730057885350692, 0.1755738347398188, 0.17487308783068023, 0.1876695373913816, 0.18181442687007054, 0.1704743617473965, 0.1788546652801566, 0.16285210268039396, 0.1925786699066684, 0.07272928565788284, 0.0706619140534851, 0.0670878736956978, 0.06902771848284084, 0.06800507533387101, 0.08134444381000872, 0.07388966464415803, 0.08002289920862549, 0.07355311216028682]}, "mutation_prompt": null}
{"id": "5d60c5dd-8630-430e-9b14-c76891174703", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    cognitive_weight = 1.5 * (1 - _ / self.budget)  # Dynamic adjustment of cognitive weight\n                    social_weight = 1.5 * (_ / self.budget)  # Dynamic adjustment of social weight\n                    velocities[i] = self.inertia_weight * velocities[i] + cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "EnhancedHybridPSOLocalSearch", "description": "Introducing dynamic adjustment of cognitive and social weights during optimization to improve convergence speed and solution quality.", "configspace": "", "generation": 22, "fitness": 0.14177057126282008, "feedback": "The algorithm EnhancedHybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.25861374042266316, 0.2411971763431371, 0.2411485990551484, 0.23940306228787012, 0.25744026781921137, 0.2598601651100355, 0.2405386690931578, 0.26459018435199255, 0.24450750813704358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676180468548444, 0.07154858854317081, 0.06623616350639239, 0.06588076082470617, 0.05947616647489318, 0.0662499882565788, 0.06573714603772951, 0.06021920324495733, 0.05972189150850504, 0.048804338937373126, 0.060275361637052494, 0.06527585428920357, 0.05955188092999775, 0.05177820542244049, 0.05804693658772153, 0.04595256048585927, 0.04806398515357069, 0.045288893076921855, 0.651829254405076, 0.5719005564354658, 0.717571063813325, 0.8951299186789433, 0.659464283451773, 0.7125801057191699, 0.7657629989415906, 0.6285565801664657, 0.7681085424214271, 0.15048055867708354, 0.11690380941084844, 0.11522912340948355, 0.13295365598333808, 0.1285468555364827, 0.13259374073641406, 0.1493647265485737, 0.1239219865881207, 0.12252166993701574, 0.17142823180200362, 0.15383085525984075, 0.1770384521884265, 0.18428984103408907, 0.17941202579286308, 0.20061615641070518, 0.15544934065714677, 0.16702987219068943, 0.18351988327763047, 0.0575839901300893, 0.06225748803198983, 0.06051043484868279, 0.043125547573722334, 0.06507602953431446, 0.05671623363133926, 0.061846948404956525, 0.049922945022184306, 0.08670712446288142, 0.06927960565503688, 0.06844732418005783, 0.03585606517883788, 0.07649703504847272, 0.05535118772204772, 0.05009149092388876, 0.06206254059866645, 0.049191183160717245, 0.07373457689818574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06020421558799449, 0.04860438723927696, 0.06595807263784936, 0.030649356349840673, 0.07672919033473713, 0.06805280598352637, 0.07056616866530274, 0.05383534283326952, 0.04273943261528823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02182465253965271, 0.02131870144768999, 0.00916193112063901, 0.014367491326580106, 0.018877040045800597, 0.01603899138920728, 0.022961250182500614, 0.04034219110368409, 0.028994237650833754, 0.2572879028099061, 0.24853764008689405, 0.2805745386348062, 0.2929075919434505, 0.25929594239063236, 0.24409591001643682, 0.25911550883963097, 0.2395052743760836, 0.2656275395942703, 0.05817972999682974, 0.08288526569362897, 0.06504233784530666, 0.07455061488309389, 0.06256810514790834, 0.08582692977704498, 0.06742679011874131, 0.06046363354389628, 0.07278340756000001, 0.12966428291753185, 0.1230203782717052, 0.12994162581115576, 0.1164312362473805, 0.13428781930645106, 0.11847096553316827, 0.14814312430420018, 0.155789619754217, 0.12031040901101475, 0.1900089821610672, 0.18432123699639336, 0.18898715312303915, 0.18431952100745086, 0.191510999634963, 0.18685076597433703, 0.19389507463740085, 0.1999579754836187, 0.17695920980328905, 0.12469002208372715, 0.14276978495061554, 0.1289847736048234, 0.1327635058656078, 0.13504239546115326, 0.12856664447206534, 0.1297074677062967, 0.1326125907635578, 0.13421298019709627, 0.16745059725916722, 0.18876155076468004, 0.18906349701948022, 0.17820862410252758, 0.17725955061902476, 0.20143625645410468, 0.19275332962329317, 0.18255666001465587, 0.17299218205344935, 0.16342028682391396, 0.15607221766385226, 0.1595885980586148, 0.16587974861568766, 0.16284195680483193, 0.15922302692430335, 0.1674757593919357, 0.15478732220972302, 0.16798218711558255, 0.21704255000980988, 0.19874660480320405, 0.2282559022300561, 0.24420352001398393, 0.23191486269075534, 0.20632819408097247, 0.13080093441711704, 0.2307418048593859, 0.28126362921135206, 0.33723198224485273, 0.21386553502811334, 0.1726823169990872, 0.20300862822200283, 0.25473485278669095, 0.25296820097954975, 0.19178646254065546, 0.18404729621856175, 0.18029721919163533, 0.18290806337232612, 0.17788215380016403, 0.17988693562187708, 0.17597265803307094, 0.1911224773319926, 0.2054746022933992, 0.2004589575389618, 0.1722495622192688, 0.17617877951675254, 0.06671286579980229, 0.058573352245237076, 0.07278741852866133, 0.07986483150453005, 0.07622769513066341, 0.07546549464780494, 0.05808997301884833, 0.06679797849906721, 0.07197789335229265]}, "mutation_prompt": null}
{"id": "6d32c78c-9a9d-4826-9eae-ed88fc89974c", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "HybridPSOLocalSearch", "description": "Introducing dynamic inertia weight and adaptive social weight to enhance the exploration and exploitation balance of the algorithm.", "configspace": "", "generation": 23, "fitness": 0.161607075299, "feedback": "The algorithm HybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "4bb5c5ea-d892-48d0-8854-1ea2597a8563", "metadata": {"aucs": [0.2668854062962409, 0.2587733811675561, 0.2593215493857648, 0.27942856886162293, 0.2689084397617342, 0.25435909203388885, 0.2605037555433499, 0.27668217312850774, 0.2784000462448679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07408533590538047, 0.08990179306565604, 0.08759807760552363, 0.07746354997043525, 0.08410018388022567, 0.08893102860862578, 0.06829934405045346, 0.08178825141015134, 0.09246423377474133, 0.07154595012352638, 0.0794371293966728, 0.06376412693810185, 0.06787696455882619, 0.06375820944622046, 0.07448562272530546, 0.0729192249092796, 0.08021968142243263, 0.0724271930543815, 0.9323351711775141, 0.9270408640380838, 0.9943020046114414, 0.9277277168229017, 0.9292504439917229, 0.9339343980458417, 0.964670895666065, 0.9808636078976616, 0.9842455536362054, 0.17796356935727786, 0.14189440674259624, 0.1636388313955196, 0.1563661052215748, 0.15862518526646707, 0.16409356859800506, 0.19523755558844236, 0.17824324714151574, 0.1634100073642658, 0.22013190670458116, 0.18728020146722812, 0.2449524487909306, 0.2046377750820454, 0.17945761406466154, 0.23553720001974265, 0.1876441233957108, 0.20439994362556424, 0.18082879103490967, 0.05809859284755492, 0.06152544704205243, 0.05200840251683825, 0.01959714333472351, 0.08604336129222379, 0.09429352002035196, 0.06917252943728358, 0.10945233321860981, 0.0758072982815915, 0.07044918835394276, 0.09555300309268822, 0.07773315381387114, 0.07517860913682617, 0.0970335677851546, 0.07444097038714481, 0.08291297189140623, 0.08101851771041313, 0.08440732803687023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09305461094522982, 0.06024522919354036, 0.08604324769677751, 0.0861927269052234, 0.044084770499615344, 0.0267116452861903, 0.07611865515214211, 0.06207010012479075, 0.05825492176119873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016442171834282426, 0.015699742557829466, 0.042445086426354695, 0.01995896998077351, 0.04128393207044212, 0.03139071352788447, 0.030704634161768607, 0.039853612788949055, 0.02216900067948413, 0.2836736382926195, 0.28325859054500147, 0.28010138345747126, 0.2638534603182837, 0.2619522663186796, 0.2768344104540853, 0.2977899879543384, 0.2737685370213089, 0.27071784510929797, 0.0826461473014588, 0.09832252136540809, 0.08945606026526132, 0.08453647785751639, 0.12232280009348451, 0.0724555166369828, 0.10464501164088724, 0.08211134036658208, 0.09593379175070038, 0.1343022224139082, 0.12488432505165203, 0.13322710779851132, 0.15011495276675346, 0.15367703096891816, 0.1423930588239729, 0.1250615775547954, 0.14793385948240523, 0.16440588657382793, 0.21234944156405067, 0.24553038195364985, 0.2003751237941438, 0.21984030346036054, 0.20600561885440827, 0.21536784555969102, 0.2106270817837158, 0.2197575892048267, 0.20570746638774962, 0.15573357851627967, 0.1552487456956474, 0.13641871803888006, 0.16169758518759902, 0.15427749743964136, 0.13724263078999466, 0.155780128020383, 0.1621932129690138, 0.13458726163737122, 0.2359761131528556, 0.1986671789247194, 0.19730347585789332, 0.214555364806291, 0.1946938046819381, 0.18043273916838587, 0.1778712821293117, 0.19342680218550679, 0.19887734664833157, 0.16257530673063225, 0.17781670415033057, 0.17368578580804916, 0.17894250044214677, 0.16882549933110202, 0.16626567156934302, 0.17555658237186766, 0.17188034354955273, 0.16759178972880495, 0.28838377402219306, 0.17094795113602268, 0.1510422602447643, 0.29636043701734427, 0.1726165314018181, 0.2896262042582908, 0.11645649581965112, 0.16791662155146658, 0.14883931484081658, 0.0809919012170478, 0.19599125811888873, 0.11475448777723818, 0.17261902604004753, 0.2700120457057168, 0.1843846704470714, 0.11337065222464449, 0.2520595700857745, 0.24512124745021968, 0.19639069666342956, 0.17790255567141355, 0.1801623153603934, 0.17243604337392404, 0.17087356941568177, 0.18779647159650903, 0.19281574212791097, 0.18860922682874748, 0.19766743245214424, 0.07383310731004045, 0.06633440123977397, 0.06934068370454516, 0.0733819458024274, 0.08074045110525441, 0.0767875668158029, 0.06685540323743622, 0.06933821382479333, 0.07711251860621138]}, "mutation_prompt": null}
{"id": "2b4f58d6-8496-439d-a759-b6556c107cae", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "HybridPSOLocalSearch", "description": "Introducing dynamic inertia weight and adaptive social weight to enhance the exploration and exploitation balance of the algorithm.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d32c78c-9a9d-4826-9eae-ed88fc89974c", "metadata": {"aucs": [0.2668854062962409, 0.2587733811675561, 0.2593215493857648, 0.27942856886162293, 0.2689084397617342, 0.25435909203388885, 0.2605037555433499, 0.27668217312850774, 0.2784000462448679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07408533590538047, 0.08990179306565604, 0.08759807760552363, 0.07746354997043525, 0.08410018388022567, 0.08893102860862578, 0.06829934405045346, 0.08178825141015134, 0.09246423377474133, 0.07154595012352638, 0.0794371293966728, 0.06376412693810185, 0.06787696455882619, 0.06375820944622046, 0.07448562272530546, 0.0729192249092796, 0.08021968142243263, 0.0724271930543815, 0.9323351711775141, 0.9270408640380838, 0.9943020046114414, 0.9277277168229017, 0.9292504439917229, 0.9339343980458417, 0.964670895666065, 0.9808636078976616, 0.9842455536362054, 0.17796356935727786, 0.14189440674259624, 0.1636388313955196, 0.1563661052215748, 0.15862518526646707, 0.16409356859800506, 0.19523755558844236, 0.17824324714151574, 0.1634100073642658, 0.22013190670458116, 0.18728020146722812, 0.2449524487909306, 0.2046377750820454, 0.17945761406466154, 0.23553720001974265, 0.1876441233957108, 0.20439994362556424, 0.18082879103490967, 0.05809859284755492, 0.06152544704205243, 0.05200840251683825, 0.01959714333472351, 0.08604336129222379, 0.09429352002035196, 0.06917252943728358, 0.10945233321860981, 0.0758072982815915, 0.07044918835394276, 0.09555300309268822, 0.07773315381387114, 0.07517860913682617, 0.0970335677851546, 0.07444097038714481, 0.08291297189140623, 0.08101851771041313, 0.08440732803687023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09305461094522982, 0.06024522919354036, 0.08604324769677751, 0.0861927269052234, 0.044084770499615344, 0.0267116452861903, 0.07611865515214211, 0.06207010012479075, 0.05825492176119873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016442171834282426, 0.015699742557829466, 0.042445086426354695, 0.01995896998077351, 0.04128393207044212, 0.03139071352788447, 0.030704634161768607, 0.039853612788949055, 0.02216900067948413, 0.2836736382926195, 0.28325859054500147, 0.28010138345747126, 0.2638534603182837, 0.2619522663186796, 0.2768344104540853, 0.2977899879543384, 0.2737685370213089, 0.27071784510929797, 0.0826461473014588, 0.09832252136540809, 0.08945606026526132, 0.08453647785751639, 0.12232280009348451, 0.0724555166369828, 0.10464501164088724, 0.08211134036658208, 0.09593379175070038, 0.1343022224139082, 0.12488432505165203, 0.13322710779851132, 0.15011495276675346, 0.15367703096891816, 0.1423930588239729, 0.1250615775547954, 0.14793385948240523, 0.16440588657382793, 0.21234944156405067, 0.24553038195364985, 0.2003751237941438, 0.21984030346036054, 0.20600561885440827, 0.21536784555969102, 0.2106270817837158, 0.2197575892048267, 0.20570746638774962, 0.15573357851627967, 0.1552487456956474, 0.13641871803888006, 0.16169758518759902, 0.15427749743964136, 0.13724263078999466, 0.155780128020383, 0.1621932129690138, 0.13458726163737122, 0.2359761131528556, 0.1986671789247194, 0.19730347585789332, 0.214555364806291, 0.1946938046819381, 0.18043273916838587, 0.1778712821293117, 0.19342680218550679, 0.19887734664833157, 0.16257530673063225, 0.17781670415033057, 0.17368578580804916, 0.17894250044214677, 0.16882549933110202, 0.16626567156934302, 0.17555658237186766, 0.17188034354955273, 0.16759178972880495, 0.28838377402219306, 0.17094795113602268, 0.1510422602447643, 0.29636043701734427, 0.1726165314018181, 0.2896262042582908, 0.11645649581965112, 0.16791662155146658, 0.14883931484081658, 0.0809919012170478, 0.19599125811888873, 0.11475448777723818, 0.17261902604004753, 0.2700120457057168, 0.1843846704470714, 0.11337065222464449, 0.2520595700857745, 0.24512124745021968, 0.19639069666342956, 0.17790255567141355, 0.1801623153603934, 0.17243604337392404, 0.17087356941568177, 0.18779647159650903, 0.19281574212791097, 0.18860922682874748, 0.19766743245214424, 0.07383310731004045, 0.06633440123977397, 0.06934068370454516, 0.0733819458024274, 0.08074045110525441, 0.0767875668158029, 0.06685540323743622, 0.06933821382479333, 0.07711251860621138]}, "mutation_prompt": null}
{"id": "2851c4c5-9f04-424b-823a-303fba71b1f1", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "HybridPSOLocalSearch", "description": "Introducing dynamic inertia weight and adaptive social weight to enhance the exploration and exploitation balance of the algorithm.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d32c78c-9a9d-4826-9eae-ed88fc89974c", "metadata": {"aucs": [0.2668854062962409, 0.2587733811675561, 0.2593215493857648, 0.27942856886162293, 0.2689084397617342, 0.25435909203388885, 0.2605037555433499, 0.27668217312850774, 0.2784000462448679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07408533590538047, 0.08990179306565604, 0.08759807760552363, 0.07746354997043525, 0.08410018388022567, 0.08893102860862578, 0.06829934405045346, 0.08178825141015134, 0.09246423377474133, 0.07154595012352638, 0.0794371293966728, 0.06376412693810185, 0.06787696455882619, 0.06375820944622046, 0.07448562272530546, 0.0729192249092796, 0.08021968142243263, 0.0724271930543815, 0.9323351711775141, 0.9270408640380838, 0.9943020046114414, 0.9277277168229017, 0.9292504439917229, 0.9339343980458417, 0.964670895666065, 0.9808636078976616, 0.9842455536362054, 0.17796356935727786, 0.14189440674259624, 0.1636388313955196, 0.1563661052215748, 0.15862518526646707, 0.16409356859800506, 0.19523755558844236, 0.17824324714151574, 0.1634100073642658, 0.22013190670458116, 0.18728020146722812, 0.2449524487909306, 0.2046377750820454, 0.17945761406466154, 0.23553720001974265, 0.1876441233957108, 0.20439994362556424, 0.18082879103490967, 0.05809859284755492, 0.06152544704205243, 0.05200840251683825, 0.01959714333472351, 0.08604336129222379, 0.09429352002035196, 0.06917252943728358, 0.10945233321860981, 0.0758072982815915, 0.07044918835394276, 0.09555300309268822, 0.07773315381387114, 0.07517860913682617, 0.0970335677851546, 0.07444097038714481, 0.08291297189140623, 0.08101851771041313, 0.08440732803687023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09305461094522982, 0.06024522919354036, 0.08604324769677751, 0.0861927269052234, 0.044084770499615344, 0.0267116452861903, 0.07611865515214211, 0.06207010012479075, 0.05825492176119873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016442171834282426, 0.015699742557829466, 0.042445086426354695, 0.01995896998077351, 0.04128393207044212, 0.03139071352788447, 0.030704634161768607, 0.039853612788949055, 0.02216900067948413, 0.2836736382926195, 0.28325859054500147, 0.28010138345747126, 0.2638534603182837, 0.2619522663186796, 0.2768344104540853, 0.2977899879543384, 0.2737685370213089, 0.27071784510929797, 0.0826461473014588, 0.09832252136540809, 0.08945606026526132, 0.08453647785751639, 0.12232280009348451, 0.0724555166369828, 0.10464501164088724, 0.08211134036658208, 0.09593379175070038, 0.1343022224139082, 0.12488432505165203, 0.13322710779851132, 0.15011495276675346, 0.15367703096891816, 0.1423930588239729, 0.1250615775547954, 0.14793385948240523, 0.16440588657382793, 0.21234944156405067, 0.24553038195364985, 0.2003751237941438, 0.21984030346036054, 0.20600561885440827, 0.21536784555969102, 0.2106270817837158, 0.2197575892048267, 0.20570746638774962, 0.15573357851627967, 0.1552487456956474, 0.13641871803888006, 0.16169758518759902, 0.15427749743964136, 0.13724263078999466, 0.155780128020383, 0.1621932129690138, 0.13458726163737122, 0.2359761131528556, 0.1986671789247194, 0.19730347585789332, 0.214555364806291, 0.1946938046819381, 0.18043273916838587, 0.1778712821293117, 0.19342680218550679, 0.19887734664833157, 0.16257530673063225, 0.17781670415033057, 0.17368578580804916, 0.17894250044214677, 0.16882549933110202, 0.16626567156934302, 0.17555658237186766, 0.17188034354955273, 0.16759178972880495, 0.28838377402219306, 0.17094795113602268, 0.1510422602447643, 0.29636043701734427, 0.1726165314018181, 0.2896262042582908, 0.11645649581965112, 0.16791662155146658, 0.14883931484081658, 0.0809919012170478, 0.19599125811888873, 0.11475448777723818, 0.17261902604004753, 0.2700120457057168, 0.1843846704470714, 0.11337065222464449, 0.2520595700857745, 0.24512124745021968, 0.19639069666342956, 0.17790255567141355, 0.1801623153603934, 0.17243604337392404, 0.17087356941568177, 0.18779647159650903, 0.19281574212791097, 0.18860922682874748, 0.19766743245214424, 0.07383310731004045, 0.06633440123977397, 0.06934068370454516, 0.0733819458024274, 0.08074045110525441, 0.0767875668158029, 0.06685540323743622, 0.06933821382479333, 0.07711251860621138]}, "mutation_prompt": null}
{"id": "c114d9e3-1696-41a3-8146-714712e7c958", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "HybridPSOLocalSearch", "description": "Introducing dynamic inertia weight and adaptive social weight to enhance the exploration and exploitation balance of the algorithm.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d32c78c-9a9d-4826-9eae-ed88fc89974c", "metadata": {"aucs": [0.2668854062962409, 0.2587733811675561, 0.2593215493857648, 0.27942856886162293, 0.2689084397617342, 0.25435909203388885, 0.2605037555433499, 0.27668217312850774, 0.2784000462448679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07408533590538047, 0.08990179306565604, 0.08759807760552363, 0.07746354997043525, 0.08410018388022567, 0.08893102860862578, 0.06829934405045346, 0.08178825141015134, 0.09246423377474133, 0.07154595012352638, 0.0794371293966728, 0.06376412693810185, 0.06787696455882619, 0.06375820944622046, 0.07448562272530546, 0.0729192249092796, 0.08021968142243263, 0.0724271930543815, 0.9323351711775141, 0.9270408640380838, 0.9943020046114414, 0.9277277168229017, 0.9292504439917229, 0.9339343980458417, 0.964670895666065, 0.9808636078976616, 0.9842455536362054, 0.17796356935727786, 0.14189440674259624, 0.1636388313955196, 0.1563661052215748, 0.15862518526646707, 0.16409356859800506, 0.19523755558844236, 0.17824324714151574, 0.1634100073642658, 0.22013190670458116, 0.18728020146722812, 0.2449524487909306, 0.2046377750820454, 0.17945761406466154, 0.23553720001974265, 0.1876441233957108, 0.20439994362556424, 0.18082879103490967, 0.05809859284755492, 0.06152544704205243, 0.05200840251683825, 0.01959714333472351, 0.08604336129222379, 0.09429352002035196, 0.06917252943728358, 0.10945233321860981, 0.0758072982815915, 0.07044918835394276, 0.09555300309268822, 0.07773315381387114, 0.07517860913682617, 0.0970335677851546, 0.07444097038714481, 0.08291297189140623, 0.08101851771041313, 0.08440732803687023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09305461094522982, 0.06024522919354036, 0.08604324769677751, 0.0861927269052234, 0.044084770499615344, 0.0267116452861903, 0.07611865515214211, 0.06207010012479075, 0.05825492176119873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016442171834282426, 0.015699742557829466, 0.042445086426354695, 0.01995896998077351, 0.04128393207044212, 0.03139071352788447, 0.030704634161768607, 0.039853612788949055, 0.02216900067948413, 0.2836736382926195, 0.28325859054500147, 0.28010138345747126, 0.2638534603182837, 0.2619522663186796, 0.2768344104540853, 0.2977899879543384, 0.2737685370213089, 0.27071784510929797, 0.0826461473014588, 0.09832252136540809, 0.08945606026526132, 0.08453647785751639, 0.12232280009348451, 0.0724555166369828, 0.10464501164088724, 0.08211134036658208, 0.09593379175070038, 0.1343022224139082, 0.12488432505165203, 0.13322710779851132, 0.15011495276675346, 0.15367703096891816, 0.1423930588239729, 0.1250615775547954, 0.14793385948240523, 0.16440588657382793, 0.21234944156405067, 0.24553038195364985, 0.2003751237941438, 0.21984030346036054, 0.20600561885440827, 0.21536784555969102, 0.2106270817837158, 0.2197575892048267, 0.20570746638774962, 0.15573357851627967, 0.1552487456956474, 0.13641871803888006, 0.16169758518759902, 0.15427749743964136, 0.13724263078999466, 0.155780128020383, 0.1621932129690138, 0.13458726163737122, 0.2359761131528556, 0.1986671789247194, 0.19730347585789332, 0.214555364806291, 0.1946938046819381, 0.18043273916838587, 0.1778712821293117, 0.19342680218550679, 0.19887734664833157, 0.16257530673063225, 0.17781670415033057, 0.17368578580804916, 0.17894250044214677, 0.16882549933110202, 0.16626567156934302, 0.17555658237186766, 0.17188034354955273, 0.16759178972880495, 0.28838377402219306, 0.17094795113602268, 0.1510422602447643, 0.29636043701734427, 0.1726165314018181, 0.2896262042582908, 0.11645649581965112, 0.16791662155146658, 0.14883931484081658, 0.0809919012170478, 0.19599125811888873, 0.11475448777723818, 0.17261902604004753, 0.2700120457057168, 0.1843846704470714, 0.11337065222464449, 0.2520595700857745, 0.24512124745021968, 0.19639069666342956, 0.17790255567141355, 0.1801623153603934, 0.17243604337392404, 0.17087356941568177, 0.18779647159650903, 0.19281574212791097, 0.18860922682874748, 0.19766743245214424, 0.07383310731004045, 0.06633440123977397, 0.06934068370454516, 0.0733819458024274, 0.08074045110525441, 0.0767875668158029, 0.06685540323743622, 0.06933821382479333, 0.07711251860621138]}, "mutation_prompt": null}
{"id": "9fde4775-b9a1-4b85-a39f-5cff97ad5190", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    population[i] = local_search(population[i])\n\n            return global_best\n\n        return optimize()", "name": "HybridPSOLocalSearch", "description": "Introducing dynamic inertia weight and adaptive social weight to enhance the exploration and exploitation balance of the algorithm.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6d32c78c-9a9d-4826-9eae-ed88fc89974c", "metadata": {"aucs": [0.2668854062962409, 0.2587733811675561, 0.2593215493857648, 0.27942856886162293, 0.2689084397617342, 0.25435909203388885, 0.2605037555433499, 0.27668217312850774, 0.2784000462448679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07408533590538047, 0.08990179306565604, 0.08759807760552363, 0.07746354997043525, 0.08410018388022567, 0.08893102860862578, 0.06829934405045346, 0.08178825141015134, 0.09246423377474133, 0.07154595012352638, 0.0794371293966728, 0.06376412693810185, 0.06787696455882619, 0.06375820944622046, 0.07448562272530546, 0.0729192249092796, 0.08021968142243263, 0.0724271930543815, 0.9323351711775141, 0.9270408640380838, 0.9943020046114414, 0.9277277168229017, 0.9292504439917229, 0.9339343980458417, 0.964670895666065, 0.9808636078976616, 0.9842455536362054, 0.17796356935727786, 0.14189440674259624, 0.1636388313955196, 0.1563661052215748, 0.15862518526646707, 0.16409356859800506, 0.19523755558844236, 0.17824324714151574, 0.1634100073642658, 0.22013190670458116, 0.18728020146722812, 0.2449524487909306, 0.2046377750820454, 0.17945761406466154, 0.23553720001974265, 0.1876441233957108, 0.20439994362556424, 0.18082879103490967, 0.05809859284755492, 0.06152544704205243, 0.05200840251683825, 0.01959714333472351, 0.08604336129222379, 0.09429352002035196, 0.06917252943728358, 0.10945233321860981, 0.0758072982815915, 0.07044918835394276, 0.09555300309268822, 0.07773315381387114, 0.07517860913682617, 0.0970335677851546, 0.07444097038714481, 0.08291297189140623, 0.08101851771041313, 0.08440732803687023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09305461094522982, 0.06024522919354036, 0.08604324769677751, 0.0861927269052234, 0.044084770499615344, 0.0267116452861903, 0.07611865515214211, 0.06207010012479075, 0.05825492176119873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016442171834282426, 0.015699742557829466, 0.042445086426354695, 0.01995896998077351, 0.04128393207044212, 0.03139071352788447, 0.030704634161768607, 0.039853612788949055, 0.02216900067948413, 0.2836736382926195, 0.28325859054500147, 0.28010138345747126, 0.2638534603182837, 0.2619522663186796, 0.2768344104540853, 0.2977899879543384, 0.2737685370213089, 0.27071784510929797, 0.0826461473014588, 0.09832252136540809, 0.08945606026526132, 0.08453647785751639, 0.12232280009348451, 0.0724555166369828, 0.10464501164088724, 0.08211134036658208, 0.09593379175070038, 0.1343022224139082, 0.12488432505165203, 0.13322710779851132, 0.15011495276675346, 0.15367703096891816, 0.1423930588239729, 0.1250615775547954, 0.14793385948240523, 0.16440588657382793, 0.21234944156405067, 0.24553038195364985, 0.2003751237941438, 0.21984030346036054, 0.20600561885440827, 0.21536784555969102, 0.2106270817837158, 0.2197575892048267, 0.20570746638774962, 0.15573357851627967, 0.1552487456956474, 0.13641871803888006, 0.16169758518759902, 0.15427749743964136, 0.13724263078999466, 0.155780128020383, 0.1621932129690138, 0.13458726163737122, 0.2359761131528556, 0.1986671789247194, 0.19730347585789332, 0.214555364806291, 0.1946938046819381, 0.18043273916838587, 0.1778712821293117, 0.19342680218550679, 0.19887734664833157, 0.16257530673063225, 0.17781670415033057, 0.17368578580804916, 0.17894250044214677, 0.16882549933110202, 0.16626567156934302, 0.17555658237186766, 0.17188034354955273, 0.16759178972880495, 0.28838377402219306, 0.17094795113602268, 0.1510422602447643, 0.29636043701734427, 0.1726165314018181, 0.2896262042582908, 0.11645649581965112, 0.16791662155146658, 0.14883931484081658, 0.0809919012170478, 0.19599125811888873, 0.11475448777723818, 0.17261902604004753, 0.2700120457057168, 0.1843846704470714, 0.11337065222464449, 0.2520595700857745, 0.24512124745021968, 0.19639069666342956, 0.17790255567141355, 0.1801623153603934, 0.17243604337392404, 0.17087356941568177, 0.18779647159650903, 0.19281574212791097, 0.18860922682874748, 0.19766743245214424, 0.07383310731004045, 0.06633440123977397, 0.06934068370454516, 0.0733819458024274, 0.08074045110525441, 0.0767875668158029, 0.06685540323743622, 0.06933821382479333, 0.07711251860621138]}, "mutation_prompt": null}
{"id": "b769c7c7-0ba2-406d-80e3-cfd80b55da36", "solution": "import numpy as np\n\nclass VNSHybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n            return global_best\n\n        return optimize()", "name": "VNSHybridPSOLocalSearch", "description": "Implementing a variable neighborhood search to enhance local exploration by diversifying the search around current solutions.", "configspace": "", "generation": 28, "fitness": 0.1616596061628528, "feedback": "The algorithm VNSHybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "6d32c78c-9a9d-4826-9eae-ed88fc89974c", "metadata": {"aucs": [0.25794600398929957, 0.2689146563047403, 0.2623039576814331, 0.2613114324867265, 0.255374028514205, 0.3015126947268051, 0.2767955930573236, 0.25960677158555623, 0.2974881528928002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035031460476142584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08215506897407909, 0.08823402404680658, 0.09530755779867539, 0.0829586428052782, 0.09162718720417284, 0.08495198263072745, 0.08651923286573437, 0.07137333928647971, 0.08364111900951265, 0.06650242771926074, 0.08000568868834979, 0.05771131868846291, 0.0784729793613782, 0.06085576561112105, 0.06435181594196382, 0.07057976535019372, 0.07761409862129698, 0.06062651363476912, 0.9477649901796072, 0.944637728527989, 0.9943020046114414, 0.9206177956373852, 0.884471086812707, 0.9206387435584211, 0.9585446954604788, 0.9894248083607423, 0.9535169343930796, 0.15401136398757043, 0.15400850447123993, 0.21048463484125068, 0.15559939051568195, 0.15519444037415653, 0.1719698609236986, 0.1561093442576259, 0.1572570506323685, 0.18096915448488482, 0.1981698773668087, 0.20167054494172476, 0.2136820837806097, 0.20059157567562302, 0.1820723878035183, 0.1803441580386489, 0.19282829960408177, 0.1997133031419649, 0.1786876532843722, 0.010699884588265873, 0.10599365797916505, 0.07950515839787187, 0.06244716593929245, 0.05703442888693988, 0.08488367978296973, 0.09296373331020802, 0.0824640560406471, 0.08815534211409681, 0.08434156901519563, 0.07661365215243332, 0.08671237520548314, 0.06728081239523287, 0.06971973751840177, 0.0990765726648658, 0.11322652723117266, 0.11069916252375855, 0.10093142000802802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07264204704992239, 0.035336916683163744, 0.048041947014321296, 0.07969512659194311, 0.0014750715314647556, 0.007199820332202789, 0.12325003290975822, 0.0711456938946411, 0.06016169830987961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02537335891915027, 0.01928157691146093, 0.03552480807541836, 0.018408372164107956, 0.01886489448501616, 0.02311078013102197, 0.02169704060112565, 0.027743709669944105, 0.02902326305894054, 0.2672801748339271, 0.2644305142591946, 0.283005885240284, 0.25929915600134845, 0.2726537324001338, 0.2923376596290098, 0.283576492728977, 0.2865666338947811, 0.2732888069674886, 0.08687419814189346, 0.08867077382161637, 0.09443987552074973, 0.08456586248858289, 0.060903193333645134, 0.079535445430155, 0.07853754014145031, 0.07831532308425926, 0.08443479733453574, 0.1268814546686171, 0.18040327226730146, 0.15641439586464145, 0.14711135251901142, 0.14012964426895191, 0.14144957839673789, 0.1264282523756428, 0.1320334745893399, 0.16376612862469464, 0.2067448090468259, 0.19927289158001826, 0.19712485939328406, 0.21967464627497257, 0.2071210933976224, 0.21844996229750113, 0.21031431774699727, 0.21053266237210078, 0.2304591452641086, 0.17156126812962358, 0.1473639167496147, 0.13090371610744445, 0.14515662576687394, 0.15973872519876586, 0.16310426521492316, 0.14772592712008048, 0.1574517535487574, 0.15946247085206855, 0.19608225189855577, 0.19542819024611136, 0.171762683433886, 0.19716313322502732, 0.21218502058808653, 0.21025360304042573, 0.18656530872042343, 0.1931601694717372, 0.21112219917689645, 0.17649413328185581, 0.1765959798780834, 0.168637161089622, 0.17240117968027957, 0.17481936174125645, 0.16767870064922719, 0.16104565348554245, 0.16932529737268998, 0.1683963683093076, 0.34455999379126767, 0.1691941224017801, 0.14993432483794344, 0.3128230560341949, 0.1878998405150466, 0.1742010870804448, 0.11669608523888042, 0.16848445491711006, 0.3487700288564225, 0.07914292603375817, 0.27526022038578046, 0.12420240771994628, 0.19213314227928002, 0.16621829915926578, 0.18639950926252935, 0.2506520211598193, 0.2804408274396557, 0.19168473623916227, 0.16596341543191906, 0.16611522706271187, 0.18150169766134627, 0.20218858024902897, 0.2064220817511382, 0.17809651349770717, 0.17774978518238072, 0.1718214888181796, 0.1643014979686941, 0.07433865625858782, 0.0759518989775414, 0.07262801551299403, 0.07375550851247248, 0.09050534715393665, 0.08468777531817762, 0.06973786584938224, 0.06535477860279171, 0.07519216855740796]}, "mutation_prompt": null}
{"id": "3a17640f-d481-486d-8a5b-5c9c008046b7", "solution": "import numpy as np\n\nclass VNSHybridPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n            return global_best\n\n        return optimize()", "name": "VNSHybridPSOLocalSearch", "description": "Implementing a variable neighborhood search to enhance local exploration by diversifying the search around current solutions.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b769c7c7-0ba2-406d-80e3-cfd80b55da36", "metadata": {"aucs": [0.25794600398929957, 0.2689146563047403, 0.2623039576814331, 0.2613114324867265, 0.255374028514205, 0.3015126947268051, 0.2767955930573236, 0.25960677158555623, 0.2974881528928002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035031460476142584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08215506897407909, 0.08823402404680658, 0.09530755779867539, 0.0829586428052782, 0.09162718720417284, 0.08495198263072745, 0.08651923286573437, 0.07137333928647971, 0.08364111900951265, 0.06650242771926074, 0.08000568868834979, 0.05771131868846291, 0.0784729793613782, 0.06085576561112105, 0.06435181594196382, 0.07057976535019372, 0.07761409862129698, 0.06062651363476912, 0.9477649901796072, 0.944637728527989, 0.9943020046114414, 0.9206177956373852, 0.884471086812707, 0.9206387435584211, 0.9585446954604788, 0.9894248083607423, 0.9535169343930796, 0.15401136398757043, 0.15400850447123993, 0.21048463484125068, 0.15559939051568195, 0.15519444037415653, 0.1719698609236986, 0.1561093442576259, 0.1572570506323685, 0.18096915448488482, 0.1981698773668087, 0.20167054494172476, 0.2136820837806097, 0.20059157567562302, 0.1820723878035183, 0.1803441580386489, 0.19282829960408177, 0.1997133031419649, 0.1786876532843722, 0.010699884588265873, 0.10599365797916505, 0.07950515839787187, 0.06244716593929245, 0.05703442888693988, 0.08488367978296973, 0.09296373331020802, 0.0824640560406471, 0.08815534211409681, 0.08434156901519563, 0.07661365215243332, 0.08671237520548314, 0.06728081239523287, 0.06971973751840177, 0.0990765726648658, 0.11322652723117266, 0.11069916252375855, 0.10093142000802802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07264204704992239, 0.035336916683163744, 0.048041947014321296, 0.07969512659194311, 0.0014750715314647556, 0.007199820332202789, 0.12325003290975822, 0.0711456938946411, 0.06016169830987961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02537335891915027, 0.01928157691146093, 0.03552480807541836, 0.018408372164107956, 0.01886489448501616, 0.02311078013102197, 0.02169704060112565, 0.027743709669944105, 0.02902326305894054, 0.2672801748339271, 0.2644305142591946, 0.283005885240284, 0.25929915600134845, 0.2726537324001338, 0.2923376596290098, 0.283576492728977, 0.2865666338947811, 0.2732888069674886, 0.08687419814189346, 0.08867077382161637, 0.09443987552074973, 0.08456586248858289, 0.060903193333645134, 0.079535445430155, 0.07853754014145031, 0.07831532308425926, 0.08443479733453574, 0.1268814546686171, 0.18040327226730146, 0.15641439586464145, 0.14711135251901142, 0.14012964426895191, 0.14144957839673789, 0.1264282523756428, 0.1320334745893399, 0.16376612862469464, 0.2067448090468259, 0.19927289158001826, 0.19712485939328406, 0.21967464627497257, 0.2071210933976224, 0.21844996229750113, 0.21031431774699727, 0.21053266237210078, 0.2304591452641086, 0.17156126812962358, 0.1473639167496147, 0.13090371610744445, 0.14515662576687394, 0.15973872519876586, 0.16310426521492316, 0.14772592712008048, 0.1574517535487574, 0.15946247085206855, 0.19608225189855577, 0.19542819024611136, 0.171762683433886, 0.19716313322502732, 0.21218502058808653, 0.21025360304042573, 0.18656530872042343, 0.1931601694717372, 0.21112219917689645, 0.17649413328185581, 0.1765959798780834, 0.168637161089622, 0.17240117968027957, 0.17481936174125645, 0.16767870064922719, 0.16104565348554245, 0.16932529737268998, 0.1683963683093076, 0.34455999379126767, 0.1691941224017801, 0.14993432483794344, 0.3128230560341949, 0.1878998405150466, 0.1742010870804448, 0.11669608523888042, 0.16848445491711006, 0.3487700288564225, 0.07914292603375817, 0.27526022038578046, 0.12420240771994628, 0.19213314227928002, 0.16621829915926578, 0.18639950926252935, 0.2506520211598193, 0.2804408274396557, 0.19168473623916227, 0.16596341543191906, 0.16611522706271187, 0.18150169766134627, 0.20218858024902897, 0.2064220817511382, 0.17809651349770717, 0.17774978518238072, 0.1718214888181796, 0.1643014979686941, 0.07433865625858782, 0.0759518989775414, 0.07262801551299403, 0.07375550851247248, 0.09050534715393665, 0.08468777531817762, 0.06973786584938224, 0.06535477860279171, 0.07519216855740796]}, "mutation_prompt": null}
{"id": "9269094d-285a-4965-ac7b-468840806a51", "solution": "import numpy as np\n\nclass HybridVNSPSOSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.initial_temperature = 10.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def simulated_annealing(current_position, temperature):\n            candidate_position = current_position + np.random.uniform(low=-0.2, high=0.2, size=self.dim)\n            return candidate_position\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n            temperature = self.initial_temperature\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n                    \n                    if np.random.rand() < np.exp((func(personal_best[i]) - func(population[i])) / temperature):\n                        population[i] = simulated_annealing(population[i], temperature)\n                \n                temperature *= self.cooling_rate\n\n            return global_best\n\n        return optimize()", "name": "HybridVNSPSOSimulatedAnnealing", "description": "Implementing a hybrid approach by incorporating simulated annealing for enhanced exploration capabilities.", "configspace": "", "generation": 30, "fitness": 0.15021026290259296, "feedback": "The algorithm HybridVNSPSOSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "b769c7c7-0ba2-406d-80e3-cfd80b55da36", "metadata": {"aucs": [0.2487187323018859, 0.258479041288891, 0.284347534772717, 0.24438343003228857, 0.24485720753813167, 0.25118991344042996, 0.24978220347806412, 0.27448541007561467, 0.2878733034835391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08016085185294963, 0.09118863966518476, 0.07907711566733377, 0.05936060419251299, 0.06758499406386531, 0.07936077251107909, 0.06695071549547449, 0.07121671015453301, 0.057652374700090325, 0.053217291971012326, 0.051423255459343786, 0.05144570669586157, 0.07310026788514135, 0.05442856981707023, 0.06302048220306955, 0.08135072595459092, 0.06473840505887052, 0.06914145740427136, 0.9275534901850409, 0.8746991852637085, 0.9906989323997925, 0.7330717205755244, 0.7775592356604182, 0.8441563630735902, 0.9854229557425743, 0.991624571325306, 0.8485136058369918, 0.1593321344906341, 0.1420399567684686, 0.13604546802618533, 0.1281155735827999, 0.1366458408457294, 0.1155626598920948, 0.14396298393342188, 0.16598854621621106, 0.14198065291839812, 0.19586865154201083, 0.15818518351394772, 0.16276989443465462, 0.18475413826170595, 0.19137672269405626, 0.18375868102404003, 0.18379617021065897, 0.2136956938761968, 0.19562132054492065, 0.0677849360289029, 0.0669953907384182, 0.03839959903582202, 0.0690519778859574, 0.09972017407026035, 0.09101051854049624, 0.0689709382259891, 0.11687872991695225, 0.07482958869273693, 0.08775674467937611, 0.052027375343718596, 0.09155082262464709, 0.09704868409447043, 0.08143851943050795, 0.06433618980815137, 0.07796902643789894, 0.12174888906227044, 0.048593506480385296, 0.001895790184108459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06222044403621296, 0.03083458971227737, 0.05539157283267937, 0.05104453598832093, 0.0005324698339298495, 0.00861443387238503, 0.07995206691097845, 0.10630294027932141, 0.06949106907337244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004141678380424674, 0.014757380864610092, 0.016141621647563942, 0.01024508232086696, 0.017901129510395908, 0.01534745331131604, 0.01239824312053972, 0.02118714592582438, 0.02421403386633969, 0.2601199977330785, 0.25370469447019794, 0.2601473704514832, 0.24257298835385044, 0.26030705106662166, 0.2756778715929632, 0.2655034615044286, 0.2618671088025939, 0.2585045258663621, 0.07685604244642963, 0.07774974746449226, 0.060650871693475494, 0.07607267414558627, 0.09091867617877303, 0.0795945415281154, 0.09031838298082717, 0.07560306672748907, 0.06717779180905858, 0.11606288634540429, 0.12571972007484, 0.13907649699189273, 0.11609260524006548, 0.1276431155656932, 0.12398411621919836, 0.10085614313305746, 0.1287253204055, 0.1234362661538222, 0.2050584236202363, 0.2078558704711826, 0.2349292165367013, 0.19572517449752524, 0.21005868075683032, 0.20800295246973566, 0.19931403472830467, 0.21767221273539528, 0.17537865354526416, 0.14430981316690505, 0.14765595554165667, 0.13873964544542083, 0.13851200363528426, 0.1462787342520887, 0.10916486355200306, 0.12945357047789186, 0.16127206696559038, 0.1383961166980202, 0.21283857707484866, 0.17139985216454823, 0.1794169379705245, 0.19499949071951062, 0.18123192228757923, 0.17885405531073317, 0.20227880670699439, 0.1638751470609957, 0.18532291648170718, 0.16264772063866928, 0.1717919112641988, 0.16839597718010968, 0.1626958172429016, 0.1721518508404295, 0.16575041578360483, 0.1650456980446552, 0.15955482800249776, 0.15989777267338778, 0.3156990319923626, 0.15502966395221252, 0.14534991951560283, 0.23230554933246894, 0.1749136317628106, 0.26571622066676004, 0.1152226249516709, 0.16636978760295895, 0.13576303779858212, 0.07850178143441522, 0.17399576617707657, 0.22848596908237984, 0.17582918254290014, 0.16374566025058324, 0.17577449182553861, 0.20665549856598842, 0.2551687195435811, 0.18188744220633102, 0.17409749139514463, 0.17949991657057396, 0.1825724774209666, 0.18082967474379108, 0.16562454229183, 0.17817325649097315, 0.16467562142858694, 0.1698571253918375, 0.1778210349197803, 0.06129538633015308, 0.06763142784200049, 0.07248847400605152, 0.08927009446111567, 0.06335018824635741, 0.06893507024225798, 0.07124195513444287, 0.06535943714003478, 0.07274706943939513]}, "mutation_prompt": null}
{"id": "e8b57098-2746-4051-a83f-ac13e351c61e", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 31, "fitness": 0.16726411745700867, "feedback": "The algorithm HybridDE_VNS_PSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "b769c7c7-0ba2-406d-80e3-cfd80b55da36", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "0050c971-d2ea-4a4c-bd3d-b7e5c8fdd5dc", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "0a50214f-ff04-4469-bd35-5b56fd4fef86", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "b4fb4305-5bf3-4b80-978d-0a60b55b0e56", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "03e9b57e-08fc-4deb-bb88-e98b9747a226", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "7f3cf1c4-7f91-48c3-a953-99d3e3417479", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "f04ad404-8f88-407f-9382-47d9f33c0529", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "5385a8ea-b127-4ff4-8cc7-2e407812f064", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "2a36040a-20f2-408a-8079-dd11d05bbc8a", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "e8626ec9-b79b-48ef-83d2-f382b4309746", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "83de45f0-78a8-4e6d-9ca5-1bc69c3b8e34", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "ec3b64d0-a107-4d73-bac0-05ea1198cec6", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "55483870-4217-420f-a747-5a3b5232c463", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "ee970ca2-87b7-4382-91b1-871c4f0b362b", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "75300273-d064-4723-bbb4-2c32c01f7344", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "1cbbeccd-aa7b-4eee-b560-7a100be44c54", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "a5a5209c-9e65-4390-918b-b643a58c10c3", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "55e343c4-c411-46ab-92bc-39746d0d07ef", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "1f787ec9-4295-4128-834a-7c9201f96b1b", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "2da4efc9-9cd2-4539-b711-7f39a40c36f9", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "d328c144-1cf5-48ab-b95a-d245021893e1", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "1e6a023d-c025-40db-82b3-0cb1cccb6670", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "67d06937-abb6-474a-b022-198ea872a26b", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "8722b4d4-5f38-4e13-8358-2cbfee957e1c", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "7d74c6ea-4c92-47e5-9816-3391f99942d0", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "31b5706b-721f-4c2c-a00a-5f54f0e654c5", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "44608960-d204-4195-a642-7dc8dfdacc37", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "f337d81b-9ca0-47ea-bfa9-86061977b558", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "b2fc5cab-088e-4670-ba00-8e4d4bc033d0", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "410568dc-6689-4b44-8ca6-0b2d9b50d927", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "4f578422-d933-4f06-abe9-dfe954dd1566", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "cd855028-4d8e-494c-9fc9-008e771b8e2a", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "a037caff-5c9b-4cd2-8968-ac66700bd6db", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "7c37d146-6338-405c-878c-8b46ca7dbd0d", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "c99cfbcc-38ff-4fdf-8932-a96b184e73cb", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "fe8db937-777e-4677-aa92-5b331b0d754c", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearch", "description": "Incorporating a hybrid of Differential Evolution (DE) for global exploration to improve solution quality.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.32735140333573054, 0.27824283967288943, 0.29678540710622736, 0.3103417727854608, 0.3461178456775367, 0.3115422118281824, 0.3131986168852243, 0.3056505652206467, 0.33488883499548106, 9.999999999998899e-05, 0.0272850628691218, 9.999999999998899e-05, 0.039582507412767365, 0.006970189566945728, 0.0018981446934105417, 9.999999999998899e-05, 9.999999999998899e-05, 0.004398826166325476, 0.09335575622127656, 0.08978252788854446, 0.06991496876185033, 0.08110155344661585, 0.08670229767855164, 0.09368041149773709, 0.07930100866366452, 0.08438451209720155, 0.0744070527288122, 0.07376550289592665, 0.06135044087491548, 0.05933362216844884, 0.09240527795789599, 0.062098717144331794, 0.06399156961287722, 0.07577723478448883, 0.06297964997466698, 0.08310960475044415, 0.9693639537907633, 0.9253517706734293, 0.9381866410559361, 0.9510642253500339, 0.9474929493411645, 0.9168109494906266, 0.9589611859876798, 0.9258437194128746, 0.9221300282825192, 0.15488198567998113, 0.13820895233089325, 0.13675643177886854, 0.1608759648037842, 0.12777402597367438, 0.1429048132208769, 0.15398064839158776, 0.15425340427787104, 0.1688220526612575, 0.196469380688288, 0.22268359689961104, 0.1754295833846471, 0.2253296487424249, 0.21572320659045208, 0.2038688153048015, 0.2136671075940335, 0.18666742008041415, 0.2857449031249478, 0.09228256353079456, 0.0895600622902879, 0.13185247218602092, 0.1106925636916607, 0.08918283242352132, 0.10249553215423746, 0.09143959701885873, 0.07546307207491154, 0.11994041088776253, 0.10270568397987878, 0.10299086974466731, 0.10359375082234235, 0.08222861456616304, 0.09387915054701912, 0.09945045858411972, 0.09474600503949915, 0.09516910074405571, 0.08192094319689947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10879501009881365, 0.09762670298798148, 0.10825419943156156, 0.056636756709153246, 0.12392505986953051, 0.022316530470089524, 0.06171533571726828, 0.06885062822251731, 0.06651539085886904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031035224349960533, 0.02925723435741112, 0.03493001118087724, 0.036815346150335104, 0.028744162646161975, 0.05017402693909956, 0.0581731859639496, 0.04186445453704124, 0.049206407233089, 0.33438097743434114, 0.3024895129319153, 0.2883063092612116, 0.28940307343783667, 0.2913559914505207, 0.30701244974563635, 0.2964297867133766, 0.30776244300140265, 0.29404276431861986, 0.07718033884072117, 0.07812492073296218, 0.07502666962180904, 0.07819581368368522, 0.07005670355895999, 0.08508906532611304, 0.07563207439344621, 0.07665533733549201, 0.07291641363400447, 0.12280769377837186, 0.1261835949405078, 0.14379685139583676, 0.12049410017997875, 0.12015937625874251, 0.14499718641466064, 0.12686979913540286, 0.14083699990443843, 0.12776758369745944, 0.2129453223892629, 0.22005416397340372, 0.20849393566361474, 0.21097108840780243, 0.21432864505299754, 0.20834742137473483, 0.19810672410100505, 0.2356236814689281, 0.2206359264755633, 0.16003808263881314, 0.17258984636784225, 0.13343580883467254, 0.14352210045544345, 0.15726741757917606, 0.15245092114733727, 0.14966452067098923, 0.15998850459332425, 0.14839428888604123, 0.18520889872473023, 0.1862916203252476, 0.20594846560729474, 0.18823010242059612, 0.1842939535009721, 0.20683640573034723, 0.18858812082107668, 0.18481674732508446, 0.21914684874880275, 0.17228970463735283, 0.16306092644995474, 0.1768973634247677, 0.1874925879283421, 0.16965631350632482, 0.16677965785675042, 0.1614992421622352, 0.1828797968596938, 0.15817693749708528, 0.16429849526785456, 0.12105844550237432, 0.15261046075759988, 0.382798103396068, 0.18427158872709826, 0.17294646094955735, 0.1321524884701425, 0.3533213578849179, 0.14840189618637412, 0.18708944211705614, 0.18851284301529603, 0.3382414747117376, 0.32071829150557596, 0.1976712167752026, 0.18828681867874897, 0.2713852272618974, 0.14956255067557045, 0.23310500894085617, 0.1711841399815699, 0.18055496038667695, 0.17449503264922495, 0.16685554107512235, 0.17385462295228138, 0.17241729097878145, 0.1724591557196432, 0.1866116383467875, 0.17591436087643142, 0.07907647997518774, 0.06618418888599986, 0.07553879522497031, 0.07192207614776835, 0.06974553621030222, 0.07120667735718511, 0.07367327517282707, 0.07013117596213392, 0.07429367376793183]}, "mutation_prompt": null}
{"id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 67, "fitness": 0.1870724600268684, "feedback": "The algorithm HybridDE_VNS_PSOLocalSearchEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "e8b57098-2746-4051-a83f-ac13e351c61e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "771f83a0-c724-4cfc-b2a7-62c35e69a18b", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "bc5668b2-7fd0-4bae-8d10-bf62a9cda506", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "b6875f01-95ec-49a8-88b0-0fa2c334ae91", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "83f5992f-e8af-4ee9-9db1-a6c067154e5a", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "4c592acc-4020-44c5-9f71-32d3b68638a6", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "0f0f59cd-dec6-4158-8ab4-09a37ab80a81", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "0125aabf-0fbd-497a-a6ff-8bb62518c6bf", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "1032bd14-753e-47e4-95a1-c65e5cfd089b", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "644af33d-26b0-48dc-9762-9e9b55b96fa0", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "de3cdbc8-a3cd-4fe3-bb3e-bb01fdeca6b0", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "ebc3cdc2-a132-42c3-a4f7-b48a5be39537", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "faef8e94-a1b0-4d30-8cc8-cadca76c2496", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "cb6a6faf-dbbe-40bd-824c-6db3ba3e4c07", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "e3bd044a-cbbe-4ace-8994-745442a0959f", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "f4663ffa-6e88-4ed9-9214-2688a704c6f9", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "4b389cc7-d131-4b4f-ac89-42df5cf18046", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "bc7b33f9-175d-44f0-a4cb-d3377c48f282", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "51d5769b-51b1-42ce-9760-d9c37149e407", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "acd4b9fc-2e91-46e7-97f6-de4c642f0ea1", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "d1b67df4-ad73-44e6-98f5-cc369652c92c", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "a9fdbea9-a54c-4224-818e-ad1a870ef3ce", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "794d38d0-25dd-4fe8-a679-34309130e224", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "7e777982-26a3-4073-a4a1-b84cf213b8f4", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "ea53cc8c-2cba-4c3f-8517-f4b120649f65", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "903a887a-d9e5-45ee-919a-79a12ba9b585", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "bd1556f6-9f40-4639-854f-10a005fa7fe3", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "4678de9f-0056-4894-b335-0822854b3b87", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "388de3a8-28b2-452c-a502-b0a33de1f5b1", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "71685ff3-21d0-4225-96b8-f1d5d3a1a060", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "d52f1384-1821-49a8-afe8-54613d7f17dc", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
{"id": "2e303d67-dcdb-4f0e-b09e-9a039878fc00", "solution": "import numpy as np\n\nclass Enhanced_HybridDE_VNS_PSOLocalSearchLevyFlight:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def levy_flight(self, current_position):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / abs(v) ** (1 / beta)\n        candidate_position = current_position + 0.01 * step  # Adjust step size for Levy flight\n        return candidate_position\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    if _ % 20 == 0:  # Include Levy flight every 20 iterations for enhanced global exploration\n                        population[i] = self.levy_flight(population[i])\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "Enhanced_HybridDE_VNS_PSOLocalSearchLevyFlight", "description": "Enhancing the exploration capability by introducing Levy flight for global exploration.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {}, "mutation_prompt": null}
{"id": "31b60b80-bc43-4a47-b688-f268881a0f44", "solution": "import numpy as np\n\nclass HybridDE_VNS_PSOLocalSearchEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2 * (5.0 - (-5.0))\n        self.initial_inertia_weight = 0.7\n        self.initial_cognitive_weight = 1.5\n        self.initial_social_weight = 1.5\n        self.local_search_radius = 0.1 * (5.0 - (-5.0))\n        self.pso_inertia_weight = 0.5\n        self.pso_cognitive_weight = 1.0\n        self.pso_social_weight = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.population_size, self.dim))\n\n        def local_search(current_position):\n            candidate_position = current_position + np.random.uniform(low=-self.local_search_radius, high=self.local_search_radius, size=self.dim)\n            return candidate_position\n\n        def variable_neighborhood_search(current_position, radius):\n            candidate_position = current_position + np.random.uniform(low=-radius, high=radius, size=self.dim)\n            return candidate_position\n\n        def differential_evolution(population, func):\n            mutation_factor = 0.7\n            crossover_rate = 0.9\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + mutation_factor * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            return population\n\n        def optimize():\n            population = initialize_population()\n            personal_best = population.copy()\n            global_best_idx = np.argmin([func(ind) for ind in population])\n            global_best = population[global_best_idx].copy()\n\n            for _ in range(self.budget):\n                inertia_weight = self.initial_inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight\n                social_weight = self.initial_social_weight / (1 + 0.1 * np.sqrt(_))  # Adaptive social weight\n                velocities = np.random.uniform(low=-self.max_velocity, high=self.max_velocity, size=(self.population_size, self.dim))\n                for i in range(self.population_size):\n                    velocities[i] = inertia_weight * velocities[i] + self.initial_cognitive_weight * np.random.rand() * (personal_best[i] - population[i]) + social_weight * np.random.rand() * (global_best - population[i])\n                    population[i] += velocities[i]\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n                    if func(population[i]) < func(personal_best[i]):\n                        personal_best[i] = population[i].copy()\n                        if func(personal_best[i]) < func(global_best):\n                            global_best = personal_best[i].copy()\n\n                    if _ % 10 == 0:  # Introduce variable neighborhood search every 10 iterations\n                        population[i] = variable_neighborhood_search(population[i], self.local_search_radius)\n\n                    if _ % 15 == 0:  # Incorporate Differential Evolution every 15 iterations for global exploration\n                        population = differential_evolution(population, func)\n\n                    # Particle Swarm Optimization\n                    p_best = personal_best[np.argmin([func(ind) for ind in personal_best])]\n                    for i in range(self.population_size):\n                        pso_velocity = self.pso_inertia_weight * velocities[i] + self.pso_cognitive_weight * np.random.rand() * (p_best - population[i]) + self.pso_social_weight * np.random.rand() * (global_best - population[i])\n                        population[i] += pso_velocity\n\n                        if func(population[i]) < func(personal_best[i]):\n                            personal_best[i] = population[i].copy()\n                            if func(personal_best[i]) < func(global_best):\n                                global_best = personal_best[i].copy()\n\n            return global_best\n\n        return optimize()", "name": "HybridDE_VNS_PSOLocalSearchEnhanced", "description": "Incorporating Particle Swarm Optimization (PSO) to enhance the global exploration capability alongside Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c2d20fc-19c8-499f-a1b5-ae3244ca8a0e", "metadata": {"aucs": [0.40504023920144827, 0.4943117904451435, 0.4166279422876096, 0.41062609323738186, 0.43927763264245745, 0.4534137546228072, 0.4325692839733576, 0.4167720134968287, 0.4218823121415235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006470987980977783, 0.01726223195433596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236937887660421, 0.08527023346241025, 0.09930566869298418, 0.06578060861541468, 0.0693989260062795, 0.11144973732651453, 0.0677903150969229, 0.09196834169509716, 0.09637313944689307, 0.07436014178930361, 0.053901519077056426, 0.06499810983716847, 0.0939592307921141, 0.07876821326177941, 0.07853339425679406, 0.0718103512533107, 0.08360619870130537, 0.06990095557463138, 0.956619193106693, 0.7650424240953024, 0.9864739932146335, 0.9414712647928848, 0.9398186596081897, 0.9030793363556419, 0.9901532720689977, 0.9662616349501938, 0.9495135600970824, 0.19931205276882868, 0.21572920294591036, 0.19557584843165454, 0.24038908169155437, 0.19593531911190587, 0.2605637500094501, 0.28337693332566094, 0.20852633751745608, 0.2572671374891059, 0.24000705565820468, 0.13745504025570277, 0.15139884771950052, 0.20688625541964212, 0.3326774821021833, 0.3543306058771266, 0.31231024174474753, 0.23266363703392, 0.24611904390547634, 0.13390819660897757, 0.12792371875231778, 0.0978993403215993, 0.1554493561803738, 0.13473488964425018, 0.09638314844925211, 0.12748070290572777, 0.13234847192471333, 0.11493347126367937, 0.1652884932865647, 9.999999999998899e-05, 0.10130427957246613, 0.21551736558654588, 0.1173657207238844, 0.1162295428750878, 0.12218769859345535, 0.15672055726218204, 0.23330317910799114, 9.999999999998899e-05, 9.999999999998899e-05, 0.014039208666979386, 9.999999999998899e-05, 0.050515475045632585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493305896814165, 0.025650794078488248, 0.04514239349581839, 0.07729696658380958, 9.999999999998899e-05, 0.012223867887764195, 0.09840641882260603, 0.05525562522052152, 0.010758398609946762, 9.999999999998899e-05, 0.0022671479145143225, 0.030953233618750353, 0.008667397293600554, 0.0011403202942079638, 9.999999999998899e-05, 0.0009088550225291314, 0.017206475044402425, 0.006854196023030279, 0.04835650758210397, 0.0902675814298427, 0.04849731281792735, 0.0558399013139228, 9.999999999998899e-05, 0.06953015267276519, 0.06761238130316616, 0.03733266120504397, 0.10841987404794506, 0.4031308942470929, 0.3736756795116333, 0.4194321285642839, 0.4010195536820824, 0.3489739959771878, 0.34728378640263946, 0.35359937729111, 0.3834793395314572, 0.3355879267104599, 0.03966510984793181, 0.09752802697830121, 0.10739486824569089, 0.10465714620847633, 0.0765285259806946, 0.10343941883946206, 0.10212924514035315, 0.09739589573487661, 0.09116758432430527, 0.13534615298314423, 0.22233202233764526, 0.18047638801734178, 0.24825965093648417, 0.1645977899621467, 0.15647794153484662, 0.18203778631031542, 0.21628771795846213, 0.29661173531221463, 0.18086969244125384, 0.24719596582119685, 0.22909225092169605, 0.2567973882752542, 0.22992898937085193, 0.24892418614026757, 0.2025751306576702, 0.2627649453907164, 0.18790299478985506, 0.2158425683463464, 0.14964217786198752, 0.14448699915265206, 0.16463028727574724, 0.20724188880552652, 0.15571794318468568, 0.16232566881523602, 0.1924492176085444, 0.08389542190004917, 0.19679891751523326, 0.20773060232409757, 0.18418695703614352, 0.18527822043315412, 0.18798361534096852, 0.19502594203740886, 0.2129604473644804, 0.17768922404804255, 0.20317793505570114, 0.17478182966715283, 0.17632905117869946, 0.18442746571455548, 0.19948118323660147, 0.19449093159982334, 0.19242585026571402, 0.1928692143498011, 0.18428810274487772, 0.1831212062788793, 0.6243646537120424, 0.12087711589714767, 0.15245847618025687, 0.1705394460243035, 0.18988104964022723, 0.11628278922822588, 0.11204307075550646, 0.16107461369121556, 0.1625685707550849, 0.10059663337184244, 0.20154459077084907, 0.29710037782929555, 0.24274324232727706, 0.20374748800862563, 0.20074814128030272, 0.10314022889991825, 0.3710479854832297, 0.23310500894085617, 0.17967138203714816, 0.17212414673188647, 0.18998422839096052, 0.18859571662969143, 0.19128660153643307, 0.17595595746612525, 0.18779361432174624, 0.1671256239876726, 0.17221027986581539, 0.06441056103628284, 0.07841331296572329, 0.06815483009833423, 0.06749641535854467, 0.08292871284183545, 0.07703004520557333, 0.07142499277711034, 0.058421414232254, 0.06520365093608216]}, "mutation_prompt": null}
