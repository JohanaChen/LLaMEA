{"id": "a0ede0cd-88e3-496c-8aed-70e83150bfa1", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # PSO initialization\n            positions = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = self.w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.19423255655221386, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3890227630995675, 0.3618453209107093, 0.4142855184356563, 0.36011830985417004, 0.4003868572571281, 0.37163487111397997, 0.35827925646680814, 0.4041257442504371, 0.418938989951709, 0.04640488481921334, 0.023958715853708012, 0.04117728910410445, 0.02585112399886713, 0.04209803625126873, 0.04919793306215847, 0.037445909520893994, 0.036960657646535444, 0.03439720017424219, 0.06506007391216373, 0.13297250638128988, 0.1028361333010871, 0.07314060100690145, 0.06824124738583048, 0.10797465726777355, 0.10475442618582531, 0.09814496536591433, 0.08871744298382966, 0.0957809395278344, 0.10020301179060132, 0.078214266672337, 0.11862951671934552, 0.08337631897652098, 0.08114350761085587, 0.08417354122225695, 0.10243324570197287, 0.10196202399281973, 0.9880195357713693, 0.992437214658042, 0.9928770191621036, 0.9933740377178804, 0.991485824955879, 0.9939380010972282, 0.9900396083288663, 0.9938178189777924, 0.9939314578615287, 0.23303329611729484, 0.24088601827984968, 0.2583848884109369, 0.24082496961696598, 0.23868628837046557, 0.21884037512478904, 0.2514274045637942, 0.2467162060055279, 0.251683529661031, 0.23826123255561993, 0.28610190635383304, 0.3187166862384687, 0.25986463882480004, 0.2665627740216234, 0.21141280223078673, 0.29953033768516313, 0.29318873293082404, 0.1474964354845424, 0.08683782099967452, 0.1473183488826738, 0.15042655476780842, 0.1425358224302158, 0.1383156776019121, 0.13496085092349186, 0.15488912212830896, 0.1470518438438927, 0.1395333292216122, 0.13888553360305944, 0.11076823277139791, 0.1254164115248021, 0.15063325360201374, 0.14116860872610582, 0.1381733796767789, 0.147149051336402, 9.999999999998899e-05, 0.06358879715662735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017340174771324546, 0.017879510951652633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014126026894614507, 0.057526483492301494, 0.04119988674074926, 0.08087245328644532, 0.06948486539143106, 0.001577584255097464, 0.047669737469001494, 0.0660310085330813, 0.0396205128453766, 0.07576632114926829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003848216702022955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07248117127982223, 0.0672917708370585, 0.07794711202917137, 0.0455546532938792, 0.06715279829366028, 0.03793141652816834, 0.07451423779194699, 0.08129723429421465, 0.08154979079113656, 0.35963780573410054, 0.3692732887973812, 0.4073836208883238, 0.37700461404673624, 0.3897569083613235, 0.40554033335135875, 0.36050016585804445, 0.3635939434609844, 0.3720344510258514, 0.0750469398720548, 0.11172563058104679, 0.08884680168288617, 0.11480122780974089, 0.08595179929903496, 0.09950192208197628, 0.05649395762857112, 0.07637070850809724, 0.08618162993267431, 0.16922433817399474, 0.24680335359950278, 0.2066315806706902, 0.30921665975618173, 0.24714563422397406, 0.10233030334336601, 0.2599739074712434, 0.17367150953486998, 0.19527316414342344, 0.13910185555111054, 0.23417660315020083, 0.2719666646066897, 0.19025187088135886, 0.19910294238160087, 0.2749266561420448, 0.2074491584761502, 0.24585024087813168, 0.15998726361731375, 0.18393411147033967, 0.173773380341242, 0.09888180603742236, 0.2169358615667002, 0.1692018890907968, 0.10920477307655041, 0.1775727131251037, 0.2168160090593204, 0.07826316118959897, 0.21396852905732788, 0.1926456243353296, 0.18362267480075078, 0.18741372968936965, 0.16402890376307955, 0.20947721733852054, 0.1897375924089073, 0.2027363488878654, 0.23167768923995535, 0.18750827465898645, 0.19454289449474926, 0.19594534675115471, 0.19044065656919118, 0.1968812776629596, 0.1971457379004261, 0.20638250662581192, 0.19580144720587622, 0.199093093263085, 0.5788620723604143, 0.12682204697476318, 0.15375766638538735, 0.17824450608599984, 0.19917239568658607, 0.6144280251261534, 0.10004307792401268, 0.1702283691906329, 0.15242153409703585, 0.08307249607679079, 0.16857135104084064, 0.4568556847489106, 0.40418920635686706, 0.1690137141869944, 0.20699883641004846, 0.1052905121256299, 0.21221446466848082, 0.15605024541197532, 0.20757926372476987, 0.1942436939297001, 0.17855424014955368, 0.18102074144247082, 0.18868448516925862, 0.17959176252589093, 0.20407215926286015, 0.17802364073801402, 0.17682435943333252, 0.08648232262212352, 0.05793469244263305, 0.0750130024793858, 0.07399342618905447, 0.0763845963787495, 0.1023385782366093, 0.07819452417431949, 0.06248748720104491, 0.08696787358692526]}, "mutation_prompt": null}
{"id": "a3a7cf2b-f98e-4179-8c3e-b5e850e955b8", "solution": "import numpy as np\n\nclass HybridPSOSAWithDynamicInertia:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # PSO initialization\n            positions = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n            w_min = 0.4\n            w_max = 0.9\n\n            for _ in range(self.max_iter):\n                w = w_max - (_ / self.max_iter) * (w_max - w_min)\n                for i in range(self.num_particles):\n                    # PSO update\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAWithDynamicInertia", "description": "Implement dynamic inertia weight in the Particle Swarm Optimization (PSO) component to adaptively adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 1, "fitness": 0.18424859082068737, "feedback": "The algorithm HybridPSOSAWithDynamicInertia got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "a0ede0cd-88e3-496c-8aed-70e83150bfa1", "metadata": {"aucs": [0.37547497616616454, 0.36421203822787684, 0.3739590258992317, 0.4022375080720819, 0.3772966080428043, 0.38633462747116043, 0.35185030677419304, 0.3738880446462578, 0.3640898358776915, 0.031188204479815407, 0.015425116990828047, 0.04212147150307932, 0.05218614848880976, 0.018120271327222826, 0.016259585478465177, 0.020086304406625066, 0.006205185785387979, 0.01941153361134862, 0.07646592903261495, 0.09247323961137421, 0.06594071554252512, 0.10022350146428849, 0.06806630587849505, 0.09873302300789566, 0.10022051644291419, 0.06266323439633148, 0.08170919108680841, 0.09711428538805411, 0.09386817099720701, 0.02550235676516399, 0.08676861701479066, 0.096549552524828, 0.08141691169264353, 0.07154587169248483, 0.09440673816500988, 0.05477987103418458, 0.9880105039795369, 0.9891049751445657, 0.9928810051308392, 0.9933858119004968, 0.9914537657579551, 0.9923093928710982, 0.9950166856486752, 0.9931662184048169, 0.9860529228748934, 0.25825072606811805, 0.23083122245802556, 0.21161455732103773, 0.24366002058446778, 0.20989695307159517, 0.23016028352588536, 0.23115818464995197, 0.21717722364442804, 0.23195836045030804, 0.2426034237342718, 0.283432120922249, 0.27478131637194025, 0.22113737344208306, 0.24401635163722535, 0.1984930967063926, 0.2810643525458887, 0.23074657132558396, 0.11599628659303285, 0.10856909992160291, 0.1391613022882815, 0.1371184961855002, 0.10751401439411679, 0.14730267569237854, 0.10265805554573093, 0.12893679341198916, 0.16700486112439483, 0.08769527436904079, 0.12066354803368995, 0.10333357959098122, 0.12667939547385754, 0.10755357400186005, 0.09657105335002947, 0.12490950778927068, 0.12729378021129656, 0.07752228510673453, 0.08056866328941159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010605052214013644, 9.999999999998899e-05, 0.0025659776437473303, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013784606558016055, 0.05410643115147673, 0.017615522601695188, 0.05169504191590035, 0.037071342036333, 9.999999999998899e-05, 0.016508798582490658, 0.07722665977896159, 0.010381726145233694, 0.02641522384081596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08062883307417046, 0.08073197267060017, 0.043481193487782566, 0.0420506390699642, 0.05462245759341655, 0.037868198360088035, 0.09033337332920366, 0.058766911585321546, 0.06261059924899182, 0.3550216755510448, 0.33187891776015854, 0.34912941284663535, 0.3666055900066957, 0.35680985062412407, 0.3622854804155661, 0.3470004694338822, 0.34506887616379145, 0.3400328857269902, 0.08754348641647558, 0.05608138395997597, 0.07250204608900879, 0.10797417641465434, 0.08950512507983677, 0.11646385631052292, 0.09865264619066039, 0.0888275993422154, 0.09292044919960973, 0.17131823173074268, 0.1275015637177579, 0.16180308535635157, 0.2537030610655088, 0.2558052023512184, 0.13699718358969426, 0.2454161999405311, 0.14131488258024183, 0.21805022104194116, 0.1285668036294415, 0.18891128829644965, 0.1939152042156176, 0.1759662701223671, 0.1955404918980601, 0.24827976141854702, 0.17748418542048217, 0.27162028544050654, 0.14815955194904673, 0.1882502358442143, 0.18545110769766437, 0.1394290260053609, 0.19143398376784837, 0.1703490196496159, 0.19984577759824362, 0.1750504832178842, 0.19770687936746478, 0.09555733855581838, 0.21201637061742917, 0.17883907840083335, 0.18154777020824642, 0.17546032568980263, 0.1491500036680805, 0.18860027474450503, 0.21997446485468963, 0.18513955971528018, 0.19933076354816048, 0.17993411776985035, 0.20576761759377982, 0.2164521541283272, 0.18028089720794593, 0.17995172230259526, 0.19204372109346413, 0.1858287719833931, 0.19669580061953895, 0.22021613445363952, 0.5132844832750214, 0.12600822037061898, 0.1524913138058026, 0.13033477884560796, 0.1956297085176394, 0.15609823523529942, 0.12448948859854625, 0.16967261970992298, 0.19338455314745517, 0.333842235806881, 0.1665518328784954, 0.12499492576925708, 0.4226066689846625, 0.16140455794875364, 0.20547088524872792, 0.20517172960052632, 0.4449026455989945, 0.10452669768254874, 0.1840535876302246, 0.18442431000327186, 0.190432088513101, 0.17222563655509315, 0.1833824340226653, 0.204198458601746, 0.189308435604015, 0.18652565379377894, 0.18935004335803296, 0.08442117508864899, 0.08223732907233605, 0.08538977983296958, 0.0737218341077196, 0.0879272407983932, 0.08590529025392823, 0.07136995493250631, 0.06779276147584401, 0.08272831448121176]}, "mutation_prompt": null}
{"id": "96ceead0-64bf-4511-8339-8fca61f3622f", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.w_min = 0.4\n        self.w_max = 0.9\n\n    def __call__(self, func):\n        def adaptive_pso_sa_optimize():\n            # PSO initialization\n            positions = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                w = self.w_max - ((_ + 1) / self.max_iter) * (self.w_max - self.w_min)\n\n                for i in range(self.num_particles):\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return adaptive_pso_sa_optimize()", "name": "AdaptiveHybridPSOSA", "description": "Improved HybridPSOSA algorithm with adaptive inertia weight for enhanced convergence speed and accuracy.", "configspace": "", "generation": 2, "fitness": 0.18296799443966613, "feedback": "The algorithm AdaptiveHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "a0ede0cd-88e3-496c-8aed-70e83150bfa1", "metadata": {"aucs": [0.34361079286202245, 0.3541314800777853, 0.3667533827237792, 0.3685762245712403, 0.37237295384844626, 0.3812868524685801, 0.3504927472318191, 0.3538404203591098, 0.36771378206017225, 0.02881721734566267, 0.07331708798069614, 0.034587680745302385, 0.03814754194313941, 0.017445614746069094, 0.035386277538575595, 0.02894583961321262, 0.02896014015030346, 0.01703225723862034, 0.07067777047288637, 0.08842631460159589, 0.06571664284443379, 0.1257411676436091, 0.06145901973167056, 0.09922101889213286, 0.09755030260515363, 0.05053789174597301, 0.09195363082871877, 0.04904098860363171, 0.08943725128781099, 0.09145589873875504, 0.07275938213679545, 0.07569755783231213, 0.0955558315771694, 0.03927182343605473, 0.05738091257320632, 0.08126878576624696, 0.9880105182845453, 0.9891049751445657, 0.9928809823554, 0.9933857324312044, 0.9914539790697668, 0.9923095088224527, 0.9950166302275999, 0.9931661759925849, 0.986052488345763, 0.21986426134192427, 0.2203372817947613, 0.22799735906123397, 0.2119729934458986, 0.21511922356167668, 0.23000390341858246, 0.21969476085957662, 0.22214338719314086, 0.24429883321036794, 0.24948382414331516, 0.1846726917739664, 0.28633718386331897, 0.22668172097885064, 0.18764446201403173, 0.2173919917934688, 0.16921765295343305, 0.2959447215956733, 0.17010258549136759, 0.0782359984633777, 0.08949488281015838, 0.1256979234944141, 0.0977615292228331, 0.14590573965202802, 0.08768457853910983, 0.1191513573301245, 0.12622262326475198, 0.06506539669608158, 0.11274745953755139, 0.1039607295630629, 0.09828028033829617, 0.11201811185414556, 0.09376162007029343, 0.10950831417536921, 0.13167791485346902, 0.08152253878808058, 0.10597733003714971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011172265368475376, 9.999999999998899e-05, 0.002429863550289846, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002655472495236566, 0.04981748262348229, 0.018396982819644636, 0.02656627929786315, 0.09947111574419687, 9.999999999998899e-05, 0.0006799033690638723, 0.06523908430735503, 0.012070592250324585, 0.059096931896548965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08494998165263257, 0.07812957330218107, 0.03586674085457564, 0.07240621591054008, 0.06945896479733105, 0.04627809635984981, 0.08187014907426637, 0.07755171359842439, 0.062145185730743235, 0.3458512018244181, 0.35988345555496815, 0.36025620039161355, 0.36375725003999027, 0.358583596023764, 0.3560298005549152, 0.3454986856839698, 0.3504109197780867, 0.34800322090252933, 0.09021331573686453, 0.08460008832878829, 0.09248896821898689, 0.10404784244140841, 0.08643732786511371, 0.08829057180593503, 0.12242402505434202, 0.09816457864297501, 0.0910399230093597, 0.20841430730158927, 0.12342187046177899, 0.1668094213986413, 0.23633842057570942, 0.23987230741567167, 0.140518508585609, 0.2464041285044981, 0.13565656740709509, 0.20788185684465466, 0.1281898697260171, 0.25831831753645096, 0.22000607744705813, 0.1915787407350562, 0.14740962095662435, 0.2549721658591767, 0.23862197281805453, 0.2696583306742929, 0.15921652598860092, 0.17691553432194274, 0.08957590346751043, 0.13636490358369213, 0.18820273655804676, 0.1694236266000354, 0.15562155762366014, 0.16853274614438962, 0.21130594172119743, 0.20467510075244877, 0.2008298102602859, 0.1964251634980937, 0.17377948160656975, 0.19285696547819475, 0.17037294135375958, 0.18414112392476478, 0.2119596438445598, 0.17116756364122154, 0.2062115826549772, 0.19874459855392868, 0.18945317017543717, 0.21646200652295167, 0.20081381599185755, 0.1988571441257152, 0.19368672732488945, 0.19375988524596655, 0.1853181100319118, 0.19971437249364277, 0.4780528276578664, 0.15834998933192823, 0.15263460583085164, 0.13072086464706334, 0.19792419476122936, 0.1300707036289417, 0.12404587795133415, 0.17007308453474201, 0.1970669026354137, 0.3251298812612896, 0.16606442176269287, 0.12375361409634311, 0.4014671747874945, 0.16270927753715791, 0.20704073713372273, 0.20476666772192853, 0.3595034370733139, 0.10448018659457847, 0.17954612002823378, 0.1948739234566168, 0.2004678344483356, 0.1742700440410232, 0.19684913400665527, 0.19289149922803472, 0.17698713993888282, 0.17990340255952053, 0.1940980165390701, 0.07690119711332555, 0.07475805016412229, 0.08678453153210408, 0.050414878980257205, 0.08025235544894438, 0.09759615565754287, 0.08303515939438588, 0.08286776371400606, 0.085350730565525]}, "mutation_prompt": null}
{"id": "111889f1-f90a-415b-905f-3e0d169c9868", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # PSO initialization\n            positions = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = self.w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0ede0cd-88e3-496c-8aed-70e83150bfa1", "metadata": {"aucs": [0.3890227630995675, 0.3618453209107093, 0.4142855184356563, 0.36011830985417004, 0.4003868572571281, 0.37163487111397997, 0.35827925646680814, 0.4041257442504371, 0.418938989951709, 0.04640488481921334, 0.023958715853708012, 0.04117728910410445, 0.02585112399886713, 0.04209803625126873, 0.04919793306215847, 0.037445909520893994, 0.036960657646535444, 0.03439720017424219, 0.06506007391216373, 0.13297250638128988, 0.1028361333010871, 0.07314060100690145, 0.06824124738583048, 0.10797465726777355, 0.10475442618582531, 0.09814496536591433, 0.08871744298382966, 0.0957809395278344, 0.10020301179060132, 0.078214266672337, 0.11862951671934552, 0.08337631897652098, 0.08114350761085587, 0.08417354122225695, 0.10243324570197287, 0.10196202399281973, 0.9880195357713693, 0.992437214658042, 0.9928770191621036, 0.9933740377178804, 0.991485824955879, 0.9939380010972282, 0.9900396083288663, 0.9938178189777924, 0.9939314578615287, 0.23303329611729484, 0.24088601827984968, 0.2583848884109369, 0.24082496961696598, 0.23868628837046557, 0.21884037512478904, 0.2514274045637942, 0.2467162060055279, 0.251683529661031, 0.23826123255561993, 0.28610190635383304, 0.3187166862384687, 0.25986463882480004, 0.2665627740216234, 0.21141280223078673, 0.29953033768516313, 0.29318873293082404, 0.1474964354845424, 0.08683782099967452, 0.1473183488826738, 0.15042655476780842, 0.1425358224302158, 0.1383156776019121, 0.13496085092349186, 0.15488912212830896, 0.1470518438438927, 0.1395333292216122, 0.13888553360305944, 0.11076823277139791, 0.1254164115248021, 0.15063325360201374, 0.14116860872610582, 0.1381733796767789, 0.147149051336402, 9.999999999998899e-05, 0.06358879715662735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017340174771324546, 0.017879510951652633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014126026894614507, 0.057526483492301494, 0.04119988674074926, 0.08087245328644532, 0.06948486539143106, 0.001577584255097464, 0.047669737469001494, 0.0660310085330813, 0.0396205128453766, 0.07576632114926829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003848216702022955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07248117127982223, 0.0672917708370585, 0.07794711202917137, 0.0455546532938792, 0.06715279829366028, 0.03793141652816834, 0.07451423779194699, 0.08129723429421465, 0.08154979079113656, 0.35963780573410054, 0.3692732887973812, 0.4073836208883238, 0.37700461404673624, 0.3897569083613235, 0.40554033335135875, 0.36050016585804445, 0.3635939434609844, 0.3720344510258514, 0.0750469398720548, 0.11172563058104679, 0.08884680168288617, 0.11480122780974089, 0.08595179929903496, 0.09950192208197628, 0.05649395762857112, 0.07637070850809724, 0.08618162993267431, 0.16922433817399474, 0.24680335359950278, 0.2066315806706902, 0.30921665975618173, 0.24714563422397406, 0.10233030334336601, 0.2599739074712434, 0.17367150953486998, 0.19527316414342344, 0.13910185555111054, 0.23417660315020083, 0.2719666646066897, 0.19025187088135886, 0.19910294238160087, 0.2749266561420448, 0.2074491584761502, 0.24585024087813168, 0.15998726361731375, 0.18393411147033967, 0.173773380341242, 0.09888180603742236, 0.2169358615667002, 0.1692018890907968, 0.10920477307655041, 0.1775727131251037, 0.2168160090593204, 0.07826316118959897, 0.21396852905732788, 0.1926456243353296, 0.18362267480075078, 0.18741372968936965, 0.16402890376307955, 0.20947721733852054, 0.1897375924089073, 0.2027363488878654, 0.23167768923995535, 0.18750827465898645, 0.19454289449474926, 0.19594534675115471, 0.19044065656919118, 0.1968812776629596, 0.1971457379004261, 0.20638250662581192, 0.19580144720587622, 0.199093093263085, 0.5788620723604143, 0.12682204697476318, 0.15375766638538735, 0.17824450608599984, 0.19917239568658607, 0.6144280251261534, 0.10004307792401268, 0.1702283691906329, 0.15242153409703585, 0.08307249607679079, 0.16857135104084064, 0.4568556847489106, 0.40418920635686706, 0.1690137141869944, 0.20699883641004846, 0.1052905121256299, 0.21221446466848082, 0.15605024541197532, 0.20757926372476987, 0.1942436939297001, 0.17855424014955368, 0.18102074144247082, 0.18868448516925862, 0.17959176252589093, 0.20407215926286015, 0.17802364073801402, 0.17682435943333252, 0.08648232262212352, 0.05793469244263305, 0.0750130024793858, 0.07399342618905447, 0.0763845963787495, 0.1023385782366093, 0.07819452417431949, 0.06248748720104491, 0.08696787358692526]}, "mutation_prompt": null}
{"id": "f7cd3a39-fbf2-4607-a489-85985a36cbd6", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.initial_w = self.w\n\n    def __call__(self, func):\n        def adaptive_pso_sa_optimize():\n            # Initialize PSO parameters\n            positions = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                # Adaptive inertia weight update\n                self.w = self.initial_w + 0.4 * (_ / self.max_iter)\n\n                for i in range(self.num_particles):\n                    # PSO update\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = self.w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return adaptive_pso_sa_optimize()", "name": "AdaptiveHybridPSOSA", "description": "Improved algorithm by dynamically adapting the inertia weight w in PSO based on the convergence rate of the best solution.", "configspace": "", "generation": 4, "fitness": 0.18381687153644985, "feedback": "The algorithm AdaptiveHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "a0ede0cd-88e3-496c-8aed-70e83150bfa1", "metadata": {"aucs": [0.35673341471831155, 0.33844786002745975, 0.3898957570387802, 0.36210824304882383, 0.3740150669390886, 0.37129276239140185, 0.3731275361388825, 0.3198460691753988, 0.342674318647484, 0.02931466399327709, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023464637660486343, 0.04274986466853936, 0.015238830826759808, 0.010328435557149573, 0.016889086800619624, 0.025457113217131844, 0.06786983366652533, 0.08470464965431534, 0.0659469364512899, 0.06221978522245375, 0.06165109085558074, 0.09124274840245417, 0.0874324964669444, 0.11514556863791237, 0.08012882131576482, 0.10420335778095036, 0.08700794509503795, 0.08310373572370067, 0.10162264503290663, 0.0828280578208167, 0.06995372460207605, 0.07514522978194094, 0.06625070151319834, 0.08188097775020908, 0.9880194928898848, 0.992437214658042, 0.9928770335236279, 0.9933741111992173, 0.991485786813967, 0.9939380029598662, 0.9900396318463031, 0.9938179680882073, 0.9939318344748356, 0.19926556704847131, 0.20294276652120946, 0.17566217304243947, 0.19543403854839436, 0.19459045174619893, 0.21890152969481214, 0.2029009391084946, 0.2042501343290566, 0.17303824448895389, 0.2635327400264348, 0.20723438246901404, 0.24067571638873597, 0.24973200267816942, 0.2672620359094623, 0.21158517244661146, 0.22782967806267518, 0.24882494618418183, 0.2600805866668595, 0.07482099734035419, 0.07649750992478999, 0.14103315027580465, 0.12439901377021712, 0.13857722693071917, 0.13536226361483727, 0.11958789574475615, 0.11439658558156829, 0.13409183769901922, 0.11057273640043352, 0.10098971253443856, 0.12157493157509347, 0.11684312437928124, 0.12476066228385008, 0.127680940249024, 0.13187774370577787, 9.999999999998899e-05, 0.08876008946024228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004450514198346189, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04259939015351211, 0.020447854959093403, 0.06665620269703942, 0.05838157177176495, 0.008191900449912137, 0.017505855257628156, 0.05728741397809467, 0.05344101751396668, 0.04728126731770588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05795126358093661, 0.07118608567401385, 0.049036955708312235, 0.05193956119295906, 0.06424325704372513, 0.056107540830346636, 0.06800301822537003, 0.05480665357874437, 0.08114238035874899, 0.3685233355852565, 0.32472901821341715, 0.34306777227506935, 0.4365329700878475, 0.34269552952389937, 0.40853550855737664, 0.35479838278390186, 0.3339793273910876, 0.3733580490691042, 0.07757450608422001, 0.06272356453729411, 0.07006834495579484, 0.11909491304059683, 0.086935628381835, 0.08326166804623258, 0.056678816968642964, 0.09810023011038793, 0.0694856499563592, 0.16315647441264136, 0.20642109004902753, 0.21125959736433353, 0.2122369844637041, 0.23016331353597186, 0.10493499352399172, 0.22952244959113288, 0.17252110279877542, 0.2151595617643125, 0.24650153094660898, 0.2310389553297102, 0.2758450827755301, 0.1705676297797034, 0.19167765489660804, 0.24744722008968412, 0.22487914149562827, 0.27636165877731755, 0.15582559314394273, 0.1730218627369421, 0.18385581991749278, 0.10379794186395663, 0.16578033459614794, 0.16910183233636034, 0.10385780521093324, 0.18487167887666378, 0.1831437348115572, 0.08002676032767087, 0.22324856946111138, 0.20634375504991453, 0.19596345668626625, 0.20120920639421203, 0.19486731027927384, 0.18227499224440058, 0.20524874242724167, 0.18920993189918134, 0.19384874391793527, 0.17325176342957982, 0.18017812804933198, 0.18695165428012783, 0.19564864499045287, 0.17164907227911042, 0.1874054522550609, 0.1750261973878252, 0.17965244830653848, 0.17046984078189287, 0.538060444978981, 0.1682686256601903, 0.1532577255466533, 0.177942225871222, 0.1980120400756259, 0.525508147009319, 0.09999476633578308, 0.170198736407421, 0.15197164338788516, 0.09859424069357281, 0.16880530573656238, 0.3763243154789324, 0.48449967556323414, 0.16909312320532377, 0.20797018221417107, 0.13113129864943673, 0.21148768248692873, 0.1540905130751442, 0.18184096619360668, 0.18257009567900617, 0.1838731613458453, 0.1913578906850043, 0.17732672386415582, 0.18528733481984272, 0.18230641797613178, 0.17693557327146026, 0.17786786610063698, 0.07620328890245487, 0.08512443871248798, 0.08728136859513413, 0.07857257058203737, 0.07637688777349139, 0.07196604497561587, 0.0789219608909425, 0.07781132363516063, 0.0871984312753018]}, "mutation_prompt": null}
{"id": "fa967289-58e9-44bc-bf9f-c8395b4c314a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # PSO initialization\n            positions = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Introducing a dynamic inertia weight in PSO for better exploration and exploitation balance.", "configspace": "", "generation": 5, "fitness": 0.2042083081457033, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "a0ede0cd-88e3-496c-8aed-70e83150bfa1", "metadata": {"aucs": [0.42604591716576956, 0.429269410830881, 0.3973908156158945, 0.4541078411473468, 0.43466443096423446, 0.45366250854269674, 0.44068262435754135, 0.42989807777685385, 0.48067478799725105, 0.07748824966000845, 0.0449284741842525, 0.07851103365325651, 0.06295306504000364, 0.04054743366870861, 0.0645612811876759, 0.03857743461798946, 0.01887374187293822, 0.03856436458326318, 0.09427692281689126, 0.12255569245848363, 0.09511188107454305, 0.11776272812789179, 0.06708831082409394, 0.10288698707032562, 0.1184586310268525, 0.08831755660823115, 0.07258554049864574, 0.08740844678340587, 0.08955518318246503, 0.10834970472403516, 0.09694060723010012, 0.09200919830803156, 0.09436834720257303, 0.06629817974234242, 0.09923510543836545, 0.0963209426717021, 0.9925311128672486, 0.992437214658042, 0.9918144443135929, 0.9915206113078461, 0.9865458657576449, 0.9917858649507092, 0.9900312615577485, 0.9933608296355934, 0.983588502531798, 0.29941758020400655, 0.2926587690323784, 0.3076529704076203, 0.32976134749701336, 0.29650559338875215, 0.29451203911983015, 0.3142421741438207, 0.28832058071530686, 0.2838765569694591, 0.31165793745662207, 0.27435235371443467, 0.244970563840878, 0.2180275986564738, 0.21461372116148725, 0.279290000507861, 0.21839442609805826, 0.3180186632824784, 0.13332332848163675, 0.12593038075132157, 0.16633170990748536, 0.09332808612325805, 0.123527048568699, 0.18247267224672425, 0.1513961149201959, 0.16114128815452955, 0.16135037084289872, 0.19572849655140667, 0.15036334096774628, 0.10860613164682831, 0.15770345555617826, 0.1823457100056587, 0.13702088115256816, 0.165045135478607, 0.1293551131472046, 0.09931313312528256, 0.10048172668618349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0069112547703258365, 0.008577322924919972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04584809893095276, 0.04564427187378928, 0.03963961555835527, 0.079591353425018, 0.07165926990483518, 0.0072457530010530125, 0.03437358835065474, 0.13182835626379674, 0.1014201224890734, 0.08526601132222567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09008823526010679, 0.06488502671784502, 0.10290926260918964, 0.05876039770238517, 0.08958257160416638, 0.07843839989503154, 0.11260392744454584, 0.07850869476668232, 0.0742529947466466, 0.41998384682668244, 0.402675574912584, 0.394166721265536, 0.395735317664891, 0.39620002835294343, 0.40807487119853336, 0.42623566561777915, 0.4145712861938615, 0.3767752568276638, 0.10341667129900145, 0.12998277200949593, 0.09013367256554083, 0.13284680180352593, 0.09434781696914218, 0.07961432559116188, 0.10358577561240068, 0.06566696444812203, 0.06295516213664831, 0.25923203300587194, 0.18016963884016746, 0.20189908389363287, 0.26657672578351566, 0.27305687483753094, 0.15305380199213137, 0.26078580117066563, 0.22476698123407568, 0.21247763909678752, 0.2812002615174972, 0.2662885268364018, 0.2902227152939645, 0.194984575817018, 0.19592177395296817, 0.23298736898738315, 0.2707348988285613, 0.29147055659797694, 0.1421872725825455, 0.1950054287987798, 0.2157438257154196, 0.16249900513347115, 0.19450833115051114, 0.1795015939884511, 0.18248864621725924, 0.234534045927705, 0.23061025558213932, 0.1177105707557814, 0.199069167777289, 0.21942341894135287, 0.18144041762741348, 0.21593913238925266, 0.1794802031847803, 0.20190051254782626, 0.20552424675091174, 0.1823513223465577, 0.20097175600609296, 0.25076942292447724, 0.2204371691189313, 0.23245639951642172, 0.1933226951148299, 0.1974033235706406, 0.1807561484578526, 0.2866331834255418, 0.1904132636485577, 0.23859906167642675, 0.16875912105524526, 0.12713928473656633, 0.1548673630944184, 0.17010045820312503, 0.20080908278209253, 0.11867920560410272, 0.10007597857795114, 0.17051746966250247, 0.15385573402039843, 0.0832100840139125, 0.21221101906333883, 0.07653861878128954, 0.5346582090680967, 0.16932072585585978, 0.2127143281672953, 0.1125540743995942, 0.6600146651490344, 0.10541626298933948, 0.18299857144031573, 0.1907793657729021, 0.1825330345145375, 0.17692599077197357, 0.1802921304697469, 0.1956914430891672, 0.1777995336019782, 0.22120087009522127, 0.19443341272283055, 0.07523918274954644, 0.05910661762797775, 0.09621487778158566, 0.07472203428350765, 0.0880651214024043, 0.09723217970945697, 0.09962840529847594, 0.05588933335317037, 0.08920446339580501]}, "mutation_prompt": null}
{"id": "6674012e-164e-41fb-955e-f82bbe997cb4", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # PSO initialization\n            positions = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # Improved PSO update with chaotic maps\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    \n                    # Chaotic maps for updating velocities\n                    chaotic_map = lambda x: 3.9 * x * (1 - x)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i]) + np.array([chaotic_map(v) for v in velocities[i]])\n                    \n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Enhancing exploration by incorporating chaotic maps in the velocity update of PSO.", "configspace": "", "generation": 6, "fitness": 0.05759715734219162, "feedback": "The algorithm ImprovedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "fa967289-58e9-44bc-bf9f-c8395b4c314a", "metadata": {"aucs": [0.10781002070406243, 0.10082870157732071, 0.11473106811694489, 0.1582357965199631, 0.1183561413950669, 0.12166447802085312, 0.11860636298030236, 0.12225427614114537, 0.11779665796029604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020689101537084698, 0.03485300434151073, 0.03421526485972659, 0.012449849799719082, 0.023992501903317143, 0.030102588673269204, 0.025973222148218178, 0.01976428185629686, 0.015088671231135553, 0.0068428507780591286, 9.999999999998899e-05, 0.01694562796257526, 0.03253535627175208, 0.004084108770891048, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005763675216486908, 9.999999999998899e-05, 0.08413235351280235, 0.11065075780240097, 0.07583450512208079, 0.13070707770817847, 0.10026544026882134, 0.1593124360299717, 0.24865973872090485, 0.314846003979559, 0.24286999638333562, 0.01230085044097673, 0.018471696485410027, 0.02524973365957084, 0.06626025517647527, 0.004537803968858722, 0.0606018324112676, 9.999999999998899e-05, 0.03854646613141799, 0.005341705817562992, 0.10841334946065939, 0.04619890960444539, 0.04095243414181571, 0.06014888326437373, 0.06469395357966878, 0.1422213392747953, 0.04746367325846135, 0.07058969388765368, 0.023150747188515508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010930844105317972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022394167931106823, 0.18107303792496, 0.1437928814575551, 0.15724094156774804, 0.17959311252867138, 0.11584949828576063, 0.1663782363022248, 0.15949414789681648, 0.12003042735125824, 0.157220021327784, 0.00947991065164766, 0.020452943422415215, 0.010313354588113555, 0.024202259353605093, 9.999999999998899e-05, 0.040711933828606384, 0.03623697793685554, 0.006052419830803957, 0.0267656688986897, 0.08182998070467495, 0.11156711620431015, 0.07287952225692984, 0.1560863602572805, 0.10852972522114013, 0.07307527315942375, 0.12373511315901398, 0.09153120716633223, 0.12430712601689697, 0.11190704335563584, 0.12030545951863347, 0.10359778603806002, 0.13228100734716208, 0.11341804710754755, 0.15605427447910936, 0.13245518364026032, 0.17390629629158283, 0.09890415886154169, 0.09990243010848299, 0.057841425437588634, 0.04646917621515967, 0.07576109877487758, 0.08335866902474176, 0.07407305054524604, 0.10832971032127392, 0.09386031173166853, 0.034573241697105184, 0.16430764702093126, 0.0957689214232672, 0.1358098400360812, 0.10289055837941885, 0.11283306501698775, 0.10659672565385936, 0.14061041138138297, 0.10275652384055589, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036637493441041835, 9.999999999998899e-05, 0.00282463271880129, 9.999999999998899e-05, 0.06786862343159006, 0.11409794970895493, 0.10623842629815283, 0.08694793046734683, 0.14004421873003248, 0.09156639384533083, 0.08028541469473072, 0.10440326298936342, 0.08939245521345907, 0.05789730525188441, 0.06533509616680999, 0.025938292803085794, 0.06448901345260438, 0.0687479758057773, 0.062291864806967134, 0.07245770339951174, 0.03674624103465107, 0.08914175649589706, 0.17958872567099826, 0.18756483091851228, 0.19275186892462304, 0.18762417764941064, 0.1698378216724159, 0.17545780050229842, 0.18444913134850804, 0.18977746752634017, 0.17780225328849641, 0.028805186588317544, 0.021031428959773835, 0.031393493129599714, 0.027015293023570086, 0.023814322261561216, 0.025734358498306076, 0.02484716232063433, 0.01777688591638993, 0.057613665427286964]}, "mutation_prompt": null}
{"id": "01145935-5fe3-4b82-ad02-32f583edf706", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 7, "fitness": 0.21149782848742518, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "fa967289-58e9-44bc-bf9f-c8395b4c314a", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "ca49039a-7fee-426b-bb14-32ea8365e578", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "ab05214a-c61e-4383-8e51-85f03cf5a9e7", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "63aa581c-10f8-46d8-a3dd-c649589af93c", "solution": "class AdaptiveHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = int(20 + 0.05 * budget)  # Adaptive population size\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.mutation_rate = 0.05  # Mutation rate for global exploration\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    if np.random.rand() < self.mutation_rate:\n                        positions[i] = np.random.uniform(-5.0, 5.0, size=self.dim)\n                        pbest_values[i] = func(positions[i])\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "AdaptiveHybridPSOSA", "description": "Enhancing hybrid PSO with adaptive population size and mutation for improved global exploration.", "configspace": "", "generation": 10, "fitness": 0.1686312040804514, "feedback": "The algorithm AdaptiveHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.27265702577603623, 0.2864466112491002, 0.27982166010436316, 0.28007558901730767, 0.2939956477588215, 0.2726080891669711, 0.2595849085135483, 0.2759107308599983, 0.32508349454375773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027613538326332288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08659502034866529, 0.05655496553534234, 0.08074110148461389, 0.07474492280714307, 0.07492679006393077, 0.09461830971600249, 0.07044650557343535, 0.07872391793072642, 0.06876860196513135, 0.07991377230436703, 0.0699286588999306, 0.09843994740201711, 0.0885774501576605, 0.07186152351107589, 0.10132382922694616, 0.0701813466756217, 0.06594952884634786, 0.07140236104695852, 0.8843473671380435, 0.8957012854350209, 0.9017091401617946, 0.9045017687435938, 0.9012077511838744, 0.909737379035401, 0.8957882798456989, 0.8731594688689199, 0.8941316523011452, 0.15355620723798313, 0.13361432027538123, 0.14917330883349567, 0.14407548814379245, 0.1444700976933564, 0.1539130981018043, 0.12823053420399178, 0.14202577945250106, 0.13690026626474738, 0.20122282476902642, 0.20971507362968045, 0.20586321596091295, 0.2298078070509677, 0.17512793870486898, 0.23667076933891995, 0.2233150950852395, 0.22150530108010913, 0.2025615102515561, 0.10875598539864517, 0.06601876675043317, 0.08414956358332804, 0.08635579755921463, 0.07305561003208183, 0.07488946268249652, 0.08600178537114267, 0.09039697267883551, 0.07278091420804844, 0.14216848591884046, 0.12083595276177617, 0.1323915491250398, 0.1279771866282957, 0.12318330822927548, 0.1435165219942679, 0.14080879226596021, 0.14744322512718666, 0.12167170636402247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006599047438176631, 9.999999999998899e-05, 9.999999999998899e-05, 0.06942450756689755, 0.052523722704184705, 0.07491445221100568, 0.08274169126618469, 0.07789378880703302, 0.1221027636985329, 0.04971859191707806, 0.10020228973410517, 0.051103885656456405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01900536777310735, 0.016669612124872946, 0.029504145019290773, 0.005913419263884001, 0.06756575193056946, 0.02089835673667495, 0.03779686609327659, 0.032486941249457946, 0.030392393913385995, 0.2571054596683211, 0.270655759374404, 0.2619559503971466, 0.28960857401239226, 0.32057855734039076, 0.2975006383006883, 0.3162698637631425, 0.28658129103202723, 0.3140798448185468, 0.07125564204075596, 0.07623197259387493, 0.06393437233691002, 0.07779447433557929, 0.06075822261433439, 0.06322830529442691, 0.07053161105300132, 0.08014942415141546, 0.06693622895316842, 0.1696684032329323, 0.1387550585555335, 0.18506398588689332, 0.1423484367734067, 0.20168682482380795, 0.1370634508329477, 0.19030325372574275, 0.12479858923195519, 0.15160335919784518, 0.21972818009742856, 0.21904694525736612, 0.2273851715729719, 0.2340216168136532, 0.23935224825380297, 0.22084303960865304, 0.20824307914500972, 0.19259019369272667, 0.2074338657246183, 0.15400096818478048, 0.1517752185965855, 0.147495473587816, 0.1569234390195523, 0.168329397651778, 0.1874427174138774, 0.13295527142606445, 0.1471889954036103, 0.14899903601981657, 0.19459347898404467, 0.26672701627554374, 0.22682273672560083, 0.2318766922133455, 0.2127186101704832, 0.21458550163692502, 0.2227860165878054, 0.2029236488456555, 0.23434149188943365, 0.1716117576075894, 0.16296568566518077, 0.15846907413503797, 0.1608743897371787, 0.15592829681708487, 0.15400516429225353, 0.18562647925829, 0.19312820370517025, 0.17950538856455645, 0.20141645826316623, 0.17526586061661686, 0.17356620605102524, 0.33577785163964025, 0.3538240772191068, 0.33552641798617877, 0.14420241945178536, 0.14654024347091, 0.18364462192921516, 0.3336936360316889, 0.34129483683667994, 0.37933735049292294, 0.1302969774763293, 0.1545776062513058, 0.3042409692766811, 0.15849508504893506, 0.3861929902231803, 0.14848256087716527, 0.17481588494834488, 0.195858523257177, 0.17669578877542047, 0.20066091627929172, 0.1930044187485408, 0.19412203943247108, 0.19393148071177124, 0.1784959542422384, 0.1822809109741721, 0.07508527331580239, 0.07045974485401663, 0.057045126330406815, 0.07518951655811379, 0.07339358188501532, 0.06969931488056103, 0.09120660007823767, 0.06807800673676556, 0.06636102591669946]}, "mutation_prompt": null}
{"id": "0ee0a7ef-34cc-4e11-90b2-ed072f175b27", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "5962d647-c26c-4642-9128-6997e32ae3f7", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "9f8f710c-23c1-49c5-8e4b-aa8c1dcb4e8c", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "49d26bc0-82a3-4fab-9912-4171b6256ce8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "f2e37474-dbab-4963-af68-9ce273c31aad", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Multi-Start Hill Climbing (5% change)\n                    num_hill_climbs = 5\n                    for _ in range(num_hill_climbs):\n                        candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                        candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                        candidate_value = func(candidate_position)\n\n                        if candidate_value < pbest_values[i]:\n                            pbest_positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                        if candidate_value < gbest_value:\n                            gbest_position = candidate_position\n                            gbest_value = candidate_value\n                        else:\n                            delta = candidate_value - pbest_values[i]\n                            if np.exp(-delta / T) > np.random.rand():\n                                positions[i] = candidate_position\n                                pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Combining Particle Swarm Optimization (PSO) with a Multi-Start Hill Climbing strategy for enhanced local search exploration.", "configspace": "", "generation": 15, "fitness": 0.19871936044182745, "feedback": "The algorithm ImprovedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.37831976655916333, 0.388369931543073, 0.3481417165775773, 0.3618343439474663, 0.36849859191496703, 0.35981050166796946, 0.365426243014771, 0.3636806328397122, 0.358337584354393, 0.04522840948292872, 0.04236689669645077, 0.11453826334883543, 0.07377635844416475, 0.05147943879543604, 0.03754126242730904, 0.02240522026443237, 0.016719269244203305, 0.03718804533308939, 0.08129200241789936, 0.11620300394076932, 0.08252837209579589, 0.06912375646942148, 0.07777118601265598, 0.05746437629585688, 0.1016205839627311, 0.05763390533126511, 0.07763300095030967, 0.0838409593405326, 0.0874520450899432, 0.09961164456880944, 0.0845263783088187, 0.0966876928540793, 0.0910004701028525, 0.10055415761499631, 0.08866111727648696, 0.1056869020350738, 0.9624703838408891, 0.9597515242622552, 0.9768601928066408, 0.9409249259636513, 0.968928357586716, 0.9765655191035307, 0.9668276633673109, 0.9516917813990807, 0.9662871002076086, 0.24213756319832624, 0.24640568955766118, 0.22595538457961983, 0.23905130827561805, 0.24779458941749943, 0.250041436939737, 0.23994211473836613, 0.23372009018025475, 0.2566460315622191, 0.23318832527284117, 0.21772374366485125, 0.16925383560581353, 0.3279698116383005, 0.20147656527492697, 0.24648648275229168, 0.32692550713095403, 0.3277414167787551, 0.22775077150445444, 0.11013346307259875, 0.1532161042965412, 0.12146379602248703, 0.1175798170239426, 0.1072310144565245, 0.11292300322330484, 0.14636061622240837, 0.14810262052972034, 0.1495602984519424, 0.13823789936153896, 0.160247160802669, 0.17072465986721364, 0.18716041074020273, 0.11965718325910124, 0.14964047033968475, 0.15948688211604622, 0.15809349220490643, 0.1454513889760628, 9.999999999998899e-05, 0.00043038754512958466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04497084989083755, 0.03184974036620858, 9.999999999998899e-05, 0.15389996798202688, 0.027748377188781204, 0.05755568195260563, 0.10519994124036369, 0.08514542848669049, 0.1360186058165166, 0.07726972424351419, 0.0501940359565306, 0.0333576487893672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06054133098876069, 0.06795615563428747, 0.029242719068195977, 0.06622241289721897, 0.09678846748969083, 0.04229046941386294, 0.08126926805950274, 0.067765650250874, 0.05551119187541975, 0.35497642671710605, 0.3337845155549387, 0.3393359513313732, 0.35566893545641787, 0.34207427439183724, 0.34765392293580055, 0.35581109647883424, 0.38940786658596727, 0.349114039642337, 0.042421841997421494, 0.08772865554033105, 0.08900613308267824, 0.09004774764620793, 0.09383266661493617, 0.07260650230175891, 0.09828845986514712, 0.07613444677391545, 0.06481095721711494, 0.21164347118251614, 0.15955741613586638, 0.13852292440376845, 0.22592395792147346, 0.2325177809010801, 0.16287955477017435, 0.19971897200865618, 0.17133761214133847, 0.20239785940596677, 0.25473167869379787, 0.22514823227015524, 0.27379602509759193, 0.26903552537441744, 0.2625937378182974, 0.2656405786054815, 0.25627574539789855, 0.2558975491284694, 0.2527260629661968, 0.18477549282894423, 0.19212026578535424, 0.09007068741384594, 0.21278250082832018, 0.18205985581660056, 0.20046343248297016, 0.1549158705810516, 0.20976424917580305, 0.1690297929783543, 0.22757801045922577, 0.1986014010994892, 0.2460464861398265, 0.1883019408219413, 0.19458023856099171, 0.2635246529769585, 0.2310601693686264, 0.21921059668395337, 0.24531372736920765, 0.1971131323600941, 0.19892628099369059, 0.18023194602804926, 0.1792799645948806, 0.1785370066907057, 0.18994317847396713, 0.1956115257580554, 0.19477851418956083, 0.18990714882893522, 0.55158345810984, 0.1820029371237729, 0.16550419476165623, 0.10827671220015422, 0.6041830172685573, 0.14953650323243384, 0.17001074474092515, 0.14095389507761524, 0.09389392365573368, 0.49630228049115344, 0.4776686895933153, 0.46703411551987806, 0.16508986357483102, 0.16629306703741864, 0.09355529571253718, 0.21000234200895418, 0.4704431723883906, 0.125833851113051, 0.18297919871504387, 0.19601499943212808, 0.22562187292660862, 0.17599644274872184, 0.17801223619861706, 0.18447216688520962, 0.1791803058495841, 0.175060641113312, 0.19062534955656385, 0.09782635452186428, 0.11472533965488851, 0.07142641572251562, 0.06882850951495789, 0.11899815713210793, 0.08425158146264711, 0.08672612539626046, 0.08865326837040721, 0.09676714913870599]}, "mutation_prompt": null}
{"id": "8746168d-8031-48a6-a54f-98c15e7322bd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.mutation_rate = 0.1 # Added adaptive mutation rate\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n                        elif np.random.rand() < self.mutation_rate: # Adaptive mutation\n                            positions[i] = np.clip(positions[i] + np.random.normal(0, 0.5, size=self.dim), -5.0, 5.0)\n                            pbest_values[i] = func(positions[i])\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhancing PSO and SA synergy with adaptive mutation for better exploration and exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.20809975656067567, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.4407745596701258, 0.4105051959321504, 0.43136801587209583, 0.4210002235996766, 0.40476613766235037, 0.43072622218924816, 0.43779150022784175, 0.41826456543123625, 0.057596249990820025, 0.05097576518595037, 0.05810426929349488, 0.05007983036296915, 0.05159297844459776, 0.026079980215465204, 0.04041580439477199, 0.008842420900682546, 0.04283233033047218, 0.09138054111250327, 0.08953399097192738, 0.08588598328720365, 0.0517349687367068, 0.0915471816692448, 0.11803028022027229, 0.13009955337603862, 0.09832028964318851, 0.09116729657045686, 0.12012037975602563, 0.11876930278092046, 0.08987732775100266, 0.10264311200326115, 0.12030930106081583, 0.09892643447090321, 0.08829449193337624, 0.10545792426641187, 0.10519941173729241, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.26157436265148504, 0.26927414034496777, 0.2820538818679249, 0.2559798093609319, 0.29227620900637363, 0.26854538614311385, 0.2619971711351081, 0.2626385610122698, 0.29405163431778303, 0.3610732228468, 0.24350288185493896, 0.3143154216699423, 0.2941378561536361, 0.33921193694839913, 0.28021620227907373, 0.33785116312451613, 0.22278179161703804, 0.2216771601093699, 0.15164890897843142, 0.11029110720854374, 0.1523919920864073, 0.1271991271539702, 0.12890558349509063, 0.16750937091059148, 0.16696670650208323, 0.11056057183401136, 0.15807374234803884, 0.17583745358113922, 0.17193341739392942, 0.18297508809189955, 0.16771133418501416, 0.15640393168345323, 0.15148053733744893, 0.17896464929123435, 0.16868147578878234, 0.16682641784384689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027868016097575832, 0.060980023816846196, 9.999999999998899e-05, 0.06815186990858657, 0.06143859780640981, 0.04995583542767801, 0.036979548600088896, 0.10341645484543482, 0.08243371019146473, 0.03550786818453666, 0.0463235983174185, 0.07727100136878418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046910383928528754, 0.06317555895280624, 0.030427706106141872, 0.10575319568321351, 0.06885210194326996, 0.10267357201467531, 0.07864915129340277, 0.07162173070447464, 0.09168587031552966, 0.3903110670559613, 0.4017028418211148, 0.39584257289443425, 0.40299200524260714, 0.38841534597559846, 0.3969916540489651, 0.3878187786846521, 0.41358140285480327, 0.4085875797428503, 0.1395442662026246, 0.08484535993069098, 0.08684277372190174, 0.11667346078768204, 0.0744537178527922, 0.10207567045776411, 0.07915919476280942, 0.08207414801343749, 0.0705526997177447, 0.2727883416980392, 0.16344570558865978, 0.22867365329091116, 0.22256501760595826, 0.15968127511574715, 0.24144057413353848, 0.20507302444184117, 0.26339271456311086, 0.18743370121900294, 0.27072943882217315, 0.14876600418771413, 0.28749713886444084, 0.2738850237137114, 0.21460382334870098, 0.278122819507575, 0.21643129061784794, 0.2984570044529712, 0.2474790301625197, 0.19084304639482008, 0.19185252643075723, 0.23894208251710192, 0.20225804429603844, 0.23007990933772005, 0.22259422021381325, 0.1880268431298232, 0.1642907799437846, 0.23675084980670758, 0.1992336413713458, 0.25097855923096835, 0.22591740201625243, 0.23722117847440993, 0.21183774647565845, 0.20872275837377752, 0.2254260471388322, 0.2668169010874123, 0.20229902632390884, 0.2068247043169933, 0.17444597953034957, 0.17094009239621122, 0.2104876821963455, 0.18330197929939696, 0.23342383392652988, 0.191181177291741, 0.19555752373717727, 0.21308547021187774, 0.18876512585472294, 0.188708232692272, 0.13096216748586542, 0.49919385767653834, 0.1411104427652503, 0.1704978237629815, 0.10058981278253998, 0.20050522137822357, 0.1724962081986423, 0.557132753783212, 0.08333959768003918, 0.5241099505125343, 0.15684419817560846, 0.16897859384979363, 0.16927176126558008, 0.21374792333970316, 0.16881252736040298, 0.21243808886164073, 0.1877216854847138, 0.19282244759487166, 0.17767505948711948, 0.20219550718773016, 0.18557307925133149, 0.17995326356338281, 0.22821650437423846, 0.18180956581021135, 0.20094775725631253, 0.09055442410021719, 0.0977163110196485, 0.07120953915091599, 0.09862577477532486, 0.07925309365825595, 0.08291497746354193, 0.13069639145328693, 0.08822710520210475, 0.09675196646989714]}, "mutation_prompt": null}
{"id": "ff9340c6-3eb9-4e52-a54a-7e96d89c2e42", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSA", "description": "Enhancing Particle Initialization with Latin Hypercube Sampling for Improved Exploration", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.4179705304898005, 0.43034798029390764, 0.4334684018172943, 0.4248298400272199, 0.4155744150517585, 0.4028271434687454, 0.43072622218924816, 0.43779150022784175, 0.40218547361913104, 0.06682101369545257, 0.09661386214511314, 0.054758795238741054, 0.043003338863429996, 0.0398101198983386, 0.037380182535662554, 0.08317918041300576, 0.07509819435337117, 0.033479260898114815, 0.09718143427509529, 0.10426250826920658, 0.12202424525070799, 0.04067383160185434, 0.10541157506280763, 0.09869119061499587, 0.14997547301144365, 0.10406397997086314, 0.06313754279441786, 0.11416234700789174, 0.10801592760466683, 0.10229318396938236, 0.10282241612866361, 0.09703053426003638, 0.10094891459989463, 0.09932274782919626, 0.11565073542074422, 0.097335867956581, 0.990958911781903, 0.9906044273195281, 0.9801844688362288, 0.9919673302978338, 0.9860551269663813, 0.9905914207551855, 0.9845630168578353, 0.9875011834205117, 0.9843023083634802, 0.2698126236243493, 0.29672915033466163, 0.2652994199255646, 0.2850263982683827, 0.28628484605173554, 0.30034532796306435, 0.30846767529484265, 0.2683991904753259, 0.29709691262497995, 0.34811417411779055, 0.3315325589624617, 0.2289604826653563, 0.31719628769875985, 0.3622227028728373, 0.3512509411921544, 0.26151327106342737, 0.33208217678728125, 0.23836745535205406, 0.14796583773796212, 0.13724132177936077, 0.15804011370830262, 0.12460301488095649, 0.15629142976410926, 0.15516477933051376, 0.15584815435876187, 0.17028834764003242, 0.15966830765980755, 0.1647476746990616, 0.19986110029951443, 0.16371789237852863, 0.17738637498351795, 0.13173213512979198, 0.16855725874321925, 0.19205184734897296, 0.17817176871752782, 0.16817886033261797, 0.011729811003033719, 9.999999999998899e-05, 0.026806292101256624, 9.999999999998899e-05, 0.08547392349668859, 9.999999999998899e-05, 0.09510005501350938, 0.007806035417776358, 0.0737052428538465, 0.07557893727552523, 0.06974154251706399, 0.05173517250483295, 0.11766159439889634, 0.10123398806125783, 0.07576918937283139, 0.029780002183810383, 0.056158523349225664, 0.02111177462728031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791114640926168, 0.037809565174452886, 0.10093975677337164, 0.08040357400061471, 0.08192946852630989, 0.11005151292326976, 0.11371242539201099, 0.05060389204812821, 0.08150286588377842, 0.41629022764724954, 0.4254516458177696, 0.3973166834220049, 0.4331829902951153, 0.3921108962733636, 0.40958806413058724, 0.42426071121940523, 0.4053616253012886, 0.4085875797428503, 0.08757304626701956, 0.1088788035217918, 0.05690373791576442, 0.09633486005372127, 0.057149042112975446, 0.11645209556450842, 0.09872644036582734, 0.06113131050646259, 0.07608430087433549, 0.21493210500204585, 0.2292428189240252, 0.2179190765307174, 0.24924973353369773, 0.18373496380913468, 0.26806050203999987, 0.17823516064200118, 0.17931198739416376, 0.19471090550900783, 0.1955604915340854, 0.2937622968445167, 0.2979373489005491, 0.28398413069019923, 0.2224149907260079, 0.2752981422386852, 0.21212447423199354, 0.28783257306207777, 0.2612143396887219, 0.2015652912838034, 0.23117289879345515, 0.22935316226099767, 0.19295783701090008, 0.22269139592560816, 0.2665665185354087, 0.22505994972864662, 0.1837000785600107, 0.18329692872595638, 0.2186695263758328, 0.23861907253855585, 0.2162040258113277, 0.20702417719095634, 0.2011238134402229, 0.21349657661441357, 0.22153720653522357, 0.22527326807841408, 0.21712715667362148, 0.19521042618924678, 0.19073892841295448, 0.1895362163856681, 0.22557561206187315, 0.17654230192393827, 0.20490227047537268, 0.21277800052649343, 0.2476605771566367, 0.1824056573225591, 0.1884369523604682, 0.18919307545086395, 0.1306134114272982, 0.3844064448319293, 0.21430438786559813, 0.17046151250184827, 0.08020194176226636, 0.14003929477212929, 0.17305901375788113, 0.548786009441385, 0.12777410158022218, 0.460842668397322, 0.1564641695753326, 0.16920648292847795, 0.1692172264446561, 0.21356456230397125, 0.16859577087998623, 0.21171813830244424, 0.1868936160533966, 0.1911653538283139, 0.18101432699558917, 0.18313667639461484, 0.19235181669822188, 0.18408043385979567, 0.17923831560086023, 0.1843262021729799, 0.17600730985118174, 0.08768138328324626, 0.08330681521835759, 0.06257995012305417, 0.08249886746529611, 0.04847812482231584, 0.08333326816057507, 0.10012909532994996, 0.09723858583398193, 0.09621445860712197]}, "mutation_prompt": null}
{"id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 18, "fitness": 0.4167180875761157, "feedback": "The algorithm HybridPSOSAImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.34.", "error": "", "parent_id": "01145935-5fe3-4b82-ad02-32f583edf706", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "e872baaf-c992-44f4-bf76-8c9540f0d895", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "74b6c012-6f4c-4334-aaef-834a964bf562", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "947ed0ce-a79e-4c02-a471-51340fc8fc80", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "97302a24-a6d4-433a-99ed-56b8613f9646", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "23c12e8b-d4a8-4fa4-8bef-81e00deda806", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "6d096953-41ae-43a8-8144-888cbc7d15d4", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "f8bb5190-8ca5-4717-8bb1-de781bc7003d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "0c34e7e0-705c-4bb5-8a37-db47cc5a6edd", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "64070fa7-bf89-43e4-b8c7-52cf873c5829", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass DynamicMemoryPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n            memory = np.zeros((self.num_particles, self.dim))\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                    # Dynamic memory update\n                    if res.fun < np.min(memory):\n                        memory[i] = res.x\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "DynamicMemoryPSOSAImproved", "description": "Enhance the exploitation capability by incorporating a dynamic memory update mechanism to adapt particle behavior during optimization.", "configspace": "", "generation": 27, "fitness": 0.4167180875761157, "feedback": "The algorithm DynamicMemoryPSOSAImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.34.", "error": "", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "515fc151-2312-4614-aa12-11f880dc655f", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImprovedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Levy flight mutation\n                    levy_flight_step = 0.1 * np.random.standard_cauchy(self.dim)\n                    positions[i] = np.clip(positions[i] + levy_flight_step, -5.0, 5.0)\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImprovedRefined", "description": "Enhance the exploration capability by introducing a dynamic mutation strategy based on Levy flights for diversification.", "configspace": "", "generation": 28, "fitness": 0.4155483435298599, "feedback": "The algorithm HybridPSOSAImprovedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.34.", "error": "", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.9556674389324016, 0.9473596911319773, 0.955863837176399, 0.9683840272724593, 0.9317820904971735, 0.9478021590960825, 0.9494340451427381, 0.9718796014014602, 0.9623125153754697, 0.8746418745633657, 0.8206766523772354, 0.8714466885660296, 0.8377036475958399, 0.4642977533673165, 0.5235858839851719, 0.8502982252743132, 0.22679554229144439, 0.8337790776302749, 0.1588984201092022, 0.03444778003329174, 0.06392780101157236, 0.029385691525481206, 0.035019825846280606, 0.011873219948507208, 0.020791164339983292, 0.033612003783227595, 0.07356513361514283, 0.13580103773803476, 0.10001029060812594, 0.09009670263194858, 0.08254397282681258, 0.042744329082793464, 0.07747323929153904, 0.04042854967849019, 0.018070996198826794, 0.015397060473004265, 0.9924453361353929, 0.9920184788426859, 0.9936171251006185, 0.9892627522998895, 0.9756831169065794, 0.9385753610412082, 0.9736854567215123, 0.9224484130355678, 0.896522020419807, 0.4613135841470084, 0.3429645324426388, 0.41133350105959554, 0.26511149565922865, 0.2883981704564551, 0.3448631333331298, 0.11736486527676493, 0.33669439067457774, 0.20950064032517646, 0.12045231354494934, 0.09805417325595533, 0.10862287228059908, 0.07840971608214953, 0.12022198302427056, 0.07668274311479673, 0.09679268812824815, 0.09133971367377558, 0.10780336336716922, 0.8990006476512953, 0.9206303724502058, 0.8490812585552776, 0.900529442280076, 0.9052929411982247, 0.8893611520689817, 0.7423870340671914, 0.9337083760835708, 0.8770876565716602, 0.9644784500224609, 0.9432471683611031, 0.9408988654289272, 0.9495055545630251, 0.9124109665859986, 0.8943964819132084, 0.9370402039841276, 0.9476221173177285, 0.9549917888167092, 0.34143529166308595, 0.7750898285852857, 0.5785456548534883, 0.3997088177745656, 0.7827943974777725, 0.6522847817363919, 0.5801465144847147, 0.8541700829981063, 0.741915779199839, 0.2706850790702451, 0.16883511078491886, 0.24363074123133588, 0.3316304307193285, 0.40188217391685344, 0.1599657173886384, 0.31870440723332727, 0.235199099493681, 0.3348622626440073, 0.41849820339028243, 0.5295326399827511, 0.36950126585640575, 0.6276000417386601, 0.8285955112930126, 0.7254421985588226, 0.17129459444186923, 0.19011509552788908, 0.13280624175174138, 0.48993015553937624, 0.429783511966199, 0.2863428590838636, 0.5914714013624576, 0.5863360133492431, 0.5104524570249114, 0.42227193387152095, 0.621278061077028, 0.6336704046281258, 0.9212887637847678, 0.8674166985675159, 0.9411125192721133, 0.961717409754829, 0.955579813200434, 0.9327490647054667, 0.9103157474624066, 0.959834761676884, 0.9503581491175587, 0.05548640619744505, 0.07854010649665655, 0.07661208739028857, 0.03538532965312802, 0.03589991522089209, 0.034383435162575915, 0.018409620947437033, 0.03496385335071861, 0.011385397535680353, 0.14392136294716218, 0.13611588881424463, 0.21339430888493105, 0.1319273601855444, 0.1327589325648274, 0.23815982166762317, 0.15414976632807775, 0.1414208255157977, 0.17119189146081537, 0.14830082904596598, 0.12305927950512519, 0.13194636765443557, 0.15873147115157316, 0.1684715764966882, 0.15760837128701366, 0.1494652096191088, 0.14508195398399726, 0.14150233679622504, 0.08641699262064662, 0.07264673999221394, 0.08390783933062207, 0.11666339182165919, 0.112696356734724, 0.10204320157035984, 0.105782873402957, 0.11236168866066709, 0.10274163338698905, 0.32738889100235635, 0.31438866211555383, 0.24266170039378676, 0.19583625916549652, 0.2330951864391675, 0.3306537764420048, 0.2965596652689435, 0.32598696319476084, 0.26991157901749074, 0.24006065830729462, 0.2098533327474208, 0.3205216861627499, 0.1977357154653432, 0.22247525899163867, 0.21882089094520685, 0.20188339080478612, 0.20664120580475231, 0.20787759922663296, 0.1879298202699956, 0.18890127115889677, 0.20226771116074582, 0.7314063807714727, 0.15630747993854188, 0.7473670634704174, 0.1720728147379621, 0.14327085988102095, 0.1559758792094984, 0.9628198645020574, 0.9781886394200378, 0.969903020408214, 0.6413322105473671, 0.4579523628664228, 0.16411686341719212, 0.6481489027395498, 0.16898164380271996, 0.29375293242521716, 0.23802697120394856, 0.4498358928440327, 0.23575089458788023, 0.31734305859010814, 0.281329482366959, 0.25682094970124836, 0.277546020452371, 0.27613949765154777, 0.2783932784900832, 0.06910330476483972, 0.08719448696510101, 0.07656219842774226, 0.05880072965497418, 0.07249678483485422, 0.04835387760404242, 0.09180210640603981, 0.09730501309351713, 0.1426230112722584]}, "mutation_prompt": null}
{"id": "bb71db4f-cc04-4dc0-a57b-446769dd8f22", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Particle Initialization with Latin Hypercube Sampling\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    # PSO update with dynamic inertia weight\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    # Simulated Annealing\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    # Local search using Nelder-Mead algorithm\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImproved", "description": "Integrate a local search strategy using Nelder-Mead algorithm for enhanced exploitation capability.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "9fd1b8be-136e-4e0e-b3ae-a614d2b6e4a5", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSOSAImprovedDynamicPop:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # Dynamic Population Adjustment\n            self.num_particles = min(50, int(self.budget / 500))\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "HybridPSOSAImprovedDynamicPop", "description": "Enhance solution with dynamic population adjustment to adapt to problem landscape changes during optimization.", "configspace": "", "generation": 30, "fitness": 0.4167180875761157, "feedback": "The algorithm HybridPSOSAImprovedDynamicPop got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.34.", "error": "", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.066537168805058, 0.0764974162040899, 0.08233215872525457, 0.03949102349095446, 0.010750497416991855, 0.013874468061202627, 0.04145959887349859, 0.026053021440428203, 0.024497062245710355, 0.06088081429042835, 0.11823467104040264, 0.10826540400995599, 0.06004361275626924, 0.06771979025002417, 0.06532189536715705, 0.03951790463239413, 0.05218741509398117, 0.015769759882608536, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.09978839560822084, 0.12035973870383299, 0.12430673368357803, 0.08445005351052626, 0.10297960669364725, 0.07611631731119739, 0.1050307509930295, 0.09897484393849032, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.10870677034693121, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.007166386259092716, 0.06311031070233453, 0.12415250455840343, 0.0065667358285521615, 0.0067044317074093085, 0.017999486018465682, 0.02335005660602074, 0.026789060396512854, 0.05907254808533269, 0.16936684278234992, 0.15096005868118356, 0.11390404408934407, 0.3024108231062569, 0.14292683652703142, 0.14033039446314544, 0.1579071514514815, 0.12513868383792737, 0.15820162924558512, 0.13451734127651493, 0.149382772225086, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.16195577036815245, 0.16190178677098943, 0.14840991149878302, 0.17339766417686586, 0.052534276311672734, 0.09678724918068016, 0.08411410445884959, 0.10044782269548957, 0.10239847415006098, 0.09053793734762161, 0.1161575630275824, 0.1126586673198684, 0.08168323541779099, 0.3286540371979064, 0.3399175189373861, 0.3201691641554806, 0.20768923611657208, 0.26243725042145083, 0.24831911726368439, 0.39632826232119456, 0.3456187174256945, 0.26952192061577285, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.24628540785943642, 0.21996209254155574, 0.23201229623675157, 0.1948840813631315, 0.1871426559456072, 0.18854012536191678, 0.42205575157779784, 0.1495314615019977, 0.8270886909629107, 0.1464844018317033, 0.5878775107931975, 0.16744592927466695, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613113776, 0.5067009384798691, 0.24862684460594997, 0.1691984300201379, 0.5250852425027019, 0.9643455740323887, 0.25792358625939804, 0.30999651377957094, 0.2704175847841721, 0.2336270824407587, 0.27347748349511614, 0.30841377153650407, 0.25096344012490024, 0.2788098531236497, 0.2910017128411597, 0.08228116772089544, 0.08567251547088273, 0.061005891891000696, 0.04352965450081214, 0.06595275817470336, 0.09171829752823046, 0.11227695183764297, 0.10548010591681856, 0.07901281780956726]}, "mutation_prompt": null}
{"id": "b683f96c-6724-42a4-9c15-222f35c5543c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 31, "fitness": 0.4176623323389421, "feedback": "The algorithm ImprovedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.34.", "error": "", "parent_id": "4a887d3a-e953-4158-8e40-6649d8df82a5", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "0f92cd66-66d6-4bd3-93d7-1d18149ff03e", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "31c50e1e-fd88-4d0b-83e0-48f9f35c4aab", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "bd8bbe17-4f53-4f0c-824c-b57d3fcf7a64", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "0bd10706-78f5-45e5-a83b-07c64f273d3c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "18e642a3-230b-4da0-aac1-99c02060e630", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "97314277-8c8d-445f-8fdd-0d83b4b4cd67", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "ad519f4a-7b6b-42d0-aedc-f6241ce4344c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "709d5d72-0ec2-4bdf-9595-1d4f489af7aa", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "55b43d48-30b2-4dfe-9f6e-b06c9fe43ffc", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "6c0d1933-8f3b-4fe9-aa07-b8f5d27fff82", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "6b005e57-9de1-4a6b-a077-124dcd3056f8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "04a5d4b9-6ad9-4774-881e-ac445c77b2b3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "0cb493c6-7931-4954-8a35-d1ae4d152b6e", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n        self.chaos_factor = 0.1  # New parameter for chaotic search\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n                # Introducing chaotic search for exploration\n                chaotic_position = (np.sin(positions) * np.cos(positions)) % 10 - 5\n                chaotic_values = np.array([func(p) for p in chaotic_position])\n                if np.min(chaotic_values) < gbest_value:\n                    gbest_position = chaotic_position[np.argmin(chaotic_values)]\n                    gbest_value = np.min(chaotic_values)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhance the exploration capability by introducing a chaotic search strategy to diversify the population.", "configspace": "", "generation": 44, "fitness": 0.4176310374065957, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.34.", "error": "", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06685813759109749, 0.07733072379380723, 0.07004423060654685, 0.03949102349095446, 0.011279683112359828, 0.03308752921183422, 0.04553195766300011, 0.02565946353201165, 0.024658186171036656, 0.06088081429042835, 0.11823467104040264, 0.10638259803493233, 0.0596332298404757, 0.06790367534343711, 0.0637944011538828, 0.03951790463239413, 0.05218741509398117, 0.02221633924753419, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.1230881059513842, 0.10648883756537286, 0.09989151714984312, 0.13154003966979166, 0.07010351342084253, 0.10251986253058698, 0.10188830918132719, 0.12560491907687577, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14472311450858766, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.0059120412512388976, 0.060298675863812656, 0.12415250455840343, 0.003092386794562141, 0.009228355378142039, 0.01947286127775627, 0.022932378568038425, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.1611895799591071, 0.14135570985554402, 0.3024108231062569, 0.15754195283877037, 0.15026639040996526, 0.1583177646161834, 0.12513868383792737, 0.14320620399090844, 0.13451734127651493, 0.14611761135848667, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1605937556904793, 0.16190178677098943, 0.1555677193764503, 0.17339766417686586, 0.06124043262398915, 0.08734018780269037, 0.08411410445884959, 0.10148213121900296, 0.0993903911859767, 0.08810682890053068, 0.10825954984322794, 0.11133842252790804, 0.09078357122873404, 0.3564664651595454, 0.3399175189373861, 0.32987165682346464, 0.19209120804242052, 0.261533986119338, 0.2487369049977428, 0.39632826232119456, 0.3400124389012952, 0.2661186231168453, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.344284030757553, 0.21996209254155574, 0.23201229623675157, 0.19488408135988577, 0.1871426559456072, 0.1885401253681891, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440184994238, 0.5878775107931975, 0.16744592926409152, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.16518770613496525, 0.5067009384798691, 0.24862684460594997, 0.16919843002018842, 0.5250852425027019, 0.9643455740323887, 0.23425381181488747, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524402284470927, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08592838932223112, 0.06268848846069053, 0.03853367478330716, 0.06437984494058835, 0.09744137499237948, 0.11044549096433598, 0.0950061953300596, 0.09420516884858554]}, "mutation_prompt": null}
{"id": "13221e24-23f9-472a-9b72-68308060f490", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "443595bf-f1f7-46da-bc34-9c184f49f79a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "561e0b54-b9f5-4bb7-b639-5f4edb3ae039", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "3218064f-26b1-4e4b-9b4a-2acc04753b8e", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "2b523ca1-0aae-44b6-9244-bb349a7788ee", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "3d0be556-9c3e-4f45-9d10-5357be3f0bd3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "f23c97b1-ce15-42ac-978a-969e3a76d319", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "5000828f-802f-48be-a37b-7b0b27fe545d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "e4cf6aa5-060b-447e-885e-933f7f403268", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "a1d66449-18e2-449c-8d91-47d2f370128a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "08e1032d-eefd-4359-8422-efcfcfec5a90", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "3bd7b1cb-d829-4fd3-bb6a-edc95ced2c6f", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "0ec7d84c-28c6-4276-ae0b-b5966f871a7d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n        self.neighborhood_factor = 0.2\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    \n                    # Dynamic neighborhood search\n                    neighborhood_size = int(self.num_particles * self.neighborhood_factor)\n                    neighborhood_indices = np.random.choice(self.num_particles, neighborhood_size, replace=False)\n                    for j in neighborhood_indices:\n                        velocities[i] += self.c1 * r1 * (pbest_positions[j] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhance exploration by incorporating a dynamic neighborhood search mechanism to adaptively adjust particle interactions during optimization.", "configspace": "", "generation": 57, "fitness": 0.39584946933348814, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.36.", "error": "", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.9781298523396144, 0.9744259651316237, 0.9781414849442985, 0.9768798440291008, 0.977143221157935, 0.9768939320183768, 0.9760910975339444, 0.9745488053180655, 0.9760516803914138, 0.7099717921534484, 0.5094368922662715, 0.44049196451070904, 0.8048759768702125, 0.660629002726669, 0.7906004068125397, 0.7176361410335367, 0.4139336107444961, 0.3829631467790179, 0.011131671659850184, 0.014429320989871486, 0.03714600168412652, 9.999999999998899e-05, 9.999999999998899e-05, 0.017167186731435136, 0.0013262402232936399, 0.0033377161218459683, 0.004881310170709141, 0.06346322003395088, 0.09044948450654866, 0.06362057332166038, 0.02431277760669104, 0.031202624059676998, 0.05409497100006233, 0.006415071977841746, 0.029078230584253295, 0.07516381408102313, 0.9949922585953525, 0.9949922585953525, 0.9949936354017235, 0.9279418512963313, 0.9819164084587614, 0.9228173392378244, 0.9277765340098973, 0.9124660429981555, 0.9240369223915011, 0.1574028730111826, 0.3003923199250639, 0.12003410527455216, 0.2569044559318988, 0.10853824503552623, 0.25717377602786484, 0.40121926591435764, 0.3251607742305873, 0.3086973517422483, 0.07080543761052371, 0.0564529339856632, 0.08713259097411097, 0.08023825332271795, 0.07113047392540661, 0.0663814426858369, 0.029423676218099493, 0.002153818021024878, 0.012552281434588752, 0.9206797443024732, 0.8355386368706761, 0.9202111336280467, 0.8499241177232476, 0.8325419292371001, 0.8692329558749284, 0.6036951789522556, 0.759215776756167, 0.6752939089584447, 0.9398837889649996, 0.940406150733995, 0.9395922075704493, 0.8458941855508931, 0.8725418358946749, 0.7682091845168594, 0.9348941131462619, 0.944307698372941, 0.9348941131462619, 0.5895998761693051, 0.8069883349281348, 0.36925237349060713, 0.6784353334033246, 0.5974147455508225, 0.6690120715112421, 0.753014388322323, 0.8517427883867484, 0.8519397564323126, 0.3415991890074388, 0.23656977772202825, 0.18363044735729295, 0.22860640423953504, 0.2882802318218117, 0.14273966506953606, 0.04124804521896808, 0.14566430181247347, 0.22520222312840754, 0.057075635401664826, 0.11464982558995995, 0.11244631080351264, 0.8375108730557042, 0.7159389539532235, 0.747280698398239, 0.24113730114831666, 0.19962448228251028, 0.20654328913052344, 0.4821207322122787, 0.6451941418564844, 0.608734454051702, 0.5882591495042586, 0.5768905707939993, 0.513552918385829, 0.6677885012760201, 0.511928705927043, 0.609916132645698, 0.9360009862206338, 0.9454790546591432, 0.9436928390128466, 0.961335377809249, 0.9613663041939637, 0.9613374549875434, 0.9483979262154494, 0.9621626302641298, 0.9479162045843867, 9.999999999998899e-05, 0.014762203434105281, 0.015013644886334276, 0.010408024057408927, 0.0047788904572136914, 0.0002912515348141298, 0.04549418860443544, 0.003493297460994804, 0.0021938417566731427, 0.1588123891721216, 0.1457276762002644, 0.13747184090021058, 0.11726112130286837, 0.21381355330875218, 0.14082979764227943, 0.2524294543553146, 0.25241914785529007, 0.2524394476981431, 0.11885753008405775, 0.11871699501292676, 0.11674745270356213, 0.13039737105314708, 0.13062929131357837, 0.13092237075357938, 0.11100907396298554, 0.11654213520966039, 0.1145655986736901, 0.04156095345629274, 0.04812830168694049, 0.04002392239197017, 0.06904609984814902, 0.048764032924147216, 0.06576364954646907, 0.06921394740096098, 0.07513983029278826, 0.05259194201217254, 0.1829136889054639, 0.2382192482075156, 0.14735596941030982, 0.22600933265088985, 0.17409120396040811, 0.17381075464374085, 0.168043309723228, 0.22643317347215042, 0.15692911417604205, 0.2044176663588012, 0.19220522036657506, 0.24699273836208946, 0.2221343715077082, 0.1903680723830763, 0.20671848171909002, 0.21392558383282068, 0.21416455124240108, 0.21393187708044448, 0.1692045894394496, 0.17385535093034266, 0.5894215278930164, 0.9782360213116641, 0.9782141549340393, 0.9781952075602406, 0.14694592781389948, 0.7616975218312272, 0.15006441082570654, 0.678171224659037, 0.9143859096999792, 0.9179215295449549, 0.4078214310724916, 0.6004901303385388, 0.30521119389564033, 0.626963721162979, 0.15694353541899964, 0.1615403666457943, 0.2608033712124722, 0.21063225908846428, 0.25297700049036753, 0.26274137434904765, 0.24003355603771837, 0.2669482511895922, 0.22111293375308572, 0.24233120631346328, 0.24719553450958098, 0.014029260168178737, 0.018670858376872435, 0.024762037268284298, 0.023373881617818504, 0.024286799337599585, 0.024343252986509634, 0.018129175035733303, 0.040728183574505805, 0.017907632881509428]}, "mutation_prompt": null}
{"id": "b8e6012a-567c-4b97-892f-fd4b388fabb1", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "7f3c0947-1ce1-4277-957c-73d84a828454", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "3f1d8c33-4d0f-4a7d-9788-ef223ecb0b63", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "a85afb13-a610-42ca-85df-9005c3e2b774", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "ba1c4907-e73b-49b4-b1bd-8cdc92a8cc3f", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "d257fe74-d8e8-4b07-89b5-ce43bc5803e4", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "4081a862-293b-46d3-aeb4-69b4dd592ec3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "5f74561f-2b40-46ee-8db3-678859177825", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "ffc8e998-1500-4f0f-ac97-3504d778e478", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "593457a1-b246-409c-b8b4-dd7a506b41c4", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "87a3f1ca-1b1b-48ce-89ba-89a530c971d0", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "e6ebd1a7-202f-482c-a066-f7235cbde133", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "e58223d9-989b-4a21-9ef3-317102418266", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "1622446f-0a0d-43ef-83ce-23d860827929", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Integrate a diversity maintenance mechanism to promote exploration and prevent premature convergence in the optimization process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.969644492790805, 0.9562384019061604, 0.9655272571186623, 0.9651953343594383, 0.9453970932258177, 0.9640213658085699, 0.9520185080807372, 0.9580177370769041, 0.9510461643646274, 0.8817289622720222, 0.8850840698325774, 0.8882169211687267, 0.8778034018580905, 0.2551204087585984, 0.4976391420094587, 0.39113669803895346, 0.2784164873182102, 0.5320279383733211, 0.06690125725401175, 0.0773431532653387, 0.0700647631170539, 0.03949102349095446, 0.01129284596622182, 0.03324021430281532, 0.04558250254576701, 0.025674945788455306, 0.024678320060637082, 0.06088081429042835, 0.11823467104040264, 0.1064178161377537, 0.0596332298404757, 0.0679368030533053, 0.06382065689611849, 0.03951790463239413, 0.05218741509398117, 0.022395542474453967, 0.9924487085330157, 0.9933782954796494, 0.9947023479697963, 0.9912537025857424, 0.9071181907034634, 0.9835197775026202, 0.9485054528485783, 0.9541492924352174, 0.9807543454252188, 0.5113036052223988, 0.3626913766165034, 0.29254644035652966, 0.21914028377717787, 0.5332886438784298, 0.5864712896356601, 0.42536963910194225, 0.22308480880152182, 0.5301416279180668, 0.18481424055660645, 0.12372134972166915, 0.10706700106513567, 0.10022738657223651, 0.1317502206350074, 0.07038975145380466, 0.10263308253202341, 0.10192682549554721, 0.12573335255939166, 0.9171674754254328, 0.8593928925869325, 0.9453980439750562, 0.5750666313953479, 0.9026244680539994, 0.9332089921606206, 0.8637493751893703, 0.9246940759129092, 0.8347276046103396, 0.9553152885249935, 0.9460256832310947, 0.9689779318942351, 0.9588535079133758, 0.8256629454930097, 0.9252814361933854, 0.9304591849868975, 0.9603096760715352, 0.9626889766185122, 0.3955431430401669, 0.8490095183310267, 0.5795418853489436, 0.9216350426903417, 0.37958743550830387, 0.6580040568795429, 0.8217161551621793, 0.4585525807406532, 0.8085947744662398, 0.1729563562619023, 0.2507560350660064, 0.23150761784316387, 0.2752287899590683, 0.2835138266919168, 0.23605974576261146, 0.26212819764469397, 0.5030569838256432, 0.27082471432949073, 0.2708860428018883, 0.20743309968869827, 0.32311659852507524, 0.7288216587420254, 0.7319156330230492, 0.6702411602964258, 0.4051711750316638, 0.1952057590040689, 0.14520238710924094, 0.49416185538439217, 0.6123582117307356, 0.3515565737232479, 0.6107349157366655, 0.3753959876636924, 0.5320814597617641, 0.4827310878604488, 0.5482042270978027, 0.5916639671093725, 0.9309244501287632, 0.9039398651111902, 0.9538588313619195, 0.9633871706969225, 0.958119195841356, 0.9604244799558894, 0.9388014931307629, 0.9304373272074151, 0.9460682454199593, 0.005918175152090588, 0.06032520104077954, 0.12415250455840343, 0.0031166642665357847, 0.009304144831993155, 0.019519862897021123, 0.023017571957975824, 0.0037005067651156853, 0.05907254808533269, 0.16936684278234992, 0.16127564131795902, 0.14152309215940606, 0.3024108231062569, 0.15762162512102096, 0.15039637489151103, 0.1583177646161834, 0.12513868383792737, 0.14327808083459748, 0.13451734127651493, 0.14617503125742826, 0.1508339164026371, 0.17674041331179324, 0.15708471444715655, 0.1606166641938509, 0.16190178677098943, 0.15562862940558175, 0.17339766417686586, 0.06131860579565618, 0.08734018780269037, 0.08411410445884959, 0.10149025149124968, 0.09941786909359018, 0.08812018457788506, 0.10827810877234023, 0.11133842252790804, 0.09083696355259763, 0.3566281055049463, 0.3399175189373861, 0.329954086118201, 0.19211668821677996, 0.2616613516518165, 0.2487925278668831, 0.39632826232119456, 0.3400124389012952, 0.2661662366323948, 0.20831606531254498, 0.19828185306430302, 0.206803405421353, 0.21632367448327228, 0.19942874951759648, 0.21099500692900375, 0.3455908019008307, 0.21996209254155574, 0.23201229623675157, 0.19488408136013136, 0.1871426559456072, 0.18854012536830733, 0.42205575157779784, 0.14953146150206298, 0.8270886909629107, 0.14648440185016065, 0.5878775107931975, 0.16744592926419521, 0.9194095248249503, 0.9795251860008632, 0.9711794225294831, 0.1651877061353163, 0.5067009384798691, 0.24862684460594997, 0.1691984300201902, 0.5250852425027019, 0.9643455740323887, 0.23431181493322917, 0.30999651377957094, 0.2704175847841721, 0.2331784365506141, 0.27347748349511614, 0.30045707021074564, 0.2524662596485797, 0.2788098531236497, 0.2910017128411597, 0.07741810971689189, 0.08595705133223985, 0.06270165692615304, 0.03858252155744135, 0.06437984494058835, 0.09746997096897647, 0.11049878634314936, 0.09508120119097152, 0.09428109408742713]}, "mutation_prompt": null}
{"id": "e5b4320b-41aa-4fa7-8cc7-d4f0667bcd7f", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhance solution diversity by dynamically adjusting the number of particles based on optimization progress.", "configspace": "", "generation": 72, "fitness": 0.4235865998593515, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.35.", "error": "", "parent_id": "b683f96c-6724-42a4-9c15-222f35c5543c", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8967185591384048, 0.9264631141428352, 0.39215260917575556, 0.4113490054880107, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10260861178073721, 0.0763639208607858, 0.055819303647421825, 0.02583481240122054, 0.06064386889335405, 0.0663081902050251, 0.022126172742859884, 0.050553248070186796, 0.043800638700924766, 0.1051276499615138, 0.06129210872647817, 0.08908774870244884, 0.10620828103104218, 0.05323525542087626, 0.08177269531823006, 0.01682338468937994, 0.03793036531261118, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.30301050701722654, 0.21066600628320598, 0.2551301938781254, 0.2469105682750098, 0.2928422545007142, 0.40523818539659684, 0.36294221814930483, 0.456033105089371, 0.24338621337876554, 0.08476719675923539, 0.116196445813743, 0.06232953668957397, 0.054090401342177796, 0.038376933373126976, 0.1031193300224561, 0.09104089627248746, 0.10191714562227239, 0.1126924297127272, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8943337263431227, 0.5858776903747158, 0.7758076646994759, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.1795285145956328, 0.22273909055393437, 0.18826610462232585, 0.2669994647196203, 0.2616193722594158, 0.19740025867863298, 0.21069019532487754, 0.22188455790392758, 0.3011032294360305, 0.22976836642377152, 0.22936586754529165, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.25927857319049696, 0.22256874149143913, 0.16174380032127378, 0.07784373817549517, 0.6382244075218371, 0.5332092469798208, 0.5401494151944148, 0.6448340461591292, 0.5728814837674789, 0.5863037845690118, 0.2568802517627693, 0.45817692640560015, 0.4767413977690985, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.062020869284313496, 0.06682790755823242, 0.06659923744527552, 0.03346210092519031, 0.013645982635594689, 0.033296597105004544, 0.03278964011187113, 0.003827453885603793, 0.011314700075043538, 0.11082074164165479, 0.13039944302490347, 0.12655623441964303, 0.12439368281368002, 0.15149353158995615, 0.13544039793612006, 0.12905154033320576, 0.1338817274564459, 0.183753707011321, 0.12748084542013172, 0.13235504069377058, 0.14881825500332402, 0.1559112686239379, 0.15862722781583982, 0.16414351680987294, 0.16539809179834442, 0.15191232217908968, 0.16979604386968217, 0.0600643415398423, 0.076965711551375, 0.11346196688496979, 0.09418879258556612, 0.09565943325229675, 0.13255518856865545, 0.1510604041226703, 0.11456055632769568, 0.12580669103572417, 0.3249113495954479, 0.20604355287348386, 0.32621953269846193, 0.2623562421044068, 0.3070699652317236, 0.3242449575832699, 0.30827532448144657, 0.2698316438619178, 0.17561422788846415, 0.20805570186698674, 0.20149957802452856, 0.22371375083547818, 0.21064107739343818, 0.6369959138952468, 0.24487181683530712, 0.1946826538794183, 0.20743750421869622, 0.20915121282821303, 0.7471640562389192, 0.18831460135665412, 0.16841368768191423, 0.49408777752597877, 0.15187394244812968, 0.8907035043536251, 0.13272151669218524, 0.1464829376148642, 0.7517378159177124, 0.963284990446583, 0.1738049325593467, 0.6333422077126962, 0.551900962363999, 0.3311538595888541, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.23881657696842606, 0.25473494725664003, 0.24734641647365474, 0.3041917263972109, 0.2679378192751751, 0.26160958031242265, 0.28823660407202756, 0.2711136944437539, 0.2535773941975633, 0.05342137222543042, 0.05699387748257978, 0.07216647020282596, 0.08740717092238826, 0.05884038619924792, 0.08686772431571355, 0.08565529533802929, 0.09663697256021331, 0.08062678132331635]}, "mutation_prompt": null}
{"id": "ba4e7f28-7293-47d7-a4a8-adb2708192be", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhance solution diversity by dynamically adjusting the number of particles based on optimization progress.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e5b4320b-41aa-4fa7-8cc7-d4f0667bcd7f", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8967185591384048, 0.9264631141428352, 0.39215260917575556, 0.4113490054880107, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10260861178073721, 0.0763639208607858, 0.055819303647421825, 0.02583481240122054, 0.06064386889335405, 0.0663081902050251, 0.022126172742859884, 0.050553248070186796, 0.043800638700924766, 0.1051276499615138, 0.06129210872647817, 0.08908774870244884, 0.10620828103104218, 0.05323525542087626, 0.08177269531823006, 0.01682338468937994, 0.03793036531261118, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.30301050701722654, 0.21066600628320598, 0.2551301938781254, 0.2469105682750098, 0.2928422545007142, 0.40523818539659684, 0.36294221814930483, 0.456033105089371, 0.24338621337876554, 0.08476719675923539, 0.116196445813743, 0.06232953668957397, 0.054090401342177796, 0.038376933373126976, 0.1031193300224561, 0.09104089627248746, 0.10191714562227239, 0.1126924297127272, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8943337263431227, 0.5858776903747158, 0.7758076646994759, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.1795285145956328, 0.22273909055393437, 0.18826610462232585, 0.2669994647196203, 0.2616193722594158, 0.19740025867863298, 0.21069019532487754, 0.22188455790392758, 0.3011032294360305, 0.22976836642377152, 0.22936586754529165, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.25927857319049696, 0.22256874149143913, 0.16174380032127378, 0.07784373817549517, 0.6382244075218371, 0.5332092469798208, 0.5401494151944148, 0.6448340461591292, 0.5728814837674789, 0.5863037845690118, 0.2568802517627693, 0.45817692640560015, 0.4767413977690985, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.062020869284313496, 0.06682790755823242, 0.06659923744527552, 0.03346210092519031, 0.013645982635594689, 0.033296597105004544, 0.03278964011187113, 0.003827453885603793, 0.011314700075043538, 0.11082074164165479, 0.13039944302490347, 0.12655623441964303, 0.12439368281368002, 0.15149353158995615, 0.13544039793612006, 0.12905154033320576, 0.1338817274564459, 0.183753707011321, 0.12748084542013172, 0.13235504069377058, 0.14881825500332402, 0.1559112686239379, 0.15862722781583982, 0.16414351680987294, 0.16539809179834442, 0.15191232217908968, 0.16979604386968217, 0.0600643415398423, 0.076965711551375, 0.11346196688496979, 0.09418879258556612, 0.09565943325229675, 0.13255518856865545, 0.1510604041226703, 0.11456055632769568, 0.12580669103572417, 0.3249113495954479, 0.20604355287348386, 0.32621953269846193, 0.2623562421044068, 0.3070699652317236, 0.3242449575832699, 0.30827532448144657, 0.2698316438619178, 0.17561422788846415, 0.20805570186698674, 0.20149957802452856, 0.22371375083547818, 0.21064107739343818, 0.6369959138952468, 0.24487181683530712, 0.1946826538794183, 0.20743750421869622, 0.20915121282821303, 0.7471640562389192, 0.18831460135665412, 0.16841368768191423, 0.49408777752597877, 0.15187394244812968, 0.8907035043536251, 0.13272151669218524, 0.1464829376148642, 0.7517378159177124, 0.963284990446583, 0.1738049325593467, 0.6333422077126962, 0.551900962363999, 0.3311538595888541, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.23881657696842606, 0.25473494725664003, 0.24734641647365474, 0.3041917263972109, 0.2679378192751751, 0.26160958031242265, 0.28823660407202756, 0.2711136944437539, 0.2535773941975633, 0.05342137222543042, 0.05699387748257978, 0.07216647020282596, 0.08740717092238826, 0.05884038619924792, 0.08686772431571355, 0.08565529533802929, 0.09663697256021331, 0.08062678132331635]}, "mutation_prompt": null}
{"id": "7b4add91-d96a-432a-8d2a-3f0670c36b03", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhance solution diversity by dynamically adjusting the number of particles based on optimization progress.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e5b4320b-41aa-4fa7-8cc7-d4f0667bcd7f", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8967185591384048, 0.9264631141428352, 0.39215260917575556, 0.4113490054880107, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10260861178073721, 0.0763639208607858, 0.055819303647421825, 0.02583481240122054, 0.06064386889335405, 0.0663081902050251, 0.022126172742859884, 0.050553248070186796, 0.043800638700924766, 0.1051276499615138, 0.06129210872647817, 0.08908774870244884, 0.10620828103104218, 0.05323525542087626, 0.08177269531823006, 0.01682338468937994, 0.03793036531261118, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.30301050701722654, 0.21066600628320598, 0.2551301938781254, 0.2469105682750098, 0.2928422545007142, 0.40523818539659684, 0.36294221814930483, 0.456033105089371, 0.24338621337876554, 0.08476719675923539, 0.116196445813743, 0.06232953668957397, 0.054090401342177796, 0.038376933373126976, 0.1031193300224561, 0.09104089627248746, 0.10191714562227239, 0.1126924297127272, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8943337263431227, 0.5858776903747158, 0.7758076646994759, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.1795285145956328, 0.22273909055393437, 0.18826610462232585, 0.2669994647196203, 0.2616193722594158, 0.19740025867863298, 0.21069019532487754, 0.22188455790392758, 0.3011032294360305, 0.22976836642377152, 0.22936586754529165, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.25927857319049696, 0.22256874149143913, 0.16174380032127378, 0.07784373817549517, 0.6382244075218371, 0.5332092469798208, 0.5401494151944148, 0.6448340461591292, 0.5728814837674789, 0.5863037845690118, 0.2568802517627693, 0.45817692640560015, 0.4767413977690985, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.062020869284313496, 0.06682790755823242, 0.06659923744527552, 0.03346210092519031, 0.013645982635594689, 0.033296597105004544, 0.03278964011187113, 0.003827453885603793, 0.011314700075043538, 0.11082074164165479, 0.13039944302490347, 0.12655623441964303, 0.12439368281368002, 0.15149353158995615, 0.13544039793612006, 0.12905154033320576, 0.1338817274564459, 0.183753707011321, 0.12748084542013172, 0.13235504069377058, 0.14881825500332402, 0.1559112686239379, 0.15862722781583982, 0.16414351680987294, 0.16539809179834442, 0.15191232217908968, 0.16979604386968217, 0.0600643415398423, 0.076965711551375, 0.11346196688496979, 0.09418879258556612, 0.09565943325229675, 0.13255518856865545, 0.1510604041226703, 0.11456055632769568, 0.12580669103572417, 0.3249113495954479, 0.20604355287348386, 0.32621953269846193, 0.2623562421044068, 0.3070699652317236, 0.3242449575832699, 0.30827532448144657, 0.2698316438619178, 0.17561422788846415, 0.20805570186698674, 0.20149957802452856, 0.22371375083547818, 0.21064107739343818, 0.6369959138952468, 0.24487181683530712, 0.1946826538794183, 0.20743750421869622, 0.20915121282821303, 0.7471640562389192, 0.18831460135665412, 0.16841368768191423, 0.49408777752597877, 0.15187394244812968, 0.8907035043536251, 0.13272151669218524, 0.1464829376148642, 0.7517378159177124, 0.963284990446583, 0.1738049325593467, 0.6333422077126962, 0.551900962363999, 0.3311538595888541, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.23881657696842606, 0.25473494725664003, 0.24734641647365474, 0.3041917263972109, 0.2679378192751751, 0.26160958031242265, 0.28823660407202756, 0.2711136944437539, 0.2535773941975633, 0.05342137222543042, 0.05699387748257978, 0.07216647020282596, 0.08740717092238826, 0.05884038619924792, 0.08686772431571355, 0.08565529533802929, 0.09663697256021331, 0.08062678132331635]}, "mutation_prompt": null}
{"id": "9e5b0741-a858-4254-aad8-c425166bae1a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism\n                random_particle = np.random.randint(self.num_particles)\n                random_position = np.random.uniform(-5.0, 5.0, size=self.dim)\n                if func(random_position) < pbest_values[random_particle]:\n                    positions[random_particle] = random_position\n                    pbest_positions[random_particle] = random_position\n                    pbest_values[random_particle] = func(random_position)\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhance solution diversity by dynamically adjusting the number of particles based on optimization progress.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e5b4320b-41aa-4fa7-8cc7-d4f0667bcd7f", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8967185591384048, 0.9264631141428352, 0.39215260917575556, 0.4113490054880107, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10260861178073721, 0.0763639208607858, 0.055819303647421825, 0.02583481240122054, 0.06064386889335405, 0.0663081902050251, 0.022126172742859884, 0.050553248070186796, 0.043800638700924766, 0.1051276499615138, 0.06129210872647817, 0.08908774870244884, 0.10620828103104218, 0.05323525542087626, 0.08177269531823006, 0.01682338468937994, 0.03793036531261118, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.30301050701722654, 0.21066600628320598, 0.2551301938781254, 0.2469105682750098, 0.2928422545007142, 0.40523818539659684, 0.36294221814930483, 0.456033105089371, 0.24338621337876554, 0.08476719675923539, 0.116196445813743, 0.06232953668957397, 0.054090401342177796, 0.038376933373126976, 0.1031193300224561, 0.09104089627248746, 0.10191714562227239, 0.1126924297127272, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8943337263431227, 0.5858776903747158, 0.7758076646994759, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.1795285145956328, 0.22273909055393437, 0.18826610462232585, 0.2669994647196203, 0.2616193722594158, 0.19740025867863298, 0.21069019532487754, 0.22188455790392758, 0.3011032294360305, 0.22976836642377152, 0.22936586754529165, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.25927857319049696, 0.22256874149143913, 0.16174380032127378, 0.07784373817549517, 0.6382244075218371, 0.5332092469798208, 0.5401494151944148, 0.6448340461591292, 0.5728814837674789, 0.5863037845690118, 0.2568802517627693, 0.45817692640560015, 0.4767413977690985, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.062020869284313496, 0.06682790755823242, 0.06659923744527552, 0.03346210092519031, 0.013645982635594689, 0.033296597105004544, 0.03278964011187113, 0.003827453885603793, 0.011314700075043538, 0.11082074164165479, 0.13039944302490347, 0.12655623441964303, 0.12439368281368002, 0.15149353158995615, 0.13544039793612006, 0.12905154033320576, 0.1338817274564459, 0.183753707011321, 0.12748084542013172, 0.13235504069377058, 0.14881825500332402, 0.1559112686239379, 0.15862722781583982, 0.16414351680987294, 0.16539809179834442, 0.15191232217908968, 0.16979604386968217, 0.0600643415398423, 0.076965711551375, 0.11346196688496979, 0.09418879258556612, 0.09565943325229675, 0.13255518856865545, 0.1510604041226703, 0.11456055632769568, 0.12580669103572417, 0.3249113495954479, 0.20604355287348386, 0.32621953269846193, 0.2623562421044068, 0.3070699652317236, 0.3242449575832699, 0.30827532448144657, 0.2698316438619178, 0.17561422788846415, 0.20805570186698674, 0.20149957802452856, 0.22371375083547818, 0.21064107739343818, 0.6369959138952468, 0.24487181683530712, 0.1946826538794183, 0.20743750421869622, 0.20915121282821303, 0.7471640562389192, 0.18831460135665412, 0.16841368768191423, 0.49408777752597877, 0.15187394244812968, 0.8907035043536251, 0.13272151669218524, 0.1464829376148642, 0.7517378159177124, 0.963284990446583, 0.1738049325593467, 0.6333422077126962, 0.551900962363999, 0.3311538595888541, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.23881657696842606, 0.25473494725664003, 0.24734641647365474, 0.3041917263972109, 0.2679378192751751, 0.26160958031242265, 0.28823660407202756, 0.2711136944437539, 0.2535773941975633, 0.05342137222543042, 0.05699387748257978, 0.07216647020282596, 0.08740717092238826, 0.05884038619924792, 0.08686772431571355, 0.08565529533802929, 0.09663697256021331, 0.08062678132331635]}, "mutation_prompt": null}
{"id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 76, "fitness": 0.4244230273111257, "feedback": "The algorithm ImprovedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.35.", "error": "", "parent_id": "e5b4320b-41aa-4fa7-8cc7-d4f0667bcd7f", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "3649a3bf-dca9-432b-8859-8579f1fd5a51", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "601927cb-ae98-469b-80ac-c4b4daa66455", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "9f17385e-ffd8-4e72-b0c6-ffd44eae7284", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "9af3785e-be75-4a43-8b23-e24cb793cf92", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "517a1f1e-765b-4d0b-9d93-0f321703393e", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "4aa49840-dcc7-436c-9078-3b9b865e0999", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "ace6564c-e2fa-4d16-9f56-809ae65e5fa8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "6336333b-ca3c-4e4f-96f5-bf202120c5b8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "49c1ba05-7cae-4217-ba5d-8023bc122daa", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "017a8455-5cb4-4df2-b3b9-193905e81173", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "d956606d-905e-42b8-aad3-99d9b004e07f", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "570f7524-fc97-4293-ad9c-9accfb93304e", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "b82a7209-4e18-4678-8fcd-6f4ad757a9ac", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "cb6ced3b-a244-45af-80f6-4ab8329d92a3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "752585f8-7b7a-439b-9409-b00023673972", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "c5c86a82-3dad-4280-b6f0-c7bed77235ee", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "0fe1ac4f-a046-4084-8046-8b26b5928b82", "solution": "class ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1\n        self.dynamic_inertia = 0.5  # New parameter for dynamic inertia weight\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + self.dynamic_inertia * (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n                \n                self.dynamic_inertia = 0.5 + 0.4 * (np.cos(0.9 * np.pi * _ / self.max_iter) + 1)  # Dynamic inertia update\n\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Implement a dynamic inertia weight update mechanism to adaptively control the exploration and exploitation balance during the optimization process.", "configspace": "", "generation": 93, "fitness": 0.42346032788296695, "feedback": "The algorithm ImprovedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.35.", "error": "", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8967185591384048, 0.9264631141428352, 0.39215260917575556, 0.4165506458200675, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10540984250132401, 0.08214198635427983, 0.05544818188041567, 0.03860945038932695, 0.03486272730826878, 0.0663081902050251, 0.022543975102239933, 0.052684742135522544, 0.04166315767688267, 0.1051276499615138, 0.07995266657030009, 0.07961832838503391, 0.10620828103104218, 0.05325246507968606, 0.0938535038356878, 0.00543304517332821, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2485800244340971, 0.2928422545007142, 0.40523818539659684, 0.3826131549577537, 0.456033105089371, 0.24338621337876554, 0.08315207539175862, 0.07031885541981231, 0.09448404066288463, 0.09404420877097275, 0.06704130947429365, 0.11097622864996282, 0.06001998001560771, 0.12484291328161667, 0.09451204100479393, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5867249590173089, 0.7623519753436789, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.19065003020904903, 0.23268364896838623, 0.17071067806751594, 0.3097789899214223, 0.2569636608792808, 0.1921259096109561, 0.21319886039982072, 0.22200922871457884, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.201580637835289, 0.16471909903944193, 0.20911454608365354, 0.07112805751973994, 0.6382244075218371, 0.5364339030975457, 0.5372562360080015, 0.6448340461591292, 0.5648768834186146, 0.5863037845690118, 0.23469623939352346, 0.3950771271163255, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.06246903992848296, 0.06439543195318453, 0.07565858184018559, 0.035373144200061324, 0.029635912063684544, 0.03926876651731803, 0.05470218769519941, 0.02051244447455558, 0.0020175739274121973, 0.10795979086626717, 0.12901739377781452, 0.09964929815799894, 0.1398617485851995, 0.15388977610611987, 0.14176896124061678, 0.13428944848998559, 0.14516636500634272, 0.17059520679700513, 0.13211918737375694, 0.13704584568006506, 0.1647371443793607, 0.15900466634828736, 0.1565356205584627, 0.16820231714295275, 0.16120548207785212, 0.14971852314543543, 0.15962229671712136, 0.07615031322871713, 0.07026073714820946, 0.11433988054091382, 0.0938357833738277, 0.09541889481900057, 0.13255518856865545, 0.1510604041226703, 0.10001289491871979, 0.10571357896303812, 0.33036871025181225, 0.19294864873228135, 0.3274003122483846, 0.28299704950117555, 0.30845884151813907, 0.3176677918779848, 0.2894277431589394, 0.28002647752956433, 0.17083201896859268, 0.22186208573560184, 0.21060845121192173, 0.20176770843261171, 0.20648074259092974, 0.6369959138952468, 0.24487181683530712, 0.20026305368925668, 0.19633218328492197, 0.21478002614466662, 0.7471640562389192, 0.18851246628660112, 0.16841368768191423, 0.1679948243949353, 0.1518739424500365, 0.8907035043536251, 0.13298226046210715, 0.29296783976247054, 0.7517378159177124, 0.963284990446583, 0.3692214661820922, 0.6333422077126962, 0.4931097006074586, 0.3790093380342612, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.23938101921950505, 0.2153268687232478, 0.2593447517577132, 0.3087322097180373, 0.3519897891517758, 0.26252918589616614, 0.2665895889053381, 0.2759437720146941, 0.2831097482099457, 0.05342137222543042, 0.057026580919527614, 0.06062268184062414, 0.10218633286646905, 0.05384534565837351, 0.08521673230796278, 0.07007858817112178, 0.09072654136758396, 0.08672519389211208]}, "mutation_prompt": null}
{"id": "53867342-9ab1-483d-94ec-d5e9d521e6dc", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n        self.mutation_rate = 0.1  # New parameter for adaptive mutation\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                    if pbest_values[i] < gbest_value:\n                        mutation_strength = self.mutation_rate * (gbest_value - pbest_values[i])\n                        mutation = np.random.normal(0, mutation_strength, size=self.dim)\n                        positions[i] += mutation\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "EnhancedHybridPSOSA", "description": "Enhance exploration by incorporating a mutation mechanism that adapts based on particle performance.", "configspace": "", "generation": 94, "fitness": 0.4244230273111257, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.35.", "error": "", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "c5f2f4d1-5c17-48f4-a158-6f84202a4843", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "eb3ac86c-8fc8-40b9-b583-e2fd9dfd53ca", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "428b5fe4-b0d4-4b86-b8be-9cc6d2e37104", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "8cbe3b0c-ad30-4094-8ebb-1822c391afb2", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
{"id": "e0a29088-481d-434f-8cae-3f131e4fee7f", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = max(10, int(20 * (1 - min(1, budget / 10000))))\n        self.max_iter = budget // self.num_particles\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.T_init = 1000.0\n        self.T_min = 1e-8\n        self.diversity_factor = 0.1  # New parameter for diversity maintenance\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            positions = np.zeros((self.num_particles, self.dim))\n            for d in range(self.dim):\n                step_size = 10.0 / self.num_particles\n                for p in range(self.num_particles):\n                    positions[p][d] = np.random.uniform(step_size * p, step_size * (p + 1))\n\n            velocities = np.zeros((self.num_particles, self.dim))\n            pbest_positions = np.copy(positions)\n            pbest_values = np.array([func(p) for p in pbest_positions])\n            gbest_position = pbest_positions[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            T = self.T_init\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = w * velocities[i] + self.c1 * r1 * (pbest_positions[i] - positions[i]) + self.c2 * r2 * (gbest_position - positions[i])\n                    positions[i] = np.clip(positions[i] + velocities[i], -5.0, 5.0)\n\n                    candidate_position = positions[i] + np.random.normal(0, 0.1, size=self.dim)\n                    candidate_position = np.clip(candidate_position, -5.0, 5.0)\n                    candidate_value = func(candidate_position)\n\n                    if candidate_value < pbest_values[i]:\n                        pbest_positions[i] = candidate_position\n                        pbest_values[i] = candidate_value\n\n                    if candidate_value < gbest_value:\n                        gbest_position = candidate_position\n                        gbest_value = candidate_value\n                    else:\n                        delta = candidate_value - pbest_values[i]\n                        if np.exp(-delta / T) > np.random.rand():\n                            positions[i] = candidate_position\n                            pbest_values[i] = candidate_value\n\n                    res = minimize(func, positions[i], method='Nelder-Mead')\n                    if res.fun < pbest_values[i]:\n                        pbest_positions[i] = res.x\n                        pbest_values[i] = res.fun\n\n                    if res.fun < gbest_value:\n                        gbest_position = res.x\n                        gbest_value = res.fun\n\n                T *= 0.99 if T > self.T_min else 1.0\n\n                # Introducing diversity maintenance mechanism with chaos-based perturbation\n                chaos_factor = 0.1\n                for j in range(self.num_particles):\n                    chaos_position = np.clip(positions[j] + chaos_factor * np.sin(positions[j] * np.pi), -5.0, 5.0)\n                    chaos_value = func(chaos_position)\n                    if chaos_value < pbest_values[j]:\n                        positions[j] = chaos_position\n                        pbest_positions[j] = chaos_position\n                        pbest_values[j] = chaos_value\n\n            return gbest_value\n\n        return pso_sa_optimize()", "name": "ImprovedHybridPSOSA", "description": "Improve solution diversity by introducing a chaos-based perturbation to explore the search space more effectively.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5dd9b910-3826-4b99-9d90-cf8b0d2a8c5a", "metadata": {"aucs": [0.9691417677665779, 0.956264414966961, 0.9670839133047524, 0.9728606995075023, 0.9631750689901357, 0.957918213354577, 0.9664017719865028, 0.9574043651401257, 0.9727761239257348, 0.9314492308148012, 0.9323492534202945, 0.8977300625826613, 0.9264631141428352, 0.39215260917575556, 0.41733217061027594, 0.8274161433124073, 0.7136484363669512, 0.8483210351140893, 0.10335244256851384, 0.08222762439555187, 0.05545610643140919, 0.037974412225256104, 0.03486272730826878, 0.0663081902050251, 0.021188648181265646, 0.052488885954448006, 0.041632052414871445, 0.1051276499615138, 0.08018218309336567, 0.0798436293379644, 0.10620828103104218, 0.05329588471233693, 0.09435394071238645, 0.006310212908023249, 0.035268128423078804, 0.07204716290629476, 0.9914423128334761, 0.9939451465011803, 0.993666319745568, 0.9932883927357546, 0.9536490217495955, 0.9631119919658301, 0.9224624752132886, 0.9860378135476774, 0.9585512553913055, 0.29155487346279074, 0.21066600628320598, 0.256408819206139, 0.2496061607026714, 0.2928422545007142, 0.40523818539659684, 0.3716879080458473, 0.456033105089371, 0.24338621337876554, 0.08572621195709818, 0.0709131334500206, 0.09404736150243176, 0.10863651314616818, 0.05074114572127342, 0.06697013853450995, 0.05964280100052988, 0.12433047296498667, 0.07855029107148292, 0.9313555428468726, 0.9523827582237212, 0.9588885848649316, 0.7369834547858536, 0.9410443694202347, 0.9382258759128979, 0.8371268120349241, 0.7870251409552517, 0.9281201286519196, 0.9559141988264183, 0.9513922742612246, 0.9682625235324493, 0.8825666221933489, 0.9325536803762456, 0.9383437115067326, 0.9221172756559038, 0.9481464368035476, 0.9286394187539093, 0.6544705910123109, 0.7738785870850741, 0.6086298898879601, 0.8927182078171949, 0.5835054884690019, 0.7636517906513072, 0.42997194833422714, 0.803088717690332, 0.6588511716233765, 0.17362626527143, 0.23268364896838623, 0.17764542707420183, 0.2642337650247666, 0.2569636608792808, 0.23822189951318284, 0.2119392753060546, 0.22188455790392758, 0.3011032294360305, 0.2754754233903949, 0.21650779051007207, 0.3328381004186749, 0.8467732264424269, 0.7619135604860519, 0.3724062067527105, 0.17456205092476773, 0.19307050564811967, 0.08551271068253152, 0.6382244075218371, 0.5220067574799528, 0.5372562360080015, 0.6448340461591292, 0.5700479425289389, 0.5863037845690118, 0.24595569486450364, 0.46328568051054586, 0.4057721743378532, 0.9451246226413627, 0.9406644519406177, 0.9398564833965051, 0.9679518685191967, 0.9664678279392284, 0.9539552358081091, 0.9600260199005339, 0.9557900200470665, 0.9605376910377409, 0.0781002241202432, 0.06510107234606477, 0.07737950356998846, 0.03604797361210854, 0.02162289127006589, 0.037816097734767906, 0.05577481211039592, 0.019894382581028602, 0.0020303641802922323, 0.10462641790334115, 0.12901739377781452, 0.22264756462626634, 0.14262620956469962, 0.16264208098959843, 0.13799641938479124, 0.13313250409528576, 0.11954200428080552, 0.17168760003365147, 0.13215053247355502, 0.14105268574006913, 0.1646555723784381, 0.15969428673604835, 0.1565181313335523, 0.16956974921884194, 0.161071204780183, 0.1507527639312337, 0.15962229671712136, 0.076804971989614, 0.0706261174941879, 0.1113687488752303, 0.09382987576256296, 0.09582360656164746, 0.13255518856865545, 0.1510604041226703, 0.09990021285019957, 0.10568345316345862, 0.33036871025181225, 0.19057538674451502, 0.3272752031269246, 0.2675434209519927, 0.3082561045062727, 0.3139975182092456, 0.2899583102353517, 0.2796670126559091, 0.16810195961240082, 0.22099711226533925, 0.21060845121192173, 0.20176770843261171, 0.19609023995659358, 0.6369959138952468, 0.24487181683530712, 0.19411212147418833, 0.19633218328492197, 0.20915121282821303, 0.7471640562389192, 0.1883416695419009, 0.16841368768191423, 0.16799482432945512, 0.15187394244878683, 0.8907035043536251, 0.13317294381678202, 0.2991957477809237, 0.7517378159177124, 0.963284990446583, 0.36499280004065016, 0.6333422077126962, 0.4954961883020561, 0.36996070800570446, 0.850032027708094, 0.9745122679825439, 0.7959990482717566, 0.671617240604224, 0.27680278920628376, 0.21656087310718808, 0.2475287924276076, 0.2913147648676603, 0.2679378192751751, 0.2965767835213755, 0.26707830258044174, 0.3070792125998715, 0.2697703656089323, 0.05342137222543042, 0.05695975876491188, 0.06247689903389286, 0.10170739713373655, 0.05373877093366741, 0.08379561178544714, 0.06958422400343933, 0.09065396865744768, 0.0870244825569163]}, "mutation_prompt": null}
