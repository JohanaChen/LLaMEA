{"id": "1df821e8-c7df-4612-a2a7-8f4bc3417352", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim), self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "HarmonySearch", "description": "A novel metaheuristic algorithm called Harmony Search Algorithm (HSA) inspired by the musical improvisation process, where new solutions (harmonies) are generated by combining elements from existing solutions based on their quality.", "configspace": "", "generation": 0, "fitness": 0.09148039701782078, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1776823376590595, 0.17591895294063398, 0.1702251434208738, 0.17149426909611087, 0.18815258061490692, 0.1743493874148886, 0.17853085033425942, 0.1627308645501354, 0.19002458133815758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08744927318328466, 0.07415928260010152, 0.09085782697928824, 0.08821012692585939, 0.08031085304125885, 0.08637574958014904, 0.08220971456683834, 0.08619009309872505, 0.07931754108742428, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062321028163797365, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12550941009441408, 0.19305018704350418, 0.14815435079016037, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.008145207404021693, 0.06955668591673547, 9.999999999998899e-05, 0.011984156506037236, 0.03535474427844443, 0.011857267414164374, 0.017989636894567007, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.06156885388820299, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22079264636590923, 0.19295731022857399, 0.19492345544036715, 0.20595866438015542, 0.1891949409558652, 0.20723220963874955, 0.19984730562289188, 0.17898268464128597, 0.2040342896030215, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750318548395568, 0.127349108260695, 0.13719051518069225, 0.1412621545878583, 0.14112607844723501, 0.13026107848904755, 0.15032685917142685, 0.14859109668112647, 0.1338142560444605, 0.1718278713685648, 0.1605430674194115, 0.17602804377484949, 0.16779500212056553, 0.18216990514616738, 0.1769535493081681, 0.16589458954753267, 0.17376127414440456, 0.15372287540992324, 0.11535761516293441, 0.10380630425125859, 0.11846467432150021, 0.11237985695883013, 0.13612867384185479, 0.11674478463997495, 0.10626679647985726, 0.12371808466632339, 0.12291629509491941, 0.14104185919694046, 0.1624211217638173, 0.1583262523220308, 0.16013144590445194, 0.14542477076385807, 0.16232931844176968, 0.15530302624144643, 0.1735848999010403, 0.18274049594047614, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1839850508760713, 0.16676760579883698, 0.16654429792886216, 0.1596117782744041, 0.15118573547932213, 0.14117481323568204, 0.16136580435442138, 0.16337130884874407, 0.1764620763129462, 0.1576510662341527, 0.15830317421895124, 0.1648657784016686, 0.15046231704786128, 0.18881175291968055, 0.16042148370699438, 0.16852622202680834, 0.17335189246072313, 0.20283211953079405, 0.1757245378761989, 0.1909234206042082, 0.17583270472136214, 0.18681776231900182, 0.21354371759449664, 0.18381034274544084, 0.17593373208937524, 0.18930578543463583, 0.2056658470933168, 0.05833110590115975, 0.055304821468311616, 0.06583956656384393, 0.05189181837320844, 0.059336308689276085, 0.05592059477022415, 0.07530959676481797, 0.05491589568682287, 0.06071437770323973]}, "mutation_prompt": null}
{"id": "2c124c22-901e-4e1f-89d6-114f9de27264", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim), self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "HarmonySearch", "description": "A novel metaheuristic algorithm called Harmony Search Algorithm (HSA) inspired by the musical improvisation process, where new solutions (harmonies) are generated by combining elements from existing solutions based on their quality.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df821e8-c7df-4612-a2a7-8f4bc3417352", "metadata": {"aucs": [0.1776823376590595, 0.17591895294063398, 0.1702251434208738, 0.17149426909611087, 0.18815258061490692, 0.1743493874148886, 0.17853085033425942, 0.1627308645501354, 0.19002458133815758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08744927318328466, 0.07415928260010152, 0.09085782697928824, 0.08821012692585939, 0.08031085304125885, 0.08637574958014904, 0.08220971456683834, 0.08619009309872505, 0.07931754108742428, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062321028163797365, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12550941009441408, 0.19305018704350418, 0.14815435079016037, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.008145207404021693, 0.06955668591673547, 9.999999999998899e-05, 0.011984156506037236, 0.03535474427844443, 0.011857267414164374, 0.017989636894567007, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.06156885388820299, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22079264636590923, 0.19295731022857399, 0.19492345544036715, 0.20595866438015542, 0.1891949409558652, 0.20723220963874955, 0.19984730562289188, 0.17898268464128597, 0.2040342896030215, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750318548395568, 0.127349108260695, 0.13719051518069225, 0.1412621545878583, 0.14112607844723501, 0.13026107848904755, 0.15032685917142685, 0.14859109668112647, 0.1338142560444605, 0.1718278713685648, 0.1605430674194115, 0.17602804377484949, 0.16779500212056553, 0.18216990514616738, 0.1769535493081681, 0.16589458954753267, 0.17376127414440456, 0.15372287540992324, 0.11535761516293441, 0.10380630425125859, 0.11846467432150021, 0.11237985695883013, 0.13612867384185479, 0.11674478463997495, 0.10626679647985726, 0.12371808466632339, 0.12291629509491941, 0.14104185919694046, 0.1624211217638173, 0.1583262523220308, 0.16013144590445194, 0.14542477076385807, 0.16232931844176968, 0.15530302624144643, 0.1735848999010403, 0.18274049594047614, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1839850508760713, 0.16676760579883698, 0.16654429792886216, 0.1596117782744041, 0.15118573547932213, 0.14117481323568204, 0.16136580435442138, 0.16337130884874407, 0.1764620763129462, 0.1576510662341527, 0.15830317421895124, 0.1648657784016686, 0.15046231704786128, 0.18881175291968055, 0.16042148370699438, 0.16852622202680834, 0.17335189246072313, 0.20283211953079405, 0.1757245378761989, 0.1909234206042082, 0.17583270472136214, 0.18681776231900182, 0.21354371759449664, 0.18381034274544084, 0.17593373208937524, 0.18930578543463583, 0.2056658470933168, 0.05833110590115975, 0.055304821468311616, 0.06583956656384393, 0.05189181837320844, 0.059336308689276085, 0.05592059477022415, 0.07530959676481797, 0.05491589568682287, 0.06071437770323973]}, "mutation_prompt": null}
{"id": "6497a404-457d-4fa6-a6b1-09775beca70f", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.5  # Dynamically adjust upper bound to 5.5\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim), self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "HarmonySearchImproved", "description": "Introducing a dynamic bandwidth adjustment mechanism to control exploration and exploitation trade-off.", "configspace": "", "generation": 2, "fitness": 0.08973255378150519, "feedback": "The algorithm HarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "1df821e8-c7df-4612-a2a7-8f4bc3417352", "metadata": {"aucs": [0.16606543836691512, 0.1801468401076538, 0.16522959656465608, 0.18051630087669468, 0.18034759077798368, 0.17300505251414067, 0.17714788191770747, 0.15167290877966189, 0.1863206694802929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039041121379462806, 0.04250042176556912, 0.04356526959992224, 0.03497185786218815, 0.04031864937694207, 0.03750233777649559, 0.044142932945113844, 0.06321504320120708, 0.040976086410404955, 0.028279489980013395, 0.030263172944294814, 0.024332531256945567, 0.02946962513785023, 0.03954755415043876, 0.03956567703898184, 0.03311436464582751, 0.032138507196369015, 0.057536479111395034, 0.11151697290683604, 0.08562637869482292, 0.10654458899799335, 0.09805623586648526, 0.08667115376778567, 0.09325137457983723, 0.0875958805564826, 0.0938842294549207, 0.08511443514197836, 0.09009722490277106, 0.09074541317881757, 0.11463358399383394, 0.06269536981677648, 0.07274376970115959, 0.054759614610563556, 0.09538304281671295, 0.10624911486018096, 0.08032077294799678, 0.16338528231021832, 0.13205565326076318, 0.11062946405482321, 0.14551378019038563, 0.09743767435604678, 0.12725289021836284, 0.09840555410708218, 0.13215028615387114, 0.11720280653772386, 9.999999999998899e-05, 0.0054707102165477695, 9.999999999998899e-05, 0.0045612538710316786, 0.019060654008987155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03716613153935122, 9.999999999998899e-05, 0.04234164448861155, 0.00011119118905189573, 9.999999999998899e-05, 0.018350026965188393, 0.006698773388547519, 0.0006841326072811738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05143660709360409, 0.0544699616980342, 0.04081610703150618, 0.053666419527139464, 0.04668754369869499, 0.041733977502103725, 0.06233119891068506, 0.047373012341061393, 0.06188501352142661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011139549230995693, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013366710096084367, 0.22368783349549137, 0.1813101117774084, 0.19039936256233136, 0.23091351353592682, 0.18581274523889268, 0.19020838111002492, 0.21478229937735438, 0.178627440809892, 0.19934681294342405, 0.04360660438034081, 0.04269192600656169, 0.04466520455292189, 0.04519366744258191, 0.05396313240388795, 0.044276114707356484, 0.04436956830737926, 0.037643905888522955, 0.03966749246546719, 0.14934925049085868, 0.16285641516171456, 0.12807764786173137, 0.12627113795584954, 0.13265691738661312, 0.136595964657235, 0.15225062845871273, 0.19931804402326514, 0.13990289978961468, 0.1605568920166215, 0.16267134099412783, 0.17954482163662777, 0.16089336882063887, 0.18276094814430588, 0.1783323346366127, 0.16011633087661303, 0.16530818630739286, 0.15769074017666118, 0.09933601086279198, 0.1035841329081395, 0.09310922546980527, 0.11949829408439361, 0.11962524136375652, 0.1224980397113743, 0.10696770310506454, 0.1023972556370496, 0.10957673994520756, 0.14440789133201337, 0.1476771045826325, 0.18307024795176485, 0.14803855543610023, 0.17882779845564323, 0.15565714848702938, 0.14872620444185325, 0.14393377295006626, 0.1622458090805785, 0.13697817597603879, 0.15015010920148109, 0.14253830709907123, 0.14274815474452185, 0.14344047868269938, 0.14787514639959976, 0.1312325566761654, 0.1493462186566672, 0.15191083759666524, 0.16316996992529997, 0.1642766904570031, 0.14800738668321922, 0.15844061165356726, 0.16005227279157153, 0.16052876563956964, 0.1470327423043971, 0.15992372053831527, 0.15240270806980294, 0.1650598760540004, 0.14065929750956097, 0.2058193814458481, 0.17538352604633456, 0.19150313556130094, 0.16785275681404455, 0.14120817964110555, 0.1686258544832957, 0.1485187926092595, 0.17965664555450445, 0.1742756608770838, 0.1765475548584594, 0.17557771881330975, 0.17697343072253258, 0.18510579988636733, 0.1910042462097561, 0.18768982521880218, 0.20526466063744042, 0.05487182109393529, 0.05429928149502139, 0.04439299450572909, 0.053619205982389784, 0.0477461093697108, 0.059719932534646025, 0.06716536934540596, 0.05788409583641985, 0.04777791940715759]}, "mutation_prompt": null}
{"id": "c9e122fa-1403-463a-bfc1-e633f04c99a3", "solution": "import numpy as np\n\nclass DynamicHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        pitch_adjust_rate = 0.01\n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim) + np.random.uniform(-pitch_adjust_rate, pitch_adjust_rate, size=self.dim), self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicHarmonySearch", "description": "Improving Harmony Search by incorporating dynamic pitch adjustment to enhance exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.09148021001073812, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "1df821e8-c7df-4612-a2a7-8f4bc3417352", "metadata": {"aucs": [0.1776823424775803, 0.17591729741046747, 0.17022513955162688, 0.17149427087518576, 0.18815258291350567, 0.1743493874148886, 0.17853085033425942, 0.16273087924940077, 0.19002457497647196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03683495922995916, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.048134712890314235, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08744927318328466, 0.07415928260010152, 0.09085780529231746, 0.08821012692585939, 0.08031084139128564, 0.08637574958014904, 0.08220971456683834, 0.08619008286138452, 0.07931754108742428, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.062319966471320876, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.12550941009441408, 0.19305018704350418, 0.14815435079016037, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.008145207404021693, 0.06955668591673547, 9.999999999998899e-05, 0.011984156506037236, 0.03535474427844443, 0.011857267414164374, 0.017989636894567007, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.06156885388820299, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22079270439046383, 0.19295734317636348, 0.19492344803775163, 0.20595866287146458, 0.1891949409558652, 0.20723220963874955, 0.19984730562289188, 0.1789663630364312, 0.2040342896030215, 0.04999957771121044, 0.042495165125572165, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13750318548395568, 0.1273493740097158, 0.13719006820890123, 0.1412621031510567, 0.1411258326880228, 0.1302243169515983, 0.15032678856487658, 0.14859383183576735, 0.1338142560444605, 0.1718278307634863, 0.16054140471497846, 0.17602820616446935, 0.16779506533686295, 0.18217155461204537, 0.17695357359840724, 0.16589452969000118, 0.17376139080180997, 0.15372287540992324, 0.11535761516293441, 0.10380487400970273, 0.11846467432150021, 0.11237992705997935, 0.13613387209055872, 0.11674478463997495, 0.10626679647985726, 0.12371804967104705, 0.12291629509491941, 0.1410419410981515, 0.16246226892280025, 0.1583259304938096, 0.16013172453335844, 0.1454002198165284, 0.1623299145753585, 0.1553032871599327, 0.17355859213099634, 0.1827394419087398, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.16204609784140833, 0.1839850508982579, 0.16676760347007913, 0.16654429180501196, 0.15961177657758874, 0.1511857350980088, 0.1411747945970957, 0.1613657990993823, 0.16337131142481343, 0.17646204829144752, 0.15765106622141922, 0.15830315322402055, 0.1648657777357717, 0.1504623196916216, 0.18881178342367477, 0.16042149120042526, 0.16852622192706435, 0.1733518348026808, 0.2028320965678786, 0.17572379847912967, 0.1909273205545684, 0.17583161961473137, 0.1868148684318659, 0.21354454689062907, 0.18380690876627825, 0.17594627512740624, 0.18930692163473095, 0.20566593137012867, 0.05833110590115975, 0.05530455769663456, 0.06583956656384393, 0.05189181837320844, 0.059336308689276085, 0.05592059477022415, 0.07530959676481797, 0.054924923392995706, 0.06071437770323973]}, "mutation_prompt": null}
{"id": "6b7983dd-c3b3-4a14-8776-aacd1d7ddc92", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "ImprovedHarmonySearch", "description": "Improved Harmony Search algorithm with enhanced harmony generation strategy based on differential evolution to explore the search space more efficiently.", "configspace": "", "generation": 4, "fitness": 0.09148548044197685, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "1df821e8-c7df-4612-a2a7-8f4bc3417352", "metadata": {"aucs": [0.17768864716582444, 0.17575309908026104, 0.17023355580116073, 0.17149369045723672, 0.1881414371914294, 0.1743526558398273, 0.1785357813382621, 0.162722160220926, 0.1900265335894682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03699924804261212, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.04820815519306687, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745141895304964, 0.07415928260010152, 0.0908547325628537, 0.08821219889875898, 0.08031074385691028, 0.08637574958014904, 0.08221094302267395, 0.08618988619160117, 0.07931754108742428, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.06226385035348936, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.1255156056280875, 0.19304702140278873, 0.14815435079016037, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.008145207404021693, 0.06955668591673547, 9.999999999998899e-05, 0.011984156506037236, 0.03535474427844443, 0.011857267414164374, 0.017989636894567007, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.06156885388820299, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22084133410785178, 0.19295315740895125, 0.1949141774978692, 0.20595539682046016, 0.18921868555433785, 0.2072699710045307, 0.1998523204589705, 0.17856482279945307, 0.2040627334103441, 0.04999957771121044, 0.04251699021260025, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.1375038769068011, 0.12735161993917954, 0.13718726593615316, 0.14126039325335837, 0.14116328865982009, 0.1301092024520092, 0.15032558062406165, 0.14859111709148076, 0.13382655374771169, 0.17183118956632482, 0.16052818911018552, 0.17601599134126644, 0.16779423367209934, 0.1821332585358867, 0.1770649666772035, 0.1658948926534367, 0.1737637695523081, 0.15377206854889824, 0.11536045488592572, 0.10379944308543132, 0.11846467432150021, 0.11237831636517581, 0.136096771678897, 0.11676171466678986, 0.10626679647985726, 0.12374152072561173, 0.12292671931998533, 0.1410421852329219, 0.16235017197764479, 0.15835763347690712, 0.16013595852599538, 0.1453564438957745, 0.16237595496443225, 0.15530725393262512, 0.17351647538550952, 0.18277251685337847, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.1634172393060731, 0.18398585881341456, 0.1667659760983694, 0.1665460324992648, 0.15961619188640974, 0.15118900390224022, 0.14118650330725813, 0.16136733485488552, 0.16338958747292087, 0.1764618998547559, 0.15765153817199684, 0.15830181967274926, 0.16486528169433712, 0.15046327197385212, 0.18881152732494155, 0.16042289081140204, 0.1685289612731522, 0.17334792726776782, 0.20283152042730257, 0.17574858484363032, 0.19091928307853379, 0.1758308260445548, 0.18681000009199056, 0.21355736433773875, 0.18379926708863337, 0.17592952085874403, 0.1893061836596659, 0.20566531589602943, 0.05833110590115975, 0.055306973767591305, 0.0658438168432971, 0.051893445177108144, 0.059336308689276085, 0.0559252686385755, 0.07530959676481797, 0.05490519083582679, 0.060715105344546605]}, "mutation_prompt": null}
{"id": "331a03fb-ab4b-440d-9518-1629cd887755", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "ImprovedHarmonySearch", "description": "Improved Harmony Search algorithm with enhanced harmony generation strategy based on differential evolution to explore the search space more efficiently.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b7983dd-c3b3-4a14-8776-aacd1d7ddc92", "metadata": {"aucs": [0.17768864716582444, 0.17575309908026104, 0.17023355580116073, 0.17149369045723672, 0.1881414371914294, 0.1743526558398273, 0.1785357813382621, 0.162722160220926, 0.1900265335894682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206671787898375, 0.046529939915608165, 0.03699924804261212, 0.04101926048678728, 0.037312911435916085, 0.03948023545883572, 0.052832173927772064, 0.06700968355571746, 0.058697959752307516, 0.025972761907869235, 0.032498640406570356, 0.04820815519306687, 0.02779403482884968, 0.049256295938478245, 0.057014098004606106, 0.03767739033282891, 0.03991373300032519, 0.02989132737689104, 0.08745141895304964, 0.07415928260010152, 0.0908547325628537, 0.08821219889875898, 0.08031074385691028, 0.08637574958014904, 0.08221094302267395, 0.08618988619160117, 0.07931754108742428, 0.07971774788656472, 0.08041758554917722, 0.10169819758183984, 0.06781535700304142, 0.06226385035348936, 0.06127909879417914, 0.0947049366126006, 0.06101000468850182, 0.09990373396969643, 0.1255156056280875, 0.19304702140278873, 0.14815435079016037, 0.10469233370454678, 0.09682896132841556, 0.13120658420659315, 0.12591859333529243, 0.13681759466789645, 0.11597311261395693, 0.004348029005056042, 0.004558269530374082, 0.006202075247701777, 0.004184249290024811, 9.999999999998899e-05, 0.00043290697986964055, 9.999999999998899e-05, 9.999999999998899e-05, 0.0198680208659765, 0.008145207404021693, 0.06955668591673547, 9.999999999998899e-05, 0.011984156506037236, 0.03535474427844443, 0.011857267414164374, 0.017989636894567007, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052923383700472004, 0.0685743806302127, 0.04526471128876741, 0.06940319587850263, 0.03257561955378663, 0.055757365452125285, 0.06156885388820299, 0.05007345650130268, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22084133410785178, 0.19295315740895125, 0.1949141774978692, 0.20595539682046016, 0.18921868555433785, 0.2072699710045307, 0.1998523204589705, 0.17856482279945307, 0.2040627334103441, 0.04999957771121044, 0.04251699021260025, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.0459998166282749, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.1375038769068011, 0.12735161993917954, 0.13718726593615316, 0.14126039325335837, 0.14116328865982009, 0.1301092024520092, 0.15032558062406165, 0.14859111709148076, 0.13382655374771169, 0.17183118956632482, 0.16052818911018552, 0.17601599134126644, 0.16779423367209934, 0.1821332585358867, 0.1770649666772035, 0.1658948926534367, 0.1737637695523081, 0.15377206854889824, 0.11536045488592572, 0.10379944308543132, 0.11846467432150021, 0.11237831636517581, 0.136096771678897, 0.11676171466678986, 0.10626679647985726, 0.12374152072561173, 0.12292671931998533, 0.1410421852329219, 0.16235017197764479, 0.15835763347690712, 0.16013595852599538, 0.1453564438957745, 0.16237595496443225, 0.15530725393262512, 0.17351647538550952, 0.18277251685337847, 0.14191959121740005, 0.14584938604755793, 0.14257438881905604, 0.14098597531777268, 0.1440858041752554, 0.1527902130303268, 0.1409326423185019, 0.14172381942597645, 0.1634172393060731, 0.18398585881341456, 0.1667659760983694, 0.1665460324992648, 0.15961619188640974, 0.15118900390224022, 0.14118650330725813, 0.16136733485488552, 0.16338958747292087, 0.1764618998547559, 0.15765153817199684, 0.15830181967274926, 0.16486528169433712, 0.15046327197385212, 0.18881152732494155, 0.16042289081140204, 0.1685289612731522, 0.17334792726776782, 0.20283152042730257, 0.17574858484363032, 0.19091928307853379, 0.1758308260445548, 0.18681000009199056, 0.21355736433773875, 0.18379926708863337, 0.17592952085874403, 0.1893061836596659, 0.20566531589602943, 0.05833110590115975, 0.055306973767591305, 0.0658438168432971, 0.051893445177108144, 0.059336308689276085, 0.0559252686385755, 0.07530959676481797, 0.05490519083582679, 0.060715105344546605]}, "mutation_prompt": null}
{"id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 6, "fitness": 0.0919811052212647, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "6b7983dd-c3b3-4a14-8776-aacd1d7ddc92", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "2fad14e3-7439-4a6d-b3f2-4a0097f7d897", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "1a095942-6170-421b-bfda-7b023294f153", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.step_size, self.step_size) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicHarmonySearch", "description": "Introducing dynamic step size control to adjust the exploration-exploitation balance during the search process.", "configspace": "", "generation": 8, "fitness": 0.0919811052212647, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "da54cd17-d138-4260-bfd2-0649a7b52c26", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "ea7538ee-ae8d-4ec1-909c-965a8dd9dc5d", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "b1edec34-989a-4910-9d7b-f1a65579b9c3", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "634512b5-0c65-4662-b3db-dc0e84233a56", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "2f6ecdf3-f87b-49dd-afaa-7f6b386482be", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "e96f372b-78d7-4316-9a02-f24f3dd854b8", "solution": "import numpy as np\n\nclass DynamicHarmonySearch(EnhancedHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_step = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.mutation_step, self.mutation_step) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            self.mutation_step *= 0.99  # Dynamic adaptation of mutation step size\n        return harmonies[0]", "name": "DynamicHarmonySearch", "description": "Introducing a dynamic adaptation of the mutation step size to enhance exploration and exploitation of the search space.", "configspace": "", "generation": 14, "fitness": 0.0919811052212647, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "76f985a3-39d6-4a89-9f05-b1434648257b", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            step_size = np.random.uniform(0, 0.2)\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + step_size * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "AdaptiveHarmonySearch", "description": "Enhancing harmony search with adaptive step size adjustment for improved exploration and exploitation.", "configspace": "", "generation": 15, "fitness": 0.09196869551146333, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967561717523116, 0.174797502582687, 0.17044317784861818, 0.1752893325398942, 0.1776540944410948, 0.17215034138479746, 0.17627443425890366, 0.18247721462936628, 0.16461582645796558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545877012544623, 0.08829408085624202, 0.08390890731371581, 0.08051911651116284, 0.08104633662296201, 0.08647800054352206, 0.0856010544993232, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.09846851973644188, 0.13067798508135398, 0.11973870410223919, 0.11980257208810963, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21609505785256744, 0.21242589398334066, 0.19040692933586356, 0.2049165291906735, 0.18439180361159602, 0.1963162680051761, 0.1958060186424253, 0.1835462308819097, 0.1901757340571325, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456001845735425, 0.12051580317421307, 0.14738564910570318, 0.17071673028101453, 0.1392977120232186, 0.12824084011699066, 0.15517105112295027, 0.14481152120033003, 0.13562921285022422, 0.16359320237218322, 0.15893773326873362, 0.16745051520289744, 0.16442048041680535, 0.17089434079392596, 0.16862299903592648, 0.1810645186662918, 0.17370975548341483, 0.16824911001332565, 0.1041330921074074, 0.10827092296386875, 0.10930068811358018, 0.12245150972791341, 0.12826327638905366, 0.1099048780236781, 0.1125609137398722, 0.1231311925720332, 0.11942360762995818, 0.14463439616117735, 0.15641905127256328, 0.14235033993030133, 0.15994013603846402, 0.18713218335296344, 0.16858067387903342, 0.1471713964366258, 0.15345672285699807, 0.18011875075006933, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304365364575824, 0.16455530408979357, 0.1781213354128447, 0.15483136268997566, 0.179462939988696, 0.18429919506589, 0.1550481794113393, 0.16592021026908677, 0.16046966893154002, 0.1490001366021847, 0.1659988408934422, 0.19164119540134494, 0.14447622828246331, 0.19129684928880075, 0.1556974610602596, 0.17068357694818337, 0.17370907879557085, 0.1853219122282268, 0.16850291297605458, 0.1845429966140315, 0.1750578551204699, 0.1845647809754284, 0.2095346020159493, 0.18924091233784024, 0.17638356490577567, 0.18117946253216055, 0.20288953865215675, 0.05600832472241268, 0.05644733524985934, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "92ab388d-db72-4ed6-a4e3-59652d5d0428", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            # Introducing mutation for diversity\n            mutation = np.random.uniform(-0.2, 0.2, size=(self.budget, self.dim))\n            harmonies += mutation\n            harmonies = np.clip(harmonies, self.lower_bound, self.upper_bound)\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Improving population diversity by introducing a mutation step that adds random displacements to harmonies.", "configspace": "", "generation": 16, "fitness": 0.0919811052212647, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "c0d7d358-bb10-4cc8-8d5e-9ebf286388b7", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "58dc7512-7477-4a78-a0de-a61f5e13da91", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "8e00a45d-74b1-49a8-977c-fbcb56820b9d", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "f4170b0c-919a-458f-abcb-8e122e36afa0", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "f843052d-8685-4270-9388-6f00cbe337f7", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "8842c643-50e9-436a-93ca-fd79d17f82b6", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "0b39b2be-1e07-43bc-a753-072f956cd9cd", "solution": "import numpy as np\n\nclass DynamicPitchEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_adjustment_rate = 0.1  # Dynamic pitch adjustment rate\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch_adjustment = self.pitch_adjustment_rate * np.random.uniform(-1, 1)  # Dynamic pitch adjustment\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + pitch_adjustment * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchEnhancedHarmonySearch", "description": "Introducing dynamic pitch adjustment to enhance the diversity of solutions generated during the harmony search process.", "configspace": "", "generation": 23, "fitness": 0.09197955043203143, "feedback": "The algorithm DynamicPitchEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967544704687754, 0.17479805635768175, 0.17044323493071856, 0.1752893325398942, 0.17765370190643648, 0.17215034138479746, 0.17627447713933164, 0.18247721462936628, 0.16461805844412614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545905971955325, 0.08829408085624202, 0.08390890731371581, 0.08051907127964752, 0.08104633662296201, 0.08647800054352206, 0.0856010434592045, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.10098944046672964, 0.13067798508135398, 0.11973870410223919, 0.11980169594430468, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2160998670864448, 0.2124252277500639, 0.19040862107722034, 0.20491610445225195, 0.18439985801357972, 0.19631465202596465, 0.19580495119719987, 0.1835462308819097, 0.19017466459757937, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456002043531518, 0.12051244028081454, 0.14738245558877205, 0.1707161776617886, 0.1392856407145453, 0.12824195941574068, 0.15517074864450386, 0.14479240396056137, 0.13562699546524015, 0.1635918531047973, 0.15892631792883982, 0.16745051520289744, 0.1644204290289969, 0.17093688731758871, 0.16861809884639156, 0.18106373242258966, 0.17371013512256872, 0.16824403244167008, 0.1041363252345271, 0.10827092296386875, 0.10930068811358018, 0.122450490239976, 0.1282589827920092, 0.1099048780236781, 0.11256453328638016, 0.12313480159180057, 0.11942360762995818, 0.14463538301366985, 0.15642019253877792, 0.1423506801686064, 0.15994072760697342, 0.1871326943393049, 0.1685803760546536, 0.14716979523116136, 0.153457487276905, 0.18011810437727693, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304359033190864, 0.1645568695989763, 0.17812163919703927, 0.15467811275052212, 0.17946309402622296, 0.1842991268105928, 0.15504823977453652, 0.16591439768074545, 0.16046751180102925, 0.14892878725183512, 0.16599885415005067, 0.19164136709291624, 0.14447606815791025, 0.19129699808142198, 0.15569741080813493, 0.17068399734149442, 0.17370901341450007, 0.18532136207220984, 0.1684935067050054, 0.18453382496798143, 0.17505769934130988, 0.1845687181368153, 0.20953399314638999, 0.189238238793643, 0.17643029838328717, 0.1812005299598164, 0.20289407538575055, 0.05600832472241268, 0.05644950923731795, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "e5e70d0a-320e-4c15-9bf6-6c4f115b6e56", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            mutation_strength = np.mean(np.linalg.norm(harmonies - np.mean(harmonies, axis=0), axis=1))\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-mutation_strength, mutation_strength) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearchDynamicMutation", "description": "Introducing a dynamic mutation strategy based on distance diversity to enhance exploration and exploitation balance.", "configspace": "", "generation": 24, "fitness": 0.09197942451041026, "feedback": "The algorithm EnhancedHarmonySearchDynamicMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16966975824293096, 0.17479538774690595, 0.17045385916208922, 0.1752893325398942, 0.177651957826909, 0.17215315056784186, 0.17627194141945035, 0.18247721462936628, 0.16461769706434315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03568016276241992, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03917443234850071, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545229458471315, 0.08829408085624202, 0.08390890731371581, 0.08052037335276763, 0.08104633662296201, 0.08647800054352206, 0.08560118655904658, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14291058957318414, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21606189895166494, 0.2124238370081888, 0.19040234802062128, 0.20491387200607036, 0.1843758335861374, 0.19632491584037515, 0.19580495119719987, 0.18354657397915886, 0.19017367996150136, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456011807731189, 0.12052383898177943, 0.14738344537175285, 0.1707161776617886, 0.13928537441304834, 0.12824179041190875, 0.1551883433726161, 0.14479240396056137, 0.13562699546524015, 0.16359123034669665, 0.158920784221674, 0.1674541206404534, 0.1644130651224024, 0.17088900127643813, 0.16867221614883643, 0.1810598036869736, 0.17371082352304534, 0.1682483034581186, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.1282589827920092, 0.10990755341563219, 0.1125609137398722, 0.12313237172757163, 0.11942871863488125, 0.14462715178075125, 0.15641728808988742, 0.14236103870801853, 0.15993434674042895, 0.18713177280373416, 0.16859438119567116, 0.14716329125127015, 0.15345641702724644, 0.18013850215349725, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16294411734857417, 0.17304298026327558, 0.16455105239933454, 0.17812146198302892, 0.15466022276695857, 0.1794600735098405, 0.18431453289790312, 0.15504727376838912, 0.16591113947791092, 0.16046865350420625, 0.14891804848922297, 0.1659987904403255, 0.19164107385320472, 0.1444755731328723, 0.19129689807437522, 0.15569840937049229, 0.17068309498530232, 0.17370880609994088, 0.1853229155095082, 0.16849922005121776, 0.1845264507955774, 0.17505846285359572, 0.18456873160569354, 0.2095377050768623, 0.18924616509374415, 0.1763813228890695, 0.18118644780165738, 0.2028901978194212, 0.05600832472241268, 0.05644733524985934, 0.06400000708918341, 0.05040424593114001, 0.05862463198619605, 0.0627011561875892, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "bdbd5d24-a3f5-4286-8939-c29d7a17e09f", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "5f0039ad-a568-4d3f-8760-291bbbe323c3", "solution": "class DynamicPitchEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_width = 0.1  # Initial pitch width\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.pitch_width, self.pitch_width) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            # Dynamic pitch width adjustment based on function landscape\n            self.pitch_width = np.abs(np.max(harmonies) - np.min(harmonies)) / 10\n        return harmonies[0]", "name": "DynamicPitchEnhancedHarmonySearch", "description": "Introducing a dynamic adjustment of the pitch width based on function landscape analysis to enhance exploration capability.", "configspace": "", "generation": 26, "fitness": 0.0919811052212647, "feedback": "The algorithm DynamicPitchEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "44afbbe8-e6f3-4940-b021-d097fb0b03a0", "solution": "import numpy as np\n\nclass DynamicEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            # Adjust exploration probability dynamically\n            self.explore_prob = 1.0 - (_ / self.budget)  # Linearly decrease exploration\n        return harmonies[0]", "name": "DynamicEnhancedHarmonySearch", "description": "Integrating a dynamic adaptation mechanism to adjust the exploration-exploitation balance based on the function landscape.", "configspace": "", "generation": 27, "fitness": 0.0919811052212647, "feedback": "The algorithm DynamicEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "c0e3338a-308b-459e-aa5a-76113f8f07c7", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchAdaptiveStep:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.step_size, self.step_size) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearchAdaptiveStep", "description": "Introducing adaptive step size control to enhance exploration and exploitation balance in the Enhanced Harmony Search algorithm.", "configspace": "", "generation": 28, "fitness": 0.0919811052212647, "feedback": "The algorithm EnhancedHarmonySearchAdaptiveStep got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "d49850b0-a0e1-44b7-9f3a-6ec4097b408e", "solution": "import numpy as np\n\nclass DynamicPitchEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_adjustment_rate = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch = np.random.uniform(0, self.pitch_adjustment_rate)\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + pitch * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchEnhancedHarmonySearch", "description": "Enhancing harmony generation with dynamic pitch adjustment for improved exploration and exploitation.", "configspace": "", "generation": 29, "fitness": 0.09197398014847949, "feedback": "The algorithm DynamicPitchEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.1696755829350115, 0.17479776879466769, 0.17044322500367692, 0.1752893325398942, 0.17765397134389171, 0.17215034138479746, 0.1762744615403855, 0.18247721462936628, 0.16461727964469552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545885880711701, 0.08829408085624202, 0.08390890731371581, 0.0805191025456603, 0.08104633662296201, 0.08647800054352206, 0.08560105109989213, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.09970691482193483, 0.13067798508135398, 0.11973870410223919, 0.11979925174024975, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21609780970536907, 0.21242567657107725, 0.19040818389014713, 0.20491640046802817, 0.18439560817476663, 0.19631521352285486, 0.19580548746789617, 0.1835462308819097, 0.1901753158655909, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456001845735425, 0.12051262113117012, 0.14738245558877205, 0.1707161776617886, 0.1392907811662819, 0.12823904864085656, 0.15517074864450386, 0.14479991145463833, 0.13562699546524015, 0.16359183159653745, 0.15892803649548093, 0.16745051520289744, 0.16442104399118396, 0.17089118409806747, 0.1686182841041609, 0.1810645589071782, 0.17370952238924287, 0.16825046063042914, 0.1041325111317728, 0.1082823792604608, 0.10930068811358018, 0.12245147936949252, 0.12826404595343066, 0.1099048780236781, 0.11256128975187274, 0.12314619727254483, 0.11942548367061934, 0.14463412412866128, 0.15641932135854164, 0.14235038438624192, 0.15994114687765504, 0.18713243313071592, 0.16858095399552897, 0.14717215661990302, 0.15345661555932888, 0.18011711198419322, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304363902463304, 0.16455666961668702, 0.17812145907138055, 0.1547468953716088, 0.17946317877912532, 0.18429916269943925, 0.1550482333756441, 0.16591511035995332, 0.16046781680521383, 0.1489820460298491, 0.16599884782575913, 0.19164131114023597, 0.1444760461355794, 0.19129689993368204, 0.15569742332975622, 0.17068370382988107, 0.1737090512621049, 0.18532154409836432, 0.1684958698093989, 0.1845297310288172, 0.17505652914374492, 0.18457272615540066, 0.20953544807049018, 0.18923784007756406, 0.1763795652417144, 0.18121934571386078, 0.2028887066756132, 0.05600832472241268, 0.056453057153017516, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "98678eed-b8f8-4505-9d5d-b7e838d0f9ab", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "d46174cd-f98d-4dff-b7b2-2a1350eb8ed8", "solution": "import numpy as np\n\nclass DynamicPitchEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_adj_rate = 0.1  # Dynamic pitch adjustment rate\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch_adjustment = self.pitch_adj_rate * np.abs(np.random.normal(0, 1, self.dim))\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + pitch_adjustment * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchEnhancedHarmonySearch", "description": "Introducing dynamic adaptation of the pitch adjustment parameter to enhance exploration and exploitation balance in the algorithm.", "configspace": "", "generation": 31, "fitness": 0.0919670328934611, "feedback": "The algorithm DynamicPitchEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967401153807382, 0.1748054833361926, 0.17044870549652902, 0.17534046757412036, 0.177651957826909, 0.17215034138479746, 0.17627194141945035, 0.18248007769181118, 0.16461356104045355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545504840115059, 0.08829465059639185, 0.08393919210846235, 0.08056900282034951, 0.08104798035777983, 0.08648939430630631, 0.0856778454301258, 0.08045159359719034, 0.08876072986836547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21606189895166494, 0.21244226826322787, 0.190399294734644, 0.20491390051185343, 0.1843754390809349, 0.19631661393624467, 0.19580502980957115, 0.18357536399875896, 0.19016244342429522, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560121145713278, 0.12051244028081454, 0.14738266085081486, 0.17072307323088476, 0.13928537441304834, 0.12824578976304657, 0.1551734854444421, 0.1447948390821292, 0.1356270197781223, 0.1635918832789368, 0.1589363933945599, 0.16746581727139143, 0.1644171681147194, 0.17087806323065446, 0.1686234902431304, 0.181059273828446, 0.17370955463637605, 0.16824297925812026, 0.10413344726159635, 0.10827408405418848, 0.10931319978075138, 0.12245037179670726, 0.1282589827920092, 0.1099111758018535, 0.1125609137398722, 0.12312996638542262, 0.11942360762995818, 0.14463327328194298, 0.15641765750781356, 0.14234855711628447, 0.15993434674042895, 0.18713467621917912, 0.16857827807066528, 0.14716806383972414, 0.1534595162035337, 0.18010596370566023, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304323675941247, 0.16455251968501927, 0.17812116221327434, 0.15466099826734991, 0.17946310339222815, 0.18429918200068485, 0.15504748170076854, 0.16591830093938298, 0.16048161557976803, 0.1489179918257134, 0.1659991683871056, 0.19164134758211326, 0.14447630668777278, 0.19130207724216886, 0.15569764816018083, 0.17068325152076946, 0.173713622851008, 0.1853250469870612, 0.16849615024310183, 0.1845349773930195, 0.17505815755311527, 0.18456848853990127, 0.2095434184847259, 0.18924836421022906, 0.17638200548856653, 0.18119817996682064, 0.20288940693305757, 0.05600832472241268, 0.05644733524985934, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07224292280599731, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "f7edaee4-4630-49a6-abd1-534a1a482a6a", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "89fac694-803d-41a5-8e16-196b09544dc3", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "8ea72f0b-c239-42a7-87af-da2ae4465a61", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.step_size, self.step_size) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            # Adjust step size based on landscape\n            best_harmony = harmonies[0]\n            worst_harmony = harmonies[-1]\n            self.step_size = np.linalg.norm(best_harmony - worst_harmony) / self.budget\n        return harmonies[0]", "name": "DynamicHarmonySearch", "description": "Improving convergence by dynamically adjusting the mutation step size based on the function landscape.", "configspace": "", "generation": 34, "fitness": 0.0919811052212647, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "43dceecf-c955-41c0-995c-5aae5001bdef", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchDynamicBandwidth:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1  # Initial bandwidth for dynamic adjustment\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.bandwidth, self.bandwidth) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            self.bandwidth *= 0.99  # Decreasing bandwidth for local search\n        return harmonies[0]", "name": "EnhancedHarmonySearchDynamicBandwidth", "description": "Enhancing harmony search by incorporating dynamic bandwidth adaptation to improve local search capability.", "configspace": "", "generation": 35, "fitness": 0.0919811052212647, "feedback": "The algorithm EnhancedHarmonySearchDynamicBandwidth got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "5abb2c9e-a026-4861-b923-411503610c9e", "solution": "import numpy as np\n\nclass DifferentialEvolutionEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            # Differential Evolution Strategy\n            for idx in range(self.budget):\n                candidate = harmonies[np.random.choice(np.setdiff1d(np.arange(self.budget), idx), 3, replace=False)]\n                mutant = candidate[0] + 0.5 * (candidate[1] - candidate[2])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                if func(mutant) < func(harmonies[idx]):\n                    harmonies[idx] = mutant\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DifferentialEvolutionEnhancedHarmonySearch", "description": "Incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 36, "fitness": 0.0919811052212647, "feedback": "The algorithm DifferentialEvolutionEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "a73a9ccb-f2ac-4c37-aa2a-87d1dc04b4e6", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "6a648e68-9ea9-4d6d-929f-726ea0c4c169", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_step = 0.1  # Initial mutation step size\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            mutation_step = self.mutation_step * np.exp(-0.1 * _)  # Adaptive mutation step size\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-mutation_step, mutation_step) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "AdaptiveHarmonySearch", "description": "Introducing adaptive mutation step size based on function landscape to enhance exploration capability.", "configspace": "", "generation": 38, "fitness": 0.0919811052212647, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "588d5061-203e-46e4-8cb1-566ffda6c7d6", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "bf3f682c-8862-4a5a-ac3f-9c00ffc657c9", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "6afce2b0-eb0c-48f4-a0a4-c1386ed978be", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "3504b4ec-1d49-46e1-8292-23e17281eafb", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            mutation_step = np.random.uniform(0, self.mutation_rate)\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + mutation_step * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "AdaptiveHarmonySearch", "description": "Introducing adaptive mutation step size to enhance exploration capability while maintaining convergence speed.", "configspace": "", "generation": 42, "fitness": 0.09197398014847949, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.1696755829350115, 0.17479776879466769, 0.17044322500367692, 0.1752893325398942, 0.17765397134389171, 0.17215034138479746, 0.1762744615403855, 0.18247721462936628, 0.16461727964469552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545885880711701, 0.08829408085624202, 0.08390890731371581, 0.0805191025456603, 0.08104633662296201, 0.08647800054352206, 0.08560105109989213, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.09970691482193483, 0.13067798508135398, 0.11973870410223919, 0.11979925174024975, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21609780970536907, 0.21242567657107725, 0.19040818389014713, 0.20491640046802817, 0.18439560817476663, 0.19631521352285486, 0.19580548746789617, 0.1835462308819097, 0.1901753158655909, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456001845735425, 0.12051262113117012, 0.14738245558877205, 0.1707161776617886, 0.1392907811662819, 0.12823904864085656, 0.15517074864450386, 0.14479991145463833, 0.13562699546524015, 0.16359183159653745, 0.15892803649548093, 0.16745051520289744, 0.16442104399118396, 0.17089118409806747, 0.1686182841041609, 0.1810645589071782, 0.17370952238924287, 0.16825046063042914, 0.1041325111317728, 0.1082823792604608, 0.10930068811358018, 0.12245147936949252, 0.12826404595343066, 0.1099048780236781, 0.11256128975187274, 0.12314619727254483, 0.11942548367061934, 0.14463412412866128, 0.15641932135854164, 0.14235038438624192, 0.15994114687765504, 0.18713243313071592, 0.16858095399552897, 0.14717215661990302, 0.15345661555932888, 0.18011711198419322, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304363902463304, 0.16455666961668702, 0.17812145907138055, 0.1547468953716088, 0.17946317877912532, 0.18429916269943925, 0.1550482333756441, 0.16591511035995332, 0.16046781680521383, 0.1489820460298491, 0.16599884782575913, 0.19164131114023597, 0.1444760461355794, 0.19129689993368204, 0.15569742332975622, 0.17068370382988107, 0.1737090512621049, 0.18532154409836432, 0.1684958698093989, 0.1845297310288172, 0.17505652914374492, 0.18457272615540066, 0.20953544807049018, 0.18923784007756406, 0.1763795652417144, 0.18121934571386078, 0.2028887066756132, 0.05600832472241268, 0.056453057153017516, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "b4b97511-a377-42fc-8a2d-18738f9c241c", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "56d090b1-331d-4b72-81cd-1fb323d0d249", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "b6f6e6b2-3dc3-486b-a774-dec35261e109", "solution": "import numpy as np\n\nclass DynamicPitchEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_adjustment_rate = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch_adjustment = self.pitch_adjustment_rate * np.random.uniform(-1, 1)\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + pitch_adjustment * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchEnhancedHarmonySearch", "description": "Enhancing harmony search by introducing a dynamic pitch adjustment strategy to enhance exploration and exploitation balance.", "configspace": "", "generation": 45, "fitness": 0.09197955043203143, "feedback": "The algorithm DynamicPitchEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967544704687754, 0.17479805635768175, 0.17044323493071856, 0.1752893325398942, 0.17765370190643648, 0.17215034138479746, 0.17627447713933164, 0.18247721462936628, 0.16461805844412614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545905971955325, 0.08829408085624202, 0.08390890731371581, 0.08051907127964752, 0.08104633662296201, 0.08647800054352206, 0.0856010434592045, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.10098944046672964, 0.13067798508135398, 0.11973870410223919, 0.11980169594430468, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2160998670864448, 0.2124252277500639, 0.19040862107722034, 0.20491610445225195, 0.18439985801357972, 0.19631465202596465, 0.19580495119719987, 0.1835462308819097, 0.19017466459757937, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456002043531518, 0.12051244028081454, 0.14738245558877205, 0.1707161776617886, 0.1392856407145453, 0.12824195941574068, 0.15517074864450386, 0.14479240396056137, 0.13562699546524015, 0.1635918531047973, 0.15892631792883982, 0.16745051520289744, 0.1644204290289969, 0.17093688731758871, 0.16861809884639156, 0.18106373242258966, 0.17371013512256872, 0.16824403244167008, 0.1041363252345271, 0.10827092296386875, 0.10930068811358018, 0.122450490239976, 0.1282589827920092, 0.1099048780236781, 0.11256453328638016, 0.12313480159180057, 0.11942360762995818, 0.14463538301366985, 0.15642019253877792, 0.1423506801686064, 0.15994072760697342, 0.1871326943393049, 0.1685803760546536, 0.14716979523116136, 0.153457487276905, 0.18011810437727693, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304359033190864, 0.1645568695989763, 0.17812163919703927, 0.15467811275052212, 0.17946309402622296, 0.1842991268105928, 0.15504823977453652, 0.16591439768074545, 0.16046751180102925, 0.14892878725183512, 0.16599885415005067, 0.19164136709291624, 0.14447606815791025, 0.19129699808142198, 0.15569741080813493, 0.17068399734149442, 0.17370901341450007, 0.18532136207220984, 0.1684935067050054, 0.18453382496798143, 0.17505769934130988, 0.1845687181368153, 0.20953399314638999, 0.189238238793643, 0.17643029838328717, 0.1812005299598164, 0.20289407538575055, 0.05600832472241268, 0.05644950923731795, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "7d897945-fdc0-4f60-9e6b-f6d0c4b37420", "solution": "import numpy as np\n\nclass DynamicRangeEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            range_adjust = np.abs(self.upper_bound - self.lower_bound) * np.exp(-(_ / self.budget))\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-range_adjust, range_adjust) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicRangeEnhancedHarmonySearch", "description": "Improving convergence by dynamically adjusting exploration range during optimization.", "configspace": "", "generation": 46, "fitness": 0.09198056685268187, "feedback": "The algorithm DynamicRangeEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16966975824293096, 0.17479538774690595, 0.170452753039123, 0.1752893325398942, 0.177651957826909, 0.17215283070835707, 0.17627194141945035, 0.18247721462936628, 0.16461605717106575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03569738915593901, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892527826743519, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545218348994388, 0.08829408085624202, 0.08390890731371581, 0.08051911883451612, 0.08104633662296201, 0.08647800054352206, 0.0856009435545051, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.1429191334926525, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21606189895166494, 0.2124238370081888, 0.19040080645753255, 0.20491387200607036, 0.1843754390809349, 0.19632506158111018, 0.19580495119719987, 0.18354734316378474, 0.19017100637064832, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456037836032108, 0.12051244028081454, 0.14738245558877205, 0.17071705478654298, 0.1392858115746849, 0.12824113474179644, 0.15517074864450386, 0.14481117467494242, 0.13562699546524015, 0.16358976554010585, 0.15892266318928994, 0.16745366724484434, 0.1644130651224024, 0.1708860544355243, 0.16863899939140414, 0.18105975323883827, 0.1737160140064612, 0.16825040699674942, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826194108262967, 0.10990988466528584, 0.1125609137398722, 0.12313315897695698, 0.1194320272149536, 0.14462715178075125, 0.15641728808988742, 0.1423850046525479, 0.15993434674042895, 0.18713177280373416, 0.16860115863086178, 0.14716329125127015, 0.15345641702724644, 0.18012624274808475, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16344233674078545, 0.17304302704295227, 0.16455105903023703, 0.1781211544569724, 0.154660160926688, 0.17945999681361513, 0.1843017024545094, 0.15504728122231537, 0.16591078868906062, 0.1604699230403961, 0.1489179865632677, 0.16599878457229023, 0.19164114068907157, 0.14447557558944168, 0.19129696869355028, 0.15569800574853365, 0.17068309894183353, 0.17370880323681726, 0.18532301514515115, 0.16849356621699463, 0.18453225683432828, 0.17505487811763887, 0.1845763368273139, 0.20953649801957552, 0.18924061675512727, 0.17638050730983412, 0.18117219944394547, 0.20288724354003584, 0.05600832472241268, 0.05644733524985934, 0.06402152330819066, 0.05040424593114001, 0.05862463198619605, 0.06270208905990526, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "cd57cfd1-c346-41e2-a35f-e03c49fb22eb", "solution": "import numpy as np\n\nclass DynamicEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.step_size, self.step_size) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            self.step_size *= 0.99  # Decaying exploration step size\n        return harmonies[0]", "name": "DynamicEnhancedHarmonySearch", "description": "Introducing a dynamic adjustment mechanism for the exploration step size to adapt during the optimization process.", "configspace": "", "generation": 47, "fitness": 0.0919811052212647, "feedback": "The algorithm DynamicEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "c0ae0830-ea0b-495a-add7-98fe6b563d0b", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "c0fa9383-7d96-41e7-924c-e2ca72a45fc7", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "5ef1c8cf-e4db-4a8e-ba80-8e6d106f534c", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_adjustment_rate = 0.1  # Dynamic pitch adjustment rate\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch_adjustment = self.pitch_adjustment_rate * np.abs(np.random.normal(0, 1, self.dim))\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + pitch_adjustment * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchHarmonySearch", "description": "Introducing a dynamic adaptation of pitch adjustment to enhance exploration and exploitation trade-off in harmony search.", "configspace": "", "generation": 50, "fitness": 0.0919670328934611, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967401153807382, 0.1748054833361926, 0.17044870549652902, 0.17534046757412036, 0.177651957826909, 0.17215034138479746, 0.17627194141945035, 0.18248007769181118, 0.16461356104045355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545504840115059, 0.08829465059639185, 0.08393919210846235, 0.08056900282034951, 0.08104798035777983, 0.08648939430630631, 0.0856778454301258, 0.08045159359719034, 0.08876072986836547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21606189895166494, 0.21244226826322787, 0.190399294734644, 0.20491390051185343, 0.1843754390809349, 0.19631661393624467, 0.19580502980957115, 0.18357536399875896, 0.19016244342429522, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560121145713278, 0.12051244028081454, 0.14738266085081486, 0.17072307323088476, 0.13928537441304834, 0.12824578976304657, 0.1551734854444421, 0.1447948390821292, 0.1356270197781223, 0.1635918832789368, 0.1589363933945599, 0.16746581727139143, 0.1644171681147194, 0.17087806323065446, 0.1686234902431304, 0.181059273828446, 0.17370955463637605, 0.16824297925812026, 0.10413344726159635, 0.10827408405418848, 0.10931319978075138, 0.12245037179670726, 0.1282589827920092, 0.1099111758018535, 0.1125609137398722, 0.12312996638542262, 0.11942360762995818, 0.14463327328194298, 0.15641765750781356, 0.14234855711628447, 0.15993434674042895, 0.18713467621917912, 0.16857827807066528, 0.14716806383972414, 0.1534595162035337, 0.18010596370566023, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304323675941247, 0.16455251968501927, 0.17812116221327434, 0.15466099826734991, 0.17946310339222815, 0.18429918200068485, 0.15504748170076854, 0.16591830093938298, 0.16048161557976803, 0.1489179918257134, 0.1659991683871056, 0.19164134758211326, 0.14447630668777278, 0.19130207724216886, 0.15569764816018083, 0.17068325152076946, 0.173713622851008, 0.1853250469870612, 0.16849615024310183, 0.1845349773930195, 0.17505815755311527, 0.18456848853990127, 0.2095434184847259, 0.18924836421022906, 0.17638200548856653, 0.18119817996682064, 0.20288940693305757, 0.05600832472241268, 0.05644733524985934, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07224292280599731, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "cdef2e7d-9268-4f3e-ab4c-220909615c2a", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch = self.pitch_range * np.exp(-2.0 * _ / self.budget)  # Dynamic pitch adjustment\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + pitch * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchHarmonySearch", "description": "Enhancing harmony search by introducing dynamic pitch adjustment to adapt the search step size during optimization.", "configspace": "", "generation": 51, "fitness": 0.09197483669168373, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967789928027066, 0.17479756075891073, 0.17046278706813933, 0.1752893325398942, 0.17765438838157155, 0.17215375376020925, 0.17627790784780828, 0.18247721462936628, 0.16462163586395495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545403521307127, 0.08829408085624202, 0.08390969818166982, 0.08052087127829122, 0.08104633662296201, 0.08647800054352206, 0.08560197151888338, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638225392204496, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21616194413443723, 0.2124249300878338, 0.1904034923324227, 0.20491387200607036, 0.18438895505395325, 0.19632325218211644, 0.19581135400638727, 0.1835462308819097, 0.19018177898475197, 0.07093255128321108, 0.03978768126479504, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456004522020914, 0.12051244028081454, 0.14738245558877205, 0.17071647328389938, 0.13929141923837907, 0.12824070354691885, 0.15517074864450386, 0.1449622090822037, 0.1356307648710956, 0.1635927753594515, 0.158918946886213, 0.16745291862131784, 0.16441855142350126, 0.17089047732853246, 0.1686264074681556, 0.1810612720942122, 0.17371752224776305, 0.16825357393371143, 0.1041341697665783, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826286988506908, 0.10993936259343173, 0.11256148260290832, 0.12314813407842196, 0.11942904924292941, 0.14463124094566282, 0.1564201292505626, 0.14265067274613508, 0.15993938398245922, 0.18713451105894396, 0.1686004972923627, 0.1471705614561799, 0.15345859990773714, 0.18017138363084195, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304481123024074, 0.16455108210305203, 0.17812253845750892, 0.15466890615694173, 0.17946297831645186, 0.1842999190201583, 0.15505831667907655, 0.16603203798344146, 0.16046854989659787, 0.14891854610933386, 0.1659989239459705, 0.1916410126878786, 0.1444768135897313, 0.1913022940119442, 0.15569859865677937, 0.17068449918564477, 0.17371098362311221, 0.1861883618092285, 0.168498373076315, 0.18452664576086264, 0.17505751408104875, 0.18456467353270312, 0.20954086148395823, 0.1892468263160405, 0.17638098036413663, 0.18117859331996933, 0.20288750885819196, 0.05600832472241268, 0.05645372812277527, 0.06399933101762456, 0.05057842484306252, 0.05862463198619605, 0.06270081567793928, 0.07220952114828072, 0.05274867669655614, 0.06043733219235947]}, "mutation_prompt": null}
{"id": "f98d0671-4909-4541-bcba-69defcb17dd8", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing harmony generation by incorporating opposition-based learning to improve exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "99f08e51-0daf-480a-8581-3c230110b5f6", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch_adjustment = np.random.uniform(0, self.pitch_range)\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + pitch_adjustment * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchHarmonySearch", "description": "Enhancing harmony search by employing a dynamic pitch adjustment strategy to enhance global exploration capabilities while maintaining convergence speed.", "configspace": "", "generation": 53, "fitness": 0.09197398014847949, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.1696755829350115, 0.17479776879466769, 0.17044322500367692, 0.1752893325398942, 0.17765397134389171, 0.17215034138479746, 0.1762744615403855, 0.18247721462936628, 0.16461727964469552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03552887881885802, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892238913656276, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545885880711701, 0.08829408085624202, 0.08390890731371581, 0.0805191025456603, 0.08104633662296201, 0.08647800054352206, 0.08560105109989213, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14637546499410659, 0.18930589667575193, 0.14287773239867907, 0.09970691482193483, 0.13067798508135398, 0.11973870410223919, 0.11979925174024975, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21609780970536907, 0.21242567657107725, 0.19040818389014713, 0.20491640046802817, 0.18439560817476663, 0.19631521352285486, 0.19580548746789617, 0.1835462308819097, 0.1901753158655909, 0.07093255128321108, 0.03973443429906143, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456001845735425, 0.12051262113117012, 0.14738245558877205, 0.1707161776617886, 0.1392907811662819, 0.12823904864085656, 0.15517074864450386, 0.14479991145463833, 0.13562699546524015, 0.16359183159653745, 0.15892803649548093, 0.16745051520289744, 0.16442104399118396, 0.17089118409806747, 0.1686182841041609, 0.1810645589071782, 0.17370952238924287, 0.16825046063042914, 0.1041325111317728, 0.1082823792604608, 0.10930068811358018, 0.12245147936949252, 0.12826404595343066, 0.1099048780236781, 0.11256128975187274, 0.12314619727254483, 0.11942548367061934, 0.14463412412866128, 0.15641932135854164, 0.14235038438624192, 0.15994114687765504, 0.18713243313071592, 0.16858095399552897, 0.14717215661990302, 0.15345661555932888, 0.18011711198419322, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.1604429950546934, 0.17304363902463304, 0.16455666961668702, 0.17812145907138055, 0.1547468953716088, 0.17946317877912532, 0.18429916269943925, 0.1550482333756441, 0.16591511035995332, 0.16046781680521383, 0.1489820460298491, 0.16599884782575913, 0.19164131114023597, 0.1444760461355794, 0.19129689993368204, 0.15569742332975622, 0.17068370382988107, 0.1737090512621049, 0.18532154409836432, 0.1684958698093989, 0.1845297310288172, 0.17505652914374492, 0.18457272615540066, 0.20953544807049018, 0.18923784007756406, 0.1763795652417144, 0.18121934571386078, 0.2028887066756132, 0.05600832472241268, 0.056453057153017516, 0.06399835786917252, 0.05040424593114001, 0.05862463198619605, 0.06270081567793928, 0.07220952114828072, 0.05274867669655614, 0.06041801963209892]}, "mutation_prompt": null}
{"id": "24c8c390-efc7-4ad7-91a4-5bb6e9faca94", "solution": "import numpy as np\n\nclass DynamicPitchAdjustedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_range = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            pitch_band = self.pitch_range * np.exp(-5 * _ / self.budget)  # Dynamic pitch adjustment\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-pitch_band, pitch_band) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "DynamicPitchAdjustedHarmonySearch", "description": "Enhancing harmony search through dynamic pitch adjustment to enhance global exploration and exploitation.", "configspace": "", "generation": 54, "fitness": 0.0919811052212647, "feedback": "The algorithm DynamicPitchAdjustedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "39c53fa2-744b-4d8b-be7a-f461791309f1", "solution": "import numpy as np\n\nclass AdaptiveEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_adjustment_rate = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + np.random.uniform(-self.pitch_adjustment_rate, self.pitch_adjustment_rate) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n        return harmonies[0]", "name": "AdaptiveEnhancedHarmonySearch", "description": "Incorporate a dynamic adaptation of the pitch adjustment rate to improve local search and convergence speed.", "configspace": "", "generation": 55, "fitness": 0.0919811052212647, "feedback": "The algorithm AdaptiveEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967735676558526, 0.17479581368823804, 0.17045519288455657, 0.1752893325398942, 0.177651957826909, 0.17215360980973615, 0.17627687242345313, 0.18247721462936628, 0.16462065658519098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03575830759658272, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892535650233042, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545559225854138, 0.08829408085624202, 0.08390890731371581, 0.08052190294934514, 0.08104633662296201, 0.08647800054352206, 0.08560268017867367, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638166052778012, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.216165708489228, 0.21242400955115215, 0.19040508762571107, 0.20491387200607036, 0.18438731138017117, 0.19632370324270765, 0.1958099660332786, 0.1835462308819097, 0.1901783430623304, 0.07093255128321108, 0.039749416699440876, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.1456008759963877, 0.12051509623742529, 0.14738260049074925, 0.17071721999006817, 0.13935305556438293, 0.1282393476037763, 0.15517222356436455, 0.14479738023778232, 0.1356359751224936, 0.16359266013202522, 0.15891924290636272, 0.16745280526816841, 0.16441921445417407, 0.17089271657383964, 0.16864430058726776, 0.18106320901606465, 0.17371491126921845, 0.16824939117119175, 0.10413527742085682, 0.10827092296386875, 0.10930068811358018, 0.12245037179670726, 0.12826394615499925, 0.10991174618739463, 0.1125609137398722, 0.12314545319077153, 0.11942721735172979, 0.14462995725995387, 0.15641806155270388, 0.14240003760985198, 0.1599388821089508, 0.18713177280373416, 0.1686004753557261, 0.14716927968389615, 0.15345706894103273, 0.1801535261257493, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16317142807023832, 0.173044446202003, 0.1645510037419886, 0.1781225512113952, 0.15466613590132527, 0.17946424249812865, 0.18430279434908048, 0.15505091694990691, 0.1659391258659796, 0.16046793236419876, 0.14891857895977578, 0.16599885778072898, 0.19164113795517446, 0.1444769018676192, 0.19129772086045282, 0.15569930251987463, 0.1706849465066964, 0.17370904716197944, 0.18532254975086582, 0.16850343629080267, 0.18452031045066386, 0.1750556230888315, 0.18456660358577814, 0.20954110613217813, 0.18924253396276203, 0.1763792153906355, 0.18117286768006946, 0.20288958635363274, 0.05600832472241268, 0.056450838603816056, 0.06400539407463679, 0.050405872735039936, 0.05862463198619605, 0.06270198414502715, 0.07220952114828072, 0.05274867669655614, 0.060419111094059175]}, "mutation_prompt": null}
{"id": "99a65e42-c840-4c9e-9073-ebb93481ec34", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchDynamicStep:\n    def __init__(self, budget, dim, initial_step_size):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = initial_step_size\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            self.step_size = max(0.1, self.step_size * 0.99)  # Dynamic adaptation of step size\n        return harmonies[0]", "name": "EnhancedHarmonySearchDynamicStep", "description": "Introducing a dynamic adaptation of step size to improve local search capabilities.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"__init__() missing 1 required positional argument: 'initial_step_size'\").", "error": "TypeError(\"__init__() missing 1 required positional argument: 'initial_step_size'\")", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {}, "mutation_prompt": null}
{"id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 57, "fitness": 0.0919815357042679, "feedback": "The algorithm DynamicStepSizeHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17366939-d85d-436d-ab6f-64675e6f9bdf", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "40c233c6-aa23-43a6-84d6-c1026f611854", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "950861ca-29b3-42eb-af09-cec6abf5f4f7", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "c84e7ca9-ce19-4dce-9dc8-8b453b7ab3e5", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "832e01de-84b9-42ee-8d20-d76a766a48f3", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n            \n            # Adaptive population diversity mechanism\n            diversity_threshold = 0.1\n            for i in range(1, self.budget):\n                if np.linalg.norm(harmonies[i] - harmonies[i-1]) < diversity_threshold:\n                    harmonies[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        return harmonies[0]", "name": "EnhancedDynamicStepSizeHarmonySearch", "description": "Introducing a novel adaptive population diversity mechanism to maintain diverse solutions during the optimization process.", "configspace": "", "generation": 61, "fitness": 0.0919815357042679, "feedback": "The algorithm EnhancedDynamicStepSizeHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "c66dcd96-5002-4647-87c3-934ac1ec0b8e", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "fe239f02-ee9b-42d8-923c-05e42683c290", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "eb68688e-b113-4f35-a2d3-f83cf6dc87c1", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "d87f4df7-fee5-436d-be8d-be0802b4bc6d", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "7ec516ab-e02c-45fb-9f6d-f6aab55035e1", "solution": "import numpy as np\n\nclass AdaptiveDynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            mutation_rate = 1.0 - np.exp(-0.1 * np.arange(self.dim))\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * mutation_rate * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n            self.step_size *= 0.995\n\n        return harmonies[0]", "name": "AdaptiveDynamicStepSizeHarmonySearch", "description": "Introducing adaptive mutation based on individual harmony fitness to enhance exploration and exploitation balance.", "configspace": "", "generation": 66, "fitness": 0.09198152746849882, "feedback": "The algorithm AdaptiveDynamicStepSizeHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741529539182, 0.17479630544969205, 0.1704552065925744, 0.1752893325398942, 0.177651957826909, 0.17215361612660962, 0.17627704110659526, 0.18247721462936628, 0.16462070495173398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.03577072532919501, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892531903168783, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.08545574238879927, 0.08829408085624202, 0.08390890731371581, 0.08052167512230957, 0.08104633662296201, 0.08647800054352206, 0.08560264272914697, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.21619819139051033, 0.21242474533027167, 0.1904051322133129, 0.20491387200607036, 0.18438775321793188, 0.1963236650065433, 0.195808558663919, 0.1835462308819097, 0.1901784130792551, 0.07093255128321108, 0.03976991228826576, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560032414588253, 0.1205201914479539, 0.1473826724312839, 0.17071777823762457, 0.13929795738567408, 0.12823966935869335, 0.15517126436701834, 0.14482002537207195, 0.135640618148668, 0.16359309992546844, 0.15891926616083185, 0.16745275626275835, 0.16441846038072871, 0.17092097539826046, 0.1686441034810383, 0.18106328072863065, 0.17372043717965757, 0.16824938372903941, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245130169165364, 0.1282589827920092, 0.10991159806556694, 0.1125609137398722, 0.12313862564388567, 0.11942673783055247, 0.1446296534963616, 0.15641848845726292, 0.1423944852125515, 0.1599390259687078, 0.18713222202899427, 0.16859518331676715, 0.1471692599114236, 0.15345764316797628, 0.1801271208862114, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316043785461187, 0.17304434510587308, 0.16455097267832153, 0.17812257484657168, 0.15466523049360914, 0.17946415151440376, 0.18430265434660764, 0.1550492155285017, 0.1659697854862605, 0.16046794501487016, 0.1489187824737579, 0.16599888485231729, 0.19164113864473487, 0.14447717875084676, 0.19130023184882838, 0.15569933130457791, 0.17068477486531264, 0.1737092930821733, 0.18532254242931123, 0.16850392855354568, 0.1845274809259827, 0.17505587765402175, 0.18457580417594133, 0.20953495644760156, 0.1892401276818736, 0.17638110989115707, 0.18119202063481676, 0.2028904961637582, 0.05600832472241268, 0.05646144263310815, 0.06400890178553431, 0.05040647747383542, 0.05862463198619605, 0.06270218142075579, 0.07220952114828072, 0.05274867669655614, 0.06041892958040784]}, "mutation_prompt": null}
{"id": "75e7fae7-ba0b-49ca-a0d6-548c5946a16b", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "a466d680-1a70-4202-b09c-b47bb7652950", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "7210b7cd-8c6e-4b3f-9c01-b1b40abdc40d", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "53223d0a-d225-4627-a172-9179ce1117bb", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "0a76004b-1398-4f4f-80d4-6e76d8793184", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "19eddd44-b569-4c3f-b999-9f4c1cf933f8", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "3a50bc1f-654c-4497-8219-743efe8e2287", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "c8a1bd47-4150-4d97-be48-8f2129206033", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "78b56ad9-3700-4208-9e3a-ea9125fb1fb3", "solution": "import numpy as np\n\nclass DynamicStepSizeEnsembleHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_sizes = np.random.uniform(0.01, 0.1, size=(self.budget, self.dim))\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_sizes[np.random.randint(0, self.budget)] * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_sizes *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeEnsembleHarmonySearch", "description": "Enhancing exploration by introducing a dynamic ensemble of step sizes for each harmony search iteration.", "configspace": "", "generation": 75, "fitness": 0.09047334725692607, "feedback": "The algorithm DynamicStepSizeEnsembleHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.19990311904975333, 0.17001865501125635, 0.16689008714661446, 0.17364889543807183, 0.15482042550359676, 0.18119139445219867, 0.17669622487938763, 0.17179105418090967, 0.1922063424064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04701704191751399, 0.05222590092899049, 0.042662443461346844, 0.03901616038340561, 0.04764144250051472, 0.04166875663752667, 0.055613750973002585, 0.04149005940376005, 0.04591458555153516, 0.029306818959718095, 0.035078632493650175, 0.035991065716999615, 0.02214800845852516, 0.04069640107986838, 0.034793471378982255, 0.04209224047680815, 0.03446486065372523, 0.039748545840990857, 0.07897665809152254, 0.08025576522211797, 0.0789259953664998, 0.08490413403089148, 0.07820173120023688, 0.08220497227079482, 0.07547215189482581, 0.101319011215946, 0.07686178099183816, 0.10524511391408453, 0.13210132019287357, 0.11348787369920488, 0.07836237826689973, 0.04975242960278847, 0.085417794434264, 0.08145843525121488, 0.05296360469556516, 0.09981244605513562, 0.12472275916336462, 0.12784289540887728, 0.10300294029003687, 0.12322904697874948, 0.09575068993423153, 0.11568073130105627, 0.1422574273857624, 0.10528116746163063, 0.10701503411655844, 0.015854835611802454, 0.008657856129320907, 0.01590550386665035, 0.0016135927043302578, 9.999999999998899e-05, 0.001992097097450629, 9.999999999998899e-05, 0.005767759813126938, 9.999999999998899e-05, 0.0004311268131715895, 0.01054394743918674, 9.999999999998899e-05, 9.999999999998899e-05, 0.004811323223579911, 0.0006270971118963464, 0.00012091813714487643, 0.01780927348854089, 0.008439230688296218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048734555051893946, 0.025834040985383555, 0.047018064764093315, 0.050614245092068466, 0.016916350031462413, 0.06711187121676954, 0.055356260207849894, 0.034149528075866686, 0.07639698046481824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011185388456717904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1776683455318524, 0.21751385448686722, 0.20982669326854497, 0.20006419644645357, 0.1965054473885175, 0.18832239788700833, 0.20456797496472612, 0.2076530329291033, 0.18420111165745146, 0.04343456740018414, 0.042480431393794094, 0.04024834327598148, 0.04987701993387694, 0.04022475155187166, 0.03331224118861098, 0.056760921582801216, 0.049052207569357575, 0.06489950809615475, 0.1302782202959497, 0.1349138167346764, 0.14239661176144403, 0.14302262300775748, 0.14508039031931808, 0.14255622000892365, 0.14581076397548476, 0.14709969208844287, 0.1395987232748105, 0.1626994419600447, 0.17926400173277057, 0.17248537659477403, 0.18210418367762138, 0.1823083056093816, 0.16829335429665082, 0.1660967812115638, 0.16609086454607935, 0.17918055247930975, 0.0982130942537437, 0.11350685404757621, 0.10422888646128181, 0.11399104883024991, 0.12050743465935243, 0.12221648989418576, 0.10887527292337651, 0.11712738763407271, 0.12325058329091498, 0.14088968442493988, 0.16925226193018428, 0.15108502523415068, 0.15540881175580945, 0.1657125665423098, 0.18326456601681884, 0.13906694035766354, 0.14937696703545278, 0.15422159941853464, 0.13553164961658526, 0.16041673375676224, 0.13235598211409616, 0.14860482229492467, 0.15985340036469153, 0.15066642318158663, 0.14516453893486903, 0.14893703154463078, 0.16083803173010636, 0.2601279025091686, 0.1622875259149339, 0.15044623749271835, 0.15603076491886803, 0.22482433845603855, 0.1684966383902956, 0.20139095264158546, 0.21805077751627355, 0.16186193195742105, 0.16051552741124164, 0.12415937043158387, 0.13392597947463636, 0.16508158279300456, 0.16920509526618266, 0.22039344214901135, 0.20760395534796072, 0.1636574574792381, 0.15027269857262926, 0.18518234043317017, 0.171390050470015, 0.17181330392213823, 0.1765729296727946, 0.17847426004346834, 0.18114757730280462, 0.19714660245913584, 0.1781260812071267, 0.19346362841213205, 0.04409007434113432, 0.0482213593576305, 0.058471162538939137, 0.05086484145754799, 0.05798730431529164, 0.06069674040104234, 0.04309463322869611, 0.054394007685436896, 0.05918235335419886]}, "mutation_prompt": null}
{"id": "febca6cf-f75b-4c10-8fb7-e9276890e31a", "solution": "import numpy as np\nimport chaospy as cp\n\nclass EnhancedDynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n        self.chaos_rng = cp.create_halton(self.dim)\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            # Introducing chaotic perturbation for exploration\n            chaos = self.chaos_rng.random((self.budget, self.dim))\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * chaos * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "EnhancedDynamicStepSizeHarmonySearch", "description": "Enhancing exploration by introducing a chaotic search strategy to diversify the search space and escape local optima.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'chaospy'\").", "error": "ModuleNotFoundError(\"No module named 'chaospy'\")", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {}, "mutation_prompt": null}
{"id": "590e1eb5-8793-4204-a51e-e3d62f89367b", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "297566ae-dfc1-4205-9f78-05cac5bfd6fa", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "e3d9a721-d11b-4189-a28d-100a841ca942", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "47c9dcbe-e709-4b8f-a300-6d3d90c741c2", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeHarmonySearch(DynamicStepSizeHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n            # Introducing mutation for enhancing diversity\n            if np.random.rand() < self.mutation_rate:\n                random_idx = np.random.choice(self.budget)\n                harmonies[random_idx] += np.random.normal(0, 0.1, size=self.dim)\n                harmonies[random_idx] = np.clip(harmonies[random_idx], self.lower_bound, self.upper_bound)\n\n        return harmonies[0]", "name": "EnhancedDynamicStepSizeHarmonySearch", "description": "Enhancing population diversity by introducing a mutation operator that perturbs a subset of harmonies randomly.", "configspace": "", "generation": 80, "fitness": 0.0919815357042679, "feedback": "The algorithm EnhancedDynamicStepSizeHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "ea8a96a7-0f78-402a-8aee-2b17b8d84491", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "11f73e37-5a43-44d7-90dd-c3b3d7878f66", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "bd8eb677-5888-4e8e-b369-964629f9d494", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n        self.step_size_factor = 0.995\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])\n    \n            self.step_size *= self.step_size_factor  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Utilizing a self-adaptive mechanism to dynamically adjust the step size based on the historical convergence behavior.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 26, 13, '            self.step_size *= self.step_size_factor  # Dynamic step size adaptation based on individual harmony improvements\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 26, 13, '            self.step_size *= self.step_size_factor  # Dynamic step size adaptation based on individual harmony improvements\\n'))", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {}, "mutation_prompt": null}
{"id": "71773975-9801-4ca1-84d5-aece2117c6f2", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "19021ed6-e91f-4bd4-b2a6-9125b7499ec4", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposition-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "EnhancedDynamicStepSizeHarmonySearch", "description": "Enhancing DynamicStepSizeHarmonySearch by introducing opposition-based learning inside the dynamic step size adaptation loop for improved exploration and exploitation.", "configspace": "", "generation": 85, "fitness": 0.0919815357042679, "feedback": "The algorithm EnhancedDynamicStepSizeHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "af7d36b5-813d-41d1-af70-938de05ebf74", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "7ae13eb6-5039-46ec-9deb-d85027325ec3", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n            # Random perturbation for exploration\n            perturbation = np.random.uniform(-0.1, 0.1, size=(self.dim))\n            harmonies[-1] += perturbation\n            harmonies[-1] = np.clip(harmonies[-1], self.lower_bound, self.upper_bound)\n\n        return harmonies[0]", "name": "EnhancedDynamicStepSizeHarmonySearch", "description": "Enhancing the exploration by introducing a random perturbation to select a new candidate solution during each iteration.", "configspace": "", "generation": 87, "fitness": 0.0919815357042679, "feedback": "The algorithm EnhancedDynamicStepSizeHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "f6fdaca9-0c93-45a9-8d82-077f542ff463", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "b0a3af49-c44e-4ee9-8e22-9bd3c1c683ad", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "29a773a5-74e1-4d2e-9036-f11746c8c909", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "ca281596-590a-4d1c-9832-5f73cb4185e6", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "1778da34-3727-49bd-b1c6-1175dfa2fba4", "solution": "import numpy as np\n\nclass DynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])]\n    \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        return harmonies[0]", "name": "DynamicStepSizeHarmonySearch", "description": "Incorporating a dynamic step size adaptation mechanism based on individual harmony improvements to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.16967741123913205, 0.1747962668251113, 0.17045520619363275, 0.1752893325398942, 0.177651957826909, 0.17215361552795583, 0.1762770226331266, 0.18247721462936628, 0.16462070112576532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396115997206089, 0.044844202656970755, 0.0357698232891549, 0.054351978515656985, 0.04078461921609178, 0.04779246578508212, 0.053292046283047956, 0.0615013037219454, 0.05166890902238552, 0.029379491896075027, 0.03220883688776266, 0.03892532776655766, 0.04981355636787499, 0.04256983604556841, 0.05366419192367067, 0.0352385784984659, 0.034325172438994356, 0.040076870585397995, 0.0854557321841799, 0.08829408085624202, 0.08390890731371581, 0.08052169491035188, 0.08104633662296201, 0.08647800054352206, 0.08560264451446586, 0.08045104101419587, 0.08875255756983547, 0.07613114803310017, 0.0841673156520859, 0.11150073317208975, 0.05141958971657856, 0.061609521099992515, 0.05892001659203194, 0.09113427404117846, 0.06600690305941792, 0.0894211448397858, 0.14638215572509472, 0.18930589667575193, 0.14287773239867907, 0.09813925725301487, 0.13067798508135398, 0.11973870410223919, 0.11979197855916679, 0.11979125218159536, 0.148588481051388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01678618634173068, 0.02948654498914871, 0.05881711572446913, 9.999999999998899e-05, 0.0021723210086036504, 0.03405307564505944, 0.009465622983475308, 0.017663509488094697, 0.005265859528290284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09786174826702265, 0.07959865156708779, 0.11846129034057962, 0.05939936889649122, 0.03362954138440777, 0.05905088998760477, 0.0534477594709426, 0.053604544797298925, 0.0726913436113551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010880945515580054, 0.0015109718575482267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026676620395326145, 9.999999999998899e-05, 0.2161955376796062, 0.21242467657418296, 0.1904051285371695, 0.20491387200607036, 0.18438772541438753, 0.1963236681647369, 0.19580867468487517, 0.1835462308819097, 0.19017840748214954, 0.07093255128321108, 0.03976716115284784, 0.043060809621834784, 0.04208607439052048, 0.03789944388757527, 0.045608698075645826, 0.05388338504780499, 0.040975980178787896, 0.048221941289494086, 0.14560022347254054, 0.12051914196826241, 0.1473826080200039, 0.1707179537599275, 0.13930035105491767, 0.1282397454542179, 0.15517081079301986, 0.1448211171842262, 0.13563949580961454, 0.16359297563654895, 0.1589188344689728, 0.16745276335983073, 0.16441820847106225, 0.1709189411266352, 0.1686441469596346, 0.18106302345090752, 0.1737202259014513, 0.16824938173039095, 0.10413243769786551, 0.10827092296386875, 0.10930068811358018, 0.12245135227403348, 0.1282589827920092, 0.10991160155814228, 0.1125609137398722, 0.12313811378746431, 0.11942677368532517, 0.14463006142202572, 0.15641882235535398, 0.14239899284391921, 0.1599394776385521, 0.18713222501272886, 0.16860192731665924, 0.14716883178670048, 0.15345736638614638, 0.18012455161484564, 0.14824267172228978, 0.14180605942917957, 0.15105012093575587, 0.1419528074996793, 0.13836954159425763, 0.15196668676421854, 0.12872084732546007, 0.1387068496638152, 0.16316123865349508, 0.17304435660134954, 0.16455097181620781, 0.1781225730859658, 0.15466531800817285, 0.1794641825344654, 0.18430266451462862, 0.1550493478835866, 0.16596749508923236, 0.16046794391835506, 0.148918765061675, 0.16599888298728604, 0.19164113856585552, 0.1444771568053297, 0.1912999408354047, 0.15569932846530699, 0.17068480271619368, 0.17370925884375443, 0.1853225429459343, 0.1684947736683189, 0.1845233474049227, 0.17505597828600894, 0.1845731034487884, 0.20953803133963034, 0.189240451912148, 0.17638092588875875, 0.18122122452967404, 0.2028904671042252, 0.05600832472241268, 0.05644928914318459, 0.06400837619326516, 0.05040589923361172, 0.05862463198619605, 0.06270217669531741, 0.07220952114828072, 0.05274867669655614, 0.060418933819396226]}, "mutation_prompt": null}
{"id": "b23c958e-8096-4081-9555-a4b87d18e29c", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n        self.step_size_min = 0.01\n        self.step_size_max = 0.2\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.budget, self.dim))\n        for _ in range(self.budget):\n            new_harmony = harmonies[np.random.randint(0, self.budget)] + self.step_size * np.random.uniform(-0.1, 0.1) * (harmonies[np.random.randint(0, self.budget)] - harmonies[np.random.randint(0, self.budget)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            if func(new_harmony) < func(harmonies[-1]):\n                harmonies[-1] = new_harmony\n            # Opposite-based learning\n            opposite_harmony = self.lower_bound + self.upper_bound - harmonies\n            for idx, o_harm in enumerate(opposite_harmony):\n                if func(o_harm) < func(harmonies[idx]):\n                    harmonies[idx] = o_harm\n            harmonies = harmonies[np.argsort([func(h) for h in harmonies])\n            \n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n            self.step_size = max(self.step_size_min, min(self.step_size, self.step_size_max))  # Self-adaptive step size adjustment\n\n        return harmonies[0]", "name": "EnhancedDynamicStepSizeHarmonySearch", "description": "Enhancing exploration by incorporating a self-adaptive mechanism for individual step size adjustment.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 13, '            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 13, '            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\\n'))", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {}, "mutation_prompt": null}
{"id": "07f24eb4-fdba-4b2f-b62f-45cfc221100b", "solution": "import numpy as np\n\nclass MultiPopDEHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n        self.num_populations = 5\n        self.population_size = budget // self.num_populations\n\n    def __call__(self, func):\n        populations = [np.random.uniform(self.lower_bound, self.upper_bound, size=(self.population_size, self.dim)) for _ in range(self.num_populations)]\n        for _ in range(self.budget):\n            for pop_idx, population in enumerate(populations):\n                for i in range(self.population_size):\n                    donor_idx, trial1_idx, trial2_idx = np.random.choice(self.population_size, 3, replace=False)\n                    donor = population[donor_idx]\n                    trial1 = population[trial1_idx]\n                    trial2 = population[trial2_idx]\n                    mutant_vector = donor + self.step_size * (trial1 - trial2)\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    if func(mutant_vector) < func(population[i]):\n                        population[i] = mutant_vector\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        all_populations = np.concatenate(populations)\n        return all_populations[np.argmin([func(p) for p in all_populations])]", "name": "MultiPopDEHarmonySearch", "description": "Introducing a multi-population approach where each population employs Differential Evolution to enhance exploration and exploitation balance.", "configspace": "", "generation": 94, "fitness": 0.09342868058211559, "feedback": "The algorithm MultiPopDEHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3fc04084-eb38-4b93-ae09-a2457c023cb3", "metadata": {"aucs": [0.18392313161342777, 0.18168375554719973, 0.17454214751859476, 0.1750061400111912, 0.18277278577077183, 0.19273834332832662, 0.182117980906223, 0.16555238100243808, 0.17929718456647747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043989182176812025, 0.06233068888367033, 0.040774139639537355, 0.04578321274232566, 0.04638301221485308, 0.041702789467461865, 0.057145132053835535, 0.06293274204065269, 0.051783968878911235, 0.02533065811589108, 0.026253592041927343, 0.04713930338576955, 0.035573767112755394, 0.05040099841315315, 0.05412076129519805, 0.036651754414308235, 0.0442249310150753, 0.0294728520356341, 0.0847563478341653, 0.07511200154801279, 0.098564933085457, 0.08065373030355583, 0.0867618702958185, 0.08450529380173832, 0.0909142532132311, 0.10074015448774354, 0.08649402960707286, 0.08348775228386984, 0.07910107680328238, 0.11019986024413797, 0.06551124176720347, 0.07016843858440913, 0.04422226759342118, 0.09120705108966543, 0.0469780459519048, 0.0894403634800155, 0.12068063265711082, 0.1892914634083318, 0.14331226887503012, 0.10870044341606844, 0.08974289190646034, 0.19458015672384832, 0.11351712752585486, 0.11792687979741767, 0.11474618752836974, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061969275686794445, 9.999999999998899e-05, 0.023819335088936744, 0.003181731065390103, 0.05903209979349611, 0.010245411230149326, 0.0021740940913237417, 0.03406038839019088, 0.010297760208193174, 0.017667153369731237, 0.004386754093764433, 0.008664103544602453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10588419558121354, 0.06641579097918693, 0.043505368743860684, 0.05941523347397892, 0.02810419519703189, 0.04705685484453004, 0.057886006870520035, 0.058907755701354314, 0.06102017826669237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003937777607902926, 0.002537501139155629, 9.999999999998899e-05, 0.21471667446721998, 0.21343826234232988, 0.18095624448534642, 0.2166336751572533, 0.18740822615249786, 0.19701833743118013, 0.22175020682750268, 0.16840516246751935, 0.2157879508229945, 0.04843404265841744, 0.045282910753656314, 0.04509920762605213, 0.04636183008247974, 0.04440991624701496, 0.05278665176915964, 0.05745875006942969, 0.04127033799908986, 0.04577599128132481, 0.15308380435832825, 0.13726167649934506, 0.1464022361750944, 0.1661913473427874, 0.13940240704473184, 0.15259840489997534, 0.14779995281400005, 0.14931154347976627, 0.13482983809676863, 0.16451104325079868, 0.17352673782320904, 0.17501355538374352, 0.16372617098559117, 0.16786865451893662, 0.16984387347118157, 0.15723814808394165, 0.17393461490583884, 0.15383265669445023, 0.10509282061823488, 0.10717086590587965, 0.1291578792393271, 0.1010402763745264, 0.12639395168633982, 0.1121211730229481, 0.10739823677937055, 0.1400114246337376, 0.11712727152761859, 0.1690053350540115, 0.15820565397291553, 0.15312062651182945, 0.15356940956859466, 0.16437741761798785, 0.16365861657247205, 0.15070558699969916, 0.17489172202691405, 0.17757863141372965, 0.1408294952135859, 0.15001372905853605, 0.15153435067570586, 0.16134864060362886, 0.15313027004069701, 0.15032894202475966, 0.13981185027407395, 0.13534086051300886, 0.16593013454998695, 0.15518302706487352, 0.2622263481427446, 0.16188454138591712, 0.17236392770577114, 0.16913569294051745, 0.17011263761410866, 0.15367715543584148, 0.16505624614724634, 0.16420662661253993, 0.1615519716703897, 0.16928463633123336, 0.17115279863643518, 0.22687369872574548, 0.22147370687053147, 0.153603499841657, 0.1670456915066184, 0.18573407929018848, 0.1513374062724968, 0.1827620889513929, 0.1897032542374475, 0.1783628699679164, 0.1908844506411127, 0.20861963935848593, 0.17662904768661647, 0.18370112033295793, 0.17930032991389466, 0.20328660902011664, 0.05747453598093055, 0.05263484309288613, 0.06402272758541327, 0.05563863372361133, 0.058697659295150695, 0.056599153847836536, 0.07238641998833573, 0.053815264474375346, 0.049999537312429454]}, "mutation_prompt": null}
{"id": "73886b67-e847-42c5-afaa-99761bf4d8c6", "solution": "import numpy as np\n\nclass EnhancedMultiPopDEHarmonySearch(MultiPopDEHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.differential_weight = np.random.uniform(0, 2, size=(self.budget, self.dim))\n    \n    def __call__(self, func):\n        populations = [np.random.uniform(self.lower_bound, self.upper_bound, size=(self.population_size, self.dim)) for _ in range(self.num_populations)]\n        for _ in range(self.budget):\n            for pop_idx, population in enumerate(populations):\n                for i in range(self.population_size):\n                    donor_idx, trial1_idx, trial2_idx = np.random.choice(self.population_size, 3, replace=False)\n                    donor = population[donor_idx]\n                    trial1 = population[trial1_idx]\n                    trial2 = population[trial2_idx]\n                    mutant_vector = donor + self.differential_weight[i] * (trial1 - trial2)\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    if func(mutant_vector) < func(population[i]):\n                        population[i] = mutant_vector\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        all_populations = np.concatenate(populations)\n        return all_populations[np.argmin([func(p) for p in all_populations])]", "name": "EnhancedMultiPopDEHarmonySearch", "description": "Enhancing the mutation strategy by incorporating a self-adaptive differential weight for better convergence and exploration.", "configspace": "", "generation": 95, "fitness": 0.10502270190153265, "feedback": "The algorithm EnhancedMultiPopDEHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.13.", "error": "", "parent_id": "07f24eb4-fdba-4b2f-b62f-45cfc221100b", "metadata": {"aucs": [0.17450262646124248, 0.15616539186835876, 0.1498439337322225, 0.1719340150220543, 0.15375958413611135, 0.18056286195410243, 0.15440335147345052, 0.1686368605816595, 0.1713211501127656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034570135298804594, 0.05201183692044831, 0.04809558769058875, 0.035401120027650945, 0.0511029271472635, 0.03211064367344407, 0.055228118558525385, 0.03681194609236316, 0.04558011832288411, 0.01922104696477167, 0.026988847189310605, 0.03319996950695736, 0.022634101644568583, 0.033928160058848134, 0.03545515363164764, 0.028068155186131483, 0.021950178469334114, 0.039099880980590807, 0.8411380992989153, 0.7135065939250311, 0.15405237491087032, 0.21223105974004774, 0.8536456428290686, 0.16598969561331545, 0.885509160116165, 0.3249750435929316, 0.6618922093747759, 0.09573166653593235, 0.07604449781975986, 0.07227011398035976, 0.06503725552164574, 0.15188000442459615, 0.04990943628433708, 0.07880909061190866, 0.053278632615193056, 0.07401879283712187, 0.12021270419770935, 0.1327340814361554, 0.12207697491750802, 0.1052352191908954, 0.0935690402773427, 0.1152252332942798, 0.13762387633424955, 0.11220511845549208, 0.10432664901881672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034527679884921447, 9.999999999998899e-05, 0.030565102766007324, 9.999999999998899e-05, 0.0057728430057842894, 9.999999999998899e-05, 0.00043939053777541925, 0.010546443602532762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017814497463021328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048745960839526425, 0.017420249700367596, 0.040844373438622794, 0.05253785816813683, 0.023257467051099212, 0.056414028178358944, 0.05434064012403883, 0.06420171661298069, 0.03766526138217596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011188449027799252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00211572679969918, 9.999999999998899e-05, 0.18891641503627754, 0.21723830148009193, 0.2073513263262311, 0.18525627851407922, 0.1956495294915922, 0.17895629945575475, 0.17352559036151416, 0.2056349673457184, 0.1824486621807856, 0.059869339139382305, 0.0468217083113881, 0.050660136951227064, 0.044697367855255465, 0.037268559283463176, 0.035073647441571265, 0.05662241562129744, 0.03945140579164563, 0.03817791393537351, 0.1310459642519789, 0.12012747517851097, 0.1466103576403568, 0.14326676265400207, 0.16432426128604916, 0.1303671057812804, 0.1601071778334484, 0.146205905390125, 0.16602687086990686, 0.16026147897204446, 0.17922539313035213, 0.16260472750937804, 0.1497836906464678, 0.16932150716283556, 0.1556777852702026, 0.15731464556825137, 0.16340737087314372, 0.1521674435864625, 0.09535774328434932, 0.11217627792175588, 0.09454516652247513, 0.10730343667217024, 0.11750727296253494, 0.12226883111456555, 0.10549531246478638, 0.11707413970452385, 0.105547382993041, 0.15373021809317056, 0.1630243984938159, 0.13862937281733934, 0.15769483393492678, 0.165512086935387, 0.1606913113792865, 0.14152264873852005, 0.16021988453156177, 0.15363816677829434, 0.1316359370577609, 0.15140202341989628, 0.1302459225498076, 0.13101185080764577, 0.15793492974359846, 0.15069874242281334, 0.11930475036851618, 0.14165371488524725, 0.13873801223034732, 0.2593104658784825, 0.16119615428732437, 0.15460407069121962, 0.14519377577142312, 0.1235120509845199, 0.15833014814627078, 0.16664607192154834, 0.21388311155262452, 0.16104386153245054, 0.15805513157768147, 0.14035852287900108, 0.1390617066813311, 0.1635025233623364, 0.16482243029865729, 0.12826440455903898, 0.1309530508069332, 0.16741818219065208, 0.1535162428859519, 0.17728762474501092, 0.19037907311072244, 0.17483812298899193, 0.18618726873203595, 0.17714322387032444, 0.18464525892334072, 0.19273194216973522, 0.17602399243322342, 0.19190194352385692, 0.04283244878961601, 0.044156194578114816, 0.051995642915463214, 0.0419726856025161, 0.048257426478683585, 0.0478061951218246, 0.04401034760611344, 0.0534918598977252, 0.05900904092342174]}, "mutation_prompt": null}
{"id": "da645dfe-0dfb-4a91-a830-7c794ea5cfe2", "solution": "import numpy as np\n\nclass ImprovedMultiPopDEHarmonySearch(MultiPopDEHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.differential_weight = np.random.uniform(0, 2, size=(self.budget, self.dim))\n        self.mutation_scale = np.random.uniform(0.1, 0.5, size=(self.budget, self.dim))  # Introducing dynamic mutation scale\n    \n    def __call__(self, func):\n        populations = [np.random.uniform(self.lower_bound, self.upper_bound, size=(self.population_size, self.dim)) for _ in range(self.num_populations)]\n        for _ in range(self.budget):\n            for pop_idx, population in enumerate(populations):\n                for i in range(self.population_size):\n                    donor_idx, trial1_idx, trial2_idx = np.random.choice(self.population_size, 3, replace=False)\n                    donor = population[donor_idx]\n                    trial1 = population[trial1_idx]\n                    trial2 = population[trial2_idx]\n                    mutant_vector = donor + self.differential_weight[i] * (trial1 - trial2) * self.mutation_scale[i]  # Dynamic mutation strategy based on fitness\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    if func(mutant_vector) < func(population[i]):\n                        population[i] = mutant_vector\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        all_populations = np.concatenate(populations)\n        return all_populations[np.argmin([func(p) for p in all_populations])]", "name": "ImprovedMultiPopDEHarmonySearch", "description": "Improving population diversity by introducing a dynamic mutation strategy based on individuals' fitness.", "configspace": "", "generation": 96, "fitness": 0.09155684249227078, "feedback": "The algorithm ImprovedMultiPopDEHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "73886b67-e847-42c5-afaa-99761bf4d8c6", "metadata": {"aucs": [0.1894032452619696, 0.16694519914702255, 0.2008213318587433, 0.17167310098651611, 0.19566266742820948, 0.17453527425254212, 0.15965635945077206, 0.17470950663437235, 0.1873257766567359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04072602544719206, 0.05224494874058583, 0.042847171123428396, 0.050180722149346546, 0.043513842131337466, 0.04304390210053621, 0.04025881153637234, 0.038759082709932224, 0.0361433442384681, 0.040969346521761874, 0.04913638753576366, 0.028653271792490886, 0.038358415844205185, 0.025265582724517066, 0.03824506501812708, 0.03501745552529012, 0.032349301920967966, 0.039079835318938216, 0.08955826674743161, 0.09512360336312708, 0.10016399591346614, 0.09452990952173856, 0.08770646955906192, 0.10567304812723344, 0.09108284782596532, 0.08280356103652231, 0.12296140317362547, 0.07405729862187638, 0.09048984723173448, 0.058762790377269836, 0.08673144672474031, 0.08036830861912492, 0.08721388172174871, 0.08071457529433079, 0.06909088741141545, 0.07502571059557739, 0.1462348687554792, 0.11567252735164746, 0.10816423114460072, 0.1588060215883026, 0.1324375339906888, 0.12760188483447876, 0.15793704901616024, 0.1592670477704261, 0.1316009329147002, 9.999999999998899e-05, 0.03471992616769315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002347108629181416, 9.999999999998899e-05, 0.04140989938989226, 0.003850671369068581, 0.011295842779294296, 0.02746930806232417, 0.009032384318436337, 0.09009402458419791, 0.009845619829507601, 9.999999999998899e-05, 0.043492133487552875, 0.0044675544287070545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06875356381138276, 0.05913985314637016, 0.0485036403508633, 0.09381402080308376, 0.048617839648636085, 0.03814150184381193, 0.07435692028023355, 0.029166505681426647, 0.052861714908209234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004921424549140241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20006975853089193, 0.20792758910921982, 0.19998202390908504, 0.21170421447527132, 0.19150830026448862, 0.18677044037418555, 0.18582374591340323, 0.19595839822308947, 0.203163108983909, 0.04844223590829444, 0.04029247861983243, 0.04914359099562571, 0.04785965154057481, 0.05115997309090403, 0.04357255910782609, 0.04980623417399288, 0.050587526537894, 0.046235903723074956, 0.12470913911386938, 0.13378770702333664, 0.13223752455442028, 0.13482193119281205, 0.14314443618298778, 0.13118449654669162, 0.16005762092571263, 0.15696985288945975, 0.1349742591765536, 0.16427410595980896, 0.16976710683613705, 0.17286934074876137, 0.17699480545063784, 0.15808486194823834, 0.15955690041300719, 0.17744656795895886, 0.16251182578735535, 0.15398302159506638, 0.0984228408054787, 0.13276275624415468, 0.10456599281574308, 0.1087870591986917, 0.10872901695494164, 0.10379044328976939, 0.12262973478252548, 0.10561434185320939, 0.09784219052241405, 0.1580380528149823, 0.15126943566316786, 0.15319603510665825, 0.14386943750245085, 0.14608546944125278, 0.18679969466007162, 0.14849311597975645, 0.1583405323055571, 0.1716870879677299, 0.1633000058418025, 0.14158801783339336, 0.14859679453537333, 0.1558599330358078, 0.138496630257677, 0.16211500945689217, 0.1545763063042327, 0.15046937089966728, 0.1463710963005146, 0.1374972819550856, 0.15944419811936383, 0.16964274751161335, 0.187631004077493, 0.16712112836572302, 0.1564380891543138, 0.22364382869410904, 0.15920876819955232, 0.15498987321678392, 0.1491894675483889, 0.14747000698639856, 0.1992795588192222, 0.21242776799750296, 0.12952034644073518, 0.12349990908966213, 0.1698043941426367, 0.184335917666258, 0.15489991123354063, 0.20554837130416237, 0.1750465209881299, 0.18289791130437305, 0.17661852251567556, 0.18001214954512545, 0.17172912790396966, 0.1834225075603021, 0.17544808129201306, 0.1871560328693831, 0.05124769789368533, 0.07281805678125564, 0.05156754027175048, 0.05521381464486674, 0.0461882426911745, 0.060652095300674946, 0.04308719513789094, 0.05741166649151985, 0.053111505193452646]}, "mutation_prompt": null}
{"id": "ad43cfbe-3865-4951-a9b7-f5160bbca2b2", "solution": "import numpy as np\n\nclass DynamicPopSizeDEHarmonySearch(MultiPopDEHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.differential_weight = np.random.uniform(0, 2, size=(self.budget, self.dim))\n        self.population_sizes = np.random.randint(5, 50, size=self.num_populations)\n    \n    def __call__(self, func):\n        populations = [np.random.uniform(self.lower_bound, self.upper_bound, size=(size, self.dim)) for size in self.population_sizes]\n        for _ in range(self.budget):\n            for pop_idx, population in enumerate(populations):\n                for i in range(len(population)):\n                    donor_idx, trial1_idx, trial2_idx = np.random.choice(len(population), 3, replace=False)\n                    donor = population[donor_idx]\n                    trial1 = population[trial1_idx]\n                    trial2 = population[trial2_idx]\n                    mutant_vector = donor + self.differential_weight[i] * (trial1 - trial2)\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    if func(mutant_vector) < func(population[i]):\n                        population[i] = mutant_vector\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        all_populations = np.concatenate(populations)\n        return all_populations[np.argmin([func(p) for p in all_populations])]", "name": "DynamicPopSizeDEHarmonySearch", "description": "Implementing a dynamic population resizing strategy to adapt the number of individuals based on their performance for enhanced exploration and exploitation.", "configspace": "", "generation": 97, "fitness": 0.12571286851659713, "feedback": "The algorithm DynamicPopSizeDEHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "73886b67-e847-42c5-afaa-99761bf4d8c6", "metadata": {"aucs": [0.17767138373985758, 0.1650416428549295, 0.20943975393404557, 0.22199127470958702, 0.21692322155212962, 0.24075109738491152, 0.20526202434069396, 0.18263549232823095, 0.24697271230775153, 0.001407857417147329, 9.999999999998899e-05, 0.0007458601070562398, 0.001975319428464739, 0.00013395460957998928, 0.024211274004694472, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008235572688779502, 0.057978356199381964, 0.04247297289877339, 0.056590171493134944, 0.048629006056268964, 0.04302576193610874, 0.053545896897491785, 0.0671474486818342, 0.047503075099220915, 0.06249229091993724, 0.02760106914335081, 0.04324305208234602, 0.04440626379300461, 0.03704501812039129, 0.03319694434266918, 0.03905838389192673, 0.02981411949093582, 0.03472546380582575, 0.0339267592935838, 0.9121130797891523, 0.9493573200951162, 0.989374950701862, 0.8687710785443815, 0.8673974973121141, 0.9237963058442383, 0.958282717388493, 0.876270508202864, 0.7445648823461494, 0.06756154656215696, 0.07479987459762738, 0.10924759926412919, 0.05101830084757164, 0.05690173443607072, 0.07385131394878808, 0.09253343998503094, 0.0665430432261288, 0.10083480488317842, 0.17002065480179174, 0.1167517971622194, 0.14114754593280465, 0.12587590443540775, 0.1278556342912196, 0.16032711606669925, 0.14366833713047023, 0.12347597079556527, 0.15904664874518382, 9.999999999998899e-05, 9.999999999998899e-05, 0.008906875142857262, 0.04104151002169654, 0.005394323443359772, 0.018882648176009154, 0.009686861597505758, 0.008018285150047433, 0.019032570429388773, 0.03308181334324234, 0.026059463406952865, 0.06112255815958012, 0.0025018997272622245, 0.026924613703559586, 0.005354109252879602, 9.999999999998899e-05, 0.004538797309464604, 0.04379362791859931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027711870053026888, 0.03272912463738198, 0.04726359023009952, 0.06195304688677972, 0.0627964378577992, 0.022956433357130712, 0.049920051104252905, 0.052621648351401706, 0.055550355011604546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016218670515332212, 0.006110242372684871, 0.006450575395733904, 0.012365728725780678, 0.0014837215952760996, 0.004345649553147646, 0.0036958989126054664, 0.014824150303563655, 0.015850178330669262, 0.1995890321679965, 0.18766821933387545, 0.2064825198895217, 0.20502219239211883, 0.2076865959933163, 0.21897299912702506, 0.22952356570097154, 0.2136941518328398, 0.22087533905155798, 0.06260407898862974, 0.053656164037594545, 0.06281802939806291, 0.04692074308583272, 0.04137354954077077, 0.050525924086947116, 0.04936262822127879, 0.03754405558310814, 0.04144549500385308, 0.1290348175504774, 0.13058882318057663, 0.12519187382750552, 0.1251917676226647, 0.15037333946522524, 0.13944959984126892, 0.15242305322383476, 0.13621813252640136, 0.12776303166461622, 0.20169593136576258, 0.15580220565206127, 0.17142211593700085, 0.1526880504866236, 0.16325897847851445, 0.15866059281593603, 0.16736238105462542, 0.16606103393010785, 0.18018241312165972, 0.09359459066622655, 0.09472348852401447, 0.12129618079753168, 0.10049481586468867, 0.11101801912017994, 0.12907038694606487, 0.10512124429346947, 0.1180022062008802, 0.11507538158226138, 0.16125017906352512, 0.15659993743546197, 0.15423441644044034, 0.15905552751868124, 0.14685998549018753, 0.15442134665927243, 0.2238634008947663, 0.18375656882544122, 0.14891995774072453, 0.12454547710392982, 0.1583701647457303, 0.11480581535032452, 0.14412189142551957, 0.14795057485334018, 0.15207220106624553, 0.1376364197461427, 0.1514570245686515, 0.14804101088939026, 0.1670758780909266, 0.1476698123653698, 0.1473718708573819, 0.15380393690973793, 0.12576795387574202, 0.2687553738015642, 0.13505989393332507, 0.15938465228457577, 0.14734622832394528, 0.14050912979040664, 0.12028052519657362, 0.15355800599344693, 0.12631424917698364, 0.1134635069458998, 0.13415342060324498, 0.16209593891604035, 0.17459256421360936, 0.16291207355256354, 0.1871584269179979, 0.17143841223473577, 0.17346703229971627, 0.19554781277916833, 0.17792825220419106, 0.1783198819034042, 0.183499882217511, 0.169767406764204, 0.17203706325115786, 0.04220429318441132, 0.04339108989657958, 0.05048087999461337, 0.0502329163366092, 0.050033832992800176, 0.05208300290860135, 0.04826770438445438, 0.04445778877955797, 0.05128865272723726]}, "mutation_prompt": null}
{"id": "265c306e-9075-4908-97bb-5d1b55a5f161", "solution": "import numpy as np\n\nclass DynamicPopSizeDEHarmonySearch(MultiPopDEHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.differential_weight = np.random.uniform(0, 2, size=(self.budget, self.dim))\n        self.population_sizes = np.random.randint(5, 50, size=self.num_populations)\n    \n    def __call__(self, func):\n        populations = [np.random.uniform(self.lower_bound, self.upper_bound, size=(size, self.dim)) for size in self.population_sizes]\n        for _ in range(self.budget):\n            for pop_idx, population in enumerate(populations):\n                for i in range(len(population)):\n                    donor_idx, trial1_idx, trial2_idx = np.random.choice(len(population), 3, replace=False)\n                    donor = population[donor_idx]\n                    trial1 = population[trial1_idx]\n                    trial2 = population[trial2_idx]\n                    mutant_vector = donor + self.differential_weight[i] * (trial1 - trial2)\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    if func(mutant_vector) < func(population[i]):\n                        population[i] = mutant_vector\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        all_populations = np.concatenate(populations)\n        return all_populations[np.argmin([func(p) for p in all_populations])]", "name": "DynamicPopSizeDEHarmonySearch", "description": "Implementing a dynamic population resizing strategy to adapt the number of individuals based on their performance for enhanced exploration and exploitation.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad43cfbe-3865-4951-a9b7-f5160bbca2b2", "metadata": {"aucs": [0.17767138373985758, 0.1650416428549295, 0.20943975393404557, 0.22199127470958702, 0.21692322155212962, 0.24075109738491152, 0.20526202434069396, 0.18263549232823095, 0.24697271230775153, 0.001407857417147329, 9.999999999998899e-05, 0.0007458601070562398, 0.001975319428464739, 0.00013395460957998928, 0.024211274004694472, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008235572688779502, 0.057978356199381964, 0.04247297289877339, 0.056590171493134944, 0.048629006056268964, 0.04302576193610874, 0.053545896897491785, 0.0671474486818342, 0.047503075099220915, 0.06249229091993724, 0.02760106914335081, 0.04324305208234602, 0.04440626379300461, 0.03704501812039129, 0.03319694434266918, 0.03905838389192673, 0.02981411949093582, 0.03472546380582575, 0.0339267592935838, 0.9121130797891523, 0.9493573200951162, 0.989374950701862, 0.8687710785443815, 0.8673974973121141, 0.9237963058442383, 0.958282717388493, 0.876270508202864, 0.7445648823461494, 0.06756154656215696, 0.07479987459762738, 0.10924759926412919, 0.05101830084757164, 0.05690173443607072, 0.07385131394878808, 0.09253343998503094, 0.0665430432261288, 0.10083480488317842, 0.17002065480179174, 0.1167517971622194, 0.14114754593280465, 0.12587590443540775, 0.1278556342912196, 0.16032711606669925, 0.14366833713047023, 0.12347597079556527, 0.15904664874518382, 9.999999999998899e-05, 9.999999999998899e-05, 0.008906875142857262, 0.04104151002169654, 0.005394323443359772, 0.018882648176009154, 0.009686861597505758, 0.008018285150047433, 0.019032570429388773, 0.03308181334324234, 0.026059463406952865, 0.06112255815958012, 0.0025018997272622245, 0.026924613703559586, 0.005354109252879602, 9.999999999998899e-05, 0.004538797309464604, 0.04379362791859931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027711870053026888, 0.03272912463738198, 0.04726359023009952, 0.06195304688677972, 0.0627964378577992, 0.022956433357130712, 0.049920051104252905, 0.052621648351401706, 0.055550355011604546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016218670515332212, 0.006110242372684871, 0.006450575395733904, 0.012365728725780678, 0.0014837215952760996, 0.004345649553147646, 0.0036958989126054664, 0.014824150303563655, 0.015850178330669262, 0.1995890321679965, 0.18766821933387545, 0.2064825198895217, 0.20502219239211883, 0.2076865959933163, 0.21897299912702506, 0.22952356570097154, 0.2136941518328398, 0.22087533905155798, 0.06260407898862974, 0.053656164037594545, 0.06281802939806291, 0.04692074308583272, 0.04137354954077077, 0.050525924086947116, 0.04936262822127879, 0.03754405558310814, 0.04144549500385308, 0.1290348175504774, 0.13058882318057663, 0.12519187382750552, 0.1251917676226647, 0.15037333946522524, 0.13944959984126892, 0.15242305322383476, 0.13621813252640136, 0.12776303166461622, 0.20169593136576258, 0.15580220565206127, 0.17142211593700085, 0.1526880504866236, 0.16325897847851445, 0.15866059281593603, 0.16736238105462542, 0.16606103393010785, 0.18018241312165972, 0.09359459066622655, 0.09472348852401447, 0.12129618079753168, 0.10049481586468867, 0.11101801912017994, 0.12907038694606487, 0.10512124429346947, 0.1180022062008802, 0.11507538158226138, 0.16125017906352512, 0.15659993743546197, 0.15423441644044034, 0.15905552751868124, 0.14685998549018753, 0.15442134665927243, 0.2238634008947663, 0.18375656882544122, 0.14891995774072453, 0.12454547710392982, 0.1583701647457303, 0.11480581535032452, 0.14412189142551957, 0.14795057485334018, 0.15207220106624553, 0.1376364197461427, 0.1514570245686515, 0.14804101088939026, 0.1670758780909266, 0.1476698123653698, 0.1473718708573819, 0.15380393690973793, 0.12576795387574202, 0.2687553738015642, 0.13505989393332507, 0.15938465228457577, 0.14734622832394528, 0.14050912979040664, 0.12028052519657362, 0.15355800599344693, 0.12631424917698364, 0.1134635069458998, 0.13415342060324498, 0.16209593891604035, 0.17459256421360936, 0.16291207355256354, 0.1871584269179979, 0.17143841223473577, 0.17346703229971627, 0.19554781277916833, 0.17792825220419106, 0.1783198819034042, 0.183499882217511, 0.169767406764204, 0.17203706325115786, 0.04220429318441132, 0.04339108989657958, 0.05048087999461337, 0.0502329163366092, 0.050033832992800176, 0.05208300290860135, 0.04826770438445438, 0.04445778877955797, 0.05128865272723726]}, "mutation_prompt": null}
{"id": "7c83b123-8758-4e4a-8bd1-acbd598a3e0d", "solution": "import numpy as np\n\nclass DynamicPopSizeDEHarmonySearch(MultiPopDEHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.differential_weight = np.random.uniform(0, 2, size=(self.budget, self.dim))\n        self.population_sizes = np.random.randint(5, 50, size=self.num_populations)\n    \n    def __call__(self, func):\n        populations = [np.random.uniform(self.lower_bound, self.upper_bound, size=(size, self.dim)) for size in self.population_sizes]\n        for _ in range(self.budget):\n            for pop_idx, population in enumerate(populations):\n                for i in range(len(population)):\n                    donor_idx, trial1_idx, trial2_idx = np.random.choice(len(population), 3, replace=False)\n                    donor = population[donor_idx]\n                    trial1 = population[trial1_idx]\n                    trial2 = population[trial2_idx]\n                    mutant_vector = donor + self.differential_weight[i] * (trial1 - trial2)\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    if func(mutant_vector) < func(population[i]):\n                        population[i] = mutant_vector\n\n            self.step_size *= 0.995  # Dynamic step size adaptation based on individual harmony improvements\n\n        all_populations = np.concatenate(populations)\n        return all_populations[np.argmin([func(p) for p in all_populations])]", "name": "DynamicPopSizeDEHarmonySearch", "description": "Implementing a dynamic population resizing strategy to adapt the number of individuals based on their performance for enhanced exploration and exploitation.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad43cfbe-3865-4951-a9b7-f5160bbca2b2", "metadata": {"aucs": [0.17767138373985758, 0.1650416428549295, 0.20943975393404557, 0.22199127470958702, 0.21692322155212962, 0.24075109738491152, 0.20526202434069396, 0.18263549232823095, 0.24697271230775153, 0.001407857417147329, 9.999999999998899e-05, 0.0007458601070562398, 0.001975319428464739, 0.00013395460957998928, 0.024211274004694472, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008235572688779502, 0.057978356199381964, 0.04247297289877339, 0.056590171493134944, 0.048629006056268964, 0.04302576193610874, 0.053545896897491785, 0.0671474486818342, 0.047503075099220915, 0.06249229091993724, 0.02760106914335081, 0.04324305208234602, 0.04440626379300461, 0.03704501812039129, 0.03319694434266918, 0.03905838389192673, 0.02981411949093582, 0.03472546380582575, 0.0339267592935838, 0.9121130797891523, 0.9493573200951162, 0.989374950701862, 0.8687710785443815, 0.8673974973121141, 0.9237963058442383, 0.958282717388493, 0.876270508202864, 0.7445648823461494, 0.06756154656215696, 0.07479987459762738, 0.10924759926412919, 0.05101830084757164, 0.05690173443607072, 0.07385131394878808, 0.09253343998503094, 0.0665430432261288, 0.10083480488317842, 0.17002065480179174, 0.1167517971622194, 0.14114754593280465, 0.12587590443540775, 0.1278556342912196, 0.16032711606669925, 0.14366833713047023, 0.12347597079556527, 0.15904664874518382, 9.999999999998899e-05, 9.999999999998899e-05, 0.008906875142857262, 0.04104151002169654, 0.005394323443359772, 0.018882648176009154, 0.009686861597505758, 0.008018285150047433, 0.019032570429388773, 0.03308181334324234, 0.026059463406952865, 0.06112255815958012, 0.0025018997272622245, 0.026924613703559586, 0.005354109252879602, 9.999999999998899e-05, 0.004538797309464604, 0.04379362791859931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027711870053026888, 0.03272912463738198, 0.04726359023009952, 0.06195304688677972, 0.0627964378577992, 0.022956433357130712, 0.049920051104252905, 0.052621648351401706, 0.055550355011604546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016218670515332212, 0.006110242372684871, 0.006450575395733904, 0.012365728725780678, 0.0014837215952760996, 0.004345649553147646, 0.0036958989126054664, 0.014824150303563655, 0.015850178330669262, 0.1995890321679965, 0.18766821933387545, 0.2064825198895217, 0.20502219239211883, 0.2076865959933163, 0.21897299912702506, 0.22952356570097154, 0.2136941518328398, 0.22087533905155798, 0.06260407898862974, 0.053656164037594545, 0.06281802939806291, 0.04692074308583272, 0.04137354954077077, 0.050525924086947116, 0.04936262822127879, 0.03754405558310814, 0.04144549500385308, 0.1290348175504774, 0.13058882318057663, 0.12519187382750552, 0.1251917676226647, 0.15037333946522524, 0.13944959984126892, 0.15242305322383476, 0.13621813252640136, 0.12776303166461622, 0.20169593136576258, 0.15580220565206127, 0.17142211593700085, 0.1526880504866236, 0.16325897847851445, 0.15866059281593603, 0.16736238105462542, 0.16606103393010785, 0.18018241312165972, 0.09359459066622655, 0.09472348852401447, 0.12129618079753168, 0.10049481586468867, 0.11101801912017994, 0.12907038694606487, 0.10512124429346947, 0.1180022062008802, 0.11507538158226138, 0.16125017906352512, 0.15659993743546197, 0.15423441644044034, 0.15905552751868124, 0.14685998549018753, 0.15442134665927243, 0.2238634008947663, 0.18375656882544122, 0.14891995774072453, 0.12454547710392982, 0.1583701647457303, 0.11480581535032452, 0.14412189142551957, 0.14795057485334018, 0.15207220106624553, 0.1376364197461427, 0.1514570245686515, 0.14804101088939026, 0.1670758780909266, 0.1476698123653698, 0.1473718708573819, 0.15380393690973793, 0.12576795387574202, 0.2687553738015642, 0.13505989393332507, 0.15938465228457577, 0.14734622832394528, 0.14050912979040664, 0.12028052519657362, 0.15355800599344693, 0.12631424917698364, 0.1134635069458998, 0.13415342060324498, 0.16209593891604035, 0.17459256421360936, 0.16291207355256354, 0.1871584269179979, 0.17143841223473577, 0.17346703229971627, 0.19554781277916833, 0.17792825220419106, 0.1783198819034042, 0.183499882217511, 0.169767406764204, 0.17203706325115786, 0.04220429318441132, 0.04339108989657958, 0.05048087999461337, 0.0502329163366092, 0.050033832992800176, 0.05208300290860135, 0.04826770438445438, 0.04445778877955797, 0.05128865272723726]}, "mutation_prompt": null}
