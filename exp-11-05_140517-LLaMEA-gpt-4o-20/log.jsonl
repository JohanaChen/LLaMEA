{"id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.24421061248893172, "feedback": "The algorithm HybridPSOwithADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "99feef3a-6777-483c-8744-aa72c027dd50", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "e26c7659-0fd7-42ce-8d8c-e4e372628c35", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "82ba6963-637d-4fdd-8c8e-21cc6ebcfded", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "9abb4e28-5e06-4c35-8fd0-5d5182bf8cac", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "f072e693-67b9-4809-8e0f-bcda6f6e0cac", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "bb9356cf-730c-4adb-97db-53bd6425db18", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "a4488ed9-b2a7-4cbb-a6a9-4514dca1789b", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "a1cf6747-d568-49fb-895f-4362b6c3530c", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "a6098802-bcc4-4464-b53b-a48724f06280", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "cea4c622-ce36-40e6-8d97-7d2192cf95e5", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "774b79b5-42a8-47ce-aaaa-84f2c7385cee", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
