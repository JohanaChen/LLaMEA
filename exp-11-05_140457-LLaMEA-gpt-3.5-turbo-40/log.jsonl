{"id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "DynamicMutationPSO", "description": "An innovative algorithm that combines Particle Swarm Optimization (PSO) with a dynamic mutation strategy to efficiently optimize black-box functions in a constrained budget.", "configspace": "", "generation": 0, "fitness": 0.2031671795975178, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.40919415557479766, 0.4310731301586347, 0.4442273450456501, 0.4626111215470895, 0.43970133590029936, 0.41216604187175476, 0.40240586498874875, 0.4315004307602909, 0.4148300770926515, 0.047747667910522096, 0.03382590291839027, 0.06602113729866887, 0.06664667796942247, 0.04119879846013974, 0.02898635256459836, 0.01646009565373463, 0.02095725016509964, 0.0575446507219618, 0.05804648877454677, 0.10800588624290886, 0.09181690374874363, 0.07414530204866876, 0.11505519395601893, 0.10578865617584032, 0.09432746940773817, 0.09404860402165827, 0.15056491012178963, 0.09076482142681219, 0.09094127391878537, 0.09087697514596182, 0.0854740131128714, 0.09510869801008393, 0.07944587470842013, 0.11949482532575417, 0.05615195410656948, 0.10345781186232816, 0.8976967579295899, 0.8825578564276982, 0.9138944991633543, 0.8933683147311051, 0.9146089771080127, 0.8815251740298418, 0.9135691353741913, 0.9114450699449761, 0.9148490669730744, 0.2794406694025676, 0.2764853893489819, 0.28385077730193475, 0.28009950891740243, 0.2838332211447615, 0.2937133795083152, 0.29314282922355395, 0.28444287164555326, 0.299742261387028, 0.32512841612136456, 0.13811941407434647, 0.13735979186295066, 0.19308902596170996, 0.19028406817270815, 0.2642678061617123, 0.2242849818762429, 0.16400855384069668, 0.23419712878042187, 0.1225062215044378, 0.17370719858422856, 0.16943694956081268, 0.16568080726992518, 0.09459730108519648, 0.2064680541342918, 0.18615467418657594, 0.1753983156677721, 0.1594412181445659, 0.12339425138626281, 0.15744345384337866, 0.11422347477797101, 0.17172658002814423, 0.1301270836544851, 0.15217750898020932, 0.12703639481463902, 0.16956189379174502, 0.15763487488342487, 9.999999999998899e-05, 0.04464635465342348, 0.039277700032963936, 0.04186482090322474, 0.0005055338307147217, 0.004091095719565785, 9.999999999998899e-05, 0.0001021784597911024, 0.012433354675693065, 0.09057206748844149, 0.049236724980225355, 0.06352808974214408, 0.08160753274186427, 0.009787634309749271, 0.01327910101330998, 0.12263633955295605, 0.07453851125505373, 0.06761409472111501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004034582961832123, 0.08528922283503504, 0.0751366799623997, 0.0912972367680821, 0.06824280538544858, 0.10848106456080409, 0.07992399882667656, 0.06223336220147302, 0.09782855784831501, 0.07018987549446942, 0.4113002798497811, 0.4347582150636796, 0.40858082408498053, 0.39572734115656893, 0.3771034009370171, 0.37224813668345647, 0.3898504425327899, 0.40186515765079855, 0.42732353205844587, 0.04412412164585788, 0.07336843738470611, 0.06653115682507449, 0.06632711166221084, 0.056555075958657275, 0.10994701580423594, 0.1095534951045476, 0.08325137805160399, 0.1060216340182053, 0.16524891366508432, 0.2095658317811262, 0.3303629137527728, 0.148058729447905, 0.26036541653405343, 0.1491915830328575, 0.1568840420416755, 0.24305151806471337, 0.24962586045223034, 0.2816838033651057, 0.2568273200188067, 0.14067664755938092, 0.2597515189636649, 0.21215482425430643, 0.27133086597712663, 0.23629424301856994, 0.2918254836637587, 0.15641337968816638, 0.18205436655052676, 0.20765427252726387, 0.14126500105193118, 0.1826338138768424, 0.124743985831825, 0.20893105425901448, 0.1851623651701535, 0.18878874635512366, 0.10594736256352077, 0.2330593994841451, 0.20448514664058826, 0.22391804763679313, 0.1795878830578671, 0.23969175757053263, 0.20146490695665276, 0.18419387905202078, 0.20456294838488098, 0.23944207041567456, 0.18422995507179885, 0.19122337903694753, 0.20738483639950533, 0.1897832828720858, 0.18471497042845764, 0.19637124417394147, 0.17651581908600478, 0.1733548879298651, 0.19088049780354754, 0.12504882146351792, 0.12413682707919815, 0.13299755968377325, 0.17136535741078207, 0.19702081969638385, 0.6477563156374353, 0.09912842686588319, 0.16796737955962016, 0.17391534968401134, 0.5406594315747664, 0.20870274297271363, 0.5111209541147237, 0.207078294742714, 0.5139671523922587, 0.5683857824407816, 0.10363697565985619, 0.36717405010342685, 0.4349270332678925, 0.17979970149436408, 0.18748476923540158, 0.17447936182357804, 0.197684949877453, 0.18212681213120796, 0.17506435144049937, 0.1796559647712609, 0.19499464481991924, 0.20848969080490187, 0.09109675769427772, 0.06704481193962242, 0.07210394580969148, 0.07874780784170365, 0.08301358427868177, 0.07713641172611607, 0.07970943654346829, 0.08463368043006159, 0.07434588175557288]}, "mutation_prompt": null}
{"id": "333b900c-6172-4b4f-8945-93137ab837ed", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "DynamicMutationPSO", "description": "An innovative algorithm that combines Particle Swarm Optimization (PSO) with a dynamic mutation strategy to efficiently optimize black-box functions in a constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.40919415557479766, 0.4310731301586347, 0.4442273450456501, 0.4626111215470895, 0.43970133590029936, 0.41216604187175476, 0.40240586498874875, 0.4315004307602909, 0.4148300770926515, 0.047747667910522096, 0.03382590291839027, 0.06602113729866887, 0.06664667796942247, 0.04119879846013974, 0.02898635256459836, 0.01646009565373463, 0.02095725016509964, 0.0575446507219618, 0.05804648877454677, 0.10800588624290886, 0.09181690374874363, 0.07414530204866876, 0.11505519395601893, 0.10578865617584032, 0.09432746940773817, 0.09404860402165827, 0.15056491012178963, 0.09076482142681219, 0.09094127391878537, 0.09087697514596182, 0.0854740131128714, 0.09510869801008393, 0.07944587470842013, 0.11949482532575417, 0.05615195410656948, 0.10345781186232816, 0.8976967579295899, 0.8825578564276982, 0.9138944991633543, 0.8933683147311051, 0.9146089771080127, 0.8815251740298418, 0.9135691353741913, 0.9114450699449761, 0.9148490669730744, 0.2794406694025676, 0.2764853893489819, 0.28385077730193475, 0.28009950891740243, 0.2838332211447615, 0.2937133795083152, 0.29314282922355395, 0.28444287164555326, 0.299742261387028, 0.32512841612136456, 0.13811941407434647, 0.13735979186295066, 0.19308902596170996, 0.19028406817270815, 0.2642678061617123, 0.2242849818762429, 0.16400855384069668, 0.23419712878042187, 0.1225062215044378, 0.17370719858422856, 0.16943694956081268, 0.16568080726992518, 0.09459730108519648, 0.2064680541342918, 0.18615467418657594, 0.1753983156677721, 0.1594412181445659, 0.12339425138626281, 0.15744345384337866, 0.11422347477797101, 0.17172658002814423, 0.1301270836544851, 0.15217750898020932, 0.12703639481463902, 0.16956189379174502, 0.15763487488342487, 9.999999999998899e-05, 0.04464635465342348, 0.039277700032963936, 0.04186482090322474, 0.0005055338307147217, 0.004091095719565785, 9.999999999998899e-05, 0.0001021784597911024, 0.012433354675693065, 0.09057206748844149, 0.049236724980225355, 0.06352808974214408, 0.08160753274186427, 0.009787634309749271, 0.01327910101330998, 0.12263633955295605, 0.07453851125505373, 0.06761409472111501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004034582961832123, 0.08528922283503504, 0.0751366799623997, 0.0912972367680821, 0.06824280538544858, 0.10848106456080409, 0.07992399882667656, 0.06223336220147302, 0.09782855784831501, 0.07018987549446942, 0.4113002798497811, 0.4347582150636796, 0.40858082408498053, 0.39572734115656893, 0.3771034009370171, 0.37224813668345647, 0.3898504425327899, 0.40186515765079855, 0.42732353205844587, 0.04412412164585788, 0.07336843738470611, 0.06653115682507449, 0.06632711166221084, 0.056555075958657275, 0.10994701580423594, 0.1095534951045476, 0.08325137805160399, 0.1060216340182053, 0.16524891366508432, 0.2095658317811262, 0.3303629137527728, 0.148058729447905, 0.26036541653405343, 0.1491915830328575, 0.1568840420416755, 0.24305151806471337, 0.24962586045223034, 0.2816838033651057, 0.2568273200188067, 0.14067664755938092, 0.2597515189636649, 0.21215482425430643, 0.27133086597712663, 0.23629424301856994, 0.2918254836637587, 0.15641337968816638, 0.18205436655052676, 0.20765427252726387, 0.14126500105193118, 0.1826338138768424, 0.124743985831825, 0.20893105425901448, 0.1851623651701535, 0.18878874635512366, 0.10594736256352077, 0.2330593994841451, 0.20448514664058826, 0.22391804763679313, 0.1795878830578671, 0.23969175757053263, 0.20146490695665276, 0.18419387905202078, 0.20456294838488098, 0.23944207041567456, 0.18422995507179885, 0.19122337903694753, 0.20738483639950533, 0.1897832828720858, 0.18471497042845764, 0.19637124417394147, 0.17651581908600478, 0.1733548879298651, 0.19088049780354754, 0.12504882146351792, 0.12413682707919815, 0.13299755968377325, 0.17136535741078207, 0.19702081969638385, 0.6477563156374353, 0.09912842686588319, 0.16796737955962016, 0.17391534968401134, 0.5406594315747664, 0.20870274297271363, 0.5111209541147237, 0.207078294742714, 0.5139671523922587, 0.5683857824407816, 0.10363697565985619, 0.36717405010342685, 0.4349270332678925, 0.17979970149436408, 0.18748476923540158, 0.17447936182357804, 0.197684949877453, 0.18212681213120796, 0.17506435144049937, 0.1796559647712609, 0.19499464481991924, 0.20848969080490187, 0.09109675769427772, 0.06704481193962242, 0.07210394580969148, 0.07874780784170365, 0.08301358427868177, 0.07713641172611607, 0.07970943654346829, 0.08463368043006159, 0.07434588175557288]}, "mutation_prompt": null}
{"id": "40438c6b-a7a0-4d26-8bd7-43342d32b2bf", "solution": "import numpy as np\n\nclass EnhancedMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.mutation_rate = 0.2\n\n    def mutate(self, particle):\n        return particle + np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                self.particles[i] = np.clip(self.mutate(self.particles[i]), -5.0, 5.0)\n        return self.global_best", "name": "EnhancedMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating a mutation operator to promote exploration and diversity in the search space.", "configspace": "", "generation": 2, "fitness": 0.1941775338987829, "feedback": "The algorithm EnhancedMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.35494681613610424, 0.3838579751499216, 0.37081675960588356, 0.34484167226042295, 0.34992097958023316, 0.3704029343474038, 0.3591370229815657, 0.39047530517692364, 0.3573846973166178, 9.999999999998899e-05, 0.00024834962543462957, 0.02114530385937563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09726900655842796, 0.1156957816741706, 0.0744510490268212, 0.09924708446364239, 0.08988509655104304, 0.08303055937132153, 0.07707600894005429, 0.09653146090473619, 0.07028054519920879, 0.08169338896232148, 0.07027347633937842, 0.07711691392166231, 0.10611626301710353, 0.08033173103894209, 0.06901813738336782, 0.0877104782790924, 0.07208117427689553, 0.061891878189361926, 0.918863860962492, 0.8795372161846822, 0.9158713496023645, 0.8823816735667858, 0.9194319432803915, 0.9118041813012624, 0.89193286059087, 0.8948772296328315, 0.889742416278364, 0.23109958946936116, 0.22269338383875636, 0.2471639135368945, 0.24148883590458237, 0.24012890547484178, 0.23151308091012934, 0.24875995956883767, 0.22553989015494424, 0.22381170417248308, 0.2350578412754708, 0.24456534546232156, 0.20514423866698672, 0.2746653485930102, 0.24527921944786624, 0.30825803250003314, 0.17463872639222133, 0.2771363335788102, 0.22657064994211973, 0.12937269501783522, 0.1358070413617628, 0.13333301378066242, 0.1367658711075046, 0.12138881037108773, 0.07120962530814834, 0.14116484712709065, 0.12110149186146923, 0.11965608601323252, 0.14873041514977703, 0.15537749242766186, 0.16262050696260466, 0.150938156205367, 0.1112363818345018, 0.13093343047235084, 0.1449201754425561, 0.12118721516864028, 0.14111719379715737, 0.01836763028763344, 9.999999999998899e-05, 0.007609425509498169, 0.0008082145618555359, 0.026048657894347182, 9.999999999998899e-05, 0.01737150459496606, 0.0009283862437183821, 0.007575365194467665, 0.07653733523155537, 0.09060005639806312, 0.0995318978593367, 0.08096186427184826, 0.043638213226398825, 0.06069196023616519, 0.0988166201788766, 0.054204033098379845, 0.05113088202336313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07356593885264306, 0.08145763834009123, 0.06455237824269389, 0.06579887856098043, 0.04905640246871479, 0.058459937288098285, 0.07306805010108475, 0.06268248263487353, 0.07312052613493447, 0.35805852448155884, 0.36613679263452636, 0.3731594871237992, 0.3698104120557065, 0.3524786899361262, 0.345436022175985, 0.3689659641008708, 0.34219400898565033, 0.3491364304086738, 0.07019270698228453, 0.07177785592756192, 0.10311300928090017, 0.07772714705937578, 0.08068846095921012, 0.09910329252850147, 0.10736824709629877, 0.11235771766650726, 0.07174171992879763, 0.15205966993403963, 0.2005914476112466, 0.1577059830384362, 0.21975363936547687, 0.20978594504238757, 0.1613633646576358, 0.20524801584115215, 0.18642712405677708, 0.2025890226263577, 0.22996123845398475, 0.2592140800288735, 0.22519484386580257, 0.2550002857348188, 0.24335081708222128, 0.26326052839310754, 0.24415905804157645, 0.26452324328141774, 0.15198631044108335, 0.14707336651466307, 0.21815976916874125, 0.20736592251870478, 0.1725373118960215, 0.18730230919938873, 0.21202375829479403, 0.17509187040330687, 0.20243385805340208, 0.17861518453756198, 0.19726557266266043, 0.19008190798159308, 0.19126781762858636, 0.19979159768347066, 0.209827498794798, 0.20026888751352234, 0.1967257715440106, 0.16853715291814164, 0.22512275106198165, 0.1685347539900749, 0.1966208517830078, 0.1924116911759738, 0.17682597856959092, 0.17175956194000064, 0.1758106724120475, 0.21751933827789072, 0.19239462968366716, 0.17442773270516987, 0.12536992459854923, 0.12551824623535446, 0.15210637468398125, 0.48456733501219573, 0.19536332189222538, 0.6341577320723992, 0.12118675530697331, 0.1681974365633334, 0.1730337058876832, 0.5029480193638678, 0.20682388483703584, 0.42647934618882777, 0.50061500877924, 0.20567603651393662, 0.513222687850655, 0.10391577113161454, 0.5343896787609426, 0.4313096608683713, 0.19026038268536571, 0.1824262434166255, 0.17446280730468333, 0.1672907890260492, 0.17224067758831152, 0.1821811513929098, 0.1810338930621107, 0.18141068125085813, 0.21601389833884188, 0.08429431494572925, 0.09064208234250659, 0.07853310738474628, 0.08283821513740208, 0.08848352120530367, 0.11227873224302243, 0.08994868124172062, 0.06319375295700191, 0.0664345290540741]}, "mutation_prompt": null}
