{"id": "de98bc8b-5cce-489b-a7ce-70d66263fe22", "solution": "import numpy as np\n\nclass BatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = np.random.uniform(-1, 1, self.dim)\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "BatAlgorithm", "description": "Novel algorithm inspired by bat echolocation behavior for optimization in continuous search spaces.", "configspace": "", "generation": 0, "fitness": 0.1760134448868982, "feedback": "The algorithm BatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.358410022177856, 0.43182086012181786, 0.3590523732514892, 0.37360652926722027, 0.3581178458150748, 0.3569012597233766, 0.35916758296734974, 0.3395076098761989, 0.3700056097253419, 9.999999999998899e-05, 0.010119598175848288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0072443584801219485, 9.999999999998899e-05, 9.999999999998899e-05, 0.07383329364266444, 0.04650544069971607, 0.024139523963140563, 0.06438643479008954, 0.07966119234253055, 0.09843088624219987, 0.04469755318871482, 0.056242370976554046, 0.020746504082753914, 0.08466634230260328, 0.003255622504776845, 0.04086658985764735, 0.10980481665068931, 0.009062826410601299, 0.06570746510192527, 0.07824894767237367, 0.012450316959645158, 0.052860249142023585, 0.9896722537401508, 0.9723227335557141, 0.9927601119027043, 0.9882866470746609, 0.9804120529128116, 0.972087673354022, 0.9613365785544485, 0.9800670611819547, 0.9482087433904002, 0.23412491911248567, 0.24440577284709508, 0.2659346953095517, 0.23668740889685203, 0.24907247656193598, 0.2324591743883052, 0.2459805233961384, 0.23621921476697694, 0.2357634403093175, 0.29453680219163614, 0.21034498659939127, 0.1370409842473015, 0.264675711760317, 0.18553997215035856, 0.24226348286872368, 0.1101578272808239, 0.21987504550860126, 0.2669271154456171, 0.0771289874090253, 0.15797982138555422, 0.14850192265942186, 0.1547004080143024, 0.1272469741485529, 0.12643825411431642, 0.1410533184819155, 0.16879402812348576, 0.17364476633675008, 0.13410456281452954, 0.07705157735315893, 0.11623452031131387, 0.13431698668740466, 0.13411318613510825, 0.13777622949358048, 0.1286144999208877, 0.0727008734854393, 0.14561789597661368, 0.00010818479957652727, 9.999999999998899e-05, 9.999999999998899e-05, 0.017239140701871825, 0.00671649566162702, 0.019325328420059518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683864726063761, 0.041963939880768186, 0.08637076861509119, 0.06662731677669986, 0.004814258347120237, 0.013904868402348836, 9.999999999998899e-05, 0.03609968762336735, 0.061436010792338513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0550395740099906, 0.06989359783360183, 0.05037179326754582, 0.059637303103332706, 0.06460461193266198, 0.07557325304786044, 0.06374325951500703, 0.04978437128743518, 0.07876850729802587, 0.3451617931592279, 0.37787587683463253, 0.3824226065317644, 0.34953350116362414, 0.3477278928998767, 0.34537075957693875, 0.34955007121366444, 0.34677673982084634, 0.3817019281520522, 0.0702045241476098, 0.08830425651019724, 0.07307813719965028, 0.08984527769666728, 0.04932156962722034, 0.08780564885937148, 0.06063626066717864, 0.11223843392577604, 0.07645403032306508, 0.21554179850273192, 0.20986667254389502, 0.18449234485729626, 0.19762806150201273, 0.2120653222270792, 0.1899246755189411, 0.2079527055060536, 0.16324388937541334, 0.22906005448590328, 0.17706002508784147, 0.2527186021750307, 0.16864238598652515, 0.1653418176740974, 0.1755873367197528, 0.14854498032786445, 0.16291674145522406, 0.18511059785509287, 0.10577538905875339, 0.17998249592395654, 0.20279630100190038, 0.07040787117262026, 0.20809998717096645, 0.1308834715225765, 0.18643623669377785, 0.16709473952463938, 0.08266939155640352, 0.044899997724380025, 0.23765670411857442, 0.207587761505323, 0.18251725897416526, 0.19157218125731368, 0.14551341394994766, 0.2045744208068544, 0.21493267794568527, 0.20190091289551293, 0.20479205959438895, 0.16956618461738948, 0.19322809459876278, 0.20469041953462952, 0.17841648932654353, 0.17465557228197848, 0.17575885605478303, 0.17387684794824732, 0.19676792716893132, 0.17717660211472908, 0.11942608324638226, 0.07644672967178134, 0.13541313278249634, 0.172593650257015, 0.19870778286827506, 0.1079637643633603, 0.15204932656635173, 0.12513204679442347, 0.10353945779993867, 0.08296122585292265, 0.11272906472952493, 0.4440153757673182, 0.5134249874213984, 0.05193487036764166, 0.21207930778513917, 0.16775182209758022, 0.15595513314380827, 0.332862862826764, 0.17934770531312938, 0.1834711066954866, 0.17558499643257597, 0.1926850826814802, 0.17988877573366224, 0.1758476319874298, 0.1845695701224378, 0.17227486176897544, 0.17044274273800963, 0.05455629834030207, 0.04761269478401986, 0.04555172809506225, 0.07329890839413511, 0.1129346340114622, 0.04970528871491364, 0.09760882427171091, 0.05653867339217, 0.05429719474810668]}, "mutation_prompt": null}
{"id": "ee8003a2-08d1-4862-a6f3-a3c6b699a423", "solution": "import numpy as np\n\nclass BatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = np.random.uniform(-1, 1, self.dim)\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "BatAlgorithm", "description": "Novel algorithm inspired by bat echolocation behavior for optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de98bc8b-5cce-489b-a7ce-70d66263fe22", "metadata": {"aucs": [0.358410022177856, 0.43182086012181786, 0.3590523732514892, 0.37360652926722027, 0.3581178458150748, 0.3569012597233766, 0.35916758296734974, 0.3395076098761989, 0.3700056097253419, 9.999999999998899e-05, 0.010119598175848288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0072443584801219485, 9.999999999998899e-05, 9.999999999998899e-05, 0.07383329364266444, 0.04650544069971607, 0.024139523963140563, 0.06438643479008954, 0.07966119234253055, 0.09843088624219987, 0.04469755318871482, 0.056242370976554046, 0.020746504082753914, 0.08466634230260328, 0.003255622504776845, 0.04086658985764735, 0.10980481665068931, 0.009062826410601299, 0.06570746510192527, 0.07824894767237367, 0.012450316959645158, 0.052860249142023585, 0.9896722537401508, 0.9723227335557141, 0.9927601119027043, 0.9882866470746609, 0.9804120529128116, 0.972087673354022, 0.9613365785544485, 0.9800670611819547, 0.9482087433904002, 0.23412491911248567, 0.24440577284709508, 0.2659346953095517, 0.23668740889685203, 0.24907247656193598, 0.2324591743883052, 0.2459805233961384, 0.23621921476697694, 0.2357634403093175, 0.29453680219163614, 0.21034498659939127, 0.1370409842473015, 0.264675711760317, 0.18553997215035856, 0.24226348286872368, 0.1101578272808239, 0.21987504550860126, 0.2669271154456171, 0.0771289874090253, 0.15797982138555422, 0.14850192265942186, 0.1547004080143024, 0.1272469741485529, 0.12643825411431642, 0.1410533184819155, 0.16879402812348576, 0.17364476633675008, 0.13410456281452954, 0.07705157735315893, 0.11623452031131387, 0.13431698668740466, 0.13411318613510825, 0.13777622949358048, 0.1286144999208877, 0.0727008734854393, 0.14561789597661368, 0.00010818479957652727, 9.999999999998899e-05, 9.999999999998899e-05, 0.017239140701871825, 0.00671649566162702, 0.019325328420059518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683864726063761, 0.041963939880768186, 0.08637076861509119, 0.06662731677669986, 0.004814258347120237, 0.013904868402348836, 9.999999999998899e-05, 0.03609968762336735, 0.061436010792338513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0550395740099906, 0.06989359783360183, 0.05037179326754582, 0.059637303103332706, 0.06460461193266198, 0.07557325304786044, 0.06374325951500703, 0.04978437128743518, 0.07876850729802587, 0.3451617931592279, 0.37787587683463253, 0.3824226065317644, 0.34953350116362414, 0.3477278928998767, 0.34537075957693875, 0.34955007121366444, 0.34677673982084634, 0.3817019281520522, 0.0702045241476098, 0.08830425651019724, 0.07307813719965028, 0.08984527769666728, 0.04932156962722034, 0.08780564885937148, 0.06063626066717864, 0.11223843392577604, 0.07645403032306508, 0.21554179850273192, 0.20986667254389502, 0.18449234485729626, 0.19762806150201273, 0.2120653222270792, 0.1899246755189411, 0.2079527055060536, 0.16324388937541334, 0.22906005448590328, 0.17706002508784147, 0.2527186021750307, 0.16864238598652515, 0.1653418176740974, 0.1755873367197528, 0.14854498032786445, 0.16291674145522406, 0.18511059785509287, 0.10577538905875339, 0.17998249592395654, 0.20279630100190038, 0.07040787117262026, 0.20809998717096645, 0.1308834715225765, 0.18643623669377785, 0.16709473952463938, 0.08266939155640352, 0.044899997724380025, 0.23765670411857442, 0.207587761505323, 0.18251725897416526, 0.19157218125731368, 0.14551341394994766, 0.2045744208068544, 0.21493267794568527, 0.20190091289551293, 0.20479205959438895, 0.16956618461738948, 0.19322809459876278, 0.20469041953462952, 0.17841648932654353, 0.17465557228197848, 0.17575885605478303, 0.17387684794824732, 0.19676792716893132, 0.17717660211472908, 0.11942608324638226, 0.07644672967178134, 0.13541313278249634, 0.172593650257015, 0.19870778286827506, 0.1079637643633603, 0.15204932656635173, 0.12513204679442347, 0.10353945779993867, 0.08296122585292265, 0.11272906472952493, 0.4440153757673182, 0.5134249874213984, 0.05193487036764166, 0.21207930778513917, 0.16775182209758022, 0.15595513314380827, 0.332862862826764, 0.17934770531312938, 0.1834711066954866, 0.17558499643257597, 0.1926850826814802, 0.17988877573366224, 0.1758476319874298, 0.1845695701224378, 0.17227486176897544, 0.17044274273800963, 0.05455629834030207, 0.04761269478401986, 0.04555172809506225, 0.07329890839413511, 0.1129346340114622, 0.04970528871491364, 0.09760882427171091, 0.05653867339217, 0.05429719474810668]}, "mutation_prompt": null}
{"id": "03ff6b46-530e-4eb1-b38e-4cf054d5c6c3", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.loudness_min = 0.2\n        self.loudness_max = 1.0\n        self.pulse_rate_min = 0.2\n        self.pulse_rate_max = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = np.random.uniform(-1, 1, self.dim)\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n                \n                # Update loudness and pulse rate\n                self.loudness = max(self.loudness_min, self.loudness * 0.95)\n                self.pulse_rate = min(self.pulse_rate_max, self.pulse_rate * 1.05)\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhanced BatAlgorithm with adaptive loudness and pulse rate for improved convergence.", "configspace": "", "generation": 2, "fitness": 0.17455162036752436, "feedback": "The algorithm EnhancedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "de98bc8b-5cce-489b-a7ce-70d66263fe22", "metadata": {"aucs": [0.4377758482352275, 0.45777764561678236, 0.4430581175145458, 0.43388575219866876, 0.44202033175353483, 0.47140739863421155, 0.43538176960013497, 0.4586007125430508, 0.4430170990559623, 0.0577585689488318, 0.0007445226598911114, 9.999999999998899e-05, 0.0917971733417915, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018176681190655852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06394923723323354, 0.03886812026277242, 0.01266615042560948, 0.033735415802562785, 0.006989260677922937, 0.016908645840440162, 0.03940884644792242, 0.02625385358361232, 0.028059940681510298, 0.010283049926054666, 9.999999999998899e-05, 9.999999999998899e-05, 0.07896402084335186, 9.999999999998899e-05, 9.999999999998899e-05, 0.055268021183617067, 0.01016122569622624, 9.999999999998899e-05, 0.9905566254661395, 0.9606626435332102, 0.9849381585679977, 0.9777036329053784, 0.9572678943875442, 0.9519856549917561, 0.922867018262902, 0.9722384083406935, 0.9139069159864017, 0.32822212132912254, 0.331846307395405, 0.2929579726592767, 0.32246601551138354, 0.32584178038586664, 0.36056702522476114, 0.30491618653505403, 0.35710757309205177, 0.2874109046571083, 0.13076288687053927, 0.06695102301266398, 0.03552154249545092, 0.037924491985917075, 0.0029918540192027665, 0.11028310406702058, 0.06149691603756635, 0.030156832933925237, 0.04288972668514057, 0.14812749347766097, 0.16659037692444012, 0.2011431264083885, 0.21398578873507423, 0.1786115916470601, 0.12536927427347677, 0.1982626645382879, 0.13345870208934507, 0.18519521569561936, 0.1844760517127595, 0.17293187778816388, 0.1864809059098128, 0.18642550242641498, 0.1330805055875668, 0.18418583236677843, 0.18894982160918428, 0.1560371455050834, 0.17636360899933956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04106369086002959, 0.05193483403479693, 0.006775286623102339, 0.003648554648953195, 9.999999999998899e-05, 0.012049944907766785, 0.08036021670114224, 0.04671733835971681, 0.09145427267377815, 0.09483635275606317, 0.009865669640629182, 0.026003428688881614, 0.0012925881139473905, 0.0364951644655479, 0.06051163499656509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11343226162361919, 0.07849778098217175, 0.0875661270636805, 0.09983066378842742, 0.07327548301324571, 0.11704100048039234, 0.09485167890620871, 0.06328156444391575, 0.05299524121968002, 0.4270493449496515, 0.41932243538102676, 0.4317146704978919, 0.45456192344874236, 0.47606885461879034, 0.43599323700320136, 0.4227414316501861, 0.41462987250631267, 0.4274253835870583, 0.03620252576643701, 0.005583757827518632, 0.029076746220637495, 0.05996328956842223, 0.009578704271960836, 0.07850064507612042, 0.017673918657148402, 0.013763466774641131, 0.06906838387651315, 0.14541345490687074, 0.26461040573469463, 0.17752043497821746, 0.19365324568653064, 0.13384907556941383, 0.17394470737082068, 0.17970218620346368, 0.18421064425198053, 0.1233263511385343, 0.11176338980514522, 0.2041832133065855, 0.11514978139968657, 0.15043842102886318, 0.12878120552832573, 0.1340939702145606, 0.14662739010064652, 0.1284438300154268, 0.10482188315137297, 0.0655502319827308, 0.15399807742444305, 0.06922883117640743, 0.09921727944238279, 0.08139932960609497, 0.05977658219674653, 0.12885450652750174, 0.07741918967949679, 0.04653716857263457, 0.1921357643656567, 0.13868388918988872, 0.17044472830917834, 0.16129900420742083, 0.11178854028510954, 0.1528847672493735, 0.19636325825839374, 0.1560513403974868, 0.1663605915731916, 0.18749924848651967, 0.17589043251775405, 0.18905959662176242, 0.1899493373906549, 0.17150852287128493, 0.17969725628108912, 0.20539935144900023, 0.19818960829054122, 0.1671059432391805, 0.11979586308616474, 0.07665782789767595, 0.13660435404208238, 0.17330903696317435, 0.2023356929950303, 0.10957987509803402, 0.15363775341507846, 0.12702342813061607, 0.10408297899429164, 0.08347312244220118, 0.11342659379760511, 0.6129600693066803, 0.5980803999316966, 0.05207387652989348, 0.21377391710069527, 0.16826253370305932, 0.07349155695003229, 0.5297783834347165, 0.1800662958840098, 0.17660245651633322, 0.18954796752454262, 0.1777688434856436, 0.17545930307166802, 0.1892105305959345, 0.17914260256259207, 0.17331601452997025, 0.18059928360222477, 0.02624620061366545, 0.04858149891779173, 0.06876947970536618, 0.02833965250425785, 0.05382997613680185, 0.020113157682728033, 0.04979040319924899, 0.05562588668685753, 0.03529274382883829]}, "mutation_prompt": null}
{"id": "4b6b6f7a-5087-4502-aaf0-55f9bfeea3a4", "solution": "import numpy as np\n\nclass BatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = np.random.uniform(-1, 1, self.dim)\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "BatAlgorithm", "description": "Novel algorithm inspired by bat echolocation behavior for optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de98bc8b-5cce-489b-a7ce-70d66263fe22", "metadata": {"aucs": [0.358410022177856, 0.43182086012181786, 0.3590523732514892, 0.37360652926722027, 0.3581178458150748, 0.3569012597233766, 0.35916758296734974, 0.3395076098761989, 0.3700056097253419, 9.999999999998899e-05, 0.010119598175848288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0072443584801219485, 9.999999999998899e-05, 9.999999999998899e-05, 0.07383329364266444, 0.04650544069971607, 0.024139523963140563, 0.06438643479008954, 0.07966119234253055, 0.09843088624219987, 0.04469755318871482, 0.056242370976554046, 0.020746504082753914, 0.08466634230260328, 0.003255622504776845, 0.04086658985764735, 0.10980481665068931, 0.009062826410601299, 0.06570746510192527, 0.07824894767237367, 0.012450316959645158, 0.052860249142023585, 0.9896722537401508, 0.9723227335557141, 0.9927601119027043, 0.9882866470746609, 0.9804120529128116, 0.972087673354022, 0.9613365785544485, 0.9800670611819547, 0.9482087433904002, 0.23412491911248567, 0.24440577284709508, 0.2659346953095517, 0.23668740889685203, 0.24907247656193598, 0.2324591743883052, 0.2459805233961384, 0.23621921476697694, 0.2357634403093175, 0.29453680219163614, 0.21034498659939127, 0.1370409842473015, 0.264675711760317, 0.18553997215035856, 0.24226348286872368, 0.1101578272808239, 0.21987504550860126, 0.2669271154456171, 0.0771289874090253, 0.15797982138555422, 0.14850192265942186, 0.1547004080143024, 0.1272469741485529, 0.12643825411431642, 0.1410533184819155, 0.16879402812348576, 0.17364476633675008, 0.13410456281452954, 0.07705157735315893, 0.11623452031131387, 0.13431698668740466, 0.13411318613510825, 0.13777622949358048, 0.1286144999208877, 0.0727008734854393, 0.14561789597661368, 0.00010818479957652727, 9.999999999998899e-05, 9.999999999998899e-05, 0.017239140701871825, 0.00671649566162702, 0.019325328420059518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683864726063761, 0.041963939880768186, 0.08637076861509119, 0.06662731677669986, 0.004814258347120237, 0.013904868402348836, 9.999999999998899e-05, 0.03609968762336735, 0.061436010792338513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0550395740099906, 0.06989359783360183, 0.05037179326754582, 0.059637303103332706, 0.06460461193266198, 0.07557325304786044, 0.06374325951500703, 0.04978437128743518, 0.07876850729802587, 0.3451617931592279, 0.37787587683463253, 0.3824226065317644, 0.34953350116362414, 0.3477278928998767, 0.34537075957693875, 0.34955007121366444, 0.34677673982084634, 0.3817019281520522, 0.0702045241476098, 0.08830425651019724, 0.07307813719965028, 0.08984527769666728, 0.04932156962722034, 0.08780564885937148, 0.06063626066717864, 0.11223843392577604, 0.07645403032306508, 0.21554179850273192, 0.20986667254389502, 0.18449234485729626, 0.19762806150201273, 0.2120653222270792, 0.1899246755189411, 0.2079527055060536, 0.16324388937541334, 0.22906005448590328, 0.17706002508784147, 0.2527186021750307, 0.16864238598652515, 0.1653418176740974, 0.1755873367197528, 0.14854498032786445, 0.16291674145522406, 0.18511059785509287, 0.10577538905875339, 0.17998249592395654, 0.20279630100190038, 0.07040787117262026, 0.20809998717096645, 0.1308834715225765, 0.18643623669377785, 0.16709473952463938, 0.08266939155640352, 0.044899997724380025, 0.23765670411857442, 0.207587761505323, 0.18251725897416526, 0.19157218125731368, 0.14551341394994766, 0.2045744208068544, 0.21493267794568527, 0.20190091289551293, 0.20479205959438895, 0.16956618461738948, 0.19322809459876278, 0.20469041953462952, 0.17841648932654353, 0.17465557228197848, 0.17575885605478303, 0.17387684794824732, 0.19676792716893132, 0.17717660211472908, 0.11942608324638226, 0.07644672967178134, 0.13541313278249634, 0.172593650257015, 0.19870778286827506, 0.1079637643633603, 0.15204932656635173, 0.12513204679442347, 0.10353945779993867, 0.08296122585292265, 0.11272906472952493, 0.4440153757673182, 0.5134249874213984, 0.05193487036764166, 0.21207930778513917, 0.16775182209758022, 0.15595513314380827, 0.332862862826764, 0.17934770531312938, 0.1834711066954866, 0.17558499643257597, 0.1926850826814802, 0.17988877573366224, 0.1758476319874298, 0.1845695701224378, 0.17227486176897544, 0.17044274273800963, 0.05455629834030207, 0.04761269478401986, 0.04555172809506225, 0.07329890839413511, 0.1129346340114622, 0.04970528871491364, 0.09760882427171091, 0.05653867339217, 0.05429719474810668]}, "mutation_prompt": null}
{"id": "30cf84b1-186d-490a-b6f5-3bb391adbc29", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = np.random.uniform(-1, 1, self.dim)\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                # Integrate Levy flights for improved exploration\n                levy = 0.01 * np.random.standard_cauchy(self.dim)\n                new_solution = population[i] + velocity + levy\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing BatAlgorithm with Levy flights for improved exploration capability.", "configspace": "", "generation": 4, "fitness": 0.17543266998244783, "feedback": "The algorithm EnhancedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "de98bc8b-5cce-489b-a7ce-70d66263fe22", "metadata": {"aucs": [0.3641150550537724, 0.3477579094193106, 0.35259061439856454, 0.3441928178990935, 0.3689074770110218, 0.3604307204470445, 0.3470560132439111, 0.3429507348915024, 0.3723113625608576, 0.0011663537456951811, 9.999999999998899e-05, 0.002549839409843435, 0.010914052849729905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060293978549955995, 0.03926226648775788, 0.029070332066130633, 0.06934263089277537, 0.0749097899603125, 0.049067045172198065, 0.049286683347606774, 0.04890462086451974, 0.05726535366656971, 0.05649969920614517, 0.005361683291982278, 0.010846694898034914, 0.0890603741548599, 0.024237020295174605, 0.04647202765633429, 0.08930029901176217, 0.03879220098587144, 0.045147938383910735, 0.9918250309009708, 0.9800220780175697, 0.9901977488806207, 0.9834226701697791, 0.9790992895744199, 0.9743223558873942, 0.9565400733695651, 0.9838767063345921, 0.9619576554962891, 0.23269093106071959, 0.25674817848590836, 0.24204374595350842, 0.23341473363868603, 0.23163031176194304, 0.24575777409868282, 0.24686680178171339, 0.24289167398292233, 0.2447575568458502, 0.22775230594235096, 0.09645548468652598, 0.2871176072178585, 0.28763745681988406, 0.21319187433224762, 0.21984805771070037, 0.17044120709708388, 0.28248446340789424, 0.2131001122195022, 0.08609284758766989, 0.13523319924222488, 0.1573180242910106, 0.14361220155236276, 0.12653639417881168, 0.12337736259204413, 0.14150309959124918, 0.1231008589972542, 0.16400778268271932, 0.1501220647631739, 0.10438048872058503, 0.15593079898711948, 0.1424461760102964, 0.14727501585689207, 0.1227428328681257, 0.14037489944045334, 0.1435234969574145, 0.13609178130247512, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020211156470395508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07307991135675618, 0.04349361487203118, 0.07211345544245529, 0.08622980412342274, 0.008288046493370338, 0.03155976891403367, 9.999999999998899e-05, 0.05617404971388473, 0.007528183440438596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0331543193594771, 0.07032313989259475, 0.030525004588790816, 0.07261301893874228, 0.060202131757395416, 0.08594772594123223, 0.08616781083742775, 0.06517162910945518, 0.0642869134097549, 0.3457856671253313, 0.3570107982924967, 0.35951671743655267, 0.3401478906346804, 0.3514736166261687, 0.34063793315002044, 0.34178148773647077, 0.38492568701543173, 0.35879655614262707, 0.06118640390018537, 0.030116654203036886, 0.10061825878858921, 0.09367538208887893, 0.047716875864842634, 0.10546990018211178, 0.07391178650630448, 0.057958735850798804, 0.08879927489581729, 0.2249993707013187, 0.18984498999505084, 0.19157298268026401, 0.20710366938148095, 0.19265923817844754, 0.2061746387100185, 0.19943286142253958, 0.19942721284645482, 0.18845992566682723, 0.2319828520556343, 0.25015785637794374, 0.18558511997566718, 0.17454220268950338, 0.169410181846385, 0.2030519434312158, 0.18880903557176998, 0.18470022417792142, 0.10037028532544023, 0.16552332476554277, 0.18888004387973656, 0.0843269891685039, 0.17425072508511508, 0.14453117688686512, 0.1343839442492767, 0.16232729708449134, 0.15303709035686974, 0.09826068437306879, 0.18573251857836826, 0.1594528064539763, 0.1941116999240955, 0.17720447015785212, 0.15375805363451966, 0.2128679604652961, 0.20203689577270445, 0.15505534352871597, 0.2124906258934196, 0.1919565156480494, 0.1794840319862251, 0.1767985592364788, 0.15984789927625476, 0.16229667939038883, 0.18761055221595302, 0.18555944472162778, 0.1878961937731365, 0.16401133406254798, 0.1652457738740768, 0.07644727947463326, 0.13450018273885378, 0.1726502273014452, 0.19933251926346263, 0.10853529662229355, 0.15078704253950403, 0.11488467294643179, 0.10363420226710973, 0.08290092979482977, 0.11243707672307957, 0.3645151594620958, 0.5256254540965768, 0.05903463722796243, 0.21019012943827953, 0.16906968130424027, 0.07330191437828704, 0.3600848314814097, 0.17750356270082357, 0.19819134267103522, 0.1877939064629196, 0.19782392159927464, 0.1717557980564789, 0.1655349481106081, 0.19634174778334956, 0.19446234687487363, 0.1649672253657749, 0.07681223149374039, 0.07960053016464685, 0.073358531991637, 0.09299814463010969, 0.07165556897057923, 0.05361430343371698, 0.11445575065510982, 0.05443845528675517, 0.07016782519844966]}, "mutation_prompt": null}
{"id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 5, "fitness": 0.1776242123677607, "feedback": "The algorithm EnhancedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "de98bc8b-5cce-489b-a7ce-70d66263fe22", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "091b07c6-dcce-4bd1-8c8c-d2cd381cf407", "solution": "import numpy as np\n\nclass ImprovedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def chaos_system(self, x):\n        return 3.9 * x * (1 - x)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n\n                chaos_direction = np.array([self.chaos_system(val) for val in new_solution])\n                new_solution += chaos_direction\n\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "ImprovedBatAlgorithm", "description": "Improving the exploration-exploitation balance by incorporating a chaotic system to generate diverse search directions.", "configspace": "", "generation": 6, "fitness": 0.1770343862326402, "feedback": "The algorithm ImprovedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.07023201226771902, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.018281938496493955, 0.08231261679157142, 0.01743707965125829, 0.07800227459727427, 0.08320117916014336, 0.05503389796684155, 0.059663544917439526, 0.9662099367211061, 0.9697264503616878, 0.9703024627262793, 0.9735693865908839, 0.9586978443632368, 0.9656273198693739, 0.9636446592674758, 0.9704081686273882, 0.966307865494337, 0.2670513085035612, 0.2439903726629239, 0.22866697796524482, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.2290035218364429, 0.2643458032821734, 0.13276358543606326, 0.16990934414091208, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 0.0045246048305737085, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03112387181102294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04241083052694339, 0.06015278385167566, 0.0765376947568922, 0.0009684302625176944, 0.03238581997486545, 0.11309906831477023, 0.04601776909709698, 0.03921612141784958, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.06495441237229238, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.04956091051473577, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14712344861156346, 0.21110773647602343, 0.19054464198937626, 0.18342778445480468, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506143605985666, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18620497616124654, 0.12948851305787612, 0.16914024555534757, 0.1437384590571157, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.21447013143523086, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20683085992695627, 0.14666828791243536, 0.18894031469714068, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.17294136016932338, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369980867153394, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841323184673752, 0.16847121007475818, 0.17787713685495343, 0.1827672672406193, 0.17745615623745448, 0.1874865209764892, 0.17011281585119153, 0.05412549137188871, 0.060483608403882005, 0.0849226193394561, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10388331327995981, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "1d2663bb-a8c1-49cb-a825-c2ac1195e40a", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "23f42595-c46b-46e3-8423-86791f92b31f", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "bbb3f55d-99c4-4e34-9e50-7695830e4944", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "ebe10e85-c3af-434f-b8e4-6b7f17653fe0", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "4cd1b576-89c7-4399-89af-74db8d61837b", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "cbc154c9-6612-46f0-b7a8-cd06b7a4eb5e", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "cfd416fe-b8e7-4be3-a573-70eb4091d9d6", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "2f759a6a-4cec-45b5-b94c-a0cfdf62973f", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "646128c3-2976-4f93-9194-c71179d847c4", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "6bc5fb1f-9b21-4c7a-be02-492fd61634c5", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "98d99503-651d-4101-8df8-d83c3783da6c", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Apply opposition-based learning for exploration\n            opposition_population = 5.0 - population\n            opposition_fitness = np.array([func(individual) for individual in opposition_population])\n            for i in range(self.population_size):\n                if opposition_fitness[i] < fitness[i]:\n                    population[i] = opposition_population[i]\n                    fitness[i] = opposition_fitness[i]\n                    if opposition_fitness[i] < func(best_individual):\n                        best_individual = opposition_population[i]\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Improving diversity maintenance by incorporating opposition-based learning to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": 0.1657756789090527, "feedback": "The algorithm EnhancedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3266355326737047, 0.36380422403194923, 0.3414303119664923, 0.35332459026206886, 0.34674333805394075, 0.35127594052362243, 0.34539514129727467, 0.33298341661701014, 0.36019037531931486, 0.014181354903138543, 9.999999999998899e-05, 9.999999999998899e-05, 0.007403722535415769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05774967421121768, 0.05017883054560446, 0.017154577562540352, 0.0502448656493103, 0.05136884484000126, 0.07812097655671346, 0.04922501061585516, 0.04549349359035226, 0.027699405077800665, 0.036344732081880604, 9.999999999998899e-05, 0.015588311080708572, 0.07786072503896646, 0.01347437245931793, 0.04599652840039892, 0.07678993150586721, 0.049289960705654834, 0.04905172744733244, 0.9822106685886427, 0.9697166294014178, 0.9842862422202924, 0.9812678921026144, 0.9612986256048723, 0.9465057852515129, 0.9507253213709128, 0.9722712462483811, 0.9783072404515951, 0.2513847398527237, 0.2363354826309645, 0.22622655820061055, 0.23863715885397407, 0.2694787709454186, 0.26194086561857544, 0.21157836151443044, 0.22516343502334113, 0.21331814609580546, 0.22550692787342463, 0.1238360605427975, 0.16695080434867982, 0.2505623949646213, 0.27246320850660133, 0.2104837819454678, 0.1310463522470231, 0.1454998791536194, 0.23036482270263392, 0.07208639955031537, 0.12683823895642, 0.12498075277163212, 0.13166807520293755, 0.10480429102354627, 0.11602127763258252, 0.13977464168179432, 0.14363552684495406, 0.11607638914134, 0.12553825579860534, 0.06251756051800383, 0.11287489311701482, 0.15957297337618126, 0.1270335325271642, 0.13969421099888935, 0.11960782455548613, 0.07395402748436208, 0.14789847043497195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008242962225649575, 0.003947592265649336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05812603448043485, 0.030877035867394764, 0.04492974277580419, 0.0708490594634833, 9.999999999998899e-05, 0.017819016442856994, 0.10573462863057981, 0.031446597179411895, 0.0010762698857271769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0517671068415646, 0.06703552434274695, 0.06399273296669838, 0.06970830850861587, 0.054134299540736674, 0.05929162909075658, 0.06651838605576854, 0.045522175285349076, 0.06770631953310591, 0.3497309371181867, 0.33297985289248566, 0.31825216035857806, 0.32977025657286996, 0.34255166713269947, 0.35931443266247487, 0.3330419605581254, 0.33939454925335266, 0.3609667923606732, 0.056102611472544806, 0.07274477364712562, 0.06591743056866795, 0.08590156376694835, 0.046021597399117264, 0.10991768322851836, 0.05034830137990953, 0.03323346369201008, 0.06863709100000692, 0.24442368176416895, 0.15770413462511335, 0.14601693625256917, 0.19422664156869007, 0.17298313643426189, 0.17215598517890318, 0.21834794909607325, 0.15400837954900526, 0.15170747301221488, 0.2315447941534361, 0.2384100327822526, 0.1249458653282709, 0.1545208314469173, 0.14661479490482998, 0.17666550491252186, 0.14272613426810055, 0.15972226065588568, 0.1134496343745246, 0.10601188282952612, 0.185869965837812, 0.06699477488146799, 0.14552775706449084, 0.12062965442147233, 0.16146148825259155, 0.15960785644133157, 0.16773642337495387, 0.11831152087765351, 0.18039406536020375, 0.14233595137910504, 0.19993591403292077, 0.1759691506975669, 0.13177023985275538, 0.17828896922999593, 0.18979575684141736, 0.1417724001630586, 0.17603655591766743, 0.1580683206699519, 0.17351793081489741, 0.18353813604132174, 0.1760410214542717, 0.1699224458175167, 0.162962204524138, 0.18595549378079124, 0.19378122809245768, 0.17096039078563385, 0.1577773527630536, 0.07613471486312395, 0.13177798326343038, 0.4602898568255428, 0.1963433295044842, 0.10763384642010965, 0.1496865743798489, 0.1145035723925314, 0.10349345926738784, 0.08274367153456808, 0.10871023240484667, 0.36427535231632646, 0.15016469476406968, 0.05162892112888273, 0.2071897291913506, 0.16669186535898972, 0.07319131607597262, 0.26381136019871576, 0.17083051887483836, 0.1770810052267845, 0.18364265626874077, 0.16327928803039327, 0.17384254253235376, 0.1691619389193969, 0.1680123490113643, 0.18601158004253282, 0.16141839811140923, 0.04830315406620411, 0.04926848241978765, 0.07487802074845296, 0.08354510211305388, 0.07412253605913688, 0.03770169777827126, 0.09936899629322249, 0.06580759206599773, 0.058854077518257]}, "mutation_prompt": null}
{"id": "2ecad791-4aac-44f4-9b53-2b7d833f756f", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "73428289-2197-4d8d-8d74-c823a8311c49", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "f42731b9-0a64-4dbe-b92f-e97c86a46d65", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing the BatAlgorithm by incorporating a dynamic frequency scaling factor to adapt to the search landscape better.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.3396282656508429, 0.3774086262084382, 0.3486382387463597, 0.3670996041637642, 0.35706399846709536, 0.3667110080186633, 0.37398710903983945, 0.3546662393564538, 0.36362079286042726, 0.02376608621179388, 9.999999999998899e-05, 9.999999999998899e-05, 0.021080173466264562, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016235162779063561, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575473449229596, 0.052396206112675814, 0.01838257369937435, 0.05722716871496214, 0.06457132178021052, 0.08773718409020581, 0.05427287334087616, 0.06572965992397495, 0.031529390932588885, 0.04485001959046053, 9.999999999998899e-05, 0.01827981162388226, 0.08231261679157142, 0.01743707965125829, 0.051459509096724254, 0.08320117916014336, 0.05503389796684155, 0.05964496230212357, 0.9885016936205385, 0.9816951672305149, 0.989804576859362, 0.9876668841623418, 0.9770219320604117, 0.9667534153752889, 0.969394108642734, 0.9833272022459256, 0.9857731860383775, 0.2670513085035612, 0.2439903726629239, 0.23908280133244153, 0.2548249387986309, 0.28442508331925453, 0.27302651263371414, 0.2250046374452298, 0.24253446031070425, 0.22879511363802096, 0.2643458032821734, 0.13276358543606326, 0.1699057411274182, 0.26212283184039276, 0.27099450631197985, 0.21326241186748351, 0.1421056012423878, 0.16253051704839394, 0.2732306741460486, 0.09000551766971387, 0.14910605602039617, 0.13793187490360437, 0.14525901887498271, 0.11526371219388332, 0.1360548459951484, 0.15034238782650644, 0.15369264595890508, 0.1209037239427515, 0.1397026845230086, 0.10786656166897468, 0.12715079598933787, 0.1617108338359301, 0.14182463528019018, 0.147279873542287, 0.13796611003112558, 0.10821368834736345, 0.16234077221192633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012234477570775004, 0.025313750505927213, 0.03111760266865382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0689454920507957, 0.04240460717422434, 0.06015278385167566, 0.0765376947568922, 0.0009680210866190864, 0.03238581997486545, 0.11311139579733331, 0.04601776909709698, 0.005891117001706525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061270873268682635, 0.07360290112643819, 0.0698962082200465, 0.07520719002958498, 0.06903055847068063, 0.06684234137267209, 0.07061596578040352, 0.06407072024292682, 0.07260771215275386, 0.3564389690901415, 0.3644045656580204, 0.33703564870821145, 0.34478836318481465, 0.3489244265328413, 0.3676731791698875, 0.3678063614853231, 0.35076081075734444, 0.37780168326638064, 0.060256658249643213, 0.09313932286641702, 0.10265591739603375, 0.0955545597305485, 0.058827433719792266, 0.11702367700270444, 0.06259957773340086, 0.04017594250837686, 0.07081407328904354, 0.25782379434516156, 0.15844838087563917, 0.14711175694212308, 0.21110773647602343, 0.19053002427314514, 0.18341100916884645, 0.2319362791143883, 0.17922110327979024, 0.17458945700533912, 0.24744927411438267, 0.2627461545060481, 0.14047663954695966, 0.16239685181862007, 0.15609863878789676, 0.21491035082013388, 0.14506664191459528, 0.17533421391179205, 0.12871609996296052, 0.1362678942933253, 0.2005510251369388, 0.06824802601192514, 0.18618457626921114, 0.12948851305787612, 0.16914024555534757, 0.16658886294899145, 0.1741398363091552, 0.10088763983236626, 0.19892400862783866, 0.156117524568252, 0.2144601166111354, 0.18223202412363837, 0.13960069415852594, 0.19953274685040245, 0.20681799074174434, 0.14666828791243536, 0.18893775262360513, 0.15996975153793935, 0.18249898510385576, 0.1868478395926927, 0.18073828803165048, 0.1729392208278836, 0.16484202101366807, 0.19459113287347396, 0.20264830230013675, 0.1740909798251632, 0.1629742397962809, 0.0762887895935892, 0.13430036641760257, 0.5043932892186385, 0.19787272180806748, 0.10868530672914112, 0.15187453586616106, 0.11476661676113586, 0.10369614905957591, 0.08299018019929905, 0.11083723840229398, 0.41543204277993284, 0.4922912478825724, 0.05187595323404326, 0.21035452187520232, 0.1683021485381938, 0.07337764693163684, 0.33184413210431907, 0.17369974543237954, 0.17792159473031988, 0.1841286089052644, 0.16844050742677774, 0.17787713685495343, 0.1827668548365191, 0.17745934454870316, 0.18747841801980147, 0.17010934410638545, 0.05412549137188871, 0.060483608403882005, 0.08493343402684916, 0.08685861039847664, 0.08362851081657285, 0.04141909623571938, 0.10840074717104542, 0.07126544977545435, 0.06858775110224946]}, "mutation_prompt": null}
{"id": "05c2f51c-c948-41c2-8642-b1e986870efb", "solution": "import numpy as np\n\nclass ImprovedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "ImprovedBatAlgorithm", "description": "Adapting the EnhancedBatAlgorithm by introducing a Levy flight step for enhanced exploration capabilities.", "configspace": "", "generation": 21, "fitness": 0.2191701374518832, "feedback": "The algorithm ImprovedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "79ad1bee-fd26-4c5b-a3ae-ffeabb3b5a53", "metadata": {"aucs": [0.6653296869158178, 0.68112948019174, 0.5789248416466147, 0.6060378545176648, 0.6430887134959824, 0.6331364509050615, 0.5928206682971036, 0.6458457985767996, 0.6257562120988196, 0.040453115599999534, 0.08063651866185373, 0.0899541510292573, 0.13966753086667338, 0.0009576481875152032, 0.07193736595143274, 0.027711693036321816, 0.06138844130310395, 0.04647698641918907, 0.11652886777311944, 0.0677376399527655, 0.0685996306705502, 0.27271774389167547, 0.13032642674347994, 0.08796385222529501, 0.06133087876062471, 0.06361815395598225, 0.061937256076034064, 0.06854877334281351, 0.016765502278215716, 0.08043006922135354, 0.1032802188735733, 0.04191063847537224, 0.08660509360116553, 0.09947669467767117, 0.04261549013616095, 0.06671648729006141, 0.9764194848666484, 0.9548230900257095, 0.9615913151458109, 0.9587299912758195, 0.9569129135786335, 0.9586965942537842, 0.9558013179659566, 0.9692047206467063, 0.9454657470219316, 0.44759169988485437, 0.32344072619135134, 0.34083794393346334, 0.2869665592619486, 0.33323281317685327, 0.34865290938659077, 0.3376939881343387, 0.3042986613423986, 0.29248857924916216, 0.22509433277612334, 0.12857540324134042, 0.2285961190480703, 0.3175034541573013, 0.2726303141684948, 0.26366607953488763, 0.1292065800573513, 0.21870769961207737, 0.20225961280994087, 0.1411176320481411, 0.14695454045790468, 0.2545603191037399, 0.22012330211916176, 0.141911737263423, 0.17436391897409909, 0.14256625817403124, 0.13116812166991332, 0.1616920588989753, 0.16086300425390654, 0.09234426897305625, 0.15701279770956666, 0.19364791833290684, 0.1772890458854165, 0.19280901884268165, 0.21853680217471239, 0.10475940471522849, 0.16236614430901208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627862883825673, 0.06341403121689271, 0.04258259338530079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11423499272183357, 0.04045167335371147, 0.12959876707988383, 0.10464935100014883, 0.005177693451514975, 0.0727061779104402, 0.1841250067565483, 0.06019802761848425, 0.06601681227726808, 0.07839642895020393, 0.06296201542087687, 0.10655003705200927, 0.18562689272671118, 0.10974495743841584, 0.058826172128567666, 0.061036210105395394, 0.06468960504647714, 0.057397501991153566, 0.09197968067239548, 0.14622768019284815, 0.19409282559149565, 0.18351175247936824, 0.09668740671497511, 0.19859338576237284, 0.03791405721751562, 0.19491185638108255, 0.09923348787574271, 0.4995242165046109, 0.4679543199884463, 0.4596162179076809, 0.43190920910274977, 0.43436147172056583, 0.41882233525510626, 0.4326219135262236, 0.4392757223677628, 0.4521044478582027, 0.056887047509707966, 0.06894172496259054, 0.13655851022686039, 0.08130085849753432, 0.06330192982220173, 0.15009748689254443, 0.10646416112747226, 0.11946364664976172, 0.07630271028567004, 0.2658450430435363, 0.24195643800539102, 0.32449844513387927, 0.31796107441757426, 0.20143585565190325, 0.2252796912476075, 0.28179255263338177, 0.21255788438101275, 0.1853194232597709, 0.2414636300252827, 0.2712283303643851, 0.1694244372897179, 0.17510013664894608, 0.16056032990686275, 0.2629998260427172, 0.20953479598193192, 0.1653060999185456, 0.12762017928642777, 0.11383617370634291, 0.21305451162354105, 0.07986153302661336, 0.1979900226177378, 0.14899085380765809, 0.2024779544250186, 0.16909731598180933, 0.15170051839668308, 0.18605700318522456, 0.24543483397959565, 0.198690947956222, 0.19416120185036922, 0.22147756024820797, 0.1666879316673885, 0.240747135811071, 0.27218645712316525, 0.20419996095317405, 0.24126113275242989, 0.19769902548098361, 0.20809572782229535, 0.21516841234697626, 0.20304679798977898, 0.19256490420985983, 0.18253014388663513, 0.18129027501755268, 0.21895328130409475, 0.17659756891246836, 0.11977135412806006, 0.07659804259524228, 0.1354796871356726, 0.17304832310156892, 0.20148737524742222, 0.10836572398209066, 0.15151062434586215, 0.12562433539316675, 0.10391215811796084, 0.0834250785837678, 0.11251934883218784, 0.6027318320565451, 0.0831126022195845, 0.05915586865966993, 0.21241977375847598, 0.16647668997590537, 0.07352201333650832, 0.3146706848392702, 0.2116500604034265, 0.20871654438377663, 0.21193032458658823, 0.224226595711569, 0.20988898817808366, 0.2715047253697285, 0.27218847162775084, 0.2741017512513434, 0.25925821306329966, 0.07065951597465958, 0.07618030697779798, 0.09124389418123591, 0.11896273767748156, 0.07739785393707077, 0.09080745941583301, 0.11970362026911574, 0.07410973804278687, 0.075182853060621]}, "mutation_prompt": null}
{"id": "3f797b9a-3d4d-434c-8235-eda946f037b7", "solution": "import numpy as np\n\nclass ImprovedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "ImprovedBatAlgorithm", "description": "Adapting the EnhancedBatAlgorithm by introducing a Levy flight step for enhanced exploration capabilities.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "05c2f51c-c948-41c2-8642-b1e986870efb", "metadata": {"aucs": [0.6653296869158178, 0.68112948019174, 0.5789248416466147, 0.6060378545176648, 0.6430887134959824, 0.6331364509050615, 0.5928206682971036, 0.6458457985767996, 0.6257562120988196, 0.040453115599999534, 0.08063651866185373, 0.0899541510292573, 0.13966753086667338, 0.0009576481875152032, 0.07193736595143274, 0.027711693036321816, 0.06138844130310395, 0.04647698641918907, 0.11652886777311944, 0.0677376399527655, 0.0685996306705502, 0.27271774389167547, 0.13032642674347994, 0.08796385222529501, 0.06133087876062471, 0.06361815395598225, 0.061937256076034064, 0.06854877334281351, 0.016765502278215716, 0.08043006922135354, 0.1032802188735733, 0.04191063847537224, 0.08660509360116553, 0.09947669467767117, 0.04261549013616095, 0.06671648729006141, 0.9764194848666484, 0.9548230900257095, 0.9615913151458109, 0.9587299912758195, 0.9569129135786335, 0.9586965942537842, 0.9558013179659566, 0.9692047206467063, 0.9454657470219316, 0.44759169988485437, 0.32344072619135134, 0.34083794393346334, 0.2869665592619486, 0.33323281317685327, 0.34865290938659077, 0.3376939881343387, 0.3042986613423986, 0.29248857924916216, 0.22509433277612334, 0.12857540324134042, 0.2285961190480703, 0.3175034541573013, 0.2726303141684948, 0.26366607953488763, 0.1292065800573513, 0.21870769961207737, 0.20225961280994087, 0.1411176320481411, 0.14695454045790468, 0.2545603191037399, 0.22012330211916176, 0.141911737263423, 0.17436391897409909, 0.14256625817403124, 0.13116812166991332, 0.1616920588989753, 0.16086300425390654, 0.09234426897305625, 0.15701279770956666, 0.19364791833290684, 0.1772890458854165, 0.19280901884268165, 0.21853680217471239, 0.10475940471522849, 0.16236614430901208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627862883825673, 0.06341403121689271, 0.04258259338530079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11423499272183357, 0.04045167335371147, 0.12959876707988383, 0.10464935100014883, 0.005177693451514975, 0.0727061779104402, 0.1841250067565483, 0.06019802761848425, 0.06601681227726808, 0.07839642895020393, 0.06296201542087687, 0.10655003705200927, 0.18562689272671118, 0.10974495743841584, 0.058826172128567666, 0.061036210105395394, 0.06468960504647714, 0.057397501991153566, 0.09197968067239548, 0.14622768019284815, 0.19409282559149565, 0.18351175247936824, 0.09668740671497511, 0.19859338576237284, 0.03791405721751562, 0.19491185638108255, 0.09923348787574271, 0.4995242165046109, 0.4679543199884463, 0.4596162179076809, 0.43190920910274977, 0.43436147172056583, 0.41882233525510626, 0.4326219135262236, 0.4392757223677628, 0.4521044478582027, 0.056887047509707966, 0.06894172496259054, 0.13655851022686039, 0.08130085849753432, 0.06330192982220173, 0.15009748689254443, 0.10646416112747226, 0.11946364664976172, 0.07630271028567004, 0.2658450430435363, 0.24195643800539102, 0.32449844513387927, 0.31796107441757426, 0.20143585565190325, 0.2252796912476075, 0.28179255263338177, 0.21255788438101275, 0.1853194232597709, 0.2414636300252827, 0.2712283303643851, 0.1694244372897179, 0.17510013664894608, 0.16056032990686275, 0.2629998260427172, 0.20953479598193192, 0.1653060999185456, 0.12762017928642777, 0.11383617370634291, 0.21305451162354105, 0.07986153302661336, 0.1979900226177378, 0.14899085380765809, 0.2024779544250186, 0.16909731598180933, 0.15170051839668308, 0.18605700318522456, 0.24543483397959565, 0.198690947956222, 0.19416120185036922, 0.22147756024820797, 0.1666879316673885, 0.240747135811071, 0.27218645712316525, 0.20419996095317405, 0.24126113275242989, 0.19769902548098361, 0.20809572782229535, 0.21516841234697626, 0.20304679798977898, 0.19256490420985983, 0.18253014388663513, 0.18129027501755268, 0.21895328130409475, 0.17659756891246836, 0.11977135412806006, 0.07659804259524228, 0.1354796871356726, 0.17304832310156892, 0.20148737524742222, 0.10836572398209066, 0.15151062434586215, 0.12562433539316675, 0.10391215811796084, 0.0834250785837678, 0.11251934883218784, 0.6027318320565451, 0.0831126022195845, 0.05915586865966993, 0.21241977375847598, 0.16647668997590537, 0.07352201333650832, 0.3146706848392702, 0.2116500604034265, 0.20871654438377663, 0.21193032458658823, 0.224226595711569, 0.20988898817808366, 0.2715047253697285, 0.27218847162775084, 0.2741017512513434, 0.25925821306329966, 0.07065951597465958, 0.07618030697779798, 0.09124389418123591, 0.11896273767748156, 0.07739785393707077, 0.09080745941583301, 0.11970362026911574, 0.07410973804278687, 0.075182853060621]}, "mutation_prompt": null}
{"id": "1f734469-3ad3-4390-9359-18bb962099c5", "solution": "import numpy as np\n\nclass ImprovedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "ImprovedBatAlgorithm", "description": "Adapting the EnhancedBatAlgorithm by introducing a Levy flight step for enhanced exploration capabilities.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "05c2f51c-c948-41c2-8642-b1e986870efb", "metadata": {"aucs": [0.6653296869158178, 0.68112948019174, 0.5789248416466147, 0.6060378545176648, 0.6430887134959824, 0.6331364509050615, 0.5928206682971036, 0.6458457985767996, 0.6257562120988196, 0.040453115599999534, 0.08063651866185373, 0.0899541510292573, 0.13966753086667338, 0.0009576481875152032, 0.07193736595143274, 0.027711693036321816, 0.06138844130310395, 0.04647698641918907, 0.11652886777311944, 0.0677376399527655, 0.0685996306705502, 0.27271774389167547, 0.13032642674347994, 0.08796385222529501, 0.06133087876062471, 0.06361815395598225, 0.061937256076034064, 0.06854877334281351, 0.016765502278215716, 0.08043006922135354, 0.1032802188735733, 0.04191063847537224, 0.08660509360116553, 0.09947669467767117, 0.04261549013616095, 0.06671648729006141, 0.9764194848666484, 0.9548230900257095, 0.9615913151458109, 0.9587299912758195, 0.9569129135786335, 0.9586965942537842, 0.9558013179659566, 0.9692047206467063, 0.9454657470219316, 0.44759169988485437, 0.32344072619135134, 0.34083794393346334, 0.2869665592619486, 0.33323281317685327, 0.34865290938659077, 0.3376939881343387, 0.3042986613423986, 0.29248857924916216, 0.22509433277612334, 0.12857540324134042, 0.2285961190480703, 0.3175034541573013, 0.2726303141684948, 0.26366607953488763, 0.1292065800573513, 0.21870769961207737, 0.20225961280994087, 0.1411176320481411, 0.14695454045790468, 0.2545603191037399, 0.22012330211916176, 0.141911737263423, 0.17436391897409909, 0.14256625817403124, 0.13116812166991332, 0.1616920588989753, 0.16086300425390654, 0.09234426897305625, 0.15701279770956666, 0.19364791833290684, 0.1772890458854165, 0.19280901884268165, 0.21853680217471239, 0.10475940471522849, 0.16236614430901208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627862883825673, 0.06341403121689271, 0.04258259338530079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11423499272183357, 0.04045167335371147, 0.12959876707988383, 0.10464935100014883, 0.005177693451514975, 0.0727061779104402, 0.1841250067565483, 0.06019802761848425, 0.06601681227726808, 0.07839642895020393, 0.06296201542087687, 0.10655003705200927, 0.18562689272671118, 0.10974495743841584, 0.058826172128567666, 0.061036210105395394, 0.06468960504647714, 0.057397501991153566, 0.09197968067239548, 0.14622768019284815, 0.19409282559149565, 0.18351175247936824, 0.09668740671497511, 0.19859338576237284, 0.03791405721751562, 0.19491185638108255, 0.09923348787574271, 0.4995242165046109, 0.4679543199884463, 0.4596162179076809, 0.43190920910274977, 0.43436147172056583, 0.41882233525510626, 0.4326219135262236, 0.4392757223677628, 0.4521044478582027, 0.056887047509707966, 0.06894172496259054, 0.13655851022686039, 0.08130085849753432, 0.06330192982220173, 0.15009748689254443, 0.10646416112747226, 0.11946364664976172, 0.07630271028567004, 0.2658450430435363, 0.24195643800539102, 0.32449844513387927, 0.31796107441757426, 0.20143585565190325, 0.2252796912476075, 0.28179255263338177, 0.21255788438101275, 0.1853194232597709, 0.2414636300252827, 0.2712283303643851, 0.1694244372897179, 0.17510013664894608, 0.16056032990686275, 0.2629998260427172, 0.20953479598193192, 0.1653060999185456, 0.12762017928642777, 0.11383617370634291, 0.21305451162354105, 0.07986153302661336, 0.1979900226177378, 0.14899085380765809, 0.2024779544250186, 0.16909731598180933, 0.15170051839668308, 0.18605700318522456, 0.24543483397959565, 0.198690947956222, 0.19416120185036922, 0.22147756024820797, 0.1666879316673885, 0.240747135811071, 0.27218645712316525, 0.20419996095317405, 0.24126113275242989, 0.19769902548098361, 0.20809572782229535, 0.21516841234697626, 0.20304679798977898, 0.19256490420985983, 0.18253014388663513, 0.18129027501755268, 0.21895328130409475, 0.17659756891246836, 0.11977135412806006, 0.07659804259524228, 0.1354796871356726, 0.17304832310156892, 0.20148737524742222, 0.10836572398209066, 0.15151062434586215, 0.12562433539316675, 0.10391215811796084, 0.0834250785837678, 0.11251934883218784, 0.6027318320565451, 0.0831126022195845, 0.05915586865966993, 0.21241977375847598, 0.16647668997590537, 0.07352201333650832, 0.3146706848392702, 0.2116500604034265, 0.20871654438377663, 0.21193032458658823, 0.224226595711569, 0.20988898817808366, 0.2715047253697285, 0.27218847162775084, 0.2741017512513434, 0.25925821306329966, 0.07065951597465958, 0.07618030697779798, 0.09124389418123591, 0.11896273767748156, 0.07739785393707077, 0.09080745941583301, 0.11970362026911574, 0.07410973804278687, 0.075182853060621]}, "mutation_prompt": null}
{"id": "fef41c02-625f-4727-acb8-bcb79a5dbb54", "solution": "import numpy as np\n\nclass ImprovedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * self.loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "ImprovedBatAlgorithm", "description": "Adapting the EnhancedBatAlgorithm by introducing a Levy flight step for enhanced exploration capabilities.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "05c2f51c-c948-41c2-8642-b1e986870efb", "metadata": {"aucs": [0.6653296869158178, 0.68112948019174, 0.5789248416466147, 0.6060378545176648, 0.6430887134959824, 0.6331364509050615, 0.5928206682971036, 0.6458457985767996, 0.6257562120988196, 0.040453115599999534, 0.08063651866185373, 0.0899541510292573, 0.13966753086667338, 0.0009576481875152032, 0.07193736595143274, 0.027711693036321816, 0.06138844130310395, 0.04647698641918907, 0.11652886777311944, 0.0677376399527655, 0.0685996306705502, 0.27271774389167547, 0.13032642674347994, 0.08796385222529501, 0.06133087876062471, 0.06361815395598225, 0.061937256076034064, 0.06854877334281351, 0.016765502278215716, 0.08043006922135354, 0.1032802188735733, 0.04191063847537224, 0.08660509360116553, 0.09947669467767117, 0.04261549013616095, 0.06671648729006141, 0.9764194848666484, 0.9548230900257095, 0.9615913151458109, 0.9587299912758195, 0.9569129135786335, 0.9586965942537842, 0.9558013179659566, 0.9692047206467063, 0.9454657470219316, 0.44759169988485437, 0.32344072619135134, 0.34083794393346334, 0.2869665592619486, 0.33323281317685327, 0.34865290938659077, 0.3376939881343387, 0.3042986613423986, 0.29248857924916216, 0.22509433277612334, 0.12857540324134042, 0.2285961190480703, 0.3175034541573013, 0.2726303141684948, 0.26366607953488763, 0.1292065800573513, 0.21870769961207737, 0.20225961280994087, 0.1411176320481411, 0.14695454045790468, 0.2545603191037399, 0.22012330211916176, 0.141911737263423, 0.17436391897409909, 0.14256625817403124, 0.13116812166991332, 0.1616920588989753, 0.16086300425390654, 0.09234426897305625, 0.15701279770956666, 0.19364791833290684, 0.1772890458854165, 0.19280901884268165, 0.21853680217471239, 0.10475940471522849, 0.16236614430901208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627862883825673, 0.06341403121689271, 0.04258259338530079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11423499272183357, 0.04045167335371147, 0.12959876707988383, 0.10464935100014883, 0.005177693451514975, 0.0727061779104402, 0.1841250067565483, 0.06019802761848425, 0.06601681227726808, 0.07839642895020393, 0.06296201542087687, 0.10655003705200927, 0.18562689272671118, 0.10974495743841584, 0.058826172128567666, 0.061036210105395394, 0.06468960504647714, 0.057397501991153566, 0.09197968067239548, 0.14622768019284815, 0.19409282559149565, 0.18351175247936824, 0.09668740671497511, 0.19859338576237284, 0.03791405721751562, 0.19491185638108255, 0.09923348787574271, 0.4995242165046109, 0.4679543199884463, 0.4596162179076809, 0.43190920910274977, 0.43436147172056583, 0.41882233525510626, 0.4326219135262236, 0.4392757223677628, 0.4521044478582027, 0.056887047509707966, 0.06894172496259054, 0.13655851022686039, 0.08130085849753432, 0.06330192982220173, 0.15009748689254443, 0.10646416112747226, 0.11946364664976172, 0.07630271028567004, 0.2658450430435363, 0.24195643800539102, 0.32449844513387927, 0.31796107441757426, 0.20143585565190325, 0.2252796912476075, 0.28179255263338177, 0.21255788438101275, 0.1853194232597709, 0.2414636300252827, 0.2712283303643851, 0.1694244372897179, 0.17510013664894608, 0.16056032990686275, 0.2629998260427172, 0.20953479598193192, 0.1653060999185456, 0.12762017928642777, 0.11383617370634291, 0.21305451162354105, 0.07986153302661336, 0.1979900226177378, 0.14899085380765809, 0.2024779544250186, 0.16909731598180933, 0.15170051839668308, 0.18605700318522456, 0.24543483397959565, 0.198690947956222, 0.19416120185036922, 0.22147756024820797, 0.1666879316673885, 0.240747135811071, 0.27218645712316525, 0.20419996095317405, 0.24126113275242989, 0.19769902548098361, 0.20809572782229535, 0.21516841234697626, 0.20304679798977898, 0.19256490420985983, 0.18253014388663513, 0.18129027501755268, 0.21895328130409475, 0.17659756891246836, 0.11977135412806006, 0.07659804259524228, 0.1354796871356726, 0.17304832310156892, 0.20148737524742222, 0.10836572398209066, 0.15151062434586215, 0.12562433539316675, 0.10391215811796084, 0.0834250785837678, 0.11251934883218784, 0.6027318320565451, 0.0831126022195845, 0.05915586865966993, 0.21241977375847598, 0.16647668997590537, 0.07352201333650832, 0.3146706848392702, 0.2116500604034265, 0.20871654438377663, 0.21193032458658823, 0.224226595711569, 0.20988898817808366, 0.2715047253697285, 0.27218847162775084, 0.2741017512513434, 0.25925821306329966, 0.07065951597465958, 0.07618030697779798, 0.09124389418123591, 0.11896273767748156, 0.07739785393707077, 0.09080745941583301, 0.11970362026911574, 0.07410973804278687, 0.075182853060621]}, "mutation_prompt": null}
{"id": "0081fa02-b1b7-4bb2-9a27-081c47894d3b", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing Bat Algorithm by incorporating dynamic loudness and pulse rate adaptation mechanisms for improved convergence.", "configspace": "", "generation": 25, "fitness": 0.2271983784711472, "feedback": "The algorithm EnhancedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "05c2f51c-c948-41c2-8642-b1e986870efb", "metadata": {"aucs": [0.6577522126326639, 0.6573311367441141, 0.6609925992366933, 0.6678829602343266, 0.7065293735249774, 0.6416489390631637, 0.6704925789299543, 0.6798371472013731, 0.6428004384644823, 0.1446213248843784, 0.037203967661392556, 0.0674393194448819, 0.10195880780053979, 9.999999999998899e-05, 9.999999999998899e-05, 0.018206027294090932, 0.06963394939631595, 9.999999999998899e-05, 0.08979402720691343, 0.07583833477703461, 0.042071580612434434, 0.11523605341873899, 0.11787593318282563, 0.09763503612354474, 0.06232268138669805, 0.08516986079731237, 0.051247014790145484, 0.11157096533820554, 0.037471937433591895, 0.06538387224743947, 0.1022507322038535, 0.07131226359694831, 0.11270148378441647, 0.10657039019747805, 0.050906139934945305, 0.07246017643047076, 0.9765994319325892, 0.9567838349855946, 0.9707998104252783, 0.9569121156378912, 0.9464269822474306, 0.964984965023377, 0.9641740676940288, 0.9531000270907799, 0.9559797179159956, 0.3977169271988028, 0.40514746830234305, 0.35981907588834894, 0.40706848899179326, 0.35168056243815426, 0.32343498456810893, 0.35936855343476315, 0.3203812872233237, 0.3026195281120988, 0.3867021022640814, 0.1273320064183947, 0.21873895044843217, 0.37490715277679987, 0.4617105972318488, 0.16916943835968667, 0.1432419245266907, 0.21430643640007696, 0.3187337912882696, 0.1600690498006554, 0.12827353702949695, 0.2009496059848047, 0.21258928446367154, 0.1784483171552521, 0.2038997691754011, 0.22146857962903654, 0.1254278156364811, 0.19901272810082626, 0.18959931058945056, 0.05325954907241959, 0.1285915945022138, 0.20283042410657837, 0.16148021650114985, 0.17392821030511818, 0.33763965111938365, 0.11702130951369982, 0.15606353209308654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10328316740762289, 0.08215247477199139, 0.00519172906993004, 0.008048140184574004, 9.999999999998899e-05, 0.043903149781833184, 0.12969634946219089, 0.04545256345056914, 0.1389547950951634, 0.10323956315776595, 0.015866586751124068, 0.03610344014972433, 0.26618874990638486, 0.029089774169078875, 0.0729752417496542, 0.08436244334802523, 0.0743253361130819, 0.10617169980058838, 0.07914632452888148, 0.16479972446316948, 0.08143735671909558, 0.13760196654794377, 0.15485019763923136, 0.03391330199634779, 0.20625911526057572, 0.1920689738848852, 0.07745276380558064, 0.22070226207377142, 0.1082298311558143, 0.19039159699141506, 0.22219056633894607, 0.1896124069239663, 0.04608336683414782, 0.4788303967901526, 0.44904722252284446, 0.4655682430869771, 0.46214599570940906, 0.4805735183498332, 0.4704023433477209, 0.4765160808398463, 0.5522515904540638, 0.4596824306038929, 0.06908030490396655, 0.08272434941293683, 0.11177490328624173, 0.1067885362090194, 0.06246439789259983, 0.11869208888433236, 0.11411550824868588, 0.10978631952495399, 0.09601780854796393, 0.15758371177447972, 0.259509868212353, 0.25986868629705595, 0.2654995526605882, 0.2519357679298826, 0.12650864415266894, 0.19812374548774503, 0.20087133027297144, 0.2197089756923145, 0.26155366482599707, 0.3040260067319056, 0.16177464645705442, 0.19644634436474295, 0.16935598255439932, 0.21148151833223439, 0.2127057455673903, 0.18046946103871375, 0.1013059777616323, 0.10181835147470952, 0.180954311874861, 0.08936323160075665, 0.25115212210835236, 0.15111968023710542, 0.10167347823673845, 0.19758767028582092, 0.15862120362873644, 0.05526240622711265, 0.28746608321121825, 0.20823168145511717, 0.2518453567561898, 0.25301040119805973, 0.1754724303397981, 0.22204804592357386, 0.23785819885116066, 0.1764024447016196, 0.21899606598437438, 0.18984624522112048, 0.20815051170674048, 0.19644813853781184, 0.2044293332179966, 0.19205630288705977, 0.19826408343840685, 0.18006899853130087, 0.21013876184321323, 0.1916716280110402, 0.11972885660738375, 0.076596315903112, 0.1353993945642895, 0.17318209777293336, 0.20153526127811572, 0.10866813046744883, 0.15383584572691655, 0.12577858291130828, 0.10389900877767655, 0.08345353909039188, 0.11212129867981435, 0.5193828730348912, 0.47392535963488003, 0.154602548332603, 0.2125816727114196, 0.1686993656356348, 0.10698408144773508, 0.3706557739940205, 0.2120996522390426, 0.21703840772991023, 0.22395390433189544, 0.2492718164298504, 0.24513457426930385, 0.20518720091391407, 0.24092429844137253, 0.22648991751943182, 0.24585264373360383, 0.08454055356858137, 0.07888992864783428, 0.07805908735668654, 0.0718520193647646, 0.16157400396571941, 0.1017190501016243, 0.08797897269731114, 0.06878290474650461, 0.09833503180717873]}, "mutation_prompt": null}
{"id": "8473d326-2bf8-41d5-856c-82e844c207d7", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing Bat Algorithm by incorporating dynamic loudness and pulse rate adaptation mechanisms for improved convergence.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0081fa02-b1b7-4bb2-9a27-081c47894d3b", "metadata": {"aucs": [0.6577522126326639, 0.6573311367441141, 0.6609925992366933, 0.6678829602343266, 0.7065293735249774, 0.6416489390631637, 0.6704925789299543, 0.6798371472013731, 0.6428004384644823, 0.1446213248843784, 0.037203967661392556, 0.0674393194448819, 0.10195880780053979, 9.999999999998899e-05, 9.999999999998899e-05, 0.018206027294090932, 0.06963394939631595, 9.999999999998899e-05, 0.08979402720691343, 0.07583833477703461, 0.042071580612434434, 0.11523605341873899, 0.11787593318282563, 0.09763503612354474, 0.06232268138669805, 0.08516986079731237, 0.051247014790145484, 0.11157096533820554, 0.037471937433591895, 0.06538387224743947, 0.1022507322038535, 0.07131226359694831, 0.11270148378441647, 0.10657039019747805, 0.050906139934945305, 0.07246017643047076, 0.9765994319325892, 0.9567838349855946, 0.9707998104252783, 0.9569121156378912, 0.9464269822474306, 0.964984965023377, 0.9641740676940288, 0.9531000270907799, 0.9559797179159956, 0.3977169271988028, 0.40514746830234305, 0.35981907588834894, 0.40706848899179326, 0.35168056243815426, 0.32343498456810893, 0.35936855343476315, 0.3203812872233237, 0.3026195281120988, 0.3867021022640814, 0.1273320064183947, 0.21873895044843217, 0.37490715277679987, 0.4617105972318488, 0.16916943835968667, 0.1432419245266907, 0.21430643640007696, 0.3187337912882696, 0.1600690498006554, 0.12827353702949695, 0.2009496059848047, 0.21258928446367154, 0.1784483171552521, 0.2038997691754011, 0.22146857962903654, 0.1254278156364811, 0.19901272810082626, 0.18959931058945056, 0.05325954907241959, 0.1285915945022138, 0.20283042410657837, 0.16148021650114985, 0.17392821030511818, 0.33763965111938365, 0.11702130951369982, 0.15606353209308654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10328316740762289, 0.08215247477199139, 0.00519172906993004, 0.008048140184574004, 9.999999999998899e-05, 0.043903149781833184, 0.12969634946219089, 0.04545256345056914, 0.1389547950951634, 0.10323956315776595, 0.015866586751124068, 0.03610344014972433, 0.26618874990638486, 0.029089774169078875, 0.0729752417496542, 0.08436244334802523, 0.0743253361130819, 0.10617169980058838, 0.07914632452888148, 0.16479972446316948, 0.08143735671909558, 0.13760196654794377, 0.15485019763923136, 0.03391330199634779, 0.20625911526057572, 0.1920689738848852, 0.07745276380558064, 0.22070226207377142, 0.1082298311558143, 0.19039159699141506, 0.22219056633894607, 0.1896124069239663, 0.04608336683414782, 0.4788303967901526, 0.44904722252284446, 0.4655682430869771, 0.46214599570940906, 0.4805735183498332, 0.4704023433477209, 0.4765160808398463, 0.5522515904540638, 0.4596824306038929, 0.06908030490396655, 0.08272434941293683, 0.11177490328624173, 0.1067885362090194, 0.06246439789259983, 0.11869208888433236, 0.11411550824868588, 0.10978631952495399, 0.09601780854796393, 0.15758371177447972, 0.259509868212353, 0.25986868629705595, 0.2654995526605882, 0.2519357679298826, 0.12650864415266894, 0.19812374548774503, 0.20087133027297144, 0.2197089756923145, 0.26155366482599707, 0.3040260067319056, 0.16177464645705442, 0.19644634436474295, 0.16935598255439932, 0.21148151833223439, 0.2127057455673903, 0.18046946103871375, 0.1013059777616323, 0.10181835147470952, 0.180954311874861, 0.08936323160075665, 0.25115212210835236, 0.15111968023710542, 0.10167347823673845, 0.19758767028582092, 0.15862120362873644, 0.05526240622711265, 0.28746608321121825, 0.20823168145511717, 0.2518453567561898, 0.25301040119805973, 0.1754724303397981, 0.22204804592357386, 0.23785819885116066, 0.1764024447016196, 0.21899606598437438, 0.18984624522112048, 0.20815051170674048, 0.19644813853781184, 0.2044293332179966, 0.19205630288705977, 0.19826408343840685, 0.18006899853130087, 0.21013876184321323, 0.1916716280110402, 0.11972885660738375, 0.076596315903112, 0.1353993945642895, 0.17318209777293336, 0.20153526127811572, 0.10866813046744883, 0.15383584572691655, 0.12577858291130828, 0.10389900877767655, 0.08345353909039188, 0.11212129867981435, 0.5193828730348912, 0.47392535963488003, 0.154602548332603, 0.2125816727114196, 0.1686993656356348, 0.10698408144773508, 0.3706557739940205, 0.2120996522390426, 0.21703840772991023, 0.22395390433189544, 0.2492718164298504, 0.24513457426930385, 0.20518720091391407, 0.24092429844137253, 0.22648991751943182, 0.24585264373360383, 0.08454055356858137, 0.07888992864783428, 0.07805908735668654, 0.0718520193647646, 0.16157400396571941, 0.1017190501016243, 0.08797897269731114, 0.06878290474650461, 0.09833503180717873]}, "mutation_prompt": null}
{"id": "4f7aaf7f-08bc-4021-a509-23319583421a", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing Bat Algorithm by incorporating dynamic loudness and pulse rate adaptation mechanisms for improved convergence.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0081fa02-b1b7-4bb2-9a27-081c47894d3b", "metadata": {"aucs": [0.6577522126326639, 0.6573311367441141, 0.6609925992366933, 0.6678829602343266, 0.7065293735249774, 0.6416489390631637, 0.6704925789299543, 0.6798371472013731, 0.6428004384644823, 0.1446213248843784, 0.037203967661392556, 0.0674393194448819, 0.10195880780053979, 9.999999999998899e-05, 9.999999999998899e-05, 0.018206027294090932, 0.06963394939631595, 9.999999999998899e-05, 0.08979402720691343, 0.07583833477703461, 0.042071580612434434, 0.11523605341873899, 0.11787593318282563, 0.09763503612354474, 0.06232268138669805, 0.08516986079731237, 0.051247014790145484, 0.11157096533820554, 0.037471937433591895, 0.06538387224743947, 0.1022507322038535, 0.07131226359694831, 0.11270148378441647, 0.10657039019747805, 0.050906139934945305, 0.07246017643047076, 0.9765994319325892, 0.9567838349855946, 0.9707998104252783, 0.9569121156378912, 0.9464269822474306, 0.964984965023377, 0.9641740676940288, 0.9531000270907799, 0.9559797179159956, 0.3977169271988028, 0.40514746830234305, 0.35981907588834894, 0.40706848899179326, 0.35168056243815426, 0.32343498456810893, 0.35936855343476315, 0.3203812872233237, 0.3026195281120988, 0.3867021022640814, 0.1273320064183947, 0.21873895044843217, 0.37490715277679987, 0.4617105972318488, 0.16916943835968667, 0.1432419245266907, 0.21430643640007696, 0.3187337912882696, 0.1600690498006554, 0.12827353702949695, 0.2009496059848047, 0.21258928446367154, 0.1784483171552521, 0.2038997691754011, 0.22146857962903654, 0.1254278156364811, 0.19901272810082626, 0.18959931058945056, 0.05325954907241959, 0.1285915945022138, 0.20283042410657837, 0.16148021650114985, 0.17392821030511818, 0.33763965111938365, 0.11702130951369982, 0.15606353209308654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10328316740762289, 0.08215247477199139, 0.00519172906993004, 0.008048140184574004, 9.999999999998899e-05, 0.043903149781833184, 0.12969634946219089, 0.04545256345056914, 0.1389547950951634, 0.10323956315776595, 0.015866586751124068, 0.03610344014972433, 0.26618874990638486, 0.029089774169078875, 0.0729752417496542, 0.08436244334802523, 0.0743253361130819, 0.10617169980058838, 0.07914632452888148, 0.16479972446316948, 0.08143735671909558, 0.13760196654794377, 0.15485019763923136, 0.03391330199634779, 0.20625911526057572, 0.1920689738848852, 0.07745276380558064, 0.22070226207377142, 0.1082298311558143, 0.19039159699141506, 0.22219056633894607, 0.1896124069239663, 0.04608336683414782, 0.4788303967901526, 0.44904722252284446, 0.4655682430869771, 0.46214599570940906, 0.4805735183498332, 0.4704023433477209, 0.4765160808398463, 0.5522515904540638, 0.4596824306038929, 0.06908030490396655, 0.08272434941293683, 0.11177490328624173, 0.1067885362090194, 0.06246439789259983, 0.11869208888433236, 0.11411550824868588, 0.10978631952495399, 0.09601780854796393, 0.15758371177447972, 0.259509868212353, 0.25986868629705595, 0.2654995526605882, 0.2519357679298826, 0.12650864415266894, 0.19812374548774503, 0.20087133027297144, 0.2197089756923145, 0.26155366482599707, 0.3040260067319056, 0.16177464645705442, 0.19644634436474295, 0.16935598255439932, 0.21148151833223439, 0.2127057455673903, 0.18046946103871375, 0.1013059777616323, 0.10181835147470952, 0.180954311874861, 0.08936323160075665, 0.25115212210835236, 0.15111968023710542, 0.10167347823673845, 0.19758767028582092, 0.15862120362873644, 0.05526240622711265, 0.28746608321121825, 0.20823168145511717, 0.2518453567561898, 0.25301040119805973, 0.1754724303397981, 0.22204804592357386, 0.23785819885116066, 0.1764024447016196, 0.21899606598437438, 0.18984624522112048, 0.20815051170674048, 0.19644813853781184, 0.2044293332179966, 0.19205630288705977, 0.19826408343840685, 0.18006899853130087, 0.21013876184321323, 0.1916716280110402, 0.11972885660738375, 0.076596315903112, 0.1353993945642895, 0.17318209777293336, 0.20153526127811572, 0.10866813046744883, 0.15383584572691655, 0.12577858291130828, 0.10389900877767655, 0.08345353909039188, 0.11212129867981435, 0.5193828730348912, 0.47392535963488003, 0.154602548332603, 0.2125816727114196, 0.1686993656356348, 0.10698408144773508, 0.3706557739940205, 0.2120996522390426, 0.21703840772991023, 0.22395390433189544, 0.2492718164298504, 0.24513457426930385, 0.20518720091391407, 0.24092429844137253, 0.22648991751943182, 0.24585264373360383, 0.08454055356858137, 0.07888992864783428, 0.07805908735668654, 0.0718520193647646, 0.16157400396571941, 0.1017190501016243, 0.08797897269731114, 0.06878290474650461, 0.09833503180717873]}, "mutation_prompt": null}
{"id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.238664686011683, "feedback": "The algorithm AdaptivePopulationBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "0081fa02-b1b7-4bb2-9a27-081c47894d3b", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "b8d124c4-264a-44bc-ad53-ec57006a03d0", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "7d1bc274-03c1-46fd-86d2-f2280e2c7fb9", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "30544093-d7fd-4be5-aa71-e226829de51e", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "4af8eb41-2962-4c5d-a41e-ba1d174dd72c", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "7b79283d-26d2-4bf6-9bca-4ecd42ef527c", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "a95a8eeb-0ce7-4b09-917c-cebea5620b73", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "6c50045c-36f1-433a-a8c4-1241bda708c0", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "61084753-fe19-47c0-b317-1d84f62b25f3", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "fd02d43f-3d67-414e-bbca-2b13a21ab7de", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "86e31007-2a01-4d6f-8449-1614c95023d6", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "6a4ebccf-4e2b-40b7-ab1c-68104d7778a9", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "1bafd62e-328d-4243-85ca-7b5659e7562d", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "371e7e51-54e3-4616-ab1d-66813b13faac", "solution": "import numpy as np\n\nclass EnhancedBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "EnhancedBatAlgorithm", "description": "Enhancing Bat Algorithm with Levy flights for improved global exploration capability.", "configspace": "", "generation": 41, "fitness": 0.238664686011683, "feedback": "The algorithm EnhancedBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "f5d93084-6a97-487c-bb2b-26084ab49f0a", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "5fe45f68-1628-44bb-bc98-c2370db8d5b6", "solution": "import numpy as np\n\nclass EnhancedAdaptivePopulationBatAlgorithm(AdaptivePopulationBatAlgorithm):\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Dynamic adaptive parameter adjustments\n            self.freq_max = max(self.freq_min, min(1.0, self.freq_max + np.random.uniform(-0.1, 0.1)))\n            self.alpha = max(0.1, min(0.9, self.alpha + np.random.uniform(-0.05, 0.05)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate + np.random.uniform(-0.05, 0.05)))\n            \n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "EnhancedAdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with dynamic adaptive parameter adjustments for improved convergence and diversity maintenance.", "configspace": "", "generation": 43, "fitness": 0.23312320362942376, "feedback": "The algorithm EnhancedAdaptivePopulationBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7729041354320596, 0.729853816421985, 0.7609488307450867, 0.7751157208828732, 0.7325422601345479, 0.7445968724082933, 0.772241475075427, 0.7312818577343545, 0.7540244624132421, 0.15502132191838847, 0.06085933391161491, 0.015362586663594247, 0.06048000064605441, 0.023448738572516614, 0.07236503010834694, 0.0602656954202373, 0.05465098964070181, 0.0025539069245421597, 0.08054586088437066, 0.07293954139481151, 0.08172859318521897, 0.1382541962573416, 0.13706449738137993, 0.12440694032830835, 0.05457819128532104, 0.12108733901446211, 0.05676074350788729, 0.056374394440694364, 0.05877311975354549, 0.07972079694829426, 0.09939108317791634, 0.07451590997328639, 0.08415537374992343, 0.09210523546491112, 0.08961663104899797, 0.058983701452191006, 0.9733265872857969, 0.9620821359691822, 0.979191860148084, 0.9536417839231176, 0.9610405579832824, 0.972293532456295, 0.9343970762842355, 0.9568508649867681, 0.9691606491018856, 0.5524678786509671, 0.5152384523255895, 0.5435263700519775, 0.5151056043322856, 0.519205289773223, 0.5396911117594835, 0.5167152394780341, 0.5058758955317137, 0.4730955450643195, 0.35149527503705735, 0.1634789269014334, 0.30002810908424704, 0.3714538626221888, 0.25606541237530533, 0.21977346306003898, 0.16314646725507265, 0.31547167542221954, 0.21345071046011732, 0.14367396145978673, 0.16846980237276388, 0.16737046245615872, 0.14889765460440407, 0.19173727410869557, 0.16535144352383524, 0.18136487618051056, 0.19668665880574632, 0.16342243394161637, 0.2137460239851272, 0.023697985768437735, 0.1903722581162407, 0.19570825293303784, 0.17415171512833671, 0.21406100974632103, 0.2082168795677919, 0.11548891984426413, 0.18593728737758408, 9.999999999998899e-05, 9.999999999998899e-05, 0.13746106470490127, 9.999999999998899e-05, 0.0009618406375344613, 0.04768685946470652, 0.014063580684832377, 9.999999999998899e-05, 0.001501517446869327, 0.07944055523099702, 0.05325824664823797, 0.09731357523399764, 0.07899155553927595, 0.013787379700041846, 0.016976216464063665, 0.19357917348045328, 0.03838744826966145, 0.08689364561454682, 0.12076189678472327, 0.0721662627684414, 0.17181370092457304, 0.07768015221437274, 0.09280557896394437, 0.058750086345296215, 0.08014769111626407, 0.138647507201772, 0.12998341968347793, 0.11616476492204819, 0.12102845675313856, 0.08056157953682719, 0.02773768201011606, 0.07735921430769377, 0.21086948513692827, 0.1501742506253031, 0.054644605435767546, 0.06870196772775294, 0.530710792004419, 0.49609481640380815, 0.5335123290601167, 0.5190512786482304, 0.5106633875634476, 0.49591179653683326, 0.5329065927766437, 0.4881787550507998, 0.5226238862015662, 0.05794718442016733, 0.06197630394197384, 0.052117301617840894, 0.1174142685538625, 0.05483868655704316, 0.14221324010274816, 0.08688508434971387, 0.04909009888689875, 0.07502053214991389, 0.19227953755157878, 0.31752948871244513, 0.22634268992823525, 0.31833651743402613, 0.1465982120998025, 0.17413791888632602, 0.1834110173486183, 0.20323387424711137, 0.13696057174559662, 0.2304456247215213, 0.334111260733131, 0.1300459328485174, 0.1782492018208066, 0.1690314815050128, 0.1723051282065471, 0.22814935285547522, 0.17707157507790594, 0.10126555598270992, 0.09559106404185602, 0.25127408036638355, 0.0921066660227069, 0.1607453694440104, 0.1436153526090047, 0.22131343312603102, 0.15770590870577084, 0.12345595437806278, 0.05852085680756358, 0.20601945364250895, 0.16672262871983112, 0.17894140276284032, 0.18533263638517272, 0.15971438373448277, 0.21629087319489793, 0.2130029410168509, 0.17799458249653288, 0.2403419933937947, 0.22938199568714512, 0.19424436943350354, 0.18521318255175023, 0.19293237858057377, 0.18118460348518806, 0.20429942385752142, 0.1967184653691476, 0.19763798115914544, 0.19253931280800984, 0.11980739579435107, 0.07658502656264787, 0.13645154163039386, 0.1731836117997675, 0.20145626298152897, 0.1089433635696363, 0.15081904587741224, 0.12671962379290547, 0.1039976194628911, 0.08324583412948705, 0.11232643353737681, 0.442531249340148, 0.5888913177326598, 0.1537448188223106, 0.21259747049541877, 0.16690766398637114, 0.07336159188095315, 0.41638160355091014, 0.2452462112060475, 0.23749343280505375, 0.23935458471672633, 0.2632928403462569, 0.2354985008570426, 0.20374584933528161, 0.2559454932543871, 0.21775674141452184, 0.25138526621906754, 0.05306771451669179, 0.06544766940151692, 0.07195394268139876, 0.11110481747493306, 0.07177347826308489, 0.08885488918010742, 0.06818689246052456, 0.09228748495451278, 0.0689167464836552]}, "mutation_prompt": null}
{"id": "65a62945-f6a6-497b-ba82-d889b27fbba8", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "fefc4c4a-995f-40ac-b11d-9164d982f86f", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "d5be764f-f7bd-42f8-a47d-4afea356a733", "solution": "import numpy as np\n\nclass AdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n        \n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                \n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n        return best_individual", "name": "AdaptivePopulationBatAlgorithm", "description": "Enhancing Bat Algorithm with adaptive population size for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.7533884515286633, 0.7504101486436272, 0.736176114890019, 0.7528506051163288, 0.7458671707956843, 0.7647988076088462, 0.7675519722424557, 0.765632009250564, 0.7573052368108895, 0.12880217923410908, 0.04025147738824686, 0.13645873035651368, 0.1510084462539356, 9.999999999998899e-05, 0.000791928693569921, 0.02721176073517706, 0.01958148798184589, 0.045477469573563245, 0.12437024049918088, 0.059000947956502015, 0.05935093210748421, 0.12867823244780263, 0.08704611697769526, 0.059433935726547316, 0.08123802957592285, 0.06384138645890491, 0.04531709299669051, 0.10121046672878042, 0.02815939464846484, 0.04856780099472746, 0.11405531100800415, 0.05077228409116563, 0.10901191367533902, 0.14881979872869577, 0.0393299096753984, 0.09679369788864478, 0.9698657769418404, 0.9536926958282538, 0.9688630558396789, 0.966144437357613, 0.9536725726511558, 0.9733435262569797, 0.9530940715943315, 0.9607810445333673, 0.9531245783563671, 0.49798746865620147, 0.5640144189221353, 0.4973507739498333, 0.4934461374951572, 0.588197344394048, 0.5704037739966343, 0.5342555620224991, 0.5239342254002608, 0.47331647561025425, 0.22896285194782662, 0.1594936683122341, 0.13963123695459145, 0.2756966768887359, 0.19457686023905696, 0.20633925034544176, 0.21528543917345455, 0.3886584973001269, 0.23523009584447085, 0.16646998380353706, 0.22774428607612895, 0.20266515823901432, 0.1281470651059019, 0.1315421185580704, 0.20266405043230484, 0.17998289760202824, 0.23636269619963335, 0.20279505881988902, 0.2093760146007564, 0.08363859184556399, 0.13392225271747082, 0.18407296853504662, 0.16678311777505272, 0.21494399713028556, 0.2418653506275651, 0.1005792396487859, 0.15597527216346885, 9.999999999998899e-05, 9.999999999998899e-05, 0.05920062610437982, 0.08585229119610283, 9.999999999998899e-05, 0.03806884266738686, 0.003158993062097437, 9.999999999998899e-05, 9.999999999998899e-05, 0.1430668661545813, 0.07756709979121168, 0.08859645394450799, 0.12594337124040555, 0.016246247953527027, 0.018203432916532036, 0.15928074565954142, 0.04438197703597069, 0.059044550139495944, 0.06539096393248833, 0.09078414056789463, 0.09369105760396013, 0.08274315980989344, 0.1385965789222664, 0.09707550956505706, 0.0972581104520277, 0.19153847607056762, 0.06551398734066172, 0.0712770562233005, 0.13450456319089898, 0.10690561807257859, 0.26045694976130374, 0.031236084375534157, 0.184664532694509, 0.2571300984866324, 0.2624739578213733, 0.06380934658775128, 0.5125104082812783, 0.503224831394602, 0.5347422944676489, 0.5159866570579296, 0.5112743490123612, 0.4957971870319544, 0.5289998995712885, 0.5031694717417099, 0.5199068828526531, 0.07654360891106338, 0.1074541149843099, 0.05047162175643338, 0.45227938855008554, 0.06890275141939961, 0.09381106693455643, 0.06538559155750523, 0.11155746667653565, 0.10241653623752722, 0.2738893979064736, 0.2983951458427797, 0.30990403751600737, 0.2871169478942528, 0.2660289924487468, 0.19582045380283375, 0.3383916788512691, 0.17577825948955705, 0.1358703154478812, 0.36897784601244754, 0.25427364169288635, 0.13045759820922653, 0.17651090014016624, 0.16755568551346145, 0.16582347011770293, 0.1431346536544137, 0.1584937010443649, 0.10131585492545692, 0.10179015924472568, 0.197537383349901, 0.09032180656822653, 0.21518155557871854, 0.16837678206578455, 0.20434941842450927, 0.1694904372541408, 0.18029413291068408, 0.05408007461247921, 0.22033963844135596, 0.16830712875382525, 0.20310405452263103, 0.23251441213450108, 0.1745187723566214, 0.1938858268848559, 0.19853163765732917, 0.1716906286265727, 0.21740966887216806, 0.19225812733997893, 0.18996966853969877, 0.18452562699372843, 0.186061261529607, 0.20979369076228727, 0.1920171265996048, 0.1938926478290559, 0.20531571430459428, 0.18950935303275218, 0.11967866792828741, 0.07665875467109218, 0.13537028727311062, 0.17347558285040687, 0.20179215602231038, 0.10890802695934765, 0.15323432080529253, 0.1259500139572458, 0.10392332680290273, 0.08341828926220263, 0.11190870577546508, 0.4903902968911682, 0.6601644527820917, 0.15483464346183096, 0.2129546491938772, 0.16680471417310527, 0.07345337314409184, 0.4081820944217863, 0.23800119158243893, 0.2243671289660869, 0.21527413246784943, 0.20165158090679047, 0.26182567720660277, 0.1949209888542407, 0.24717608938950875, 0.24781245912733885, 0.271098600389974, 0.060115538743454655, 0.059565250709037953, 0.07422120065007787, 0.052193711224393646, 0.1272726288680287, 0.0829023006680254, 0.09035630025167651, 0.07915365957325904, 0.04360612310253453]}, "mutation_prompt": null}
{"id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 47, "fitness": 0.2392438992256508, "feedback": "The algorithm DynamicAdaptivePopulationBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "a52e7bc5-425c-4ecf-93b5-cf6bcbf371f7", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "b49bce93-3092-4c22-a419-920e61b18b6b", "solution": "import numpy as np\n\nclass DynamicAdaptiveLevyBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptiveLevyBatAlgorithm", "description": "Implement a Dynamic Adaptive Bat Algorithm with Levy flight for enhanced global exploration.", "configspace": "", "generation": 48, "fitness": 0.2392438992256508, "feedback": "The algorithm DynamicAdaptiveLevyBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "9249e49f-f45c-4d42-a50e-aaf4e23daaa4", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), de_cross_prob=0.3, de_mut_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.de_cross_prob = de_cross_prob\n        self.de_mut_prob = de_mut_prob\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            # Differential Evolution Component\n            for i in range(self.population_size):\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i, 0), 2, replace=False)\n                mutant = population[idxs[0]] + self.de_mut_prob * (population[idxs[1]] - population[idxs[0]])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n\n                # Bat Algorithm Component\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = trial + velocity\n\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = trial + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithm", "description": "Enhancing exploration-exploitation balance with a multi-phase approach integrating differential evolution and Bat Algorithm components.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {}, "mutation_prompt": null}
{"id": "60bab92b-f53e-4aff-b57d-79f37c915d84", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "b27d7e9c-d522-45e2-962a-357522d83591", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "11f46210-6027-4e38-b108-475de153eaae", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "d5e7c4a4-0349-441d-9871-734df8258829", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "602140eb-285e-4d0f-89bf-978ccc21bd02", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "19c62c00-c386-407c-8d15-12b1304a9305", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatDEAlgorithm(DynamicAdaptivePopulationBatAlgorithm):\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), de_cr=0.9, de_f=0.8):\n        super().__init__(budget, dim, population_size, loudness, pulse_rate, alpha, gamma, freq_min, freq_max, loudness_range, pulse_rate_range)\n        self.de_cr = de_cr\n        self.de_f = de_f\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    idxs = np.random.choice([idx for idx in range(self.population_size) if idx != i], 2, replace=False)\n                    x_r1, x_r2 = population[idxs]\n                    mutant_vector = population[i] + self.de_f * (x_r1 - x_r2)\n                    crossover_mask = np.random.rand(self.dim) < self.de_cr\n                    new_solution = np.where(crossover_mask, mutant_vector, population[i])\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatDEAlgorithm", "description": "Enhancing diversity through a hybrid approach combining Bat Algorithm with Differential Evolution.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {}, "mutation_prompt": null}
{"id": "46fc2a85-aa73-4842-b303-4a36b63f0538", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "810375e7-312c-449f-981f-c2469c2f8880", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            # Adaptive population size\n            if np.random.rand() < 0.1:  # 10% chance to adjust population size\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            # Dynamic adaptation of algorithmic parameters\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithm", "description": "Introducing dynamic parameter adaptation for the population size and algorithmic parameters to enhance performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.8013894061648031, 0.7474162318096, 0.7976354209972146, 0.7556897735177476, 0.7421479596594178, 0.7790537125447179, 0.7602889399225907, 0.7533191198926048, 0.7977356286879251, 0.22925858376363673, 0.08839608918440733, 0.08575574127913665, 0.2431013549965989, 0.0073606522265967644, 0.15858188489593117, 0.051921682039762884, 0.04460049461811488, 0.18503465424472143, 0.09266491066823268, 0.07497991301359541, 0.09889386591680083, 0.13801586190617876, 0.09724681686819026, 0.06551625921996929, 0.07103339029088751, 0.08351463314633234, 0.06777947616345359, 0.10706130927389845, 0.03003428608810499, 0.0867643731186909, 0.08879406872480267, 0.0675620464441512, 0.08448868844976931, 0.1015404340766971, 0.04805139615606735, 0.06438011256861265, 0.9762135943658987, 0.9467240469382975, 0.9768129601888872, 0.9691494934843669, 0.9536754974065871, 0.9767608930503529, 0.9558698114026547, 0.9491288012512608, 0.966099750461121, 0.5445954130551962, 0.5547415010161438, 0.5329039198904283, 0.5583296906715629, 0.5181775730130633, 0.590025577080749, 0.5884438634316744, 0.48300660250364413, 0.5522810694418733, 0.3489812124107392, 0.16614069394026332, 0.13918947640189672, 0.2960343851494952, 0.18768483479647402, 0.2540371442415811, 0.16444059610728512, 0.20641204616625541, 0.24214826810506562, 0.17049001433703237, 0.13098326122367288, 0.17700970303530794, 0.1861485576620121, 0.1479114556300679, 0.186112292589242, 0.20910188496439364, 0.20289000061765106, 0.26408217018428504, 0.18767446694549195, 0.09936298813113387, 0.1349179369859015, 0.19196582608876234, 0.18689470599340496, 0.21594376050913944, 0.2178235497677582, 0.00013840647436935694, 0.17459223496835896, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064513299774591, 0.06467814967812568, 0.08078438330883653, 0.03337620171649436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0942820508708977, 0.04013340207557725, 0.08209601691756419, 0.09383399970265638, 0.008204105107507575, 0.005125740530260603, 0.20488739447891857, 0.05230381258342964, 0.05814849578368286, 0.09713902876435077, 0.07498672837590725, 0.23039237289947812, 0.11841949683048492, 0.1712636560293873, 0.09031910616552707, 0.11244541234125738, 0.168330279986586, 0.05274843132194129, 0.10104644677538566, 0.17047453435818838, 0.06829364360007761, 0.1554707104590285, 0.035512836004268133, 0.16162827441597472, 0.159214987732322, 0.24056551101139356, 0.1008392989464173, 0.5537567442430268, 0.5351076465180361, 0.5447033263154462, 0.5257175224339175, 0.4974205094754579, 0.543033434976996, 0.5166053013986476, 0.535243906118557, 0.5417168900242333, 0.07360182650056046, 0.08464736598533307, 0.06324517594701629, 0.10044718201885638, 0.03951760191989129, 0.11573753654219532, 0.06915509917977636, 0.05209285062267355, 0.08001017001638988, 0.32056859398368653, 0.2688512846521398, 0.2670424190069006, 0.28571611108815853, 0.13811652308309208, 0.1646500815317966, 0.1294801442060125, 0.25023966159319655, 0.29066420773926793, 0.160866223985075, 0.30709568880985294, 0.21779420193830235, 0.18132291759634256, 0.1632699429667489, 0.1616227783371441, 0.17002874722403105, 0.14487821588373828, 0.12764559781504525, 0.09468185923521544, 0.20681120584667512, 0.09301730470228153, 0.13736017921392085, 0.1688925561404605, 0.14760707817493424, 0.1761925721378269, 0.15979172781223716, 0.05369169439666055, 0.2390351592476646, 0.19679873682611093, 0.20652721767291682, 0.206701191477215, 0.15583208706976925, 0.21969199526435423, 0.21655304966094657, 0.16063636415222005, 0.19931254428654277, 0.19405169057897598, 0.2086065885213335, 0.18000777837348014, 0.19185659965157376, 0.18225374145719875, 0.18206627806217313, 0.20843178232958848, 0.1906400683913524, 0.1961185314770988, 0.1199803445805745, 0.07664930285752325, 0.13636011539699666, 0.17326772900402998, 0.2018435969938368, 0.10967456173259615, 0.15364149644986902, 0.12567282288534065, 0.1039204490517095, 0.08339581219556202, 0.11249027735877315, 0.45447261671707584, 0.6561068384526711, 0.15416760928713413, 0.21288002441190457, 0.16794109164343407, 0.15664951128268678, 0.3502258637016602, 0.20819041418313877, 0.21649439057943798, 0.22118820064114808, 0.22994163518954425, 0.250292219281801, 0.2610510008282948, 0.21009475403678446, 0.2160913027425252, 0.26539154718184044, 0.04830534677400189, 0.058560352901753654, 0.09071719627812913, 0.06616758331896577, 0.14019494002407118, 0.03253464965866093, 0.09964738936480566, 0.06024497961276443, 0.044496308931106454]}, "mutation_prompt": null}
{"id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 58, "fitness": 0.24183085799736634, "feedback": "The algorithm DynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "0fb9d31e-adda-458b-af5a-1e082219ae33", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "5117fa25-5c32-48a1-be5d-5c59a9de1346", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "7ef86942-475e-43fa-87ab-4f273267cfef", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "5cf7496d-f37e-4c17-875a-16867a22cfef", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "32777886-bbf0-4915-bd64-6b219b2ca374", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim) * self.mutation_strength\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Enhancing population diversity and exploration by incorporating a dynamic mutation strategy that adapts based on population performance.", "configspace": "", "generation": 62, "fitness": 0.24170160930200424, "feedback": "The algorithm EnhancedDynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.7569733169765313, 0.7390540186138134, 0.7814294105392354, 0.7400295485812574, 0.7476769270780417, 0.7821200712414158, 0.7492536888307575, 0.7553780059162489, 0.7987762654558885, 0.31881369045839014, 0.061986418223754614, 0.03074900527930513, 0.18586580713615453, 0.005894499894580796, 0.1047684810254288, 0.08330130236215516, 0.0181387375160057, 0.09828957097053681, 0.09140040191123155, 0.06851691442229713, 0.10721106793610602, 0.10117702943413476, 0.0974658288003366, 0.07653899386989271, 0.054422600639166596, 0.06834823986118732, 0.11076292476789773, 0.07357117430724014, 0.030598733492347985, 0.1047741091798634, 0.11707459122646413, 0.04205317669423381, 0.06749940433171997, 0.11869445278651292, 0.057095755205948784, 0.10643605453170057, 0.9757457166302004, 0.9649204392768078, 0.9833417279000093, 0.9666168200129579, 0.959159769565411, 0.9588845676970372, 0.9626771580726143, 0.9647314150019026, 0.9436524187443928, 0.5328774719056888, 0.5273949470161211, 0.5018568791474272, 0.5180123784323318, 0.5227289362318224, 0.5283818585082165, 0.555024788047332, 0.5054771879678981, 0.5641946178244264, 0.6127954104050284, 0.09926252155214965, 0.14019385552084407, 0.34002119539323217, 0.15668431848947417, 0.2148719498849302, 0.16799407366075048, 0.27440122222904606, 0.21479693419223944, 0.15063557210432954, 0.1809955574104345, 0.204743881987679, 0.1903164498033395, 0.17190451885817726, 0.11745555471293678, 0.1737912356959581, 0.19157326148777898, 0.16058814863704662, 0.24205140953376725, 0.056843982664038784, 0.2957464346916858, 0.14586642526332072, 0.16747508885913487, 0.193223344467792, 0.21921201212269192, 0.053488530930178024, 0.19145696232580434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08731747904963072, 0.07923928861506735, 0.02431990380313309, 9.999999999998899e-05, 9.999999999998899e-05, 0.003230246089533262, 0.08053566865996431, 0.053318034168765016, 0.0976926147699696, 0.09761871496780439, 0.012953283527825099, 0.04027880367792369, 0.23390150678588173, 0.054656955501509064, 0.05631452988603647, 0.09173220983806218, 0.058993144636766415, 0.24891807761239604, 0.11692533312954112, 0.08780536004184214, 0.06751690721863157, 0.11785316748450547, 0.21333947559312394, 0.08226592647578634, 0.13738089567880218, 0.028991517676424716, 0.04918320188768832, 0.09603909519411369, 0.05788590920863501, 0.22114038779158607, 0.18231476589304285, 0.09874815090765621, 0.05610420782826131, 0.5276995898641006, 0.5174314777411084, 0.5331908341880708, 0.5378905342656427, 0.51875555132759, 0.5175814907978232, 0.5594002042844003, 0.5184069375143694, 0.5391401319222929, 0.059827253381686596, 0.08189445776380833, 0.12363414847401277, 0.1548398143825076, 0.08352106847720042, 0.1440996368607197, 0.09458969796158434, 0.06432372933334007, 0.08926661837181704, 0.18118236874822502, 0.2740188790488103, 0.33713364060960327, 0.25640417353823197, 0.26095235020474983, 0.23407407402816305, 0.21568309059928248, 0.13328584481168693, 0.1391526506204711, 0.2524948478274387, 0.22408935029957133, 0.1592478568357949, 0.20467979151814275, 0.2066107467291013, 0.16964505771631289, 0.1790617984174907, 0.18169290901331558, 0.12291297393477052, 0.10239630323329618, 0.1952885211824248, 0.18967507326416766, 0.22106096969662437, 0.13288700277408827, 0.09972441813120514, 0.20216749167016956, 0.16661080045458132, 0.04381930877357898, 0.26085137879535913, 0.17267960924690173, 0.19139962364238783, 0.18080162911390085, 0.15122401748901704, 0.19196517651585054, 0.2718280609339674, 0.15970503423349824, 0.23002500346114496, 0.21015403927026455, 0.1959679720644547, 0.617865916896986, 0.186032141222774, 0.18299522220049746, 0.21042502491604098, 0.18964742138758384, 0.2105405412055874, 0.1659309284076539, 0.16482867679404678, 0.07660686291131791, 0.13572647342877386, 0.1736329865785199, 0.20245141087448748, 0.1090923050630358, 0.1543974124816455, 0.11511791685378792, 0.15434310944929108, 0.08344958508133327, 0.11162036485146742, 0.549103148214019, 0.876141982789874, 0.15343318902905534, 0.21144819933720183, 0.1689147332484634, 0.07328240088064153, 0.3623275772542618, 0.24873072040856392, 0.20719885823533246, 0.19227071972244358, 0.20374438778911852, 0.2896627837140905, 0.23333175991777366, 0.23249154225059243, 0.23534035701920153, 0.20565070843256272, 0.037237417932213246, 0.052526788393445156, 0.07097980581394892, 0.055999692635532505, 0.07098368761567986, 0.06790063097149357, 0.11054349481467818, 0.07817015974908392, 0.05615761313461076]}, "mutation_prompt": null}
{"id": "fb184bd6-64c1-4a22-b234-3fdcd665efec", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "e397bde4-2936-4d29-b346-36a47bd727f5", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "e8092f7b-fa0a-47a8-ba15-ad356c50d415", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "e6a4dab5-32af-4666-81ae-738b13df4694", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "2bec578a-d030-4276-996b-6a209a808ebb", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "cde5d2f5-31cd-4061-a64d-6ab64cffedd7", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "48c216e2-bff5-46a6-b4d1-4a941bef43ed", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "0cb15e3e-51b2-4380-b6d9-44fce7dfce24", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "1b80b34b-5a02-4011-9fb4-577cc707fdf5", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "4b0acd55-9236-43d1-8428-fd30f0f6a6eb", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "9696757f-144a-4d17-9785-9827d98ca7a5", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "85fa3596-ffec-4e68-87d5-ee6606b326a6", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "276e1439-880d-4089-95dc-26630ad9fb17", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "41c20ce3-8e21-4363-a57a-37078ec31fe0", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "dd129ff9-bc54-4646-84da-bf7f2921a271", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "4d9adae2-979f-4d19-9521-064982a000a3", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "01c8d0d8-4613-4d70-8d02-cf7acf3cd464", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                if np.random.rand() < 0.1:\n                    levy = 0.001 * np.random.standard_cauchy(self.dim)\n                    new_solution = population[i] + levy\n                else:\n                    frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                    velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                    new_solution = population[i] + velocity\n                    if np.random.rand() < self.pulse_rate:\n                        new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                        new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                        new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                    else:\n                        if np.random.rand() < self.mutation_rate:\n                            mutation = np.random.uniform(-1, 1, self.dim)\n                            new_solution = population[i] + mutation\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Enhancing exploration by introducing Levy flights to diversify search trajectories.", "configspace": "", "generation": 79, "fitness": 0.21158919725655728, "feedback": "The algorithm DynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.6118241321344444, 0.6303649090898538, 0.6817102886187005, 0.6412276550063776, 0.6435027278269937, 0.5848179439572935, 0.6331489241899495, 0.6701163646138616, 0.6326688865898614, 0.14263992245420287, 0.022873451412214085, 9.999999999998899e-05, 0.003940147789256332, 9.999999999998899e-05, 9.999999999998899e-05, 0.03243938182842665, 9.999999999998899e-05, 9.999999999998899e-05, 0.08368376559141977, 0.06779161238925913, 0.04922807361190085, 0.10969766367086808, 0.08125567629611519, 0.10328074775136464, 0.04438937113552388, 0.1300743514782271, 0.06414097638775107, 0.0786474668255952, 0.0032210017282765513, 0.04081918155876807, 0.09592814882271561, 0.04594348143694993, 0.07599882498116517, 0.10715604300998804, 0.07783108341712064, 0.07496068547411483, 0.990855943122954, 0.9803024287741174, 0.9860520063931739, 0.9839205606332091, 0.9806420703628939, 0.9680563657708829, 0.9556305598353587, 0.9796494733828794, 0.9577194974090313, 0.40340031337542737, 0.3123008504440138, 0.34585632804386135, 0.3039135410142779, 0.2863408633922393, 0.32249205347863263, 0.3096284861382784, 0.324801127320961, 0.42108521014502054, 0.2834763127180041, 0.20280255748659537, 0.32638371732273275, 0.8731819173158437, 0.21052157583483877, 0.2619909047187299, 0.19200995515403174, 0.31198707679465876, 0.22928924244300375, 0.1557790434058034, 0.13763433151100601, 0.15853198237363608, 0.14458978417742052, 0.1254283572469571, 0.12488223525142161, 0.15306461458444343, 0.1496206117947011, 0.15340533542995105, 0.15209234212933576, 9.999999999998899e-05, 0.13025151811040725, 0.1841335202090072, 0.19634237884000727, 0.16288903228014273, 0.15723503157348973, 0.021485980196988774, 0.15343538312211336, 9.999999999998899e-05, 9.999999999998899e-05, 0.05181753218208418, 0.009835046818311599, 0.042507059500143995, 9.999999999998899e-05, 0.002535324358803659, 9.999999999998899e-05, 0.08984961593535612, 0.08910355488803146, 0.0509674651669193, 0.06207172024011254, 0.07358707136332465, 0.011276038359682383, 0.008801817117795818, 0.002315066306798008, 0.04784916866890376, 0.0012146497344552865, 0.0456587488056599, 0.0853320852364875, 0.14688593834407526, 0.06354940942405196, 0.10144340807482566, 0.023066038937600397, 0.05404532094871084, 0.09458482615175712, 0.06323483322495504, 0.05118174684799792, 0.07921113811384162, 0.09364691859223606, 0.11485480210982968, 0.06850531061958887, 0.07166442014623531, 0.1525050515167553, 0.10394851843537833, 0.1439453956259178, 0.4531256214599041, 0.4850472401958228, 0.45819633581879304, 0.4482220935641157, 0.49290938798106676, 0.4398529307519028, 0.43880577802501997, 0.4451090795369379, 0.462422727897987, 0.09295359966106465, 0.0934878744219303, 0.08924044153042454, 0.09163782066582049, 0.06965915062633898, 0.17709039566105034, 0.06904036154698245, 0.07119798547455669, 0.08678956453475273, 0.26597381574040957, 0.2755152815322658, 0.20656070153105066, 0.18979702448325386, 0.24428487969677193, 0.16284917094319284, 0.16760029613563132, 0.18239670965259713, 0.22379801589280324, 0.24376757115532421, 0.24422320996600078, 0.23155797898394004, 0.19632594649640378, 0.18035746829013788, 0.1963984751758403, 0.19789668345359146, 0.15169153851714567, 0.1012475459833635, 0.10104963057019645, 0.24223990070418178, 0.11363559445040805, 0.21064077241071166, 0.11330898545469392, 0.2385442128530405, 0.15065045270241884, 0.16519695868857376, 0.11315620616226019, 0.19160849122197687, 0.15457666700436146, 0.27782343292240885, 0.17099103457795795, 0.15723729351010185, 0.1994467662732623, 0.24215779829666273, 0.20570338759706508, 0.2353078933948749, 0.19785800242785467, 0.19479312689924932, 0.19438768413651097, 0.18476663662430504, 0.18018746880665548, 0.1887638925071532, 0.19050229480948033, 0.20915844830036312, 0.18747772725737344, 0.11989851763321635, 0.07659254184613395, 0.13312267094999775, 0.17327759846406665, 0.20162715757208216, 0.10829304492527858, 0.15237491943237824, 0.1271103635386398, 0.10383872240766501, 0.0832796397544402, 0.11286070820901772, 0.35110983863312384, 0.42703471147345595, 0.059295168909110685, 0.2105617989142149, 0.16830289498045203, 0.15700521355757113, 0.2585474971659185, 0.20480524068273231, 0.2045572611227342, 0.1985435645182484, 0.2078605613710366, 0.22901982833859202, 0.2135898946499165, 0.21520410901220577, 0.20310714430607368, 0.21281915031704457, 0.05000930996261177, 0.07082043085249246, 0.07184194394238164, 0.06413852930164154, 0.10728374214261316, 0.051526877501621327, 0.08460560257255056, 0.06831901919511107, 0.050469571774035105]}, "mutation_prompt": null}
{"id": "712a9f15-8048-4a5b-a475-3d3830e04a6e", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "02516228-7706-40ae-b36a-a5c4ed520961", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_range=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_range = mutation_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-self.mutation_range, self.mutation_range, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Enhancing exploration by introducing a dynamic mutation approach to diversify search directions.", "configspace": "", "generation": 81, "fitness": 0.24170160930200424, "feedback": "The algorithm DynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.7569733169765313, 0.7390540186138144, 0.7814294105392354, 0.7400295485812574, 0.7476769270780417, 0.7821200712414158, 0.7492536888307575, 0.7553780059162489, 0.7987762654558885, 0.31881369045839014, 0.061986418223754614, 0.03074900527930513, 0.18586580713615453, 0.005894499894580796, 0.1047684810254288, 0.08330130236215516, 0.0181387375160057, 0.09828957097053681, 0.09140040191123155, 0.06851691442229713, 0.10721106793610602, 0.10117702943413476, 0.0974658288003366, 0.07653899386989271, 0.054422600639166596, 0.06834823986118732, 0.11076292476789773, 0.07357117430724014, 0.030598733492347985, 0.1047741091798634, 0.11707459122646413, 0.04205317669423381, 0.06749940433171997, 0.11869445278651292, 0.057095755205948784, 0.10643605453170057, 0.9757457166302004, 0.9649204392768078, 0.9833417279000093, 0.9666168200129579, 0.959159769565411, 0.9588845676970372, 0.9626771580726143, 0.9647314150019026, 0.9436524187443928, 0.5328774719056888, 0.5273949470161211, 0.5018568791474272, 0.5180123784323318, 0.5227289362318224, 0.5283818585082165, 0.555024788047332, 0.5054771879678981, 0.5641946178244264, 0.6127954104050284, 0.09926252155214965, 0.14019385552084407, 0.34002119539323217, 0.15668431848947417, 0.2148719498849302, 0.16799407366075048, 0.27440122222904606, 0.21479693419223944, 0.15063557210432954, 0.1809955574104345, 0.204743881987679, 0.1903164498033395, 0.17190451885817726, 0.11745555471293678, 0.1737912356959581, 0.19157326148777898, 0.16058814863704662, 0.24205140953376725, 0.056843982664038784, 0.2957464346916858, 0.14586642526332072, 0.16747508885913487, 0.193223344467792, 0.21921201212269192, 0.053488530930178024, 0.19145696232580434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08731747904963072, 0.07923928861506735, 0.02431990380313309, 9.999999999998899e-05, 9.999999999998899e-05, 0.003230246089533262, 0.08053566865996431, 0.053318034168765016, 0.0976926147699696, 0.09761871496780439, 0.012953283527825099, 0.04027880367792369, 0.23390150678588173, 0.054656955501509064, 0.05631452988603647, 0.09173220983806218, 0.058993144636766415, 0.24891807761239604, 0.11692533312954112, 0.08780536004184214, 0.06751690721863157, 0.11785316748450547, 0.21333947559312394, 0.08226592647578634, 0.13738089567880218, 0.028991517676424716, 0.04918320188768832, 0.09603909519411369, 0.05788590920863501, 0.22114038779158607, 0.18231476589304285, 0.09874815090765621, 0.05610420782826131, 0.5276995898641006, 0.5174314777411084, 0.5331908341880708, 0.5378905342656427, 0.51875555132759, 0.5175814907978232, 0.5594002042844003, 0.5184069375143694, 0.5391401319222929, 0.059827253381686596, 0.08189445776380833, 0.12363414847401277, 0.1548398143825076, 0.08352106847720042, 0.1440996368607197, 0.09458969796158434, 0.06432372933334007, 0.08926661837181704, 0.18118236874822502, 0.2740188790488103, 0.33713364060960327, 0.25640417353823197, 0.26095235020474983, 0.23407407402816305, 0.21568309059928248, 0.13328584481168693, 0.1391526506204711, 0.2524948478274387, 0.22408935029957133, 0.1592478568357949, 0.20467979151814275, 0.2066107467291013, 0.16964505771631289, 0.1790617984174907, 0.18169290901331558, 0.12291297393477052, 0.10239630323329618, 0.1952885211824248, 0.18967507326416766, 0.22106096969662437, 0.13288700277408827, 0.09972441813120514, 0.20216749167016956, 0.16661080045458132, 0.04381930877357898, 0.26085137879535913, 0.17267960924690173, 0.19139962364238783, 0.18080162911390085, 0.15122401748901704, 0.19196517651585054, 0.2718280609339674, 0.15970503423349824, 0.23002500346114496, 0.21015403927026455, 0.1959679720644547, 0.617865916896986, 0.186032141222774, 0.18299522220049746, 0.21042502491604098, 0.18964742138758384, 0.2105405412055874, 0.1659309284076539, 0.16482867679404678, 0.07660686291131791, 0.13572647342877386, 0.1736329865785199, 0.20245141087448748, 0.1090923050630358, 0.1543974124816455, 0.11511791685378792, 0.15434310944929108, 0.08344958508133327, 0.11162036485146742, 0.549103148214019, 0.876141982789874, 0.15343318902905534, 0.21144819933720183, 0.1689147332484634, 0.07328240088064153, 0.3623275772542618, 0.24873072040856392, 0.20719885823533246, 0.19227071972244358, 0.20374438778911852, 0.2896627837140905, 0.23333175991777366, 0.23249154225059243, 0.23534035701920153, 0.20565070843256272, 0.037237417932213246, 0.052526788393445156, 0.07097980581394892, 0.055999692635532505, 0.07098368761567986, 0.06790063097149357, 0.11054349481467818, 0.07817015974908392, 0.05615761313461076]}, "mutation_prompt": null}
{"id": "3fadd507-18d6-469a-86ad-1c5ca05763aa", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "99357e3b-0cf5-43fd-855c-9b687f2f0bd8", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "e9df4304-28fb-4857-8a3f-ebda723d89f2", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "335eba8c-57af-41df-806a-a28027a513ff", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "241e3e6b-8c83-4a43-95ee-94b042c0ce4a", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "c2cda2e1-28c1-45f7-9d35-74df3778cc7f", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strategy='adaptive'):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strategy = mutation_strategy\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                if self.mutation_strategy == 'adaptive':\n                    mutation_rate = min(0.1, 0.9 * (1 - fitness[i] / np.max(fitness)))\n                else:\n                    mutation_rate = self.mutation_rate\n\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Enhancing exploration by introducing a dynamic mutation strategy based on the individual's fitness performance.", "configspace": "", "generation": 87, "fitness": 0.23631828405513455, "feedback": "The algorithm DynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.7881862363449309, 0.7979424695643009, 0.7544091014498334, 0.7423118372359382, 0.7818026318505574, 0.7578076740125439, 0.7316513037359397, 0.7522481560208284, 0.7632832276263563, 0.23834209296825948, 0.05424353831016138, 0.03889668446539485, 9.999999999998899e-05, 0.00651263195365992, 0.008546466126080343, 0.06464236789665101, 0.014208905418132467, 0.03581198094971294, 0.1545732634615934, 0.07974074665238662, 0.04834221995038168, 0.15986971303862796, 0.08480142511572031, 0.11191193087026641, 0.061327125548620076, 0.09765278303390301, 0.097255864536125, 0.056726543450520195, 0.00749070380606176, 0.06932666762754436, 0.10812565898674387, 0.04942544417744099, 0.07610466607198108, 0.10172908520401147, 0.08765170433054448, 0.057948517708832914, 0.9754414638605408, 0.9603505663739156, 0.9834287228658191, 0.9697589486487188, 0.9590739097937249, 0.9370026884958488, 0.9713933565718127, 0.962779744003778, 0.9394355104168681, 0.5333065896703416, 0.5412870970479025, 0.5127358636568606, 0.5458085182006729, 0.5158323832827802, 0.5258342023814211, 0.5280381763489508, 0.48257204936047615, 0.49498625075241975, 0.23049212913081496, 0.14626272089810133, 0.17071866994897755, 0.23908297073692886, 0.34464017982269857, 0.21411981593703955, 0.23042621632451654, 0.2263849343014529, 0.2242506946291296, 0.14822323957388195, 0.1310561645932754, 0.12487818447380816, 0.1763767362038352, 0.15248513033923372, 0.12169627960081653, 0.16127558933447583, 0.15277490722562126, 0.13236808092409413, 0.19879876112010098, 0.05579714407544012, 0.2460549111208581, 0.16145080210166163, 0.18991963295941094, 0.1773822187092048, 0.21197810286103946, 0.06660278191276592, 0.15453171994772497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07781020886312084, 9.999999999998899e-05, 0.03235665381766717, 0.008072671569882228, 9.999999999998899e-05, 0.05540617220887201, 0.1209108799704871, 0.05153774529089605, 0.08819134535467787, 0.1025768560705499, 0.0030132904015787165, 0.04120521914613873, 0.23486017764143496, 0.06956025204749527, 0.07242811918616221, 0.11222407973232607, 0.07064756144449968, 0.21676759601050266, 0.11764784929863414, 0.07143440431320192, 0.06823827216037293, 0.12303974217217006, 0.1879054656975485, 0.0883745895503989, 0.11271200024754469, 0.05412172332376031, 0.050009477928940615, 0.265656872224173, 0.09861111813211287, 0.21612269866848588, 0.2124886221897404, 0.2581548728989248, 0.06862365778070767, 0.5030799923649587, 0.5067076657233405, 0.5394098629314863, 0.6132742390235341, 0.5000817645078999, 0.501919068286122, 0.5490522962864128, 0.5461520912120867, 0.5474121094971656, 0.07657479418217461, 0.16749169185518453, 0.10514052945380048, 0.11014114551251875, 0.026146648305947928, 0.08361957581714652, 0.10919144329727237, 0.09165889909592118, 0.09087960075862556, 0.24071295963640693, 0.19496025896498048, 0.266293754763561, 0.28127289898655083, 0.13972413101793313, 0.19780368852555652, 0.12138814350325589, 0.15077922999111193, 0.14881141436900247, 0.20749794525340748, 0.27207016846774046, 0.2350680778999883, 0.18106520067215048, 0.20653379722852194, 0.17205043987291557, 0.2360325154472187, 0.19321116799825144, 0.10118199961161645, 0.17627766316817428, 0.17959046868509299, 0.07331393202167924, 0.1270468047110539, 0.16217083108298125, 0.10385247254409768, 0.17680677533864653, 0.17317651799169032, 0.04517858293113919, 0.2577112828836601, 0.15577602057231343, 0.19192221586265612, 0.22172646611701607, 0.17676031158126793, 0.20862972426001636, 0.2715122999527474, 0.15964133191157848, 0.2150357807418951, 0.21940597137688167, 0.20501555536459193, 0.22637647444078135, 0.1989245768832515, 0.1803126533868562, 0.1982322463515176, 0.17999738707497548, 0.1875742526549563, 0.17130790841430188, 0.1627488269709434, 0.07656332417516265, 0.13613154670197514, 0.1736072623583781, 0.20240717539533026, 0.10930467568629643, 0.1528458855802095, 0.11518246109700103, 0.15348970160327058, 0.08345637995088451, 0.11269470648570457, 0.7349886476332141, 0.8214095782868412, 0.1533239158796048, 0.21144045530954092, 0.16687828555199036, 0.07328768549630438, 0.3150346688809609, 0.19697959983947422, 0.21945988419431806, 0.2004879351553387, 0.22917502623043495, 0.23122786836690568, 0.23333175991777366, 0.257986268830775, 0.201154425792761, 0.24422240378423676, 0.041563253686359714, 0.07880626224055665, 0.0858378057792124, 0.08630290140688213, 0.09660362758159846, 0.09989971562335631, 0.10634355270450346, 0.04552476814430462, 0.05612306957571256]}, "mutation_prompt": null}
{"id": "e658a6ca-9468-46e5-b1ff-10cb6badb173", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, crossover_rate=0.2, mutation_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.crossover_rate = crossover_rate\n        self.mutation_range = mutation_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.crossover_rate:\n                        parent_indices = np.random.choice(self.population_size, 2, replace=False)\n                        parent1, parent2 = population[parent_indices]\n                        crossover_point = np.random.randint(1, self.dim)\n                        new_solution = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n                    else:\n                        if np.random.rand() < self.mutation_rate:\n                            mutation = np.random.uniform(-self.mutation_range, self.mutation_range, self.dim)\n                            new_solution = population[i] + mutation\n                        else:\n                            levy = 0.001 * np.random.standard_cauchy(self.dim)\n                            new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Introducing dynamic mutation and crossover operators to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"bad operand type for unary -: 'tuple'\").", "error": "TypeError(\"bad operand type for unary -: 'tuple'\")", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {}, "mutation_prompt": null}
{"id": "6f031575-06b9-49cb-9659-e640201d1947", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "76b45233-d6a1-4ad0-9b3d-e264b7260f8d", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "fa87b713-ff70-40c0-9935-f00bbb4e7496", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "DynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving population diversity by incorporating a mutation operator to explore new regions of the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.752739659517315, 0.7757879568171506, 0.7890051540777298, 0.7570389312991154, 0.7219220582477421, 0.7632069438100093, 0.7565210483178832, 0.7437945106621117, 0.8021104543682318, 0.2410396775791953, 0.06169420323417418, 0.03889668446539485, 0.016353635070622485, 0.004834229679945734, 0.10090840573555793, 0.07403791186402409, 0.009122353041741027, 0.05307722289913186, 0.08686720545402205, 0.06717725573089772, 0.11307754804775338, 0.11578274452166026, 0.08220797950887426, 0.07863465894376476, 0.05174965223737926, 0.07733181951960177, 0.08669769512819747, 0.09290984728061924, 0.030458434111003907, 0.11756636308512314, 0.11401989719473726, 0.04479662646707516, 0.07583433258385319, 0.11636550994672556, 0.09197013344700622, 0.09023653691519429, 0.9757457166302004, 0.9613903734655583, 0.9834287228658191, 0.9665991103691534, 0.9589642824407871, 0.962071282676504, 0.9626787746753074, 0.9673705645140291, 0.9451994706506087, 0.5319846063657824, 0.5218445022181113, 0.5110826454055883, 0.505477195180323, 0.5216422123570129, 0.5141250769041181, 0.47461339915463907, 0.5250020087924313, 0.5284182035209823, 0.36620407760053364, 0.17007358786354254, 0.16941647753378652, 0.35712034030860695, 0.18348352584011174, 0.21486954166798033, 0.23042621632451654, 0.725727338258422, 0.2143271734399781, 0.14723063951932636, 0.17596739287893037, 0.13871969307752807, 0.16894107515755663, 0.18687897320168623, 0.16459118957145824, 0.161247127462674, 0.17358702885424426, 0.17295058017260345, 0.24460093552578266, 0.06013247405549993, 0.295805098489225, 0.13390511205165478, 0.17924115173344612, 0.17881797745396177, 0.21977117776699528, 0.00014496112210216072, 0.19634105536070234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08450503752910532, 9.999999999998899e-05, 0.017766744729172057, 0.006705802078137313, 9.999999999998899e-05, 0.032735343672973816, 0.0805540236181167, 0.053647657285443184, 0.09770434521335214, 0.1025768560705499, 0.011923995437231327, 0.03915880268113525, 0.222776072888918, 0.05603365020072337, 0.055710657339006375, 0.08130137662553427, 0.08482605317651848, 0.22893002617702551, 0.11764784929863414, 0.08781657937918774, 0.06823827216037293, 0.11782819684940693, 0.22325929961179658, 0.0883745895503989, 0.11029656564484613, 0.06268798275341836, 0.047489537082177735, 0.1289668968125327, 0.06874008782823726, 0.21612269866848588, 0.18662262195072055, 0.1103295547315345, 0.07761360195307565, 0.5278244059009769, 0.5310690166141759, 0.5329044501982414, 0.5079670020990048, 0.5198108590997121, 0.5322416002307271, 0.535398366619811, 0.5890504658611542, 0.5464133128807387, 0.09301649605532625, 0.10661781710422802, 0.11514985094689434, 0.1548133708599545, 0.06063874384454537, 0.09628195692620611, 0.07050732897774237, 0.08161943502294489, 0.08299362797027587, 0.2567726765207268, 0.2785319673553832, 0.3372188811576411, 0.25923560986404504, 0.22264382242466363, 0.1763677301622032, 0.1742620239005055, 0.19608906673046056, 0.17474807826565975, 0.30916584126730673, 0.296997886587418, 0.18317125113200683, 0.1903343210820927, 0.16893409176439178, 0.2138477978538873, 0.18053418792359266, 0.17700118653834795, 0.11901859491444011, 0.10245464866107923, 0.21675671435720567, 0.2551881649401423, 0.22803069267576948, 0.13953851384418448, 0.17166597443736376, 0.19875217185533212, 0.17068141690563243, 0.044134138574612014, 0.26083006393022057, 0.1722036550488627, 0.20036187192119082, 0.1994906917825967, 0.14857583162574606, 0.21020080652043993, 0.27183953389149584, 0.18842144830579932, 0.230024854085916, 0.21060695824581777, 0.19568753138252126, 0.19310109177457613, 0.186038026868651, 0.19106120494026813, 0.20943535367404476, 0.17834714100619764, 0.19023011966972936, 0.16309705348606063, 0.1647252309127305, 0.07659313934674716, 0.13532796017733706, 0.17365080783979414, 0.20240499388313427, 0.10930467568629643, 0.15438482673693577, 0.11507022457805216, 0.154356873362552, 0.0834001249217885, 0.1120032433198831, 0.5374651756550871, 0.9188367592037282, 0.15253015398438385, 0.21210114299364535, 0.16885328203212446, 0.07327124559834663, 0.3687118613483492, 0.24870928195418152, 0.19572744205334225, 0.19226327450440073, 0.20001098378139737, 0.2895763624831511, 0.23333175991777366, 0.23250738425699258, 0.24296103003191605, 0.20565070843256272, 0.03941547970285009, 0.07157635963497033, 0.07825485864590742, 0.05598027425461405, 0.1176400838783187, 0.07928571294797349, 0.08935302669257383, 0.05479519679070888, 0.05615945852953541]}, "mutation_prompt": null}
{"id": "5174c8c2-170e-4700-bd4c-4630cffc089f", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation = np.random.uniform(-1, 1, self.dim) * self.mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Enhancing diversity in the search by incorporating a novel adaptive mutation mechanism based on local fitness information.", "configspace": "", "generation": 92, "fitness": 0.24243475584715976, "feedback": "The algorithm EnhancedDynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "be76fbcc-5d9c-4eaa-b8eb-f8d8de9ca892", "metadata": {"aucs": [0.7567223988833203, 0.7452843577777197, 0.8103118486795577, 0.7852220438614161, 0.7551283284635518, 0.8602701241083422, 0.7679173232134637, 0.7807720384071161, 0.8136049701740482, 0.3189918308867945, 0.06835309516296617, 0.1114692048257866, 0.1854809046659468, 0.0038352944348191143, 0.0972860960900358, 0.06432887074697669, 0.013689835666527483, 0.03377477418515551, 0.0943675183488547, 0.06711824735402316, 0.1308879380157748, 0.11573687695009538, 0.08224421033818485, 0.06320145373699249, 0.051829805673967, 0.06827336590835309, 0.10549636727209766, 0.05854479640454324, 0.030382833165767842, 0.11201856232044305, 0.1098436325982346, 0.0756526119524733, 0.05006234226708817, 0.1382189578361338, 0.09210219689799437, 0.09810712184977799, 0.9756680847926115, 0.9648259342628018, 0.9833468658587413, 0.966514160827524, 0.959171829967682, 0.9582621143999763, 0.9625901577930417, 0.9647313200097918, 0.943872172628589, 0.510929470916152, 0.5361606570799156, 0.5828725532577692, 0.5092520636455096, 0.5373122388299942, 0.5522685208238751, 0.4996874599288297, 0.49388505805027805, 0.5513422048274665, 0.3814626858605846, 0.09926890407567446, 0.14019821425308565, 0.35699308787129225, 0.1662925160891605, 0.21492323417345127, 0.17108981559722836, 0.20944402597791545, 0.13708914508058756, 0.1470853522276504, 0.17424627812208604, 0.15076596419218535, 0.18722255746398797, 0.1701913902081431, 0.13897952384197798, 0.1631719200506042, 0.16477902965224567, 0.17177623953510446, 0.24166720524693996, 0.053219843159199476, 0.29551033670464444, 0.13408725650338404, 0.17782890028513754, 0.1783554100441952, 0.21972414462895973, 0.005665667094253868, 0.19555357572520582, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002652126869364668, 0.08445273752970883, 0.07310641424869446, 0.037971328893786405, 0.002114599643773696, 9.999999999998899e-05, 0.0004415859458658522, 0.08036334893577446, 0.05369522841921337, 0.09763182762802736, 0.10181378982387379, 0.01195015815878342, 0.039148194795194824, 0.22285135219845953, 0.06874069547164618, 0.06278063390906174, 0.08120778405894657, 0.08432009376422667, 0.23403704709975837, 0.12226430184462211, 0.08918629690350932, 0.06814342031468901, 0.11775128570505089, 0.1657361511415123, 0.08850983915988164, 0.10982860167379549, 0.06256213997342508, 0.04648601443170863, 0.14237902409388403, 0.07311174083562988, 0.21575570396526256, 0.1835290784189002, 0.1115410000195135, 0.0625392226183259, 0.5406447020372537, 0.5205631792579323, 0.5325361480789752, 0.544160038402798, 0.5082974732055954, 0.5498807168017433, 0.5252244617074064, 0.5229821075336456, 0.5458425569532203, 0.0924944012539669, 0.06769240886636074, 0.1241181378621039, 0.15472838969272074, 0.07357180565789134, 0.09626284280060371, 0.09441122266223212, 0.11145084664545901, 0.08667849429723318, 0.3567967696338207, 0.3097031036765163, 0.317987377887058, 0.25795295573490296, 0.2733870545331393, 0.1883862994134622, 0.1340985688060813, 0.23151832649197013, 0.20265212740548721, 0.2733753900672232, 0.19495678461253196, 0.1585386707071309, 0.20365434514891334, 0.16954061701227818, 0.17176399311470902, 0.19484463536728625, 0.17566129058124202, 0.1190928743017945, 0.10158393382867759, 0.23318550965134932, 0.22589979387413706, 0.21838114150195842, 0.18173867920629305, 0.09911254844809425, 0.19873772292795922, 0.16852286933110006, 0.04357473125323397, 0.2609108353063707, 0.17270620455112307, 0.19139962364238783, 0.1994906917825967, 0.1485821480397519, 0.19196517651585054, 0.2718115522068655, 0.16718095124062404, 0.20249695586333538, 0.20253660196661616, 0.1959458717558208, 0.22507908232842844, 0.21928046149535252, 0.19099521056511615, 0.20989750303711996, 0.1783648855411073, 0.21063434452663032, 0.16600228892858737, 0.16468755671461444, 0.07659683145633511, 0.1354795677998094, 0.1736454109385508, 0.2024024821601299, 0.10930202903728636, 0.15437789057411078, 0.11510475662398822, 0.15434447095560533, 0.0834528367453089, 0.11197104286430293, 0.6925462351079299, 0.9176048577082226, 0.15304045169874647, 0.21210905649873135, 0.1688388046253001, 0.07328213855795074, 0.34994796630787206, 0.24872669045956053, 0.19573966830003364, 0.1937183829969611, 0.24368784201954485, 0.28958929202750017, 0.23333175991777366, 0.232484222755166, 0.23537109487529728, 0.20565512066764757, 0.04519030874527252, 0.06585085671968349, 0.06691184237029901, 0.07981914252581845, 0.11034599046870153, 0.13938665852617926, 0.083306613842829, 0.0778327353332714, 0.05642309152978309]}, "mutation_prompt": null}
{"id": "6a5184c7-e6d9-4d0e-851f-77a3d12caa39", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1, mutation_strength_min=0.1, mutation_strength_max=0.5, mutation_strength_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n        self.mutation_strength_min = mutation_strength_min\n        self.mutation_strength_max = mutation_strength_max\n        self.mutation_strength_range = mutation_strength_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_strength = self.mutation_strength_min + (self.mutation_strength_max - self.mutation_strength_min) * np.random.rand()\n                        mutation = np.random.uniform(-1, 1, self.dim) * mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving exploration-exploitation balance by introducing a dynamic mutation strategy based on individual fitness and population diversity.", "configspace": "", "generation": 93, "fitness": 0.24739738559164723, "feedback": "The algorithm EnhancedDynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "5174c8c2-170e-4700-bd4c-4630cffc089f", "metadata": {"aucs": [0.7943182798280477, 0.7738759804836313, 0.859247539512036, 0.7989179669583396, 0.8117915960230984, 0.8034106477323377, 0.8087924564092521, 0.8134550283961511, 0.8317005380675269, 0.15996942446999562, 0.0312932236062099, 0.20092583801262776, 0.2673093313955268, 0.05336429270337362, 0.30847768214988636, 0.17153032411514801, 0.2268325449693459, 0.19627211526390298, 0.08888357971822658, 0.09011077574987081, 0.11063142600596243, 0.0988929869061167, 0.08215075044566422, 0.09445630718615627, 0.07225561278893788, 0.08779500294036957, 0.0801103806196144, 0.08440314597412657, 0.0532606612844162, 0.10369668953080946, 0.07781033563939377, 0.05925142740751288, 0.06507964457661497, 0.09279564458775347, 0.05336415581506404, 0.05788656771320089, 0.9766527317860234, 0.9377941725900054, 0.9827734461977553, 0.9596247691233857, 0.9506443427432217, 0.9663032422030936, 0.9453077665098233, 0.9609592120656075, 0.9249244490384324, 0.5363037188777934, 0.6055615410562962, 0.5569083247493356, 0.5595787845033409, 0.5721425550171504, 0.555637733653688, 0.5377622049176206, 0.554435671126154, 0.5551978259751602, 0.8490412994352116, 0.13913108007155628, 0.16982730268656854, 0.352733553850054, 0.8355585343279188, 0.21306198553346645, 0.150854764820613, 0.31192501185573407, 0.17873525886459551, 0.1604591366147402, 0.12178702012527287, 0.20476507216519835, 0.19814543578279709, 0.17934633522153254, 0.15768066582282825, 0.1315826587914627, 0.1275006607777237, 0.17110046157700654, 0.22063621931116373, 0.057860384779881646, 0.24978937914299149, 0.1847331282725715, 0.1689547745912805, 0.19394447711914775, 0.2566944261060755, 0.0012561421329284617, 0.1978953653077038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035123667742595344, 0.07658829908872833, 9.999999999998899e-05, 0.0024135069289447086, 9.999999999998899e-05, 0.0440551791720889, 0.11203790454617069, 0.03509390818449376, 0.06982253222136792, 0.06765365129384737, 0.012625195346221751, 0.023987568273667215, 0.18402406079041922, 0.026203705333639693, 0.048041876805778205, 0.23085809920882627, 0.07048232253761089, 0.21465405310128027, 0.1044397572949547, 0.08756119869422241, 0.058883516266903135, 0.07007593868333573, 0.25102051656945, 0.13218153971934987, 0.15308853281551715, 0.04519831051566148, 0.06654553945227804, 0.05127093351817258, 0.05062574596538105, 0.23508398003077902, 0.255763861807062, 0.2124009789879907, 0.05279845803558403, 0.5427793696462745, 0.5102150763667765, 0.5890816165158399, 0.509034991134302, 0.5247956753502546, 0.528717141255658, 0.5727079738957881, 0.5293793528228262, 0.5512476625276741, 0.051987839991951335, 0.07635641316082542, 0.09557072131953448, 0.11057620109126653, 0.03782213207834706, 0.10339481501014836, 0.041744489381493444, 0.060660635054114787, 0.08313719676290054, 0.1965029336025842, 0.3954271226075845, 0.19271039569876058, 0.26807044133658875, 0.25706533837070833, 0.1806403802616664, 0.29244914828750945, 0.16302731328554, 0.14781452300008346, 0.1526691337025775, 0.32097342171508636, 0.12227695101063563, 0.2075796117471833, 0.17286006461392645, 0.13112177229503486, 0.15902620170754111, 0.1259994587542027, 0.10148584298585317, 0.10008149943909994, 0.26912444319076667, 0.10572803017281163, 0.1947505388569779, 0.1286213464795838, 0.08887537735635831, 0.1803231665484818, 0.10476586746039263, 0.04081878318866161, 0.29658303133211006, 0.15550655366076915, 0.19112580446758343, 0.2757119120021826, 0.1638016385500174, 0.19716799311058708, 0.25296780449891776, 0.16555356564712498, 0.18657993295588815, 0.20687066446799152, 0.21075286458888798, 0.19193418633666504, 0.17045280698287135, 0.19081478584579958, 0.20921505248532934, 0.19038254433436208, 0.20950315402217834, 0.16840460399522217, 0.1626287616699601, 0.07658923427919795, 0.13528916375580013, 0.17319264847555382, 0.20190576902152202, 0.10881580302627047, 0.15218914130826966, 0.1152000961317724, 0.1541587469795821, 0.0834974749158669, 0.11266419312973719, 0.6561737277064825, 0.4611599499249328, 0.15112833746180898, 0.21132794826232404, 0.1680345319600156, 0.13035348198838126, 0.3153881760316587, 0.22232842662874186, 0.1916238262167429, 0.22581190006137353, 0.2203596035086417, 0.22077318150354064, 0.2306232726789631, 0.2135341045313247, 0.21765374303841234, 0.24552427064768056, 0.04886384507486763, 0.077381240853447, 0.06881181757996147, 0.062071474389825965, 0.08304888902547969, 0.11645691803787217, 0.09228848060248906, 0.045817712576035396, 0.06290081334411501]}, "mutation_prompt": null}
{"id": "19cf72c6-50bb-4f1a-9b8f-fd063de7331a", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1, mutation_strength_min=0.1, mutation_strength_max=0.5, mutation_strength_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n        self.mutation_strength_min = mutation_strength_min\n        self.mutation_strength_max = mutation_strength_max\n        self.mutation_strength_range = mutation_strength_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_strength = self.mutation_strength_min + (self.mutation_strength_max - self.mutation_strength_min) * np.random.rand()\n                        mutation = np.random.uniform(-1, 1, self.dim) * mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving exploration-exploitation balance by introducing a dynamic mutation strategy based on individual fitness and population diversity.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6a5184c7-e6d9-4d0e-851f-77a3d12caa39", "metadata": {"aucs": [0.7943182798280477, 0.7738759804836313, 0.859247539512036, 0.7989179669583396, 0.8117915960230984, 0.8034106477323377, 0.8087924564092521, 0.8134550283961511, 0.8317005380675269, 0.15996942446999562, 0.0312932236062099, 0.20092583801262776, 0.2673093313955268, 0.05336429270337362, 0.30847768214988636, 0.17153032411514801, 0.2268325449693459, 0.19627211526390298, 0.08888357971822658, 0.09011077574987081, 0.11063142600596243, 0.0988929869061167, 0.08215075044566422, 0.09445630718615627, 0.07225561278893788, 0.08779500294036957, 0.0801103806196144, 0.08440314597412657, 0.0532606612844162, 0.10369668953080946, 0.07781033563939377, 0.05925142740751288, 0.06507964457661497, 0.09279564458775347, 0.05336415581506404, 0.05788656771320089, 0.9766527317860234, 0.9377941725900054, 0.9827734461977553, 0.9596247691233857, 0.9506443427432217, 0.9663032422030936, 0.9453077665098233, 0.9609592120656075, 0.9249244490384324, 0.5363037188777934, 0.6055615410562962, 0.5569083247493356, 0.5595787845033409, 0.5721425550171504, 0.555637733653688, 0.5377622049176206, 0.554435671126154, 0.5551978259751602, 0.8490412994352116, 0.13913108007155628, 0.16982730268656854, 0.352733553850054, 0.8355585343279188, 0.21306198553346645, 0.150854764820613, 0.31192501185573407, 0.17873525886459551, 0.1604591366147402, 0.12178702012527287, 0.20476507216519835, 0.19814543578279709, 0.17934633522153254, 0.15768066582282825, 0.1315826587914627, 0.1275006607777237, 0.17110046157700654, 0.22063621931116373, 0.057860384779881646, 0.24978937914299149, 0.1847331282725715, 0.1689547745912805, 0.19394447711914775, 0.2566944261060755, 0.0012561421329284617, 0.1978953653077038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035123667742595344, 0.07658829908872833, 9.999999999998899e-05, 0.0024135069289447086, 9.999999999998899e-05, 0.0440551791720889, 0.11203790454617069, 0.03509390818449376, 0.06982253222136792, 0.06765365129384737, 0.012625195346221751, 0.023987568273667215, 0.18402406079041922, 0.026203705333639693, 0.048041876805778205, 0.23085809920882627, 0.07048232253761089, 0.21465405310128027, 0.1044397572949547, 0.08756119869422241, 0.058883516266903135, 0.07007593868333573, 0.25102051656945, 0.13218153971934987, 0.15308853281551715, 0.04519831051566148, 0.06654553945227804, 0.05127093351817258, 0.05062574596538105, 0.23508398003077902, 0.255763861807062, 0.2124009789879907, 0.05279845803558403, 0.5427793696462745, 0.5102150763667765, 0.5890816165158399, 0.509034991134302, 0.5247956753502546, 0.528717141255658, 0.5727079738957881, 0.5293793528228262, 0.5512476625276741, 0.051987839991951335, 0.07635641316082542, 0.09557072131953448, 0.11057620109126653, 0.03782213207834706, 0.10339481501014836, 0.041744489381493444, 0.060660635054114787, 0.08313719676290054, 0.1965029336025842, 0.3954271226075845, 0.19271039569876058, 0.26807044133658875, 0.25706533837070833, 0.1806403802616664, 0.29244914828750945, 0.16302731328554, 0.14781452300008346, 0.1526691337025775, 0.32097342171508636, 0.12227695101063563, 0.2075796117471833, 0.17286006461392645, 0.13112177229503486, 0.15902620170754111, 0.1259994587542027, 0.10148584298585317, 0.10008149943909994, 0.26912444319076667, 0.10572803017281163, 0.1947505388569779, 0.1286213464795838, 0.08887537735635831, 0.1803231665484818, 0.10476586746039263, 0.04081878318866161, 0.29658303133211006, 0.15550655366076915, 0.19112580446758343, 0.2757119120021826, 0.1638016385500174, 0.19716799311058708, 0.25296780449891776, 0.16555356564712498, 0.18657993295588815, 0.20687066446799152, 0.21075286458888798, 0.19193418633666504, 0.17045280698287135, 0.19081478584579958, 0.20921505248532934, 0.19038254433436208, 0.20950315402217834, 0.16840460399522217, 0.1626287616699601, 0.07658923427919795, 0.13528916375580013, 0.17319264847555382, 0.20190576902152202, 0.10881580302627047, 0.15218914130826966, 0.1152000961317724, 0.1541587469795821, 0.0834974749158669, 0.11266419312973719, 0.6561737277064825, 0.4611599499249328, 0.15112833746180898, 0.21132794826232404, 0.1680345319600156, 0.13035348198838126, 0.3153881760316587, 0.22232842662874186, 0.1916238262167429, 0.22581190006137353, 0.2203596035086417, 0.22077318150354064, 0.2306232726789631, 0.2135341045313247, 0.21765374303841234, 0.24552427064768056, 0.04886384507486763, 0.077381240853447, 0.06881181757996147, 0.062071474389825965, 0.08304888902547969, 0.11645691803787217, 0.09228848060248906, 0.045817712576035396, 0.06290081334411501]}, "mutation_prompt": null}
{"id": "3f6070e4-bfe3-4a15-a9cc-3a500eacb3eb", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1, mutation_strength_min=0.1, mutation_strength_max=0.5, mutation_strength_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n        self.mutation_strength_min = mutation_strength_min\n        self.mutation_strength_max = mutation_strength_max\n        self.mutation_strength_range = mutation_strength_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_strength = self.mutation_strength_min + (self.mutation_strength_max - self.mutation_strength_min) * np.random.rand()\n                        mutation = np.random.uniform(-1, 1, self.dim) * mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving exploration-exploitation balance by introducing a dynamic mutation strategy based on individual fitness and population diversity.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6a5184c7-e6d9-4d0e-851f-77a3d12caa39", "metadata": {"aucs": [0.7943182798280477, 0.7738759804836313, 0.859247539512036, 0.7989179669583396, 0.8117915960230984, 0.8034106477323377, 0.8087924564092521, 0.8134550283961511, 0.8317005380675269, 0.15996942446999562, 0.0312932236062099, 0.20092583801262776, 0.2673093313955268, 0.05336429270337362, 0.30847768214988636, 0.17153032411514801, 0.2268325449693459, 0.19627211526390298, 0.08888357971822658, 0.09011077574987081, 0.11063142600596243, 0.0988929869061167, 0.08215075044566422, 0.09445630718615627, 0.07225561278893788, 0.08779500294036957, 0.0801103806196144, 0.08440314597412657, 0.0532606612844162, 0.10369668953080946, 0.07781033563939377, 0.05925142740751288, 0.06507964457661497, 0.09279564458775347, 0.05336415581506404, 0.05788656771320089, 0.9766527317860234, 0.9377941725900054, 0.9827734461977553, 0.9596247691233857, 0.9506443427432217, 0.9663032422030936, 0.9453077665098233, 0.9609592120656075, 0.9249244490384324, 0.5363037188777934, 0.6055615410562962, 0.5569083247493356, 0.5595787845033409, 0.5721425550171504, 0.555637733653688, 0.5377622049176206, 0.554435671126154, 0.5551978259751602, 0.8490412994352116, 0.13913108007155628, 0.16982730268656854, 0.352733553850054, 0.8355585343279188, 0.21306198553346645, 0.150854764820613, 0.31192501185573407, 0.17873525886459551, 0.1604591366147402, 0.12178702012527287, 0.20476507216519835, 0.19814543578279709, 0.17934633522153254, 0.15768066582282825, 0.1315826587914627, 0.1275006607777237, 0.17110046157700654, 0.22063621931116373, 0.057860384779881646, 0.24978937914299149, 0.1847331282725715, 0.1689547745912805, 0.19394447711914775, 0.2566944261060755, 0.0012561421329284617, 0.1978953653077038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035123667742595344, 0.07658829908872833, 9.999999999998899e-05, 0.0024135069289447086, 9.999999999998899e-05, 0.0440551791720889, 0.11203790454617069, 0.03509390818449376, 0.06982253222136792, 0.06765365129384737, 0.012625195346221751, 0.023987568273667215, 0.18402406079041922, 0.026203705333639693, 0.048041876805778205, 0.23085809920882627, 0.07048232253761089, 0.21465405310128027, 0.1044397572949547, 0.08756119869422241, 0.058883516266903135, 0.07007593868333573, 0.25102051656945, 0.13218153971934987, 0.15308853281551715, 0.04519831051566148, 0.06654553945227804, 0.05127093351817258, 0.05062574596538105, 0.23508398003077902, 0.255763861807062, 0.2124009789879907, 0.05279845803558403, 0.5427793696462745, 0.5102150763667765, 0.5890816165158399, 0.509034991134302, 0.5247956753502546, 0.528717141255658, 0.5727079738957881, 0.5293793528228262, 0.5512476625276741, 0.051987839991951335, 0.07635641316082542, 0.09557072131953448, 0.11057620109126653, 0.03782213207834706, 0.10339481501014836, 0.041744489381493444, 0.060660635054114787, 0.08313719676290054, 0.1965029336025842, 0.3954271226075845, 0.19271039569876058, 0.26807044133658875, 0.25706533837070833, 0.1806403802616664, 0.29244914828750945, 0.16302731328554, 0.14781452300008346, 0.1526691337025775, 0.32097342171508636, 0.12227695101063563, 0.2075796117471833, 0.17286006461392645, 0.13112177229503486, 0.15902620170754111, 0.1259994587542027, 0.10148584298585317, 0.10008149943909994, 0.26912444319076667, 0.10572803017281163, 0.1947505388569779, 0.1286213464795838, 0.08887537735635831, 0.1803231665484818, 0.10476586746039263, 0.04081878318866161, 0.29658303133211006, 0.15550655366076915, 0.19112580446758343, 0.2757119120021826, 0.1638016385500174, 0.19716799311058708, 0.25296780449891776, 0.16555356564712498, 0.18657993295588815, 0.20687066446799152, 0.21075286458888798, 0.19193418633666504, 0.17045280698287135, 0.19081478584579958, 0.20921505248532934, 0.19038254433436208, 0.20950315402217834, 0.16840460399522217, 0.1626287616699601, 0.07658923427919795, 0.13528916375580013, 0.17319264847555382, 0.20190576902152202, 0.10881580302627047, 0.15218914130826966, 0.1152000961317724, 0.1541587469795821, 0.0834974749158669, 0.11266419312973719, 0.6561737277064825, 0.4611599499249328, 0.15112833746180898, 0.21132794826232404, 0.1680345319600156, 0.13035348198838126, 0.3153881760316587, 0.22232842662874186, 0.1916238262167429, 0.22581190006137353, 0.2203596035086417, 0.22077318150354064, 0.2306232726789631, 0.2135341045313247, 0.21765374303841234, 0.24552427064768056, 0.04886384507486763, 0.077381240853447, 0.06881181757996147, 0.062071474389825965, 0.08304888902547969, 0.11645691803787217, 0.09228848060248906, 0.045817712576035396, 0.06290081334411501]}, "mutation_prompt": null}
{"id": "79569a78-fdd3-40b6-80d2-62461bbecfb3", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1, mutation_strength_min=0.1, mutation_strength_max=0.5, mutation_strength_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n        self.mutation_strength_min = mutation_strength_min\n        self.mutation_strength_max = mutation_strength_max\n        self.mutation_strength_range = mutation_strength_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_strength = self.mutation_strength_min + (self.mutation_strength_max - self.mutation_strength_min) * np.random.rand()\n                        mutation = np.random.uniform(-1, 1, self.dim) * mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)  # Changed mutation to Levy flight\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Introducing a dynamic mutation strategy based on Levy flights to enhance exploration capabilities.", "configspace": "", "generation": 96, "fitness": 0.24739738559164723, "feedback": "The algorithm EnhancedDynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "6a5184c7-e6d9-4d0e-851f-77a3d12caa39", "metadata": {"aucs": [0.7943182798280477, 0.7738759804836313, 0.859247539512036, 0.7989179669583396, 0.8117915960230984, 0.8034106477323377, 0.8087924564092521, 0.8134550283961511, 0.8317005380675269, 0.15996942446999562, 0.0312932236062099, 0.20092583801262776, 0.2673093313955268, 0.05336429270337362, 0.30847768214988636, 0.17153032411514801, 0.2268325449693459, 0.19627211526390298, 0.08888357971822658, 0.09011077574987081, 0.11063142600596243, 0.0988929869061167, 0.08215075044566422, 0.09445630718615627, 0.07225561278893788, 0.08779500294036957, 0.0801103806196144, 0.08440314597412657, 0.0532606612844162, 0.10369668953080946, 0.07781033563939377, 0.05925142740751288, 0.06507964457661497, 0.09279564458775347, 0.05336415581506404, 0.05788656771320089, 0.9766527317860234, 0.9377941725900054, 0.9827734461977553, 0.9596247691233857, 0.9506443427432217, 0.9663032422030936, 0.9453077665098233, 0.9609592120656075, 0.9249244490384324, 0.5363037188777934, 0.6055615410562962, 0.5569083247493356, 0.5595787845033409, 0.5721425550171504, 0.555637733653688, 0.5377622049176206, 0.554435671126154, 0.5551978259751602, 0.8490412994352116, 0.13913108007155628, 0.16982730268656854, 0.352733553850054, 0.8355585343279188, 0.21306198553346645, 0.150854764820613, 0.31192501185573407, 0.17873525886459551, 0.1604591366147402, 0.12178702012527287, 0.20476507216519835, 0.19814543578279709, 0.17934633522153254, 0.15768066582282825, 0.1315826587914627, 0.1275006607777237, 0.17110046157700654, 0.22063621931116373, 0.057860384779881646, 0.24978937914299149, 0.1847331282725715, 0.1689547745912805, 0.19394447711914775, 0.2566944261060755, 0.0012561421329284617, 0.1978953653077038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035123667742595344, 0.07658829908872833, 9.999999999998899e-05, 0.0024135069289447086, 9.999999999998899e-05, 0.0440551791720889, 0.11203790454617069, 0.03509390818449376, 0.06982253222136792, 0.06765365129384737, 0.012625195346221751, 0.023987568273667215, 0.18402406079041922, 0.026203705333639693, 0.048041876805778205, 0.23085809920882627, 0.07048232253761089, 0.21465405310128027, 0.1044397572949547, 0.08756119869422241, 0.058883516266903135, 0.07007593868333573, 0.25102051656945, 0.13218153971934987, 0.15308853281551715, 0.04519831051566148, 0.06654553945227804, 0.05127093351817258, 0.05062574596538105, 0.23508398003077902, 0.255763861807062, 0.2124009789879907, 0.05279845803558403, 0.5427793696462745, 0.5102150763667765, 0.5890816165158399, 0.509034991134302, 0.5247956753502546, 0.528717141255658, 0.5727079738957881, 0.5293793528228262, 0.5512476625276741, 0.051987839991951335, 0.07635641316082542, 0.09557072131953448, 0.11057620109126653, 0.03782213207834706, 0.10339481501014836, 0.041744489381493444, 0.060660635054114787, 0.08313719676290054, 0.1965029336025842, 0.3954271226075845, 0.19271039569876058, 0.26807044133658875, 0.25706533837070833, 0.1806403802616664, 0.29244914828750945, 0.16302731328554, 0.14781452300008346, 0.1526691337025775, 0.32097342171508636, 0.12227695101063563, 0.2075796117471833, 0.17286006461392645, 0.13112177229503486, 0.15902620170754111, 0.1259994587542027, 0.10148584298585317, 0.10008149943909994, 0.26912444319076667, 0.10572803017281163, 0.1947505388569779, 0.1286213464795838, 0.08887537735635831, 0.1803231665484818, 0.10476586746039263, 0.04081878318866161, 0.29658303133211006, 0.15550655366076915, 0.19112580446758343, 0.2757119120021826, 0.1638016385500174, 0.19716799311058708, 0.25296780449891776, 0.16555356564712498, 0.18657993295588815, 0.20687066446799152, 0.21075286458888798, 0.19193418633666504, 0.17045280698287135, 0.19081478584579958, 0.20921505248532934, 0.19038254433436208, 0.20950315402217834, 0.16840460399522217, 0.1626287616699601, 0.07658923427919795, 0.13528916375580013, 0.17319264847555382, 0.20190576902152202, 0.10881580302627047, 0.15218914130826966, 0.1152000961317724, 0.1541587469795821, 0.0834974749158669, 0.11266419312973719, 0.6561737277064825, 0.4611599499249328, 0.15112833746180898, 0.21132794826232404, 0.1680345319600156, 0.13035348198838126, 0.3153881760316587, 0.22232842662874186, 0.1916238262167429, 0.22581190006137353, 0.2203596035086417, 0.22077318150354064, 0.2306232726789631, 0.2135341045313247, 0.21765374303841234, 0.24552427064768056, 0.04886384507486763, 0.077381240853447, 0.06881181757996147, 0.062071474389825965, 0.08304888902547969, 0.11645691803787217, 0.09228848060248906, 0.045817712576035396, 0.06290081334411501]}, "mutation_prompt": null}
{"id": "c00fd3dd-60cc-43b9-9bcf-392b3392b211", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1, mutation_strength_min=0.1, mutation_strength_max=0.5, mutation_strength_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n        self.mutation_strength_min = mutation_strength_min\n        self.mutation_strength_max = mutation_strength_max\n        self.mutation_strength_range = mutation_strength_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_strength = self.mutation_strength_min + (self.mutation_strength_max - self.mutation_strength_min) * np.random.rand()\n                        mutation = np.random.uniform(-1, 1, self.dim) * mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        if np.random.rand() < 0.5:  # Introduce opposition-based learning mutation\n                            opposite_solution = 2 * best_individual - population[i]\n                            new_solution = population[i] + np.random.uniform(0, 1, self.dim) * (opposite_solution - population[i])\n                        else:\n                            levy = 0.001 * np.random.standard_cauchy(self.dim)\n                            new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Enhancing population diversity by incorporating a novel mutation strategy based on opposition-based learning.", "configspace": "", "generation": 97, "fitness": 0.2416241234235603, "feedback": "The algorithm EnhancedDynamicAdaptivePopulationBatAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "6a5184c7-e6d9-4d0e-851f-77a3d12caa39", "metadata": {"aucs": [0.8208583017199648, 0.8204961744224988, 0.8858071366956914, 0.8455307470195151, 0.7956406052431316, 0.813875252077776, 0.8117340753517895, 0.8312597281460659, 0.9464019279442126, 0.2251727929992523, 0.1027714523966371, 0.27202968201571687, 0.25412521051490056, 0.09088555318267211, 0.0584869082162619, 0.07216411512070187, 0.502983084380521, 0.279926710777055, 0.09145373897880271, 0.07490285959383747, 0.024882372966376298, 0.06259375907749831, 0.055331058994830706, 0.11949016557463399, 0.056967000358643216, 0.048730444953629326, 0.039984751123963935, 0.11898232295726396, 0.03408152011352905, 0.03855969859718056, 0.12309307267546665, 0.042488653558188205, 0.12041941484544527, 0.1044812163775819, 0.029311015691937614, 0.08651080539119571, 0.9863445357420179, 0.9705223320081648, 0.9758452174909084, 0.9751369592796545, 0.979381093786753, 0.9750654337036679, 0.9744456808119379, 0.9803665613190113, 0.9660290988051514, 0.5919034201629712, 0.5936297279936174, 0.5029879052446573, 0.520945516230485, 0.6149618008353548, 0.50750861250232, 0.5336987332322445, 0.5961375540742534, 0.5317264226584281, 0.33950218917026354, 0.13372884976801014, 0.16819416231351314, 0.21735893593977662, 0.27833909475621044, 0.20744732063060323, 0.14787194517470703, 0.2402633461496294, 0.2679505132757669, 0.15866451461308084, 0.19458647602737367, 0.12786916400621773, 0.15919006967757454, 0.11260206452671906, 0.17440598633217852, 0.13718283682522248, 0.18910963599515052, 0.1445993703674423, 0.1918644415382631, 0.07473092449568197, 0.19517847182286063, 0.19140827469677735, 0.13612712929091653, 0.1480961385372872, 0.22921861979087454, 0.0945406792578608, 0.15286799451461797, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938723760385566, 0.09792163451859448, 0.08636102524258127, 0.04032408616474914, 9.999999999998899e-05, 9.999999999998899e-05, 0.003839509447121414, 0.07183770311120952, 0.03258390475651163, 0.08955077781181264, 0.09586884500019965, 0.0319704767285226, 0.030745064615021356, 0.166301168607348, 0.030221818953201862, 0.06306297054798415, 0.07866606003604304, 0.10803301384412167, 0.19792847051640816, 0.10452917565006414, 0.11918339187061289, 0.11438006252510169, 0.19723169142481367, 0.09510526766532423, 0.035183439965821295, 0.06894654028389391, 0.028343458549760725, 0.1235921171006501, 0.15710089338173816, 0.06792020865948145, 0.08441856707471651, 0.2139683439127743, 0.058014280373358096, 0.02692590512498516, 0.5409364222568653, 0.505598215031579, 0.5405332403130128, 0.5277424787690385, 0.5378694568142375, 0.5009100591682261, 0.5533928133548927, 0.5569924915152946, 0.55970963547663, 0.06437139077213727, 0.04107434616448258, 0.045230619725693755, 0.09280290556703108, 0.03621013541778917, 0.08113677900368288, 0.04599394277517754, 0.036375566549717075, 0.075238829418521, 0.2308863690596209, 0.258905946455083, 0.3334592443179303, 0.25906220311610684, 0.1595195673799934, 0.2017901262140538, 0.22569162134564458, 0.21731974784207442, 0.15374839664062967, 0.16913483086930714, 0.32336606289212255, 0.15920199529124457, 0.18789715892063208, 0.1661526745443016, 0.1604181602574014, 0.2022905883642423, 0.17367561915054996, 0.10146603519975161, 0.09057653543649069, 0.18927090670487545, 0.12839775934290243, 0.19735329872992402, 0.13718189298714623, 0.15651499071134822, 0.17696187802416385, 0.16523729380398477, 0.07147205155691772, 0.259728216288457, 0.16270284320269568, 0.19602642176035046, 0.2334406200399083, 0.1743430599939465, 0.16064120481030986, 0.22030651709503946, 0.19835051347091814, 0.21964627271774717, 0.2576786987624625, 0.21530183763608324, 0.18356978484794306, 0.22692456546583994, 0.207140228135974, 0.212485353480373, 0.17532011006466197, 0.2135140815366452, 0.170773372075967, 0.12000172134764198, 0.07662208411697502, 0.1364908636156129, 0.17351581784602654, 0.20233401789538197, 0.10880226052099884, 0.15374667716812185, 0.11526862848384445, 0.10399742875909945, 0.0834435277446135, 0.11283515403064981, 0.43798934878947404, 0.6685543238361278, 0.05206139023813683, 0.21376470184290253, 0.16751264721751502, 0.15776300350214112, 0.2944635979082074, 0.19410179583651677, 0.2081418020088659, 0.22360969155065114, 0.1999861335199603, 0.2396683013911397, 0.24009803288200815, 0.2440410731410697, 0.23916933148811748, 0.22796793392814607, 0.047743429103068724, 0.06452102280928707, 0.07041224615767738, 0.11998737641811474, 0.07667245180875903, 0.07836635149262838, 0.14291334681604073, 0.06739899302143826, 0.03808197011535519]}, "mutation_prompt": null}
{"id": "00089e22-e5b2-4ff7-ab16-42ecb8f81622", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImprovedRefined:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1, mutation_strength_min=0.1, mutation_strength_max=0.5, mutation_strength_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n        self.mutation_strength_min = mutation_strength_min\n        self.mutation_strength_max = mutation_strength_max\n        self.mutation_strength_range = mutation_strength_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_strength = self.mutation_strength_min + (self.mutation_strength_max - self.mutation_strength_min) * np.random.rand()\n                        mutation = np.random.uniform(-1, 1, self.dim) * mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n            else:\n                self.population_size = max(5, min(100, int(self.population_size * np.random.uniform(0.85, 1.15))))  # Adaptive population size update\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImprovedRefined", "description": "Enhancing convergence by incorporating a dynamic mutation strategy based on individual fitness and population diversity while introducing a new adaptive selection mechanism.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "6a5184c7-e6d9-4d0e-851f-77a3d12caa39", "metadata": {}, "mutation_prompt": null}
{"id": "1dc10be6-b9d9-40c0-9fa3-6d292bf57b96", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptivePopulationBatAlgorithmImproved:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9, gamma=0.1, freq_min=0.1, freq_max=1.0, loudness_range=(0.2, 0.8), pulse_rate_range=(0.1, 0.9), mutation_rate=0.1, mutation_strength=0.1, mutation_strength_min=0.1, mutation_strength_max=0.5, mutation_strength_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.gamma = gamma\n        self.freq_min = freq_min\n        self.freq_max = freq_max\n        self.loudness_range = loudness_range\n        self.pulse_rate_range = pulse_rate_range\n        self.mutation_rate = mutation_rate\n        self.mutation_strength = mutation_strength\n        self.mutation_strength_min = mutation_strength_min\n        self.mutation_strength_max = mutation_strength_max\n        self.mutation_strength_range = mutation_strength_range\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_individual = population[np.argmin(fitness)]\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                frequency = self.freq_min + (self.freq_max - self.freq_min) * np.random.rand()\n                velocity = population[i] + (population[i] - best_individual) * self.alpha + frequency * self.gamma\n                new_solution = population[i] + velocity\n                if np.random.rand() < self.pulse_rate:\n                    new_loudness = np.random.uniform(self.loudness_range[0], self.loudness_range[1])\n                    new_pulse_rate = np.random.uniform(self.pulse_rate_range[0], self.pulse_rate_range[1])\n                    new_solution = best_individual + np.random.uniform(-1, 1, self.dim) * new_loudness\n                else:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_strength = self.mutation_strength_min + (self.mutation_strength_max - self.mutation_strength_min) * np.random.rand()\n                        mutation = np.random.uniform(-1, 1, self.dim) * mutation_strength * (population[i] - best_individual)\n                        new_solution = population[i] + mutation\n                    else:\n                        levy = 0.001 * np.random.standard_cauchy(self.dim)\n                        new_solution = population[i] + levy\n\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n                    if new_fitness < func(best_individual):\n                        best_individual = new_solution\n\n                t += 1\n                if t >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:\n                self.population_size = max(2, min(100, int(self.population_size * np.random.uniform(0.9, 1.1))))\n\n            self.alpha *= 0.999\n            self.gamma *= 1.001\n            self.freq_min *= 1.001\n            self.freq_max *= 0.999\n            self.loudness = max(0.1, min(0.9, self.loudness * np.random.uniform(0.9, 1.1)))\n            self.pulse_rate = max(0.1, min(0.9, self.pulse_rate * np.random.uniform(0.9, 1.1)))\n\n        return best_individual", "name": "EnhancedDynamicAdaptivePopulationBatAlgorithmImproved", "description": "Improving exploration-exploitation balance by introducing a dynamic mutation strategy based on individual fitness and population diversity.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6a5184c7-e6d9-4d0e-851f-77a3d12caa39", "metadata": {"aucs": [0.7943182798280477, 0.7738759804836313, 0.859247539512036, 0.7989179669583396, 0.8117915960230984, 0.8034106477323377, 0.8087924564092521, 0.8134550283961511, 0.8317005380675269, 0.15996942446999562, 0.0312932236062099, 0.20092583801262776, 0.2673093313955268, 0.05336429270337362, 0.30847768214988636, 0.17153032411514801, 0.2268325449693459, 0.19627211526390298, 0.08888357971822658, 0.09011077574987081, 0.11063142600596243, 0.0988929869061167, 0.08215075044566422, 0.09445630718615627, 0.07225561278893788, 0.08779500294036957, 0.0801103806196144, 0.08440314597412657, 0.0532606612844162, 0.10369668953080946, 0.07781033563939377, 0.05925142740751288, 0.06507964457661497, 0.09279564458775347, 0.05336415581506404, 0.05788656771320089, 0.9766527317860234, 0.9377941725900054, 0.9827734461977553, 0.9596247691233857, 0.9506443427432217, 0.9663032422030936, 0.9453077665098233, 0.9609592120656075, 0.9249244490384324, 0.5363037188777934, 0.6055615410562962, 0.5569083247493356, 0.5595787845033409, 0.5721425550171504, 0.555637733653688, 0.5377622049176206, 0.554435671126154, 0.5551978259751602, 0.8490412994352116, 0.13913108007155628, 0.16982730268656854, 0.352733553850054, 0.8355585343279188, 0.21306198553346645, 0.150854764820613, 0.31192501185573407, 0.17873525886459551, 0.1604591366147402, 0.12178702012527287, 0.20476507216519835, 0.19814543578279709, 0.17934633522153254, 0.15768066582282825, 0.1315826587914627, 0.1275006607777237, 0.17110046157700654, 0.22063621931116373, 0.057860384779881646, 0.24978937914299149, 0.1847331282725715, 0.1689547745912805, 0.19394447711914775, 0.2566944261060755, 0.0012561421329284617, 0.1978953653077038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035123667742595344, 0.07658829908872833, 9.999999999998899e-05, 0.0024135069289447086, 9.999999999998899e-05, 0.0440551791720889, 0.11203790454617069, 0.03509390818449376, 0.06982253222136792, 0.06765365129384737, 0.012625195346221751, 0.023987568273667215, 0.18402406079041922, 0.026203705333639693, 0.048041876805778205, 0.23085809920882627, 0.07048232253761089, 0.21465405310128027, 0.1044397572949547, 0.08756119869422241, 0.058883516266903135, 0.07007593868333573, 0.25102051656945, 0.13218153971934987, 0.15308853281551715, 0.04519831051566148, 0.06654553945227804, 0.05127093351817258, 0.05062574596538105, 0.23508398003077902, 0.255763861807062, 0.2124009789879907, 0.05279845803558403, 0.5427793696462745, 0.5102150763667765, 0.5890816165158399, 0.509034991134302, 0.5247956753502546, 0.528717141255658, 0.5727079738957881, 0.5293793528228262, 0.5512476625276741, 0.051987839991951335, 0.07635641316082542, 0.09557072131953448, 0.11057620109126653, 0.03782213207834706, 0.10339481501014836, 0.041744489381493444, 0.060660635054114787, 0.08313719676290054, 0.1965029336025842, 0.3954271226075845, 0.19271039569876058, 0.26807044133658875, 0.25706533837070833, 0.1806403802616664, 0.29244914828750945, 0.16302731328554, 0.14781452300008346, 0.1526691337025775, 0.32097342171508636, 0.12227695101063563, 0.2075796117471833, 0.17286006461392645, 0.13112177229503486, 0.15902620170754111, 0.1259994587542027, 0.10148584298585317, 0.10008149943909994, 0.26912444319076667, 0.10572803017281163, 0.1947505388569779, 0.1286213464795838, 0.08887537735635831, 0.1803231665484818, 0.10476586746039263, 0.04081878318866161, 0.29658303133211006, 0.15550655366076915, 0.19112580446758343, 0.2757119120021826, 0.1638016385500174, 0.19716799311058708, 0.25296780449891776, 0.16555356564712498, 0.18657993295588815, 0.20687066446799152, 0.21075286458888798, 0.19193418633666504, 0.17045280698287135, 0.19081478584579958, 0.20921505248532934, 0.19038254433436208, 0.20950315402217834, 0.16840460399522217, 0.1626287616699601, 0.07658923427919795, 0.13528916375580013, 0.17319264847555382, 0.20190576902152202, 0.10881580302627047, 0.15218914130826966, 0.1152000961317724, 0.1541587469795821, 0.0834974749158669, 0.11266419312973719, 0.6561737277064825, 0.4611599499249328, 0.15112833746180898, 0.21132794826232404, 0.1680345319600156, 0.13035348198838126, 0.3153881760316587, 0.22232842662874186, 0.1916238262167429, 0.22581190006137353, 0.2203596035086417, 0.22077318150354064, 0.2306232726789631, 0.2135341045313247, 0.21765374303841234, 0.24552427064768056, 0.04886384507486763, 0.077381240853447, 0.06881181757996147, 0.062071474389825965, 0.08304888902547969, 0.11645691803787217, 0.09228848060248906, 0.045817712576035396, 0.06290081334411501]}, "mutation_prompt": null}
