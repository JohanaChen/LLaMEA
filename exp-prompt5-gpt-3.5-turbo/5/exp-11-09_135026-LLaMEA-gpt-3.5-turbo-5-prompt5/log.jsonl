{"id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 0, "fitness": 0.16456604598096825, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": null, "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "94c68a62-86f2-40db-996d-1480a2a59c46", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "655bd36d-b988-4369-b1ce-9fee99a9ac5b", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "deea5878-a31f-4b6f-bd47-44f1a0912f0d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "d66bdcf6-8123-4ab3-af63-f46323f971dc", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "baaac578-718f-47d9-94d2-4422a065ee08", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "5a0d89d4-45c4-4b3c-b999-ef6f8ec9f3c4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "aba11e01-4c8e-4d2c-8f89-5ecc9869b2e8", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "10bda82d-dc84-4a1d-b87e-61fcf5ef68ed", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "1066baa2-86c7-42d5-b7d4-e16669bc74cb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "63af56a7-3ecc-48ef-9aa3-2cb0f533cdf0", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "d94c97b2-c904-4c8f-ad33-de66fd8b67d8", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "78f8fc65-19f3-4971-82d5-8c9a8eb9fb34", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "82de165e-be46-4b9e-8862-d1e73c047555", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "d15c99fb-d06c-4551-959f-65c193cdadab", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "e6807cea-c405-4639-a60d-9bf52023654c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "f3122de9-6ced-46a0-94d0-623d76d039c0", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "f5c35293-789e-4680-8038-ca1c45192707", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "f2d28c93-51bc-487a-968b-a05028e86b41", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "b916cc6f-255c-491c-ac61-d44e19b23a1e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "ad32e334-4e95-4a26-b9d1-571a11c7aa18", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "004aeeb9-32e5-4305-91ea-ef9c01173d15", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "fc5f2b5c-7aea-4118-9af3-1e1d5dab7f80", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "e19f5fba-3363-44d5-aad4-df3c98ceb167", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "51694eed-63dd-43bb-afe5-c9c98be7f1df", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "2a4c74b4-9f9a-4164-b453-9de193ac6daf", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "4c35581f-8924-43cd-8fab-e026ecf46eed", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "88f35fda-d9de-4729-baf0-ccf9b4b54895", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "6a9227b6-b077-4f04-a354-aa5689d1d658", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "7414f77d-9232-4b7f-9b60-b82d1c54d8fb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "04aa2854-4c14-43cb-89f4-649a3c3a9c10", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "871c2833-cf31-471b-978f-6f395c81eacd", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "c4375704-040c-4fdd-93a6-c49f7d40d951", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "adf79a42-9d41-4d9b-a727-bda3b8b74cd7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "da0b22e8-a522-43ba-9431-4a454ebe46f8", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "38c07f96-53e3-45d8-9de2-48c2a1c1bda5", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "387b0192-6896-4aba-a582-5e51be846af1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "84ce87de-598a-45d6-88d3-07904775e7ad", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "8804b6f8-fa31-4b2b-8e5c-795b24b93b06", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "2507c43a-aaf8-4759-9c5e-0a6e763cf740", "solution": "#         if np.random.rand() < np.exp((fitness[idx] - new_fitness) / self.bandwidth):\n# ```\n\n# Original code:\nimport numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if np.random.rand() < np.exp((fitness[idx] - new_fitness) / self.bandwidth):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Introducing a dynamic acceptance probability based on fitness improvement for solution acceptance.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'idx' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'idx' referenced before assignment\")", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {}, "mutation_prompt": null}
{"id": "f333631c-6c4e-4ebd-82a9-ce9ba5a85da1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "083b78dd-b7f7-4796-a6f5-d3118c2e1c91", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "5459bcd5-bfdd-44c8-b35e-9abbc490c4fb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "c52baa7e-6e8b-48c7-a731-52d0b417cecf", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "0f30a161-98b0-4692-bf7e-82cdd54910f7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "cb00d472-4206-4ddf-bb33-f0562061ae24", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "a0c15e64-04e6-4f65-a8b0-a5f7b6dfb018", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "640f1289-3510-428b-84a8-9be78aca6a7a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "4bebca45-2071-4a0d-8c1c-1564c6c82214", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "3c5c9b5b-5b74-48c7-8546-9390b2f74e37", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "cdddfb81-fdcc-4e27-97c7-37f81a56d24c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "e1e69214-c890-4f29-8cc6-ed2eac8045b4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "cbc5bf27-9433-4eb1-af42-b65515056f80", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "0166ad29-15a0-4199-9813-0e226d606a2a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "ceadd279-e729-42e0-b122-696340197950", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "74fd1891-9b51-4f80-80aa-99223fe6b4d2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "ffbfc034-74bb-4c06-adcd-80cac4aa4f51", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "ac50978b-b5e6-41d2-aaa5-cbad717454e1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "23a80ae7-8a7f-4978-a024-81f30b298b90", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "1d146792-19f5-47cd-8c95-977d9271ab40", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "ce6f8648-1560-4d0a-9367-fffdb6633f7b", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                fitness_sum = np.sum(fitness)\n                probabilities = fitness / fitness_sum\n                idx = np.random.choice(np.arange(HM_size), p=probabilities)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Implementing a roulette wheel selection mechanism to select solutions based on fitness probabilities.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities are not non-negative').", "error": "ValueError('probabilities are not non-negative')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {}, "mutation_prompt": null}
{"id": "e9ae8d1a-24fd-4df9-add8-fdce35a6a93b", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "5439bea1-6fbf-415e-aec7-a71487c36eb7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "dfcfc552-1146-4fdd-a7d2-0d47cd3327b2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "4fde5bbe-f602-4256-b975-9af98089a9a4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "f115e895-ec58-43ed-9ca6-560c8270b51c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "d0c56115-7b90-4104-8c41-f9c0a9ed10fb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "9f40c25a-5d10-432f-aba7-c68fac1379ed", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "ebf5d037-f0c6-41e6-a731-834be1c420ed", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "a1532eae-c475-4ded-baab-d9e3df27ba8a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "b708f4b9-a5a9-46ac-bd41-8b1be99edd2f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "0829b700-6a70-4e02-8264-9b5cf5009ced", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "e4cc9b61-5afa-48c3-8474-2c839815f16a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "e10f4a26-1cc5-4be6-ab06-12b9fedffa63", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "86c0731c-c535-49ca-ba64-498da8e7c1ec", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "cf8ea56c-af6f-43de-9894-14cb1674307c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "98011244-d319-4ffe-a0a7-f1076494d961", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "67cb1f79-2486-4bc7-998a-9e19dd114fb2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "468c2496-57fe-4dc4-b148-88331011b13d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "df344234-f99d-426f-bbb4-9fa7b37f9a1a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "ec7d132e-b6ca-489f-8426-da03504cd0bc", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "cae36116-c6f8-486e-903a-3493a8114a6b", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "edc5f23c-dd8f-4db1-823d-a242b96668b8", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "f0f9f8ca-e05b-46c1-bec3-c61a56d6342a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "807f1643-51f8-4576-a511-47e91f2558d3", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "3bc3e360-6d0f-4ec7-9726-8ea827217a65", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "8073df0c-996d-4000-b1c4-f339c4e1108e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "822e9c15-2657-48bb-b29d-4ec58d56bb09", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "24f12a31-ec66-4d3c-bb77-3ae7ab5fdd49", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "c5d67b7a-2dc4-4f2c-9ac0-d84f8f142fef", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "c443ded0-db36-4a23-9798-e7782b47270e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "cd86701d-5523-4fc8-8e25-faa01a78b132", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "97a1d1bc-1a81-41dd-9a3f-35ed66fd5889", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "fd7ce1ba-7499-428a-a7c9-066ad6e45998", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "4d3759ef-5698-4a3b-9f56-bf3314a79d07", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "e99c1350-f8be-4827-823e-9f571a20b7b9", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "8c51503d-8ca4-4129-9a71-cd17c0abec7e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "2bc187c8-6c35-4ef6-af3c-01bea97049b1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "f11bfdac-a79b-49bb-9c43-07c3df0227e1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
{"id": "c2810236-3da3-4736-ad50-f799a9eeefb6", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(HM_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (HM_size, self.dim))\n\n        def adjust_bandwidth(iteration):\n            return self.bandwidth * np.exp(-3 * iteration / self.budget)\n\n        HM_size = 10\n        HM = initialize_harmony_memory(HM_size)\n        fitness = np.apply_along_axis(func, 1, HM)\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_solution[j] = HM[np.random.randint(HM_size), j]\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                HM[idx] = new_solution\n                fitness[idx] = new_fitness\n            self.bandwidth = adjust_bandwidth(i)\n        best_idx = np.argmin(fitness)\n        return HM[best_idx]", "name": "HarmonySearch", "description": "Harmony Search with Dynamic Bandwidth Adjustment, which dynamically adjusts the bandwidth based on the exploration and exploitation balance in the harmony memory.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d88f1f5b-c5db-498c-ae93-b5cb0af31a41", "metadata": {"aucs": [0.38771014060774855, 0.4001459921180027, 0.4054455450620228, 0.4171605087219641, 0.4282412122542657, 0.37151937660550016, 0.4163187461300719, 0.34075476612906463, 0.3566393146278163, 0.03366665031358751, 0.032602450263706895, 0.02758371451533781, 0.037645373753707245, 0.04953078551541479, 0.08385514313158005, 0.007190965781573855, 9.999999999998899e-05, 0.019168340172947662, 0.18547270494314072, 0.14832769227633635, 0.15914905663340306, 0.16255973491752596, 0.17437871876580535, 0.1315029474082503, 0.16440215550032078, 0.17019135245620165, 0.14832524213190956, 0.22636885084978953, 0.13496298579701815, 0.15860466850372446, 0.13058774972629983, 0.14228656196156553, 0.13338898321994497, 0.14622529639992354, 0.17366490669103374, 0.12263904884249877, 0.21237588040108124, 0.19062394343391165, 0.20340063308149592, 0.214786833733697, 0.190683112507526, 0.21909137633719944, 0.2258597770704237, 0.17904928433400213, 0.21436244436580654, 0.16169334061989926, 0.18493789369698432, 0.13166616662003217, 0.17213929518673776, 0.19065962090439648, 0.21456628871157413, 0.1596477603744133, 0.14093963662045195, 0.16376131729654064, 0.15841595258848318, 0.2963948475223902, 0.21038623204780837, 0.22444679046082894, 0.21282604591000087, 0.20440523217556372, 0.1786497941433186, 0.23873030138632212, 0.1939323903874408, 0.14076063545941087, 0.12266908993105918, 0.11599280205835971, 0.12504194826468062, 0.061641132985493674, 0.12966314169415472, 0.17598033068263907, 0.15361907540517628, 0.1331143292427942, 0.057007723417855205, 0.09798711288351114, 0.12178855153980661, 0.11845189923509192, 0.1324440452390192, 0.14437270013470094, 0.1136748644074489, 0.11845838569780243, 0.11803182922918842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062812068343862, 0.050492221324691, 0.09133207289458711, 0.07966714633066496, 0.05571886386770131, 0.044130066139086765, 0.09993548686283171, 0.08004081220193515, 0.039265952313128016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043260420656405785, 0.044785800555530275, 0.0479772333845927, 0.051222724927866836, 0.08768789430919965, 0.071456277086141, 0.06042010704115941, 0.05717833541717732, 0.059499464527127954, 0.32550979235258237, 0.33862459213716756, 0.3618115076433496, 0.35108595461432623, 0.34941309555458844, 0.332381543497658, 0.35851221302226555, 0.3527063458107903, 0.35295875116264064, 0.07892272845673909, 0.08130958770648866, 0.07612855463639756, 0.08644525785053281, 0.09325174160653549, 0.07125105171980506, 0.11262399604005824, 0.09089635998479151, 0.05685855545541185, 0.11741067631233959, 0.15902243259595872, 0.14838903882672838, 0.1346003997493217, 0.14203765286430758, 0.1342118552355931, 0.14774527703124984, 0.14122725285036142, 0.13374770293403448, 0.2683343632561921, 0.26743513777071726, 0.22151004422229392, 0.23356861430503073, 0.27239494776873285, 0.2621759784093448, 0.24080526248957634, 0.2686774630828934, 0.2300280426606579, 0.16968965224993315, 0.19376972925762104, 0.16782339690452208, 0.17074787373529543, 0.13860332652785068, 0.1841406383375067, 0.1820806136017784, 0.15040547516731362, 0.17552327135455303, 0.1926535784720782, 0.1792567956386667, 0.18110458684689734, 0.17965255750325837, 0.20187552981416101, 0.19197938350489707, 0.1857510565778493, 0.2057578103217691, 0.20460623108781684, 0.18638029060203354, 0.20533523154926936, 0.1931007309458057, 0.26494591095281594, 0.2596949976519214, 0.24959852859705256, 0.28890545910995724, 0.2183708293151937, 0.19206161245488373, 0.3950963180597611, 0.16949118410737574, 0.2755276012181054, 0.21231578394059702, 0.28482411655427275, 0.4800324036152056, 0.4950076270669731, 0.3598364256458997, 0.3083990863768964, 0.38149312710144, 0.148142323295674, 0.1670932873569807, 0.28885111780363737, 0.273145282636465, 0.20230342206412444, 0.2920262163022316, 0.3216906418484198, 0.16548631810752412, 0.19588280758307997, 0.1781344762216437, 0.1821515934804635, 0.18769553145651774, 0.189338698394115, 0.20923111812640527, 0.19820020724907406, 0.18681282638105734, 0.19640627877698824, 0.07560726853853394, 0.06843986955840009, 0.06230056283342933, 0.0760317777088394, 0.08502575701680093, 0.0746625941745287, 0.06877168908932507, 0.0728430604752992, 0.084006241683667]}, "mutation_prompt": null}
