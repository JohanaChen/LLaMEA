{"id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Initial population size\n        self.scale_factor = 0.8   # Differential evolution scaling factor\n        self.crossover_rate = 0.9  # Crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search: Gaussian perturbation\n        return np.clip(candidate + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search (DBS) method combining adaptive differential evolution with a stochastic local search to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 0, "fitness": 0.22334872621739238, "feedback": "The algorithm DynamicBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.4455834403908533, 0.44532628918087835, 0.4524886765888777, 0.4539725749224618, 0.4540106900101363, 0.43244857340767573, 0.46873332515806354, 0.4309826488528974, 0.44352306800759145, 0.060666602722102114, 0.038140540236995535, 0.06452164999241772, 0.0352145466903212, 0.054832360001180636, 0.05865491736188544, 0.054080529552837264, 0.05845957837147331, 0.04955020878435812, 0.10517846526990238, 0.10077650453285691, 0.09693217893029993, 0.10997467797636507, 0.10829651258470407, 0.11643218062001137, 0.09996761424145173, 0.08107103212064193, 0.1073822428591038, 0.08796298339244968, 0.08665717830806074, 0.09116268099657698, 0.10082533218955336, 0.08753140635885825, 0.0927681697737367, 0.08425873386719684, 0.09350714556159978, 0.10186801321793992, 0.973030055303207, 0.9434770024693098, 0.9712697904399312, 0.9448405851843169, 0.9563697914889604, 0.9603365002539785, 0.9714668191503213, 0.9631683267434717, 0.9681567258756874, 0.30200897202600885, 0.2744413382548221, 0.2976786867177731, 0.2777206818866421, 0.30547060722727293, 0.2846982633326718, 0.30258105224255827, 0.28770017385012314, 0.283933874051174, 0.3381820238401646, 0.34829669654271556, 0.3434259812442573, 0.3479212361008708, 0.6845708715253183, 0.3569455085160427, 0.3353245265888197, 0.3475455570245476, 0.3368817840920063, 0.1619918826744592, 0.17030019267263774, 0.18527834980781788, 0.12406951851253067, 0.18367621953953006, 0.18660928443753078, 0.17152965738070203, 0.16364342309287472, 0.16851321780178385, 0.19036699814013114, 0.17535141079472272, 0.1700078982744626, 0.17406805811842374, 0.17958674139713893, 0.17489774916877798, 0.17070717339638808, 0.18388220964680846, 0.191748221774508, 0.03132639939608983, 0.026445954372536162, 0.058639180984567774, 0.02648341874084459, 0.021964481848976147, 0.05057719644299863, 0.025694499531539572, 0.012510377728064292, 0.027105942782356784, 0.10245350939918063, 0.09283412523422707, 0.11186923434167473, 0.11857350577570014, 0.09874684344942142, 0.0907997125345601, 0.11212793618865435, 0.09360966335521148, 0.08888472591880214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13638491697387667, 0.10068712064592766, 0.11174602573916503, 0.10868604811827531, 0.10051042489547324, 0.10307034079789412, 0.11365299137530671, 0.10578902798421896, 0.09486782275956906, 0.4095583133352767, 0.4100134839477788, 0.42800934500025967, 0.47826544818155126, 0.40103927849037313, 0.4148161094127576, 0.40823000155639466, 0.4010959592597404, 0.40221984967570357, 0.08918094111590724, 0.09966763036421311, 0.0814621691833225, 0.08820369179644627, 0.09267549484577431, 0.09830034526434939, 0.09121131185019837, 0.09161753850345034, 0.08080297026327066, 0.19892613517370306, 0.14670824422101592, 0.24785454966294518, 0.18620540502344907, 0.20504694576781046, 0.15559947928191864, 0.20901648980818677, 0.17749771506026113, 0.1754627650064211, 0.2733409242339666, 0.2852033694445115, 0.28284653498922085, 0.28020630084610776, 0.2850664699548787, 0.2847772768222673, 0.279301303597456, 0.2858027912294159, 0.2730313695159232, 0.2128346301787164, 0.21998205789206737, 0.20991358961437567, 0.2177171689454963, 0.22350422665757952, 0.20388374754307548, 0.21879351849524709, 0.2197963692792806, 0.23123005539476083, 0.20375750644184487, 0.1742080114234228, 0.22008692702843513, 0.20999584836619822, 0.18705972162886852, 0.18606506512572973, 0.19320419585479454, 0.20106902163647244, 0.19806115153099169, 0.18268532415300953, 0.18925208723976794, 0.17525720056288374, 0.2047340330530003, 0.18920170052872665, 0.1800878916712476, 0.17711780093367469, 0.1820530222269462, 0.1807036185504527, 0.6211848052472561, 0.16776879919994536, 0.15241877185610886, 0.17983328252710884, 0.18510714310440024, 0.5998636301092453, 0.5333357413087318, 0.18476138593380076, 0.1862903326172084, 0.2018429185270365, 0.16700467566812827, 0.20403493260686112, 0.4878547579112632, 0.5404711684705529, 0.15878097234492616, 0.20601578855540514, 0.5191768927461289, 0.15556059943073908, 0.19828889034774388, 0.19466081117606426, 0.19125392311131972, 0.1787507014767047, 0.19055010185416876, 0.19677066657802422, 0.18673711588732544, 0.17803944273625727, 0.1837375371990395, 0.06508513482546008, 0.07051029864833869, 0.07080359562678773, 0.07530482488455459, 0.08049496059897132, 0.0713173392873716, 0.06589047259639624, 0.08170266021338846, 0.06724400514706608]}, "mutation_prompt": null}
{"id": "6061fc7d-8962-4839-b5e1-6d93b73c734c", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Initial population size\n        self.scale_factor = 0.8   # Differential evolution scaling factor\n        self.crossover_rate = 0.9  # Crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search: Gaussian perturbation\n        return np.clip(candidate + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search (DBS) method combining adaptive differential evolution with a stochastic local search to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "metadata": {"aucs": [0.4455834403908533, 0.44532628918087835, 0.4524886765888777, 0.4539725749224618, 0.4540106900101363, 0.43244857340767573, 0.46873332515806354, 0.4309826488528974, 0.44352306800759145, 0.060666602722102114, 0.038140540236995535, 0.06452164999241772, 0.0352145466903212, 0.054832360001180636, 0.05865491736188544, 0.054080529552837264, 0.05845957837147331, 0.04955020878435812, 0.10517846526990238, 0.10077650453285691, 0.09693217893029993, 0.10997467797636507, 0.10829651258470407, 0.11643218062001137, 0.09996761424145173, 0.08107103212064193, 0.1073822428591038, 0.08796298339244968, 0.08665717830806074, 0.09116268099657698, 0.10082533218955336, 0.08753140635885825, 0.0927681697737367, 0.08425873386719684, 0.09350714556159978, 0.10186801321793992, 0.973030055303207, 0.9434770024693098, 0.9712697904399312, 0.9448405851843169, 0.9563697914889604, 0.9603365002539785, 0.9714668191503213, 0.9631683267434717, 0.9681567258756874, 0.30200897202600885, 0.2744413382548221, 0.2976786867177731, 0.2777206818866421, 0.30547060722727293, 0.2846982633326718, 0.30258105224255827, 0.28770017385012314, 0.283933874051174, 0.3381820238401646, 0.34829669654271556, 0.3434259812442573, 0.3479212361008708, 0.6845708715253183, 0.3569455085160427, 0.3353245265888197, 0.3475455570245476, 0.3368817840920063, 0.1619918826744592, 0.17030019267263774, 0.18527834980781788, 0.12406951851253067, 0.18367621953953006, 0.18660928443753078, 0.17152965738070203, 0.16364342309287472, 0.16851321780178385, 0.19036699814013114, 0.17535141079472272, 0.1700078982744626, 0.17406805811842374, 0.17958674139713893, 0.17489774916877798, 0.17070717339638808, 0.18388220964680846, 0.191748221774508, 0.03132639939608983, 0.026445954372536162, 0.058639180984567774, 0.02648341874084459, 0.021964481848976147, 0.05057719644299863, 0.025694499531539572, 0.012510377728064292, 0.027105942782356784, 0.10245350939918063, 0.09283412523422707, 0.11186923434167473, 0.11857350577570014, 0.09874684344942142, 0.0907997125345601, 0.11212793618865435, 0.09360966335521148, 0.08888472591880214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13638491697387667, 0.10068712064592766, 0.11174602573916503, 0.10868604811827531, 0.10051042489547324, 0.10307034079789412, 0.11365299137530671, 0.10578902798421896, 0.09486782275956906, 0.4095583133352767, 0.4100134839477788, 0.42800934500025967, 0.47826544818155126, 0.40103927849037313, 0.4148161094127576, 0.40823000155639466, 0.4010959592597404, 0.40221984967570357, 0.08918094111590724, 0.09966763036421311, 0.0814621691833225, 0.08820369179644627, 0.09267549484577431, 0.09830034526434939, 0.09121131185019837, 0.09161753850345034, 0.08080297026327066, 0.19892613517370306, 0.14670824422101592, 0.24785454966294518, 0.18620540502344907, 0.20504694576781046, 0.15559947928191864, 0.20901648980818677, 0.17749771506026113, 0.1754627650064211, 0.2733409242339666, 0.2852033694445115, 0.28284653498922085, 0.28020630084610776, 0.2850664699548787, 0.2847772768222673, 0.279301303597456, 0.2858027912294159, 0.2730313695159232, 0.2128346301787164, 0.21998205789206737, 0.20991358961437567, 0.2177171689454963, 0.22350422665757952, 0.20388374754307548, 0.21879351849524709, 0.2197963692792806, 0.23123005539476083, 0.20375750644184487, 0.1742080114234228, 0.22008692702843513, 0.20999584836619822, 0.18705972162886852, 0.18606506512572973, 0.19320419585479454, 0.20106902163647244, 0.19806115153099169, 0.18268532415300953, 0.18925208723976794, 0.17525720056288374, 0.2047340330530003, 0.18920170052872665, 0.1800878916712476, 0.17711780093367469, 0.1820530222269462, 0.1807036185504527, 0.6211848052472561, 0.16776879919994536, 0.15241877185610886, 0.17983328252710884, 0.18510714310440024, 0.5998636301092453, 0.5333357413087318, 0.18476138593380076, 0.1862903326172084, 0.2018429185270365, 0.16700467566812827, 0.20403493260686112, 0.4878547579112632, 0.5404711684705529, 0.15878097234492616, 0.20601578855540514, 0.5191768927461289, 0.15556059943073908, 0.19828889034774388, 0.19466081117606426, 0.19125392311131972, 0.1787507014767047, 0.19055010185416876, 0.19677066657802422, 0.18673711588732544, 0.17803944273625727, 0.1837375371990395, 0.06508513482546008, 0.07051029864833869, 0.07080359562678773, 0.07530482488455459, 0.08049496059897132, 0.0713173392873716, 0.06589047259639624, 0.08170266021338846, 0.06724400514706608]}, "mutation_prompt": null}
{"id": "02e26299-20d0-4cbc-85bd-fcfd7f2b8372", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Initial population size\n        self.scale_factor = 0.8   # Differential evolution scaling factor\n        self.crossover_rate = 0.9  # Crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search: Gaussian perturbation\n        return np.clip(candidate + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search (DBS) method combining adaptive differential evolution with a stochastic local search to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "metadata": {"aucs": [0.4455834403908533, 0.44532628918087835, 0.4524886765888777, 0.4539725749224618, 0.4540106900101363, 0.43244857340767573, 0.46873332515806354, 0.4309826488528974, 0.44352306800759145, 0.060666602722102114, 0.038140540236995535, 0.06452164999241772, 0.0352145466903212, 0.054832360001180636, 0.05865491736188544, 0.054080529552837264, 0.05845957837147331, 0.04955020878435812, 0.10517846526990238, 0.10077650453285691, 0.09693217893029993, 0.10997467797636507, 0.10829651258470407, 0.11643218062001137, 0.09996761424145173, 0.08107103212064193, 0.1073822428591038, 0.08796298339244968, 0.08665717830806074, 0.09116268099657698, 0.10082533218955336, 0.08753140635885825, 0.0927681697737367, 0.08425873386719684, 0.09350714556159978, 0.10186801321793992, 0.973030055303207, 0.9434770024693098, 0.9712697904399312, 0.9448405851843169, 0.9563697914889604, 0.9603365002539785, 0.9714668191503213, 0.9631683267434717, 0.9681567258756874, 0.30200897202600885, 0.2744413382548221, 0.2976786867177731, 0.2777206818866421, 0.30547060722727293, 0.2846982633326718, 0.30258105224255827, 0.28770017385012314, 0.283933874051174, 0.3381820238401646, 0.34829669654271556, 0.3434259812442573, 0.3479212361008708, 0.6845708715253183, 0.3569455085160427, 0.3353245265888197, 0.3475455570245476, 0.3368817840920063, 0.1619918826744592, 0.17030019267263774, 0.18527834980781788, 0.12406951851253067, 0.18367621953953006, 0.18660928443753078, 0.17152965738070203, 0.16364342309287472, 0.16851321780178385, 0.19036699814013114, 0.17535141079472272, 0.1700078982744626, 0.17406805811842374, 0.17958674139713893, 0.17489774916877798, 0.17070717339638808, 0.18388220964680846, 0.191748221774508, 0.03132639939608983, 0.026445954372536162, 0.058639180984567774, 0.02648341874084459, 0.021964481848976147, 0.05057719644299863, 0.025694499531539572, 0.012510377728064292, 0.027105942782356784, 0.10245350939918063, 0.09283412523422707, 0.11186923434167473, 0.11857350577570014, 0.09874684344942142, 0.0907997125345601, 0.11212793618865435, 0.09360966335521148, 0.08888472591880214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13638491697387667, 0.10068712064592766, 0.11174602573916503, 0.10868604811827531, 0.10051042489547324, 0.10307034079789412, 0.11365299137530671, 0.10578902798421896, 0.09486782275956906, 0.4095583133352767, 0.4100134839477788, 0.42800934500025967, 0.47826544818155126, 0.40103927849037313, 0.4148161094127576, 0.40823000155639466, 0.4010959592597404, 0.40221984967570357, 0.08918094111590724, 0.09966763036421311, 0.0814621691833225, 0.08820369179644627, 0.09267549484577431, 0.09830034526434939, 0.09121131185019837, 0.09161753850345034, 0.08080297026327066, 0.19892613517370306, 0.14670824422101592, 0.24785454966294518, 0.18620540502344907, 0.20504694576781046, 0.15559947928191864, 0.20901648980818677, 0.17749771506026113, 0.1754627650064211, 0.2733409242339666, 0.2852033694445115, 0.28284653498922085, 0.28020630084610776, 0.2850664699548787, 0.2847772768222673, 0.279301303597456, 0.2858027912294159, 0.2730313695159232, 0.2128346301787164, 0.21998205789206737, 0.20991358961437567, 0.2177171689454963, 0.22350422665757952, 0.20388374754307548, 0.21879351849524709, 0.2197963692792806, 0.23123005539476083, 0.20375750644184487, 0.1742080114234228, 0.22008692702843513, 0.20999584836619822, 0.18705972162886852, 0.18606506512572973, 0.19320419585479454, 0.20106902163647244, 0.19806115153099169, 0.18268532415300953, 0.18925208723976794, 0.17525720056288374, 0.2047340330530003, 0.18920170052872665, 0.1800878916712476, 0.17711780093367469, 0.1820530222269462, 0.1807036185504527, 0.6211848052472561, 0.16776879919994536, 0.15241877185610886, 0.17983328252710884, 0.18510714310440024, 0.5998636301092453, 0.5333357413087318, 0.18476138593380076, 0.1862903326172084, 0.2018429185270365, 0.16700467566812827, 0.20403493260686112, 0.4878547579112632, 0.5404711684705529, 0.15878097234492616, 0.20601578855540514, 0.5191768927461289, 0.15556059943073908, 0.19828889034774388, 0.19466081117606426, 0.19125392311131972, 0.1787507014767047, 0.19055010185416876, 0.19677066657802422, 0.18673711588732544, 0.17803944273625727, 0.1837375371990395, 0.06508513482546008, 0.07051029864833869, 0.07080359562678773, 0.07530482488455459, 0.08049496059897132, 0.0713173392873716, 0.06589047259639624, 0.08170266021338846, 0.06724400514706608]}, "mutation_prompt": null}
{"id": "5ba2a14c-1d9d-4ee8-aae9-728eba64c72a", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Initial population size\n        self.scale_factor = 0.8   # Differential evolution scaling factor\n        self.crossover_rate = 0.9  # Crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search: Gaussian perturbation\n        return np.clip(candidate + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search (DBS) method combining adaptive differential evolution with a stochastic local search to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "metadata": {"aucs": [0.4455834403908533, 0.44532628918087835, 0.4524886765888777, 0.4539725749224618, 0.4540106900101363, 0.43244857340767573, 0.46873332515806354, 0.4309826488528974, 0.44352306800759145, 0.060666602722102114, 0.038140540236995535, 0.06452164999241772, 0.0352145466903212, 0.054832360001180636, 0.05865491736188544, 0.054080529552837264, 0.05845957837147331, 0.04955020878435812, 0.10517846526990238, 0.10077650453285691, 0.09693217893029993, 0.10997467797636507, 0.10829651258470407, 0.11643218062001137, 0.09996761424145173, 0.08107103212064193, 0.1073822428591038, 0.08796298339244968, 0.08665717830806074, 0.09116268099657698, 0.10082533218955336, 0.08753140635885825, 0.0927681697737367, 0.08425873386719684, 0.09350714556159978, 0.10186801321793992, 0.973030055303207, 0.9434770024693098, 0.9712697904399312, 0.9448405851843169, 0.9563697914889604, 0.9603365002539785, 0.9714668191503213, 0.9631683267434717, 0.9681567258756874, 0.30200897202600885, 0.2744413382548221, 0.2976786867177731, 0.2777206818866421, 0.30547060722727293, 0.2846982633326718, 0.30258105224255827, 0.28770017385012314, 0.283933874051174, 0.3381820238401646, 0.34829669654271556, 0.3434259812442573, 0.3479212361008708, 0.6845708715253183, 0.3569455085160427, 0.3353245265888197, 0.3475455570245476, 0.3368817840920063, 0.1619918826744592, 0.17030019267263774, 0.18527834980781788, 0.12406951851253067, 0.18367621953953006, 0.18660928443753078, 0.17152965738070203, 0.16364342309287472, 0.16851321780178385, 0.19036699814013114, 0.17535141079472272, 0.1700078982744626, 0.17406805811842374, 0.17958674139713893, 0.17489774916877798, 0.17070717339638808, 0.18388220964680846, 0.191748221774508, 0.03132639939608983, 0.026445954372536162, 0.058639180984567774, 0.02648341874084459, 0.021964481848976147, 0.05057719644299863, 0.025694499531539572, 0.012510377728064292, 0.027105942782356784, 0.10245350939918063, 0.09283412523422707, 0.11186923434167473, 0.11857350577570014, 0.09874684344942142, 0.0907997125345601, 0.11212793618865435, 0.09360966335521148, 0.08888472591880214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13638491697387667, 0.10068712064592766, 0.11174602573916503, 0.10868604811827531, 0.10051042489547324, 0.10307034079789412, 0.11365299137530671, 0.10578902798421896, 0.09486782275956906, 0.4095583133352767, 0.4100134839477788, 0.42800934500025967, 0.47826544818155126, 0.40103927849037313, 0.4148161094127576, 0.40823000155639466, 0.4010959592597404, 0.40221984967570357, 0.08918094111590724, 0.09966763036421311, 0.0814621691833225, 0.08820369179644627, 0.09267549484577431, 0.09830034526434939, 0.09121131185019837, 0.09161753850345034, 0.08080297026327066, 0.19892613517370306, 0.14670824422101592, 0.24785454966294518, 0.18620540502344907, 0.20504694576781046, 0.15559947928191864, 0.20901648980818677, 0.17749771506026113, 0.1754627650064211, 0.2733409242339666, 0.2852033694445115, 0.28284653498922085, 0.28020630084610776, 0.2850664699548787, 0.2847772768222673, 0.279301303597456, 0.2858027912294159, 0.2730313695159232, 0.2128346301787164, 0.21998205789206737, 0.20991358961437567, 0.2177171689454963, 0.22350422665757952, 0.20388374754307548, 0.21879351849524709, 0.2197963692792806, 0.23123005539476083, 0.20375750644184487, 0.1742080114234228, 0.22008692702843513, 0.20999584836619822, 0.18705972162886852, 0.18606506512572973, 0.19320419585479454, 0.20106902163647244, 0.19806115153099169, 0.18268532415300953, 0.18925208723976794, 0.17525720056288374, 0.2047340330530003, 0.18920170052872665, 0.1800878916712476, 0.17711780093367469, 0.1820530222269462, 0.1807036185504527, 0.6211848052472561, 0.16776879919994536, 0.15241877185610886, 0.17983328252710884, 0.18510714310440024, 0.5998636301092453, 0.5333357413087318, 0.18476138593380076, 0.1862903326172084, 0.2018429185270365, 0.16700467566812827, 0.20403493260686112, 0.4878547579112632, 0.5404711684705529, 0.15878097234492616, 0.20601578855540514, 0.5191768927461289, 0.15556059943073908, 0.19828889034774388, 0.19466081117606426, 0.19125392311131972, 0.1787507014767047, 0.19055010185416876, 0.19677066657802422, 0.18673711588732544, 0.17803944273625727, 0.1837375371990395, 0.06508513482546008, 0.07051029864833869, 0.07080359562678773, 0.07530482488455459, 0.08049496059897132, 0.0713173392873716, 0.06589047259639624, 0.08170266021338846, 0.06724400514706608]}, "mutation_prompt": null}
{"id": "bc0f7556-a421-4e9d-ab0e-dd0ab7069bae", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Initial population size\n        self.scale_factor = 0.8   # Differential evolution scaling factor\n        self.crossover_rate = 0.9  # Crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search: Gaussian perturbation\n        return np.clip(candidate + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search (DBS) method combining adaptive differential evolution with a stochastic local search to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "metadata": {"aucs": [0.4455834403908533, 0.44532628918087835, 0.4524886765888777, 0.4539725749224618, 0.4540106900101363, 0.43244857340767573, 0.46873332515806354, 0.4309826488528974, 0.44352306800759145, 0.060666602722102114, 0.038140540236995535, 0.06452164999241772, 0.0352145466903212, 0.054832360001180636, 0.05865491736188544, 0.054080529552837264, 0.05845957837147331, 0.04955020878435812, 0.10517846526990238, 0.10077650453285691, 0.09693217893029993, 0.10997467797636507, 0.10829651258470407, 0.11643218062001137, 0.09996761424145173, 0.08107103212064193, 0.1073822428591038, 0.08796298339244968, 0.08665717830806074, 0.09116268099657698, 0.10082533218955336, 0.08753140635885825, 0.0927681697737367, 0.08425873386719684, 0.09350714556159978, 0.10186801321793992, 0.973030055303207, 0.9434770024693098, 0.9712697904399312, 0.9448405851843169, 0.9563697914889604, 0.9603365002539785, 0.9714668191503213, 0.9631683267434717, 0.9681567258756874, 0.30200897202600885, 0.2744413382548221, 0.2976786867177731, 0.2777206818866421, 0.30547060722727293, 0.2846982633326718, 0.30258105224255827, 0.28770017385012314, 0.283933874051174, 0.3381820238401646, 0.34829669654271556, 0.3434259812442573, 0.3479212361008708, 0.6845708715253183, 0.3569455085160427, 0.3353245265888197, 0.3475455570245476, 0.3368817840920063, 0.1619918826744592, 0.17030019267263774, 0.18527834980781788, 0.12406951851253067, 0.18367621953953006, 0.18660928443753078, 0.17152965738070203, 0.16364342309287472, 0.16851321780178385, 0.19036699814013114, 0.17535141079472272, 0.1700078982744626, 0.17406805811842374, 0.17958674139713893, 0.17489774916877798, 0.17070717339638808, 0.18388220964680846, 0.191748221774508, 0.03132639939608983, 0.026445954372536162, 0.058639180984567774, 0.02648341874084459, 0.021964481848976147, 0.05057719644299863, 0.025694499531539572, 0.012510377728064292, 0.027105942782356784, 0.10245350939918063, 0.09283412523422707, 0.11186923434167473, 0.11857350577570014, 0.09874684344942142, 0.0907997125345601, 0.11212793618865435, 0.09360966335521148, 0.08888472591880214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13638491697387667, 0.10068712064592766, 0.11174602573916503, 0.10868604811827531, 0.10051042489547324, 0.10307034079789412, 0.11365299137530671, 0.10578902798421896, 0.09486782275956906, 0.4095583133352767, 0.4100134839477788, 0.42800934500025967, 0.47826544818155126, 0.40103927849037313, 0.4148161094127576, 0.40823000155639466, 0.4010959592597404, 0.40221984967570357, 0.08918094111590724, 0.09966763036421311, 0.0814621691833225, 0.08820369179644627, 0.09267549484577431, 0.09830034526434939, 0.09121131185019837, 0.09161753850345034, 0.08080297026327066, 0.19892613517370306, 0.14670824422101592, 0.24785454966294518, 0.18620540502344907, 0.20504694576781046, 0.15559947928191864, 0.20901648980818677, 0.17749771506026113, 0.1754627650064211, 0.2733409242339666, 0.2852033694445115, 0.28284653498922085, 0.28020630084610776, 0.2850664699548787, 0.2847772768222673, 0.279301303597456, 0.2858027912294159, 0.2730313695159232, 0.2128346301787164, 0.21998205789206737, 0.20991358961437567, 0.2177171689454963, 0.22350422665757952, 0.20388374754307548, 0.21879351849524709, 0.2197963692792806, 0.23123005539476083, 0.20375750644184487, 0.1742080114234228, 0.22008692702843513, 0.20999584836619822, 0.18705972162886852, 0.18606506512572973, 0.19320419585479454, 0.20106902163647244, 0.19806115153099169, 0.18268532415300953, 0.18925208723976794, 0.17525720056288374, 0.2047340330530003, 0.18920170052872665, 0.1800878916712476, 0.17711780093367469, 0.1820530222269462, 0.1807036185504527, 0.6211848052472561, 0.16776879919994536, 0.15241877185610886, 0.17983328252710884, 0.18510714310440024, 0.5998636301092453, 0.5333357413087318, 0.18476138593380076, 0.1862903326172084, 0.2018429185270365, 0.16700467566812827, 0.20403493260686112, 0.4878547579112632, 0.5404711684705529, 0.15878097234492616, 0.20601578855540514, 0.5191768927461289, 0.15556059943073908, 0.19828889034774388, 0.19466081117606426, 0.19125392311131972, 0.1787507014767047, 0.19055010185416876, 0.19677066657802422, 0.18673711588732544, 0.17803944273625727, 0.1837375371990395, 0.06508513482546008, 0.07051029864833869, 0.07080359562678773, 0.07530482488455459, 0.08049496059897132, 0.0713173392873716, 0.06589047259639624, 0.08170266021338846, 0.06724400514706608]}, "mutation_prompt": null}
{"id": "6283bbd3-f61c-42ec-851a-77e9876ffd85", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Initial population size\n        self.scale_factor = 0.8   # Differential evolution scaling factor\n        self.crossover_rate = 0.9  # Crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search: Gaussian perturbation\n        return np.clip(candidate + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search (DBS) method combining adaptive differential evolution with a stochastic local search to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "metadata": {"aucs": [0.4455834403908533, 0.44532628918087835, 0.4524886765888777, 0.4539725749224618, 0.4540106900101363, 0.43244857340767573, 0.46873332515806354, 0.4309826488528974, 0.44352306800759145, 0.060666602722102114, 0.038140540236995535, 0.06452164999241772, 0.0352145466903212, 0.054832360001180636, 0.05865491736188544, 0.054080529552837264, 0.05845957837147331, 0.04955020878435812, 0.10517846526990238, 0.10077650453285691, 0.09693217893029993, 0.10997467797636507, 0.10829651258470407, 0.11643218062001137, 0.09996761424145173, 0.08107103212064193, 0.1073822428591038, 0.08796298339244968, 0.08665717830806074, 0.09116268099657698, 0.10082533218955336, 0.08753140635885825, 0.0927681697737367, 0.08425873386719684, 0.09350714556159978, 0.10186801321793992, 0.973030055303207, 0.9434770024693098, 0.9712697904399312, 0.9448405851843169, 0.9563697914889604, 0.9603365002539785, 0.9714668191503213, 0.9631683267434717, 0.9681567258756874, 0.30200897202600885, 0.2744413382548221, 0.2976786867177731, 0.2777206818866421, 0.30547060722727293, 0.2846982633326718, 0.30258105224255827, 0.28770017385012314, 0.283933874051174, 0.3381820238401646, 0.34829669654271556, 0.3434259812442573, 0.3479212361008708, 0.6845708715253183, 0.3569455085160427, 0.3353245265888197, 0.3475455570245476, 0.3368817840920063, 0.1619918826744592, 0.17030019267263774, 0.18527834980781788, 0.12406951851253067, 0.18367621953953006, 0.18660928443753078, 0.17152965738070203, 0.16364342309287472, 0.16851321780178385, 0.19036699814013114, 0.17535141079472272, 0.1700078982744626, 0.17406805811842374, 0.17958674139713893, 0.17489774916877798, 0.17070717339638808, 0.18388220964680846, 0.191748221774508, 0.03132639939608983, 0.026445954372536162, 0.058639180984567774, 0.02648341874084459, 0.021964481848976147, 0.05057719644299863, 0.025694499531539572, 0.012510377728064292, 0.027105942782356784, 0.10245350939918063, 0.09283412523422707, 0.11186923434167473, 0.11857350577570014, 0.09874684344942142, 0.0907997125345601, 0.11212793618865435, 0.09360966335521148, 0.08888472591880214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13638491697387667, 0.10068712064592766, 0.11174602573916503, 0.10868604811827531, 0.10051042489547324, 0.10307034079789412, 0.11365299137530671, 0.10578902798421896, 0.09486782275956906, 0.4095583133352767, 0.4100134839477788, 0.42800934500025967, 0.47826544818155126, 0.40103927849037313, 0.4148161094127576, 0.40823000155639466, 0.4010959592597404, 0.40221984967570357, 0.08918094111590724, 0.09966763036421311, 0.0814621691833225, 0.08820369179644627, 0.09267549484577431, 0.09830034526434939, 0.09121131185019837, 0.09161753850345034, 0.08080297026327066, 0.19892613517370306, 0.14670824422101592, 0.24785454966294518, 0.18620540502344907, 0.20504694576781046, 0.15559947928191864, 0.20901648980818677, 0.17749771506026113, 0.1754627650064211, 0.2733409242339666, 0.2852033694445115, 0.28284653498922085, 0.28020630084610776, 0.2850664699548787, 0.2847772768222673, 0.279301303597456, 0.2858027912294159, 0.2730313695159232, 0.2128346301787164, 0.21998205789206737, 0.20991358961437567, 0.2177171689454963, 0.22350422665757952, 0.20388374754307548, 0.21879351849524709, 0.2197963692792806, 0.23123005539476083, 0.20375750644184487, 0.1742080114234228, 0.22008692702843513, 0.20999584836619822, 0.18705972162886852, 0.18606506512572973, 0.19320419585479454, 0.20106902163647244, 0.19806115153099169, 0.18268532415300953, 0.18925208723976794, 0.17525720056288374, 0.2047340330530003, 0.18920170052872665, 0.1800878916712476, 0.17711780093367469, 0.1820530222269462, 0.1807036185504527, 0.6211848052472561, 0.16776879919994536, 0.15241877185610886, 0.17983328252710884, 0.18510714310440024, 0.5998636301092453, 0.5333357413087318, 0.18476138593380076, 0.1862903326172084, 0.2018429185270365, 0.16700467566812827, 0.20403493260686112, 0.4878547579112632, 0.5404711684705529, 0.15878097234492616, 0.20601578855540514, 0.5191768927461289, 0.15556059943073908, 0.19828889034774388, 0.19466081117606426, 0.19125392311131972, 0.1787507014767047, 0.19055010185416876, 0.19677066657802422, 0.18673711588732544, 0.17803944273625727, 0.1837375371990395, 0.06508513482546008, 0.07051029864833869, 0.07080359562678773, 0.07530482488455459, 0.08049496059897132, 0.0713173392873716, 0.06589047259639624, 0.08170266021338846, 0.06724400514706608]}, "mutation_prompt": null}
{"id": "95580d89-a181-4336-9687-d3451761fc3f", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Initial population size\n        self.scale_factor = 0.8   # Differential evolution scaling factor\n        self.crossover_rate = 0.9  # Crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search: Gaussian perturbation\n        return np.clip(candidate + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search (DBS) method combining adaptive differential evolution with a stochastic local search to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "metadata": {"aucs": [0.4455834403908533, 0.44532628918087835, 0.4524886765888777, 0.4539725749224618, 0.4540106900101363, 0.43244857340767573, 0.46873332515806354, 0.4309826488528974, 0.44352306800759145, 0.060666602722102114, 0.038140540236995535, 0.06452164999241772, 0.0352145466903212, 0.054832360001180636, 0.05865491736188544, 0.054080529552837264, 0.05845957837147331, 0.04955020878435812, 0.10517846526990238, 0.10077650453285691, 0.09693217893029993, 0.10997467797636507, 0.10829651258470407, 0.11643218062001137, 0.09996761424145173, 0.08107103212064193, 0.1073822428591038, 0.08796298339244968, 0.08665717830806074, 0.09116268099657698, 0.10082533218955336, 0.08753140635885825, 0.0927681697737367, 0.08425873386719684, 0.09350714556159978, 0.10186801321793992, 0.973030055303207, 0.9434770024693098, 0.9712697904399312, 0.9448405851843169, 0.9563697914889604, 0.9603365002539785, 0.9714668191503213, 0.9631683267434717, 0.9681567258756874, 0.30200897202600885, 0.2744413382548221, 0.2976786867177731, 0.2777206818866421, 0.30547060722727293, 0.2846982633326718, 0.30258105224255827, 0.28770017385012314, 0.283933874051174, 0.3381820238401646, 0.34829669654271556, 0.3434259812442573, 0.3479212361008708, 0.6845708715253183, 0.3569455085160427, 0.3353245265888197, 0.3475455570245476, 0.3368817840920063, 0.1619918826744592, 0.17030019267263774, 0.18527834980781788, 0.12406951851253067, 0.18367621953953006, 0.18660928443753078, 0.17152965738070203, 0.16364342309287472, 0.16851321780178385, 0.19036699814013114, 0.17535141079472272, 0.1700078982744626, 0.17406805811842374, 0.17958674139713893, 0.17489774916877798, 0.17070717339638808, 0.18388220964680846, 0.191748221774508, 0.03132639939608983, 0.026445954372536162, 0.058639180984567774, 0.02648341874084459, 0.021964481848976147, 0.05057719644299863, 0.025694499531539572, 0.012510377728064292, 0.027105942782356784, 0.10245350939918063, 0.09283412523422707, 0.11186923434167473, 0.11857350577570014, 0.09874684344942142, 0.0907997125345601, 0.11212793618865435, 0.09360966335521148, 0.08888472591880214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13638491697387667, 0.10068712064592766, 0.11174602573916503, 0.10868604811827531, 0.10051042489547324, 0.10307034079789412, 0.11365299137530671, 0.10578902798421896, 0.09486782275956906, 0.4095583133352767, 0.4100134839477788, 0.42800934500025967, 0.47826544818155126, 0.40103927849037313, 0.4148161094127576, 0.40823000155639466, 0.4010959592597404, 0.40221984967570357, 0.08918094111590724, 0.09966763036421311, 0.0814621691833225, 0.08820369179644627, 0.09267549484577431, 0.09830034526434939, 0.09121131185019837, 0.09161753850345034, 0.08080297026327066, 0.19892613517370306, 0.14670824422101592, 0.24785454966294518, 0.18620540502344907, 0.20504694576781046, 0.15559947928191864, 0.20901648980818677, 0.17749771506026113, 0.1754627650064211, 0.2733409242339666, 0.2852033694445115, 0.28284653498922085, 0.28020630084610776, 0.2850664699548787, 0.2847772768222673, 0.279301303597456, 0.2858027912294159, 0.2730313695159232, 0.2128346301787164, 0.21998205789206737, 0.20991358961437567, 0.2177171689454963, 0.22350422665757952, 0.20388374754307548, 0.21879351849524709, 0.2197963692792806, 0.23123005539476083, 0.20375750644184487, 0.1742080114234228, 0.22008692702843513, 0.20999584836619822, 0.18705972162886852, 0.18606506512572973, 0.19320419585479454, 0.20106902163647244, 0.19806115153099169, 0.18268532415300953, 0.18925208723976794, 0.17525720056288374, 0.2047340330530003, 0.18920170052872665, 0.1800878916712476, 0.17711780093367469, 0.1820530222269462, 0.1807036185504527, 0.6211848052472561, 0.16776879919994536, 0.15241877185610886, 0.17983328252710884, 0.18510714310440024, 0.5998636301092453, 0.5333357413087318, 0.18476138593380076, 0.1862903326172084, 0.2018429185270365, 0.16700467566812827, 0.20403493260686112, 0.4878547579112632, 0.5404711684705529, 0.15878097234492616, 0.20601578855540514, 0.5191768927461289, 0.15556059943073908, 0.19828889034774388, 0.19466081117606426, 0.19125392311131972, 0.1787507014767047, 0.19055010185416876, 0.19677066657802422, 0.18673711588732544, 0.17803944273625727, 0.1837375371990395, 0.06508513482546008, 0.07051029864833869, 0.07080359562678773, 0.07530482488455459, 0.08049496059897132, 0.0713173392873716, 0.06589047259639624, 0.08170266021338846, 0.06724400514706608]}, "mutation_prompt": null}
{"id": "504a4b78-7a0d-4911-92a6-3f55e185750c", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Slightly increased population size\n        self.scale_factor = 0.85   # Adjusted differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly reduced crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search with a decreased perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.08, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search with enhanced mutation and crossover strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.2241170944008435, "feedback": "The algorithm DynamicBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "ef38acd9-92ba-4de4-a838-0b6f811d8798", "metadata": {"aucs": [0.447600865036773, 0.44719747533056886, 0.43672878350521793, 0.4562154513602984, 0.4562903071866905, 0.46688733400986215, 0.4487801451198127, 0.4387973908110271, 0.44655538245337423, 0.06114835977977018, 0.048838504598484045, 0.034363625627192196, 0.06264902846825338, 0.06736508481199599, 0.04016107048487394, 0.07247838503437665, 0.07308531245265548, 0.05127174330004436, 0.09113181391166891, 0.10427441472927457, 0.1053488783193528, 0.1013247822079677, 0.10560892508584219, 0.1012302386122399, 0.10107530799146569, 0.11751726122044015, 0.09557101834254822, 0.09221183680816125, 0.10378807161481995, 0.08527037569926033, 0.10260145187074199, 0.08170749845008884, 0.09577107141745345, 0.08812665708462264, 0.09070061046872402, 0.11044815429843036, 0.9509059742671525, 0.9560336205347526, 0.9452838876352971, 0.9589803452194007, 0.9542196935993783, 0.9538843335869168, 0.9511652081259389, 0.9585075316777126, 0.9362517965548575, 0.27202524308511433, 0.28391387012266, 0.2875533063085898, 0.29140503384035865, 0.27975482131524776, 0.2747866082674595, 0.29191437089619543, 0.2916509491823379, 0.2925339861638264, 0.3255450253519071, 0.31629009625118565, 0.3298194124029211, 0.3515221119589599, 0.4946869776431271, 0.6781954980321362, 0.32325271284195756, 0.6551475634617843, 0.3418017983122674, 0.1658196804050034, 0.1692953070999227, 0.18816712674638625, 0.17281907568703336, 0.16934154369893017, 0.16487271814078375, 0.17655491105654986, 0.18560749416725486, 0.17673248642957806, 0.1920446987440798, 0.19750584703275043, 0.19432758760258517, 0.18303839158792445, 0.18085753232331203, 0.17871487162313626, 0.17127094745239668, 0.1809258440140944, 0.18790564860220527, 0.02380706970905011, 0.024103232916559914, 0.03194183022749897, 0.019566467699149492, 0.024109469209592116, 0.026481171425175254, 0.022292471102999478, 0.05117020279281992, 0.022813407667742425, 0.08674759198983262, 0.07849486848892251, 0.07278762366433766, 0.09784169438420254, 0.08346496920368829, 0.07390397091837952, 0.08381432720149584, 0.14892279974887057, 0.08106149902029414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10385743672695313, 0.10726627821722523, 0.10354891405672895, 0.10916325027491258, 0.09945105061567405, 0.11736514466682746, 0.12405158389013016, 0.1099601105295478, 0.10589880491209192, 0.4152072667433441, 0.4300694502560748, 0.4075164772192612, 0.40667360714341516, 0.43615256639846633, 0.4076924698543417, 0.3990043580425283, 0.39150564293580337, 0.42146120132978726, 0.10719381774176584, 0.08632631033873372, 0.09811429646159453, 0.08858169209270594, 0.08955190326501739, 0.08820005086045657, 0.08126252415502877, 0.1002606142402499, 0.08644796122134013, 0.19282558807421157, 0.2001646548285515, 0.1805451647096028, 0.1315751706096, 0.17275681768561935, 0.1314947420897037, 0.23907786693929367, 0.20599833027718772, 0.1394368266696807, 0.2844717015789312, 0.288668385265491, 0.2867734735545142, 0.2874407586733527, 0.2696672723342506, 0.27145999263599896, 0.2868532024448508, 0.2784085910904509, 0.29341549883004625, 0.21041719682678217, 0.20243030073616486, 0.20997796043638617, 0.19902151023660264, 0.19977058232585942, 0.2140685296818372, 0.2252682386808429, 0.22664941872887034, 0.2271685786516875, 0.18989057644629548, 0.1753576887263607, 0.1937802685579203, 0.19954635922767694, 0.1965521343119495, 0.18511955305872474, 0.21819508715628222, 0.17137343998436205, 0.1877311235827045, 0.17617821058376504, 0.19731204083587217, 0.19350825668272364, 0.1873266645450664, 0.20338940052700105, 0.17546711970949969, 0.2022774672250468, 0.19969141507132393, 0.1815135920978148, 0.20649362278738892, 0.17894261005378065, 0.1696905914780611, 0.5235962795497221, 0.6311335576589241, 0.5510665188138439, 0.15722940679900732, 0.6287436375161681, 0.18125414907059556, 0.16291500468619435, 0.16719584021877654, 0.20360170570787717, 0.19771215435761702, 0.45556590670323893, 0.48561405167221805, 0.21099115414957048, 0.20602194170025923, 0.21227018894566996, 0.19863187471497945, 0.1904113093540284, 0.18332982833773825, 0.17961377117306898, 0.17647574795612853, 0.19009944769539155, 0.1804263943767953, 0.1842198481464289, 0.16881188711169692, 0.07789399873615444, 0.0759120192811914, 0.07624143065703115, 0.06846345176103164, 0.07204990363774122, 0.06733205572025402, 0.0729896002037449, 0.06683259247321405, 0.07053659633154052]}, "mutation_prompt": null}
{"id": "f130c96f-0cfd-4543-b8aa-15e1419d217a", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Slightly increased population size\n        self.scale_factor = 0.85   # Adjusted differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly reduced crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search with a decreased perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.08, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search with enhanced mutation and crossover strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "504a4b78-7a0d-4911-92a6-3f55e185750c", "metadata": {"aucs": [0.447600865036773, 0.44719747533056886, 0.43672878350521793, 0.4562154513602984, 0.4562903071866905, 0.46688733400986215, 0.4487801451198127, 0.4387973908110271, 0.44655538245337423, 0.06114835977977018, 0.048838504598484045, 0.034363625627192196, 0.06264902846825338, 0.06736508481199599, 0.04016107048487394, 0.07247838503437665, 0.07308531245265548, 0.05127174330004436, 0.09113181391166891, 0.10427441472927457, 0.1053488783193528, 0.1013247822079677, 0.10560892508584219, 0.1012302386122399, 0.10107530799146569, 0.11751726122044015, 0.09557101834254822, 0.09221183680816125, 0.10378807161481995, 0.08527037569926033, 0.10260145187074199, 0.08170749845008884, 0.09577107141745345, 0.08812665708462264, 0.09070061046872402, 0.11044815429843036, 0.9509059742671525, 0.9560336205347526, 0.9452838876352971, 0.9589803452194007, 0.9542196935993783, 0.9538843335869168, 0.9511652081259389, 0.9585075316777126, 0.9362517965548575, 0.27202524308511433, 0.28391387012266, 0.2875533063085898, 0.29140503384035865, 0.27975482131524776, 0.2747866082674595, 0.29191437089619543, 0.2916509491823379, 0.2925339861638264, 0.3255450253519071, 0.31629009625118565, 0.3298194124029211, 0.3515221119589599, 0.4946869776431271, 0.6781954980321362, 0.32325271284195756, 0.6551475634617843, 0.3418017983122674, 0.1658196804050034, 0.1692953070999227, 0.18816712674638625, 0.17281907568703336, 0.16934154369893017, 0.16487271814078375, 0.17655491105654986, 0.18560749416725486, 0.17673248642957806, 0.1920446987440798, 0.19750584703275043, 0.19432758760258517, 0.18303839158792445, 0.18085753232331203, 0.17871487162313626, 0.17127094745239668, 0.1809258440140944, 0.18790564860220527, 0.02380706970905011, 0.024103232916559914, 0.03194183022749897, 0.019566467699149492, 0.024109469209592116, 0.026481171425175254, 0.022292471102999478, 0.05117020279281992, 0.022813407667742425, 0.08674759198983262, 0.07849486848892251, 0.07278762366433766, 0.09784169438420254, 0.08346496920368829, 0.07390397091837952, 0.08381432720149584, 0.14892279974887057, 0.08106149902029414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10385743672695313, 0.10726627821722523, 0.10354891405672895, 0.10916325027491258, 0.09945105061567405, 0.11736514466682746, 0.12405158389013016, 0.1099601105295478, 0.10589880491209192, 0.4152072667433441, 0.4300694502560748, 0.4075164772192612, 0.40667360714341516, 0.43615256639846633, 0.4076924698543417, 0.3990043580425283, 0.39150564293580337, 0.42146120132978726, 0.10719381774176584, 0.08632631033873372, 0.09811429646159453, 0.08858169209270594, 0.08955190326501739, 0.08820005086045657, 0.08126252415502877, 0.1002606142402499, 0.08644796122134013, 0.19282558807421157, 0.2001646548285515, 0.1805451647096028, 0.1315751706096, 0.17275681768561935, 0.1314947420897037, 0.23907786693929367, 0.20599833027718772, 0.1394368266696807, 0.2844717015789312, 0.288668385265491, 0.2867734735545142, 0.2874407586733527, 0.2696672723342506, 0.27145999263599896, 0.2868532024448508, 0.2784085910904509, 0.29341549883004625, 0.21041719682678217, 0.20243030073616486, 0.20997796043638617, 0.19902151023660264, 0.19977058232585942, 0.2140685296818372, 0.2252682386808429, 0.22664941872887034, 0.2271685786516875, 0.18989057644629548, 0.1753576887263607, 0.1937802685579203, 0.19954635922767694, 0.1965521343119495, 0.18511955305872474, 0.21819508715628222, 0.17137343998436205, 0.1877311235827045, 0.17617821058376504, 0.19731204083587217, 0.19350825668272364, 0.1873266645450664, 0.20338940052700105, 0.17546711970949969, 0.2022774672250468, 0.19969141507132393, 0.1815135920978148, 0.20649362278738892, 0.17894261005378065, 0.1696905914780611, 0.5235962795497221, 0.6311335576589241, 0.5510665188138439, 0.15722940679900732, 0.6287436375161681, 0.18125414907059556, 0.16291500468619435, 0.16719584021877654, 0.20360170570787717, 0.19771215435761702, 0.45556590670323893, 0.48561405167221805, 0.21099115414957048, 0.20602194170025923, 0.21227018894566996, 0.19863187471497945, 0.1904113093540284, 0.18332982833773825, 0.17961377117306898, 0.17647574795612853, 0.19009944769539155, 0.1804263943767953, 0.1842198481464289, 0.16881188711169692, 0.07789399873615444, 0.0759120192811914, 0.07624143065703115, 0.06846345176103164, 0.07204990363774122, 0.06733205572025402, 0.0729896002037449, 0.06683259247321405, 0.07053659633154052]}, "mutation_prompt": null}
{"id": "821c4ee1-e2e7-4a9e-9478-1460afc95de9", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Slightly increased population size\n        self.scale_factor = 0.85   # Adjusted differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly reduced crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search with a decreased perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.08, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search with enhanced mutation and crossover strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "504a4b78-7a0d-4911-92a6-3f55e185750c", "metadata": {"aucs": [0.447600865036773, 0.44719747533056886, 0.43672878350521793, 0.4562154513602984, 0.4562903071866905, 0.46688733400986215, 0.4487801451198127, 0.4387973908110271, 0.44655538245337423, 0.06114835977977018, 0.048838504598484045, 0.034363625627192196, 0.06264902846825338, 0.06736508481199599, 0.04016107048487394, 0.07247838503437665, 0.07308531245265548, 0.05127174330004436, 0.09113181391166891, 0.10427441472927457, 0.1053488783193528, 0.1013247822079677, 0.10560892508584219, 0.1012302386122399, 0.10107530799146569, 0.11751726122044015, 0.09557101834254822, 0.09221183680816125, 0.10378807161481995, 0.08527037569926033, 0.10260145187074199, 0.08170749845008884, 0.09577107141745345, 0.08812665708462264, 0.09070061046872402, 0.11044815429843036, 0.9509059742671525, 0.9560336205347526, 0.9452838876352971, 0.9589803452194007, 0.9542196935993783, 0.9538843335869168, 0.9511652081259389, 0.9585075316777126, 0.9362517965548575, 0.27202524308511433, 0.28391387012266, 0.2875533063085898, 0.29140503384035865, 0.27975482131524776, 0.2747866082674595, 0.29191437089619543, 0.2916509491823379, 0.2925339861638264, 0.3255450253519071, 0.31629009625118565, 0.3298194124029211, 0.3515221119589599, 0.4946869776431271, 0.6781954980321362, 0.32325271284195756, 0.6551475634617843, 0.3418017983122674, 0.1658196804050034, 0.1692953070999227, 0.18816712674638625, 0.17281907568703336, 0.16934154369893017, 0.16487271814078375, 0.17655491105654986, 0.18560749416725486, 0.17673248642957806, 0.1920446987440798, 0.19750584703275043, 0.19432758760258517, 0.18303839158792445, 0.18085753232331203, 0.17871487162313626, 0.17127094745239668, 0.1809258440140944, 0.18790564860220527, 0.02380706970905011, 0.024103232916559914, 0.03194183022749897, 0.019566467699149492, 0.024109469209592116, 0.026481171425175254, 0.022292471102999478, 0.05117020279281992, 0.022813407667742425, 0.08674759198983262, 0.07849486848892251, 0.07278762366433766, 0.09784169438420254, 0.08346496920368829, 0.07390397091837952, 0.08381432720149584, 0.14892279974887057, 0.08106149902029414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10385743672695313, 0.10726627821722523, 0.10354891405672895, 0.10916325027491258, 0.09945105061567405, 0.11736514466682746, 0.12405158389013016, 0.1099601105295478, 0.10589880491209192, 0.4152072667433441, 0.4300694502560748, 0.4075164772192612, 0.40667360714341516, 0.43615256639846633, 0.4076924698543417, 0.3990043580425283, 0.39150564293580337, 0.42146120132978726, 0.10719381774176584, 0.08632631033873372, 0.09811429646159453, 0.08858169209270594, 0.08955190326501739, 0.08820005086045657, 0.08126252415502877, 0.1002606142402499, 0.08644796122134013, 0.19282558807421157, 0.2001646548285515, 0.1805451647096028, 0.1315751706096, 0.17275681768561935, 0.1314947420897037, 0.23907786693929367, 0.20599833027718772, 0.1394368266696807, 0.2844717015789312, 0.288668385265491, 0.2867734735545142, 0.2874407586733527, 0.2696672723342506, 0.27145999263599896, 0.2868532024448508, 0.2784085910904509, 0.29341549883004625, 0.21041719682678217, 0.20243030073616486, 0.20997796043638617, 0.19902151023660264, 0.19977058232585942, 0.2140685296818372, 0.2252682386808429, 0.22664941872887034, 0.2271685786516875, 0.18989057644629548, 0.1753576887263607, 0.1937802685579203, 0.19954635922767694, 0.1965521343119495, 0.18511955305872474, 0.21819508715628222, 0.17137343998436205, 0.1877311235827045, 0.17617821058376504, 0.19731204083587217, 0.19350825668272364, 0.1873266645450664, 0.20338940052700105, 0.17546711970949969, 0.2022774672250468, 0.19969141507132393, 0.1815135920978148, 0.20649362278738892, 0.17894261005378065, 0.1696905914780611, 0.5235962795497221, 0.6311335576589241, 0.5510665188138439, 0.15722940679900732, 0.6287436375161681, 0.18125414907059556, 0.16291500468619435, 0.16719584021877654, 0.20360170570787717, 0.19771215435761702, 0.45556590670323893, 0.48561405167221805, 0.21099115414957048, 0.20602194170025923, 0.21227018894566996, 0.19863187471497945, 0.1904113093540284, 0.18332982833773825, 0.17961377117306898, 0.17647574795612853, 0.19009944769539155, 0.1804263943767953, 0.1842198481464289, 0.16881188711169692, 0.07789399873615444, 0.0759120192811914, 0.07624143065703115, 0.06846345176103164, 0.07204990363774122, 0.06733205572025402, 0.0729896002037449, 0.06683259247321405, 0.07053659633154052]}, "mutation_prompt": null}
{"id": "9fa3785b-d652-4b83-a34d-b077e115cdee", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Slightly increased population size\n        self.scale_factor = 0.85   # Adjusted differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly reduced crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search with a decreased perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.08, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search with enhanced mutation and crossover strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "504a4b78-7a0d-4911-92a6-3f55e185750c", "metadata": {"aucs": [0.447600865036773, 0.44719747533056886, 0.43672878350521793, 0.4562154513602984, 0.4562903071866905, 0.46688733400986215, 0.4487801451198127, 0.4387973908110271, 0.44655538245337423, 0.06114835977977018, 0.048838504598484045, 0.034363625627192196, 0.06264902846825338, 0.06736508481199599, 0.04016107048487394, 0.07247838503437665, 0.07308531245265548, 0.05127174330004436, 0.09113181391166891, 0.10427441472927457, 0.1053488783193528, 0.1013247822079677, 0.10560892508584219, 0.1012302386122399, 0.10107530799146569, 0.11751726122044015, 0.09557101834254822, 0.09221183680816125, 0.10378807161481995, 0.08527037569926033, 0.10260145187074199, 0.08170749845008884, 0.09577107141745345, 0.08812665708462264, 0.09070061046872402, 0.11044815429843036, 0.9509059742671525, 0.9560336205347526, 0.9452838876352971, 0.9589803452194007, 0.9542196935993783, 0.9538843335869168, 0.9511652081259389, 0.9585075316777126, 0.9362517965548575, 0.27202524308511433, 0.28391387012266, 0.2875533063085898, 0.29140503384035865, 0.27975482131524776, 0.2747866082674595, 0.29191437089619543, 0.2916509491823379, 0.2925339861638264, 0.3255450253519071, 0.31629009625118565, 0.3298194124029211, 0.3515221119589599, 0.4946869776431271, 0.6781954980321362, 0.32325271284195756, 0.6551475634617843, 0.3418017983122674, 0.1658196804050034, 0.1692953070999227, 0.18816712674638625, 0.17281907568703336, 0.16934154369893017, 0.16487271814078375, 0.17655491105654986, 0.18560749416725486, 0.17673248642957806, 0.1920446987440798, 0.19750584703275043, 0.19432758760258517, 0.18303839158792445, 0.18085753232331203, 0.17871487162313626, 0.17127094745239668, 0.1809258440140944, 0.18790564860220527, 0.02380706970905011, 0.024103232916559914, 0.03194183022749897, 0.019566467699149492, 0.024109469209592116, 0.026481171425175254, 0.022292471102999478, 0.05117020279281992, 0.022813407667742425, 0.08674759198983262, 0.07849486848892251, 0.07278762366433766, 0.09784169438420254, 0.08346496920368829, 0.07390397091837952, 0.08381432720149584, 0.14892279974887057, 0.08106149902029414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10385743672695313, 0.10726627821722523, 0.10354891405672895, 0.10916325027491258, 0.09945105061567405, 0.11736514466682746, 0.12405158389013016, 0.1099601105295478, 0.10589880491209192, 0.4152072667433441, 0.4300694502560748, 0.4075164772192612, 0.40667360714341516, 0.43615256639846633, 0.4076924698543417, 0.3990043580425283, 0.39150564293580337, 0.42146120132978726, 0.10719381774176584, 0.08632631033873372, 0.09811429646159453, 0.08858169209270594, 0.08955190326501739, 0.08820005086045657, 0.08126252415502877, 0.1002606142402499, 0.08644796122134013, 0.19282558807421157, 0.2001646548285515, 0.1805451647096028, 0.1315751706096, 0.17275681768561935, 0.1314947420897037, 0.23907786693929367, 0.20599833027718772, 0.1394368266696807, 0.2844717015789312, 0.288668385265491, 0.2867734735545142, 0.2874407586733527, 0.2696672723342506, 0.27145999263599896, 0.2868532024448508, 0.2784085910904509, 0.29341549883004625, 0.21041719682678217, 0.20243030073616486, 0.20997796043638617, 0.19902151023660264, 0.19977058232585942, 0.2140685296818372, 0.2252682386808429, 0.22664941872887034, 0.2271685786516875, 0.18989057644629548, 0.1753576887263607, 0.1937802685579203, 0.19954635922767694, 0.1965521343119495, 0.18511955305872474, 0.21819508715628222, 0.17137343998436205, 0.1877311235827045, 0.17617821058376504, 0.19731204083587217, 0.19350825668272364, 0.1873266645450664, 0.20338940052700105, 0.17546711970949969, 0.2022774672250468, 0.19969141507132393, 0.1815135920978148, 0.20649362278738892, 0.17894261005378065, 0.1696905914780611, 0.5235962795497221, 0.6311335576589241, 0.5510665188138439, 0.15722940679900732, 0.6287436375161681, 0.18125414907059556, 0.16291500468619435, 0.16719584021877654, 0.20360170570787717, 0.19771215435761702, 0.45556590670323893, 0.48561405167221805, 0.21099115414957048, 0.20602194170025923, 0.21227018894566996, 0.19863187471497945, 0.1904113093540284, 0.18332982833773825, 0.17961377117306898, 0.17647574795612853, 0.19009944769539155, 0.1804263943767953, 0.1842198481464289, 0.16881188711169692, 0.07789399873615444, 0.0759120192811914, 0.07624143065703115, 0.06846345176103164, 0.07204990363774122, 0.06733205572025402, 0.0729896002037449, 0.06683259247321405, 0.07053659633154052]}, "mutation_prompt": null}
{"id": "d28e4af0-84ab-447e-b7b2-797e3fa4d009", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Slightly increased population size\n        self.scale_factor = 0.85   # Adjusted differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly reduced crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search with a decreased perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.08, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search with enhanced mutation and crossover strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "504a4b78-7a0d-4911-92a6-3f55e185750c", "metadata": {"aucs": [0.447600865036773, 0.44719747533056886, 0.43672878350521793, 0.4562154513602984, 0.4562903071866905, 0.46688733400986215, 0.4487801451198127, 0.4387973908110271, 0.44655538245337423, 0.06114835977977018, 0.048838504598484045, 0.034363625627192196, 0.06264902846825338, 0.06736508481199599, 0.04016107048487394, 0.07247838503437665, 0.07308531245265548, 0.05127174330004436, 0.09113181391166891, 0.10427441472927457, 0.1053488783193528, 0.1013247822079677, 0.10560892508584219, 0.1012302386122399, 0.10107530799146569, 0.11751726122044015, 0.09557101834254822, 0.09221183680816125, 0.10378807161481995, 0.08527037569926033, 0.10260145187074199, 0.08170749845008884, 0.09577107141745345, 0.08812665708462264, 0.09070061046872402, 0.11044815429843036, 0.9509059742671525, 0.9560336205347526, 0.9452838876352971, 0.9589803452194007, 0.9542196935993783, 0.9538843335869168, 0.9511652081259389, 0.9585075316777126, 0.9362517965548575, 0.27202524308511433, 0.28391387012266, 0.2875533063085898, 0.29140503384035865, 0.27975482131524776, 0.2747866082674595, 0.29191437089619543, 0.2916509491823379, 0.2925339861638264, 0.3255450253519071, 0.31629009625118565, 0.3298194124029211, 0.3515221119589599, 0.4946869776431271, 0.6781954980321362, 0.32325271284195756, 0.6551475634617843, 0.3418017983122674, 0.1658196804050034, 0.1692953070999227, 0.18816712674638625, 0.17281907568703336, 0.16934154369893017, 0.16487271814078375, 0.17655491105654986, 0.18560749416725486, 0.17673248642957806, 0.1920446987440798, 0.19750584703275043, 0.19432758760258517, 0.18303839158792445, 0.18085753232331203, 0.17871487162313626, 0.17127094745239668, 0.1809258440140944, 0.18790564860220527, 0.02380706970905011, 0.024103232916559914, 0.03194183022749897, 0.019566467699149492, 0.024109469209592116, 0.026481171425175254, 0.022292471102999478, 0.05117020279281992, 0.022813407667742425, 0.08674759198983262, 0.07849486848892251, 0.07278762366433766, 0.09784169438420254, 0.08346496920368829, 0.07390397091837952, 0.08381432720149584, 0.14892279974887057, 0.08106149902029414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10385743672695313, 0.10726627821722523, 0.10354891405672895, 0.10916325027491258, 0.09945105061567405, 0.11736514466682746, 0.12405158389013016, 0.1099601105295478, 0.10589880491209192, 0.4152072667433441, 0.4300694502560748, 0.4075164772192612, 0.40667360714341516, 0.43615256639846633, 0.4076924698543417, 0.3990043580425283, 0.39150564293580337, 0.42146120132978726, 0.10719381774176584, 0.08632631033873372, 0.09811429646159453, 0.08858169209270594, 0.08955190326501739, 0.08820005086045657, 0.08126252415502877, 0.1002606142402499, 0.08644796122134013, 0.19282558807421157, 0.2001646548285515, 0.1805451647096028, 0.1315751706096, 0.17275681768561935, 0.1314947420897037, 0.23907786693929367, 0.20599833027718772, 0.1394368266696807, 0.2844717015789312, 0.288668385265491, 0.2867734735545142, 0.2874407586733527, 0.2696672723342506, 0.27145999263599896, 0.2868532024448508, 0.2784085910904509, 0.29341549883004625, 0.21041719682678217, 0.20243030073616486, 0.20997796043638617, 0.19902151023660264, 0.19977058232585942, 0.2140685296818372, 0.2252682386808429, 0.22664941872887034, 0.2271685786516875, 0.18989057644629548, 0.1753576887263607, 0.1937802685579203, 0.19954635922767694, 0.1965521343119495, 0.18511955305872474, 0.21819508715628222, 0.17137343998436205, 0.1877311235827045, 0.17617821058376504, 0.19731204083587217, 0.19350825668272364, 0.1873266645450664, 0.20338940052700105, 0.17546711970949969, 0.2022774672250468, 0.19969141507132393, 0.1815135920978148, 0.20649362278738892, 0.17894261005378065, 0.1696905914780611, 0.5235962795497221, 0.6311335576589241, 0.5510665188138439, 0.15722940679900732, 0.6287436375161681, 0.18125414907059556, 0.16291500468619435, 0.16719584021877654, 0.20360170570787717, 0.19771215435761702, 0.45556590670323893, 0.48561405167221805, 0.21099115414957048, 0.20602194170025923, 0.21227018894566996, 0.19863187471497945, 0.1904113093540284, 0.18332982833773825, 0.17961377117306898, 0.17647574795612853, 0.19009944769539155, 0.1804263943767953, 0.1842198481464289, 0.16881188711169692, 0.07789399873615444, 0.0759120192811914, 0.07624143065703115, 0.06846345176103164, 0.07204990363774122, 0.06733205572025402, 0.0729896002037449, 0.06683259247321405, 0.07053659633154052]}, "mutation_prompt": null}
{"id": "f4852abb-1432-4ae9-ad82-5689d27fd2ab", "solution": "import numpy as np\n\nclass DynamicBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Slightly increased population size\n        self.scale_factor = 0.85   # Adjusted differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly reduced crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Stochastic local search with a decreased perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.08, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "DynamicBlendedSearch", "description": "A Dynamic Blended Search with enhanced mutation and crossover strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "504a4b78-7a0d-4911-92a6-3f55e185750c", "metadata": {"aucs": [0.447600865036773, 0.44719747533056886, 0.43672878350521793, 0.4562154513602984, 0.4562903071866905, 0.46688733400986215, 0.4487801451198127, 0.4387973908110271, 0.44655538245337423, 0.06114835977977018, 0.048838504598484045, 0.034363625627192196, 0.06264902846825338, 0.06736508481199599, 0.04016107048487394, 0.07247838503437665, 0.07308531245265548, 0.05127174330004436, 0.09113181391166891, 0.10427441472927457, 0.1053488783193528, 0.1013247822079677, 0.10560892508584219, 0.1012302386122399, 0.10107530799146569, 0.11751726122044015, 0.09557101834254822, 0.09221183680816125, 0.10378807161481995, 0.08527037569926033, 0.10260145187074199, 0.08170749845008884, 0.09577107141745345, 0.08812665708462264, 0.09070061046872402, 0.11044815429843036, 0.9509059742671525, 0.9560336205347526, 0.9452838876352971, 0.9589803452194007, 0.9542196935993783, 0.9538843335869168, 0.9511652081259389, 0.9585075316777126, 0.9362517965548575, 0.27202524308511433, 0.28391387012266, 0.2875533063085898, 0.29140503384035865, 0.27975482131524776, 0.2747866082674595, 0.29191437089619543, 0.2916509491823379, 0.2925339861638264, 0.3255450253519071, 0.31629009625118565, 0.3298194124029211, 0.3515221119589599, 0.4946869776431271, 0.6781954980321362, 0.32325271284195756, 0.6551475634617843, 0.3418017983122674, 0.1658196804050034, 0.1692953070999227, 0.18816712674638625, 0.17281907568703336, 0.16934154369893017, 0.16487271814078375, 0.17655491105654986, 0.18560749416725486, 0.17673248642957806, 0.1920446987440798, 0.19750584703275043, 0.19432758760258517, 0.18303839158792445, 0.18085753232331203, 0.17871487162313626, 0.17127094745239668, 0.1809258440140944, 0.18790564860220527, 0.02380706970905011, 0.024103232916559914, 0.03194183022749897, 0.019566467699149492, 0.024109469209592116, 0.026481171425175254, 0.022292471102999478, 0.05117020279281992, 0.022813407667742425, 0.08674759198983262, 0.07849486848892251, 0.07278762366433766, 0.09784169438420254, 0.08346496920368829, 0.07390397091837952, 0.08381432720149584, 0.14892279974887057, 0.08106149902029414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10385743672695313, 0.10726627821722523, 0.10354891405672895, 0.10916325027491258, 0.09945105061567405, 0.11736514466682746, 0.12405158389013016, 0.1099601105295478, 0.10589880491209192, 0.4152072667433441, 0.4300694502560748, 0.4075164772192612, 0.40667360714341516, 0.43615256639846633, 0.4076924698543417, 0.3990043580425283, 0.39150564293580337, 0.42146120132978726, 0.10719381774176584, 0.08632631033873372, 0.09811429646159453, 0.08858169209270594, 0.08955190326501739, 0.08820005086045657, 0.08126252415502877, 0.1002606142402499, 0.08644796122134013, 0.19282558807421157, 0.2001646548285515, 0.1805451647096028, 0.1315751706096, 0.17275681768561935, 0.1314947420897037, 0.23907786693929367, 0.20599833027718772, 0.1394368266696807, 0.2844717015789312, 0.288668385265491, 0.2867734735545142, 0.2874407586733527, 0.2696672723342506, 0.27145999263599896, 0.2868532024448508, 0.2784085910904509, 0.29341549883004625, 0.21041719682678217, 0.20243030073616486, 0.20997796043638617, 0.19902151023660264, 0.19977058232585942, 0.2140685296818372, 0.2252682386808429, 0.22664941872887034, 0.2271685786516875, 0.18989057644629548, 0.1753576887263607, 0.1937802685579203, 0.19954635922767694, 0.1965521343119495, 0.18511955305872474, 0.21819508715628222, 0.17137343998436205, 0.1877311235827045, 0.17617821058376504, 0.19731204083587217, 0.19350825668272364, 0.1873266645450664, 0.20338940052700105, 0.17546711970949969, 0.2022774672250468, 0.19969141507132393, 0.1815135920978148, 0.20649362278738892, 0.17894261005378065, 0.1696905914780611, 0.5235962795497221, 0.6311335576589241, 0.5510665188138439, 0.15722940679900732, 0.6287436375161681, 0.18125414907059556, 0.16291500468619435, 0.16719584021877654, 0.20360170570787717, 0.19771215435761702, 0.45556590670323893, 0.48561405167221805, 0.21099115414957048, 0.20602194170025923, 0.21227018894566996, 0.19863187471497945, 0.1904113093540284, 0.18332982833773825, 0.17961377117306898, 0.17647574795612853, 0.19009944769539155, 0.1804263943767953, 0.1842198481464289, 0.16881188711169692, 0.07789399873615444, 0.0759120192811914, 0.07624143065703115, 0.06846345176103164, 0.07204990363774122, 0.06733205572025402, 0.0729896002037449, 0.06683259247321405, 0.07053659633154052]}, "mutation_prompt": null}
{"id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 13, "fitness": 0.2365057864518255, "feedback": "The algorithm EnhancedBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "504a4b78-7a0d-4911-92a6-3f55e185750c", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "3f866c71-01cc-429b-8e44-a7c33ef767b6", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "ed249ad4-2923-4a4e-9e94-b363adec085f", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "5f1ea5bb-e17e-402f-9824-1c1626089c48", "solution": "import numpy as np\n\nclass IncrementalAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly increased population size\n        self.scale_factor = 0.82   # Slightly modified scaling factor\n        self.crossover_rate = 0.88  # Slightly adjusted crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_ind):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_ind:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.065, self.dim), self.lower_bound, self.upper_bound)  # Adjusted perturbation scale\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_ind = np.argmin(fitness)\n            best_candidate = population[best_ind]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_ind)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "IncrementalAdaptiveSearch", "description": "Incremental Adaptive Search with refined mutation and crossover for enhanced convergence.", "configspace": "", "generation": 16, "fitness": 0.2222167223944439, "feedback": "The algorithm IncrementalAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.45670116296754926, 0.46796800406118044, 0.45815451381652983, 0.4763359714041753, 0.4715316347026274, 0.4723188370788609, 0.4684586520604169, 0.46575011482619155, 0.4596399894153449, 0.04377673741069665, 0.0522872818560447, 0.06616882336643592, 0.06532732072957459, 0.08119101571688259, 0.10542233333342044, 0.05587416925804811, 0.04664569784557859, 0.0678980968343853, 0.10088320465984613, 0.11504316667673031, 0.0979789151506999, 0.10256142778712163, 0.10846504963038661, 0.10199953464485112, 0.105966677510694, 0.10425717599180717, 0.10274289113467405, 0.09306873381373992, 0.09721192297119063, 0.08361747596165792, 0.09381916823844716, 0.09057510656121448, 0.10402165495502702, 0.0972598606405396, 0.09580351368987872, 0.10928512115024025, 0.9638506400152188, 0.9500148481443088, 0.9489941561856872, 0.9346084275997614, 0.9465352493738706, 0.9570262221369521, 0.9285452159008741, 0.9372744415975809, 0.9427068300582078, 0.28139924261296745, 0.2765939890252693, 0.2894029424262389, 0.2896977579757013, 0.27946993715081936, 0.27795429535299954, 0.2858277698276054, 0.29547215645700897, 0.2989444268165514, 0.4776596785335905, 0.5527796172075186, 0.34743768950117815, 0.4484554165538217, 0.6083222113807032, 0.5016678288658092, 0.31922040827979603, 0.33495263313550117, 0.3508837143737036, 0.17175806182709819, 0.16915054962620701, 0.18846894361533018, 0.1613310366568832, 0.18560126159961532, 0.16325250782429157, 0.18063887076545138, 0.16435441076108948, 0.16811144296710956, 0.20197909364008348, 0.19980545542917238, 0.18700812754169638, 0.19275974254402717, 0.18994767883818287, 0.17651601406539263, 0.2046298568734658, 0.17469374136453675, 0.1814091761750578, 0.04063830561687043, 0.042866911334379254, 0.055637124285103035, 0.041622785510951, 0.03395675832816447, 0.01828304655327484, 0.06255826148412835, 0.033176350650457764, 0.04040709519231056, 0.11941110181783843, 0.07818190601701613, 0.11394479581871109, 0.10040005823793186, 0.08872988460955389, 0.10007570827825352, 0.13575082195239885, 0.1203891910446293, 0.0985562330291706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10483892427531083, 0.12087192487514986, 0.12366240745485668, 0.1181500018431072, 0.11752826488519696, 0.10542623874962442, 0.11183371985715262, 0.11359548880058046, 0.12093278121997342, 0.39577770019956504, 0.43041086349477253, 0.4136954477396131, 0.4263577394024761, 0.4025338534771715, 0.4204601145160447, 0.41169481040438727, 0.39990725228501356, 0.4075088269249635, 0.08932883975831885, 0.08384114897660333, 0.09322288820511226, 0.07594716815377012, 0.08921768931209195, 0.08237880004330167, 0.08779507767211558, 0.08209085423304008, 0.08501314267995042, 0.2695624872632416, 0.14871455092029284, 0.13092728221194305, 0.2103821443537105, 0.21815025789828402, 0.14155919921487858, 0.17969726937176933, 0.17264574494005158, 0.16855082401203092, 0.2810097345578968, 0.2806314829092744, 0.29101072590773946, 0.27323320712920973, 0.2837044708177381, 0.26232675695936336, 0.2969236524146843, 0.28956958856347426, 0.2848461234829994, 0.21923197072866363, 0.215333475749794, 0.22612054998959952, 0.2158912736805736, 0.21240135428139695, 0.207839261181062, 0.2163410922702479, 0.22177566109139346, 0.21256046205695323, 0.20093017431694837, 0.1888573474877745, 0.19432329289629935, 0.20273535539575216, 0.19642345795996363, 0.17722883582793458, 0.2173041970276286, 0.16783243246533763, 0.18417861403788072, 0.18865219464598237, 0.17857824695953584, 0.17627463295880375, 0.18440663965224313, 0.17978330494440597, 0.1825297736575422, 0.17876376603250077, 0.1862297634137995, 0.17780877670339346, 0.5372030394149618, 0.16404622168583904, 0.15181512698989574, 0.18127258583123884, 0.534955130885839, 0.1843879118985231, 0.18280344325773346, 0.18260355984382715, 0.17475137065330004, 0.20028262695300525, 0.20046269412948892, 0.44543890186123025, 0.20080881621797653, 0.19675599610529138, 0.21139510444262866, 0.20955206112335034, 0.21027443667087087, 0.19509258337599855, 0.20347893809050932, 0.19806353682951083, 0.17720274174192452, 0.19917943711703223, 0.20931369977756387, 0.18521551691624205, 0.1813196794607589, 0.19615231034728664, 0.2100566938445867, 0.07573243887920011, 0.06494210243788512, 0.06501399238301042, 0.09168556041032838, 0.08013250132542782, 0.079775008446617, 0.07536047905029608, 0.06520674034331675, 0.07066465245836484]}, "mutation_prompt": null}
{"id": "372166f7-2aa9-4092-97f2-2629ae13d081", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "253c25a8-c8c6-4f5f-bf14-3ec71f95184a", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24\n        self.scale_factor = 0.85  # Adjusted differential evolution scaling factor\n        self.crossover_rate = 0.88  # Fine-tuned crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with optimized mutation and crossover rates for refined performance.", "configspace": "", "generation": 18, "fitness": 0.23170412781277128, "feedback": "The algorithm EnhancedBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.506025527029722, 0.42847568727403285, 0.47381197976239264, 0.46978489521967415, 0.462526773121949, 0.44713259834561625, 0.463631374974662, 0.46221777913267637, 0.47713705808025386, 0.07653792878309851, 0.06285429775169249, 0.048446920452398845, 0.062458248754768464, 0.04748118797439238, 0.06602698963123022, 0.08032908462597077, 0.06435742653382182, 0.048818341421472344, 0.10390910563072575, 0.1314736051740516, 0.1005728821475197, 0.09094942600657119, 0.10997444041382765, 0.10875069865787135, 0.13701350739258145, 0.10675238159538403, 0.10435437855027008, 0.09382254683480629, 0.09166792966573845, 0.08414937694460789, 0.0946283495827811, 0.0862267623117392, 0.1157355935187917, 0.09445265494521315, 0.09063398960800928, 0.09924225815853227, 0.9350920322887863, 0.9424964338101147, 0.9360636200908489, 0.9579622178283128, 0.9646285870831932, 0.9336899816993828, 0.9407092850890503, 0.9759697857926043, 0.9639081768009268, 0.2824849595217105, 0.2761006427214924, 0.2900327920395027, 0.29263088526169334, 0.272714478358, 0.29500387514749504, 0.2688786753499136, 0.2825114397905535, 0.2932174431031903, 0.3294443678863992, 0.3300239544316821, 0.31320211092630823, 0.4078137914153753, 0.3257921237012139, 0.6599512699921861, 0.6600359173594802, 0.33074424311853, 0.42282926431686485, 0.16268356342337098, 0.16879052427472307, 0.1662210391916169, 0.17177120217111008, 0.18533347417472312, 0.16669085215987378, 0.17543081433514274, 0.1632717431359917, 0.1643109445117681, 0.17038075510833728, 0.17605708096923567, 0.17587016961497703, 0.19201825400578465, 0.16466145247191066, 0.19203669602757678, 0.17478224728169567, 0.16500317409458098, 0.1783188851073001, 0.047088744755830136, 0.01699729039932829, 0.01818159718728607, 0.04894391187370761, 0.014404039706792382, 0.03026872274334491, 0.011217248361598875, 0.02237652701243953, 0.04360672330150772, 0.08693952547436479, 0.10132009908648854, 0.11816803188876146, 0.0808308466314358, 0.12440510606522925, 0.09596802082889122, 0.11620077307457854, 0.11725150507871385, 0.10690442535235456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028186224200377197, 9.999999999998899e-05, 0.10402662685806752, 0.12271654643466678, 0.11345116087562368, 0.11992352635767134, 0.1366753076650017, 0.10912164045791761, 0.11556840056229634, 0.11751707388851351, 0.11970552041749616, 0.4027765132216615, 0.4225241182442452, 0.42569928819471947, 0.41901681190035045, 0.4165994806220613, 0.42970806274167883, 0.39998841299739074, 0.38970954937699087, 0.40930675451279996, 0.08181881264441981, 0.0872501525649263, 0.09392613873977151, 0.07449144295155552, 0.08335775808419732, 0.08448049051121653, 0.09358080372387945, 0.0844845551808745, 0.08806739761891436, 0.1745927981855524, 0.13880981300973871, 0.15776671733532088, 0.19909892878961022, 0.14404601705905407, 0.14220541231879613, 0.1545296742085298, 0.18501388969709276, 0.2408934575126389, 0.275792377724135, 0.2816990507721463, 0.2650927057826884, 0.2893383595120834, 0.26743981439472986, 0.2783401991649759, 0.28986231013323027, 0.28981023695732777, 0.2797247405987734, 0.2101673386709878, 0.21422168286100574, 0.2080548193989754, 0.1996349296665133, 0.20944092874261888, 0.21596130112379708, 0.23086755759008726, 0.22565841725886926, 0.2221425245496531, 0.1797785301296113, 0.17691498524393934, 0.1911553541985651, 0.18651655085155538, 0.21322704064100828, 0.17571220548703936, 0.20541115596953174, 0.17623163906058636, 0.18507587549231574, 0.17358603165184672, 0.18171060994166488, 0.18405448555092496, 0.21258555283854552, 0.17958126834438848, 0.18287193843922123, 0.18027031264542714, 0.17407936034710403, 0.19081444711506002, 0.6360947367307769, 0.17246788603233087, 0.15105931491034885, 0.5873075289724052, 0.659815506529127, 0.5674868750397499, 0.5819708115665245, 0.16080889896632722, 0.1727453571896045, 0.20260083002816998, 0.2030028836104082, 0.41849616226266284, 0.5218534804321158, 0.4903489581155186, 0.5840099565046021, 0.20969077095034716, 0.5452588561800754, 0.2091062297862185, 0.17734803517365239, 0.1776619025985614, 0.18379509833857088, 0.18385130969486219, 0.17595955039219446, 0.21421917489791664, 0.17466699645146055, 0.1778011114389032, 0.17549131762764825, 0.06844890435577344, 0.06634129109800158, 0.07106366520429763, 0.07638781052018584, 0.07028540011304973, 0.06346067258152199, 0.09253991623818403, 0.06995460071433612, 0.07479313775992047]}, "mutation_prompt": null}
{"id": "7ef8de0d-0c50-4980-8d75-6b49a2a9e420", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "9dc5c60f-ad6d-4f62-a842-c858c6cbaf5f", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 26  # Slightly increased population size\n        self.scale_factor = 0.85   # Tweaked differential evolution scaling factor\n        self.crossover_rate = 0.88  # Updated crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+3) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Slightly refined local search perturbation\n        return np.clip(candidate + np.random.normal(0, 0.065, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Improved Differential Search with Enhanced Mutation and Local Search for Efficient Optimization.", "configspace": "", "generation": 20, "fitness": 0.22708847875708174, "feedback": "The algorithm EnhancedBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.45711535194705455, 0.4460618154249606, 0.45180525949411576, 0.4680175764190989, 0.4735342790131646, 0.46671334809043985, 0.4829862295305052, 0.44496564390700954, 0.4426525842957022, 0.06736498489409737, 0.0561351531483808, 0.05114522797170262, 0.06850938641474935, 0.06188631607500816, 0.06032872169554415, 0.06288038813438868, 0.04153206095790096, 0.046974165214526464, 0.09930161462486942, 0.10947224073158468, 0.10260205474545159, 0.10591881204860598, 0.10821736005878824, 0.10240506973799146, 0.11017060491639585, 0.10914095227885989, 0.09760951639564353, 0.08902182993999719, 0.09656009724356207, 0.09709978485487425, 0.08416305239232447, 0.09131004176147584, 0.0898097336255651, 0.1126368570795998, 0.10327868459636647, 0.08644365867237991, 0.9725884206334677, 0.9602315269082975, 0.9462098281432159, 0.950474030239312, 0.9555915262717875, 0.9516892158035624, 0.9281661444681522, 0.9789052282100207, 0.9497363565779242, 0.28712263367556123, 0.2756529136713206, 0.28368903880991136, 0.28902278433189743, 0.28486354521277957, 0.28727819669694576, 0.30013347068307117, 0.2896512082754541, 0.28251864984990105, 0.47372052936393083, 0.29932030891569283, 0.4870876000588812, 0.34414480034508255, 0.32001837932398924, 0.3478351135901343, 0.3978199632681624, 0.46640106801481185, 0.33160252991826833, 0.17070417986486663, 0.15618518596596298, 0.1669133763453312, 0.1521550421302028, 0.16525027974502593, 0.17836512785773828, 0.16838424411166575, 0.15780609191475214, 0.15403492249017858, 0.1837876345870486, 0.2076047761833204, 0.18686862707390883, 0.16520095987986916, 0.20019632368150087, 0.20677679380188152, 0.1739021903112269, 0.15807406904605525, 0.1815717409918287, 0.017688408759086283, 0.024532255037864492, 0.02555308286126934, 0.033559941509701985, 0.03170193365122309, 0.028042633641132797, 0.023339265997469605, 0.015214933395502173, 0.030951775838713003, 0.10282157087600352, 0.09440383184187195, 0.09581638486368538, 0.10779476149991007, 0.09786375710806205, 0.08119732561152904, 0.10170807053368225, 0.09880341207606724, 0.10845127057990811, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012027215784484735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10409436990639953, 0.10217682717889165, 0.12698145987216836, 0.12044871538686985, 0.11602071405621805, 0.10548879195124516, 0.10955294763617618, 0.10192535319141605, 0.09238646979635212, 0.3975764234494873, 0.40163761791122654, 0.4233604305635178, 0.4344042917040323, 0.4025157419735923, 0.4057870249760954, 0.402551016371518, 0.39055176408759684, 0.4130792952969232, 0.08371231284448366, 0.09144913486946149, 0.08674838882801195, 0.0915577380123539, 0.07910106037241826, 0.08833714991198394, 0.09163169477460564, 0.07673095448602618, 0.07784466701143433, 0.15536699155675415, 0.22090996692501597, 0.16564349921596144, 0.16009611162443194, 0.2652130235714877, 0.22157522752155123, 0.15814468996873787, 0.23196466446865438, 0.12142506023625299, 0.2732999504634389, 0.28096583743468106, 0.2698054186694785, 0.26651876030344, 0.2770913794327162, 0.25541949423994603, 0.28497840978522304, 0.2855922747377365, 0.28768025990135937, 0.208326579981153, 0.2133781465412926, 0.20529761851163852, 0.20412469374397002, 0.19436511862661687, 0.20630146145827, 0.21637121241018864, 0.228198845833251, 0.21897836371335866, 0.17669155159318473, 0.16666504728809728, 0.19453095502380202, 0.1841607348162806, 0.17934488168360552, 0.19042683934290594, 0.17896047057458508, 0.18221525838407793, 0.18380422877183433, 0.1822076733933744, 0.21124141810946218, 0.20443093885683483, 0.18388423014771427, 0.18878649186098384, 0.1774553154735924, 0.17633346450984977, 0.18368097486554447, 0.18491378856726937, 0.6253538848956082, 0.1705631264191163, 0.6557149913179718, 0.5393943472590689, 0.18262847060640097, 0.20206320658817445, 0.555005965429461, 0.1804065432536487, 0.17735316132286005, 0.464176347102253, 0.488080614121988, 0.5461011398656532, 0.3083796008050683, 0.5229493275515456, 0.38877748002838575, 0.2097480267173628, 0.20827316215690672, 0.21020029392712203, 0.19263962192389295, 0.1803405250667427, 0.18319479649869808, 0.17923974286444477, 0.18537794642480854, 0.1735056820644737, 0.17948860804475297, 0.17948804134018992, 0.18321997820973224, 0.07281857461322139, 0.06722557243087357, 0.06748108443065848, 0.06793424232758938, 0.07209994950184884, 0.06552410922408347, 0.06856603912753267, 0.0632553126783929, 0.0676478419912957]}, "mutation_prompt": null}
{"id": "a7d52aaa-df10-4a42-9f73-142c8b916e44", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "8b611318-d613-4f1e-9eb3-c0397fe68f21", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "e16fccee-8de7-4c58-8ed0-324da4b60307", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "be72a934-d26a-4db7-9204-f477277c9d98", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "b623bf98-2dc5-4b3e-9481-42c949bd3f75", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "6433bfff-0213-4fc5-bfa2-9a12349c038e", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "b1e406ca-de64-4fe7-ad21-a3e95ef74119", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly adjusted population size\n        self.scale_factor = 0.85  # Fine-tuned scaling factor\n        self.crossover_rate = 0.88  # Adjusted crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.06, self.dim), self.lower_bound, self.upper_bound)  # Adjusted perturbation scale\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with fine-tuned mutation and crossover strategies for optimized performance.", "configspace": "", "generation": 27, "fitness": 0.2266461134393625, "feedback": "The algorithm EnhancedBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.46495407766063235, 0.46445463530822106, 0.4760812924737866, 0.469630181812568, 0.49029614586332715, 0.4742689369914178, 0.4683435154969521, 0.48310378431143264, 0.443026786700622, 0.07429264067769814, 0.03974322597667401, 0.05336944071159344, 0.05441340264429395, 0.07788096633400932, 0.06676822111461789, 0.06293682825384928, 0.06254544101367099, 0.061596559301396514, 0.09943642526549024, 0.11506305038656961, 0.08833490227385665, 0.11387139463581586, 0.11011628614086444, 0.09536082709357396, 0.1091478441083662, 0.10707334891741538, 0.10308224968084301, 0.08678632714853962, 0.11069565690121186, 0.0876744932207062, 0.08961129893884079, 0.08986551136510001, 0.0867751745693287, 0.08888464586078337, 0.09753562490039336, 0.07870213156024308, 0.9646598702017216, 0.9422055207563994, 0.9745683783681955, 0.9357897897581448, 0.9518244798239779, 0.9729596066318945, 0.9431179751780255, 0.9359460373666328, 0.9461598418892878, 0.28628596438988574, 0.28246520500197014, 0.2892406127589381, 0.28422178297999745, 0.3026023906340283, 0.2921769532608318, 0.28967980966224494, 0.28659346967312105, 0.30291083150917253, 0.4243561926568392, 0.5459869632283478, 0.5515101656818833, 0.38878154831696954, 0.5048935165638633, 0.3226868358806463, 0.3334775310221778, 0.3902410785648658, 0.34218997930466266, 0.172612698103649, 0.16238408307105034, 0.15341414170152168, 0.1833644347556469, 0.18029093437363353, 0.14976975823919858, 0.17759049922721493, 0.15641051017946905, 0.16232189325644708, 0.19819997343105755, 0.20015810613391383, 0.20537111382423823, 0.20452062766747736, 0.18558880452380944, 0.188373137646222, 0.17012907317616888, 0.19952711041726368, 0.1771575392784318, 0.036167478237427164, 0.043691854745958714, 0.01850215178784198, 0.0254615233784643, 0.027169670673240165, 0.02199451303964739, 0.02683343545702921, 0.026568953084878166, 0.0321639669453645, 0.09944934508437453, 0.09508800863947109, 0.1217584991149282, 0.15847292975525473, 0.10992575151626538, 0.09240429911489167, 0.11811134227119169, 0.0853635777944517, 0.11082460655110171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017968046274748906, 9.999999999998899e-05, 9.999999999998899e-05, 0.10796366034891924, 0.11345799612319352, 0.10743025885619861, 0.11046946313812278, 0.11598149025506665, 0.10985675932596206, 0.09925120989288205, 0.10920931918622923, 0.10999576921836873, 0.40474952448651724, 0.41108789897421616, 0.4182596678443028, 0.3998499877712859, 0.44110653311323256, 0.4337143538416047, 0.3936225141851686, 0.400326895684626, 0.42132878763277337, 0.09015133957735522, 0.10147147162843373, 0.08102048543168439, 0.08167823787945183, 0.08502778602562977, 0.09507117269525245, 0.0833859445952363, 0.14080413912359113, 0.09065240732399105, 0.22213156296892989, 0.21955460476348443, 0.15323723424587732, 0.14619380229982348, 0.23614043374529636, 0.1796812774956148, 0.19201291955679034, 0.16144021559724098, 0.16772798156814173, 0.26441434796688823, 0.2951897724763246, 0.28390414010307485, 0.274072955298587, 0.2838595039435411, 0.28261362721626726, 0.2952009090817447, 0.2776767290233474, 0.28398080213788757, 0.23167297002303666, 0.21738247551592038, 0.2070639939199791, 0.20933332492508627, 0.18929692933448883, 0.20110635279698674, 0.23183132053940414, 0.21647354009591468, 0.2413954033929464, 0.20233825711807207, 0.20675963235237427, 0.20541709224863713, 0.18177295334700905, 0.1860164436102899, 0.17554927477302096, 0.19798940658712183, 0.18227631971812808, 0.21769987434785032, 0.18890170303943743, 0.1699629384162179, 0.19757561213244368, 0.1785417403505779, 0.1760970121194808, 0.18341659136081856, 0.16887813857812195, 0.19524136550994586, 0.18176543017179436, 0.6118147840078387, 0.1700004238137781, 0.15212106235957212, 0.1714491950858148, 0.6164746108904068, 0.1827084324559971, 0.4430073123966458, 0.5874392383937173, 0.18464700694586644, 0.16531795555628837, 0.19936283339495509, 0.39410261157347504, 0.42650908372256613, 0.19577195290215332, 0.20281610397424898, 0.2100382393927347, 0.20879950679990766, 0.4547845750911983, 0.17722295555764045, 0.17129724549119252, 0.17789988392009604, 0.18238876652517433, 0.1712009479687322, 0.18502654758570147, 0.19036442901494732, 0.1902775979897975, 0.18713014391818183, 0.07236982996701957, 0.06722961145844053, 0.06420903761379226, 0.06395975055923919, 0.06750476194132338, 0.07184229352780636, 0.0672640740491981, 0.06827521402651548, 0.07222973555196566]}, "mutation_prompt": null}
{"id": "9e9776ab-631b-48d9-94c7-4196f644a3b7", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "c5064a07-13e7-49ec-b914-ef1a02647b93", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "642d5969-4043-40f8-949d-a09b4c6bfe7d", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "c43db390-d503-49ef-a2cd-1c73ee1d473f", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly increased population size\n        self.scale_factor = 0.85   # Refined differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly adjusted crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with slightly adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.065, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with refined mutation strategy and adjusted population dynamics for improved efficiency.", "configspace": "", "generation": 31, "fitness": 0.22894073616486607, "feedback": "The algorithm EnhancedBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44383687154110407, 0.4528423264778514, 0.46448936965454035, 0.455078534435296, 0.45263472762292944, 0.45639773598393063, 0.45495819525380043, 0.4512623369339762, 0.4533099301145781, 0.04609743988963333, 0.06697266448210526, 0.04890532783915147, 0.052151379698960554, 0.048819390120791506, 0.0469706687223721, 0.06812396995083692, 0.04665542906362585, 0.07042807717026955, 0.09620787202583181, 0.11878736870851758, 0.12112192027895452, 0.10906976220928266, 0.11287217886524992, 0.10701320729619479, 0.08845820207639421, 0.09066475303851695, 0.09926320801688648, 0.09064036890800486, 0.12749816755790855, 0.09765914036158208, 0.10221615444094878, 0.08917431923959762, 0.09210527746739083, 0.08034407525579768, 0.09456222244486612, 0.0853076152490283, 0.9645884225453937, 0.9498501971830386, 0.9745645552276647, 0.957841206695763, 0.9509517598733073, 0.9728910843083242, 0.9429583172465688, 0.9353075474281954, 0.9420472927802501, 0.2813528995713951, 0.28965615268969036, 0.279454689755147, 0.27994354739731253, 0.3049132795195385, 0.28905858532158335, 0.2844514415356971, 0.28531040219767767, 0.28944739269580344, 0.4170022736311243, 0.4065192229326112, 0.5993546804011155, 0.5286404487261591, 0.3751497433528792, 0.536914471241711, 0.5685977312836652, 0.5940957983997424, 0.5954838714989072, 0.19970242620413547, 0.17616017733509903, 0.17850758358117746, 0.16911923584308075, 0.16624003312949098, 0.1737733340346418, 0.17168063779613219, 0.1856100317261421, 0.16349912383194132, 0.19099730280393246, 0.1952667932003015, 0.19128471510799694, 0.1972946776673803, 0.1947176328975948, 0.17004495337776804, 0.18669210265611857, 0.16361115890852562, 0.18509353888053826, 0.058346869875948726, 0.04876253637348926, 0.02830104250497023, 0.0299481633174008, 0.026067865457695016, 0.021378335972215612, 0.016367422250718855, 0.04413602127242744, 0.02983268334455902, 0.08635348073645532, 0.09734582585447737, 0.10591621330872236, 0.11032056583466543, 0.08859754209353665, 0.07573840632433004, 0.09773184010973968, 0.09383347192264335, 0.11527466696596655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005670363876735252, 0.007467998690263822, 9.999999999998899e-05, 9.999999999998899e-05, 0.11219693661835284, 0.09954232041272659, 0.09572516230971884, 0.11427646308959172, 0.1010186631445329, 0.11719826501557729, 0.11382867003740171, 0.11707557950667846, 0.1265210188445398, 0.3971150726810023, 0.39822978329769476, 0.4311349392257684, 0.42108860461356645, 0.44245154447572765, 0.40729935202654954, 0.4251880307596029, 0.39868845138845244, 0.4319878672301446, 0.09813905647652954, 0.09459494079008346, 0.08074967722827919, 0.08165939489122809, 0.07578748551263093, 0.08151441083732369, 0.07880917159463008, 0.09508213196129, 0.09468826251341711, 0.23279235424063072, 0.200952649894942, 0.13329341216162116, 0.20906424288178682, 0.165683616057817, 0.12992163232639609, 0.15732123531369957, 0.14139104741063024, 0.139130258516175, 0.2785010867067861, 0.26818193588686057, 0.28274104473388073, 0.28445310044054584, 0.2692144581281941, 0.2660161191396847, 0.28374140506933165, 0.2744990153516901, 0.29461839191245576, 0.2217038761023734, 0.21219147719378517, 0.20251485655352552, 0.21694520453744626, 0.19603111621815117, 0.20748361355933176, 0.21720500344334237, 0.21300357474755938, 0.21330076069204595, 0.18705393476075538, 0.19392344592091593, 0.19675894378201908, 0.17363907390823075, 0.194934691761948, 0.18416367068593098, 0.19143955292035297, 0.19196835564781478, 0.18077652689628465, 0.1791479978628393, 0.192628005217527, 0.17756800728752098, 0.18261572542007876, 0.19095897480122515, 0.19889711296479495, 0.17344223701862738, 0.21375361725995934, 0.17703759355417492, 0.1666680667294702, 0.18150390393815685, 0.17022608404247896, 0.5831336750028704, 0.6246344328852141, 0.574380037292138, 0.17781101281022205, 0.5047799882333677, 0.1887689844715844, 0.19922198569761518, 0.1961987429351857, 0.48580854498614223, 0.4416886973851287, 0.1963740257886447, 0.3789865404158417, 0.21021268835445495, 0.2065867959498825, 0.20490201237625316, 0.19463054122061918, 0.1720642633050098, 0.18071267533610358, 0.18427720832135297, 0.19514977966482105, 0.18325642569193246, 0.1865768848731958, 0.21048223680265132, 0.18840222836388376, 0.0774918903508951, 0.07059706692884682, 0.06149362099775679, 0.06707920563909575, 0.07269258249897048, 0.07079549314365563, 0.06670297842498785, 0.06640419630072869, 0.06477764966031685]}, "mutation_prompt": null}
{"id": "84690c0b-b045-4d1c-b442-49a620920ddb", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly adjusted population size\n        self.scale_factor = 0.82   # Fine-tuned differential evolution scaling factor\n        self.crossover_rate = 0.88  # Tweaked crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Modified Enhanced Blended Search with refined population initialization and crossover strategy for improved efficiency.", "configspace": "", "generation": 32, "fitness": 0.22756795280886435, "feedback": "The algorithm EnhancedBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.4777421444523344, 0.46576083425517656, 0.5512882756330746, 0.4531749491167184, 0.4515814634044293, 0.4759438244221478, 0.48833074294747925, 0.4556508769595544, 0.4526057855432205, 0.05409751485931613, 0.05765605219905334, 0.07023473074005637, 0.05845798359711829, 0.04778054248731822, 0.06825337144492238, 0.061384876062501426, 0.05995703074564407, 0.04345403900597122, 0.10268068114503293, 0.10161850961206198, 0.11391442561070686, 0.09913656239710833, 0.10561250888972173, 0.09455226362221325, 0.116509614804858, 0.10340985482790033, 0.10878738967967494, 0.08822147809531256, 0.0905486701926933, 0.09150028579886271, 0.08433619308511298, 0.0886065732823117, 0.10357518993703074, 0.0955915562611459, 0.09211182557983943, 0.10207428453456557, 0.9637795920590323, 0.9590962939025933, 0.9485062642367091, 0.9352706555798691, 0.9463426417315608, 0.9569301434659443, 0.9294337831460564, 0.9619866356407253, 0.9542927408146332, 0.2698378726477674, 0.2950101532248912, 0.288248436222859, 0.28558610899939185, 0.27065640587556394, 0.30600670508892114, 0.2814581248330804, 0.29671122049767096, 0.30338041677413496, 0.40632201000606716, 0.4811846043483111, 0.3300186314653589, 0.33819622952616846, 0.46220314975920407, 0.5616274228985667, 0.6295035240421514, 0.33985064960088673, 0.48060472945572486, 0.1650557814247985, 0.16378320507876198, 0.15575345520736994, 0.17373437248085843, 0.17643830877267597, 0.16699856603067453, 0.175503113325987, 0.18329429000966457, 0.15624056898524885, 0.18257877174964698, 0.17636875593946766, 0.22050103563318557, 0.18781842467159482, 0.1732356563508869, 0.17981111454761833, 0.18478734609642045, 0.16218681143308744, 0.16758123859589413, 0.0382504874745786, 0.03806865382338287, 0.019999701681685966, 0.0238630822900463, 0.025313969985385487, 0.031090319526617893, 0.017175622442550775, 0.03277693051602726, 0.015579706427394924, 0.109089843644251, 0.08211128553284341, 0.16001411140917865, 0.0950597813250662, 0.10779264623841678, 0.09369935455014711, 0.12411980737490702, 0.10114018824085758, 0.11664496121133072, 0.007514957003939338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02056881050586412, 9.999999999998899e-05, 0.006493399614549755, 0.10951655765437596, 0.1070425165715958, 0.10808450496991595, 0.11702100469987453, 0.10980603016182489, 0.11249339548512294, 0.10558156079491943, 0.10654374347286288, 0.09788039689573036, 0.4253969871993668, 0.43817585279171567, 0.42111394573526073, 0.418728017668171, 0.409060842673342, 0.4096474200892616, 0.41830853400799184, 0.4128423073766926, 0.3962021923527882, 0.09210457977237385, 0.11838272663971816, 0.09088626914652509, 0.08267531806556272, 0.09058390010789463, 0.08914302181952227, 0.07779637785871452, 0.11408888374176862, 0.08289687059282402, 0.1308758772057952, 0.15081215782261426, 0.19801068552312817, 0.16732424962216919, 0.21077812315294997, 0.15461252708042317, 0.24949545413663465, 0.16984092556621055, 0.14636755754002095, 0.2808166490368146, 0.2746683433250593, 0.26618371616074765, 0.2829723136186538, 0.2812420293424446, 0.2844715307840827, 0.2734064795808193, 0.28044382247607014, 0.28877726696226, 0.2158146288413234, 0.21295049048834702, 0.21953856841762687, 0.23343240614401872, 0.20316738176931504, 0.20351776390079934, 0.2283379690455315, 0.208832674227172, 0.2288800313130851, 0.21178406373787462, 0.18709640697751806, 0.18246589429192273, 0.18795838260387077, 0.18221481650211369, 0.20125512017436964, 0.1928755754294058, 0.17824230006922603, 0.1907130713121331, 0.18135240923927287, 0.2022829413876509, 0.18215466324586482, 0.17396180890972646, 0.1748996275747311, 0.17541964897581397, 0.17657122922740787, 0.17388111606975531, 0.18280459631085033, 0.6150914566204784, 0.16392367730353508, 0.15146960606576299, 0.17125159375047372, 0.18897695314003093, 0.5326509371213599, 0.5972660696685109, 0.452217836677556, 0.1717174141008585, 0.20009022352827355, 0.16393692232973767, 0.5064565951301677, 0.36250511581956146, 0.1888645029537641, 0.21187715922579375, 0.2096312070526014, 0.20906789122759628, 0.5855210977498295, 0.19038197950380786, 0.18441841111128887, 0.18134512364287259, 0.18440321404282556, 0.18127864401534355, 0.1977969502236031, 0.17711523108355265, 0.19848104452208726, 0.18599147636332647, 0.06523726099853944, 0.07231611793891679, 0.08025334898055514, 0.09383696478035253, 0.07730695731358483, 0.06701940352437019, 0.07354213431535572, 0.06549833333680344, 0.07360340985338076]}, "mutation_prompt": null}
{"id": "bd9a1ea7-d736-4ebd-9528-7acfcc3694db", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24\n        self.scale_factor = 0.85  # Slightly increased differential evolution scaling factor\n        self.crossover_rate = 0.88  # Slightly adjusted crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c + best_idx - idx)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.065, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with improved mutation strategy and dynamic population adjustment for better optimization performance.", "configspace": "", "generation": 33, "fitness": 0.09982770508019569, "feedback": "The algorithm EnhancedBlendedSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.13.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.15998064305789195, 0.14850793500341697, 0.15652195649895384, 0.16122059483457019, 0.14577573253079956, 0.13747134266852956, 0.1993829737746735, 0.22030416654357277, 0.21294734793623848, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053782335173048534, 0.05544088021666871, 0.05425279358206536, 0.037448866301061035, 0.042652717810721, 0.04054011692884141, 0.02791430389925098, 0.02754557083387532, 0.03685841758334607, 0.031538806734690894, 0.03211847036667892, 0.02787863188215145, 0.024038451542933048, 0.017188288267393492, 0.026705937917878342, 0.04524840516415274, 0.01777825532142341, 0.03682479367161284, 0.6617181602519054, 0.6872779248421437, 0.7953326753214169, 0.7321072582015946, 0.6861832566585152, 0.7835222100374455, 0.4119959554347591, 0.2294915995655472, 0.48989332836327226, 0.05457862766111754, 0.05307647878746413, 0.08373484043163659, 0.09344231657235846, 0.05579933304622886, 0.07931570028870505, 0.0761580980631148, 0.07771692077945935, 0.07718499545381496, 0.10724817627552508, 0.10095225413853692, 0.0933470814727474, 0.13102025026932518, 0.11151914622053105, 0.07887448720152224, 0.09797678459342629, 0.08481329141127247, 0.10744734204415984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01618867148136527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018568398813455511, 0.006500646389447362, 0.007347690258331596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025598834709150697, 9.999999999998899e-05, 0.023487077358315456, 0.04827424506357636, 0.05130764328209825, 0.004295499983547613, 0.005653444370198324, 0.003788725338669474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011419543706652213, 0.2034198534155912, 0.20009669410355935, 0.19066968490430913, 0.18129923585523133, 0.21672544960429563, 0.17568358240751036, 0.193446734978295, 0.15666444472609675, 0.16694717157766314, 0.03378252089559286, 0.05487872587045983, 0.031274915289889904, 0.014683561436590442, 0.024895960829029895, 0.03895385824659536, 0.02468168187260067, 0.031788054674191546, 0.041265034123049604, 0.10426976602059435, 0.12501026387020664, 0.100476978987465, 0.1319283858220096, 0.13941331568242954, 0.13169654036574796, 0.11986477273303331, 0.14334751300497373, 0.10031478921761228, 0.16626939721526046, 0.14462831340894244, 0.1452774334420841, 0.16214204636720875, 0.14087689927844116, 0.1385078918315441, 0.15013799653907167, 0.17377774300845283, 0.16413189072228396, 0.10031515897267651, 0.10072424303211924, 0.10359363115575015, 0.12441727927202628, 0.10257046141011228, 0.0923612595921226, 0.10479557475848555, 0.11232494594764575, 0.08663882607228657, 0.1324374368827561, 0.14650646693368563, 0.14437624693391393, 0.143620636936986, 0.12450819795099466, 0.12840976900176082, 0.14000030147691978, 0.13686482182049164, 0.14837323528651214, 0.140790188569079, 0.13677329472259303, 0.12999825333194626, 0.1269706974096103, 0.0610888143084638, 0.1322909817162896, 0.08823080845507625, 0.13462491677948185, 0.10085724951355224, 0.13409439265266787, 0.1385116839556958, 0.15093816719056996, 0.14774602967208172, 0.1207914665021157, 0.1100003064623648, 0.14639449767050594, 0.12066148166485924, 0.14550962963206293, 0.1400767724837778, 0.12244480122083645, 0.14757058816910196, 0.08600398139083498, 0.17914384508137504, 0.14132596114237983, 0.1445547040461681, 0.17851840091479332, 0.13227921835386192, 0.17843852848871522, 0.17661245176013962, 0.16880665392876015, 0.19482250988789407, 0.19322904406909314, 0.17546347961883535, 0.19540104316886886, 0.18330851535001869, 0.1786975484088381, 0.03209788659580848, 0.040481973626294576, 0.040437489717872976, 0.030825719494244952, 0.032892481558016495, 0.03551541243260037, 0.045134257152880664, 0.035892834055777034, 0.03032923730960324]}, "mutation_prompt": null}
{"id": "f8881248-db1a-4cc7-a257-ab2f00c5b479", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "a2004d8a-b07c-4795-bead-be132df75e6c", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "4a2e9dc9-fb01-41a0-bd23-7041435addda", "solution": "import numpy as np\n\nclass EnhancedBlendedSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Increased population size\n        self.scale_factor = 0.80   # Modified differential evolution scaling factor\n        self.crossover_rate = 0.90  # Revised crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        # Local search with adjusted perturbation scale\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedBlendedSearch", "description": "Enhanced Blended Search with Adaptive Crossover and Mutation for improved optimization performance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.44735175229777446, 0.44463388742645316, 0.4442415412439009, 0.4700243404641392, 0.46935101737269846, 0.43398128153666027, 0.479447972592174, 0.4574936207728476, 0.4555461840097501, 0.047755235775506666, 0.0451730937878414, 0.06985715979002238, 0.0667552508165683, 0.045658155789701005, 0.05898968635136259, 0.04415709160064707, 0.06177976703232435, 0.04323341793196456, 0.10177363938149842, 0.09266102887103445, 0.10432028473578026, 0.09976169109638444, 0.10541976371221684, 0.09926869668924532, 0.10500299110283418, 0.10961516020655149, 0.1097142544095886, 0.08508913555501496, 0.09263234732936054, 0.10897251778474348, 0.1007481883937511, 0.08864423371611174, 0.08410484767232718, 0.0981412848509905, 0.07886150526982261, 0.10419728085849278, 0.9494723660534278, 0.9588047417370749, 0.9351461237810266, 0.9586868201401804, 0.965742205470676, 0.9165729697151336, 0.9389227975382147, 0.9556617911087711, 0.9581898686903637, 0.32793602215673623, 0.3001985698089167, 0.2969646020609975, 0.3101332764323044, 0.2984298704036429, 0.2908693659753385, 0.3073999886387443, 0.30825790395319097, 0.286003938077776, 0.5535435226921698, 0.6237270375439461, 0.3611300143795003, 0.6045257169976062, 0.4229819622332227, 0.5130205896893216, 0.5768357777194927, 0.3344162512985195, 0.562951268355693, 0.16307996768421507, 0.18228730187041997, 0.1753029977133499, 0.1888704708580603, 0.19514868343409741, 0.18665874092578805, 0.17120128465824835, 0.18119487885117147, 0.1799294288990161, 0.20230894207683714, 0.20607033060362534, 0.20577882791799484, 0.1783392647060117, 0.18780626186504845, 0.17772133698223735, 0.19123492528686992, 0.16518449686922865, 0.179416328953242, 0.0710053794227371, 0.02474142449830319, 0.04736917544621133, 0.027500948948070647, 0.04217042315353714, 0.02091009386615239, 0.03491841373665505, 0.04066908582117523, 0.024224634611882956, 0.09802426012831766, 0.13131930649368728, 0.10674415266808979, 0.09370920569769947, 0.09848925604154268, 0.09641235113009894, 0.10865782187324458, 0.10230688009225919, 0.1314921188449527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11744247263488339, 0.10859125776564216, 0.1174565554540562, 0.10810570764415572, 0.12117299185222441, 0.11271235261748136, 0.11824986918785707, 0.10279015945594983, 0.11044682398723504, 0.3946305462848785, 0.42562496024357277, 0.4075336961874142, 0.39095331576333203, 0.41161664223568284, 0.41160678728035505, 0.40368993839007594, 0.39546752547069064, 0.4156216121345174, 0.09312394677203262, 0.08274677514521478, 0.09847295093456632, 0.0849245179630137, 0.10033171852781597, 0.09434027773783149, 0.0888550567675791, 0.08716575884891486, 0.07247951049071866, 0.14890472833943458, 0.19486553520865468, 0.20174552617098462, 0.2931618221332086, 0.2193930703992607, 0.13853899006274406, 0.15684712370756237, 0.1907189714313423, 0.1929525159962625, 0.2752267316038258, 0.2790392926201497, 0.27157643576360024, 0.2894053735374287, 0.28866504204731325, 0.2894631445127759, 0.2937002947133267, 0.3062301444725092, 0.29575692778238094, 0.22024396492462017, 0.22876569400535718, 0.22693574224730295, 0.21617281117630915, 0.22028105396355235, 0.2207247579926639, 0.21146343373484566, 0.22330082345795577, 0.2442204931669708, 0.18364719791006778, 0.20396180816052234, 0.17315823582413925, 0.1916172682358378, 0.17939705391799798, 0.19984893319392505, 0.1974896419039106, 0.19434446759529522, 0.18113834829668363, 0.18118014971225893, 0.19525802105052903, 0.1947587999476189, 0.18952652616680743, 0.19276806621977594, 0.19760216676085451, 0.18062739485152546, 0.17789918120780546, 0.18774807514703906, 0.6260302423170201, 0.15097947946216594, 0.1525460163679403, 0.1857999793214391, 0.5870059236001548, 0.18479980506216964, 0.5910662777571576, 0.5926096699651562, 0.5670726627815914, 0.16676362432422154, 0.16501147120820991, 0.5825231668614592, 0.5073883526836757, 0.5111458716820971, 0.5382051498176457, 0.2049702026142156, 0.20863038330376227, 0.21012842053844105, 0.18474536007310072, 0.2025584922692315, 0.17986834316142797, 0.18617410388713007, 0.17789519686516686, 0.1812351830645309, 0.18877639666057178, 0.19589720868611915, 0.20229245225001724, 0.06327229258282818, 0.0699916980884715, 0.07279878880277924, 0.06787054120128888, 0.07733738443669647, 0.06930324493945139, 0.08081573520799756, 0.07115072065299732, 0.07418044853319083]}, "mutation_prompt": null}
{"id": "e75da2f9-bb45-4508-a98d-80789d175f24", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Adjusted population size\n        self.scale_factor = 0.75   # Refined differential evolution scaling factor\n        self.crossover_rate = 0.85  # Adjusted crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.065, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Enhanced Adaptive Search with streamlined logic and refined parameters for improved optimization efficiency.", "configspace": "", "generation": 37, "fitness": 0.23780343512953675, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "d391da84-7c7d-4da1-adaf-6ae691e32a8b", "metadata": {"aucs": [0.48322877083328375, 0.47049029884224314, 0.4672191502907417, 0.47059803162180147, 0.47184356811017814, 0.48900411694143964, 0.49514909935661533, 0.48221687777261313, 0.49819371643983645, 0.06822994690139095, 0.07662090018963374, 0.08396182829985188, 0.10257408828186654, 0.06796495786753765, 0.09767819634482533, 0.07797327587099556, 0.07882650813474446, 0.09146151870523822, 0.12059019367633628, 0.12297228589801434, 0.11199328498217487, 0.12643759443850922, 0.1443252935381817, 0.10911303440699738, 0.10742016057680848, 0.13470560416536415, 0.11030933143764377, 0.08694696164323501, 0.1031781673256783, 0.09605471951540001, 0.10933012617808413, 0.09558525841173227, 0.1135989915465705, 0.0921373007414823, 0.10351055932183462, 0.09581734581228152, 0.9507119366807893, 0.9548800777745631, 0.9519009620506588, 0.9571262285120008, 0.9619249749636013, 0.9458659737170894, 0.9699386423328069, 0.9559445534727192, 0.9449130050521358, 0.29643317387110846, 0.29492642742947206, 0.3056952206812269, 0.32061840742711, 0.31876265206645626, 0.30510810054411375, 0.3152203932396733, 0.305326216476947, 0.3082478702410243, 0.5260133908480271, 0.39667260462586285, 0.32301050290173083, 0.6109382832271749, 0.3492548708141079, 0.5980271740870131, 0.5614791328967013, 0.40533419978390517, 0.5330699902517569, 0.18089302673259033, 0.1894651541623139, 0.1955998974913653, 0.17742951203775625, 0.1770174461416516, 0.1661368890330539, 0.2091257462889431, 0.16978147990756565, 0.18342751518162026, 0.1746393203545502, 0.1797830243613444, 0.1830649573622718, 0.18329927938893886, 0.1888529045787538, 0.18248885580858154, 0.1901927450052031, 0.20224500152056757, 0.18422293506248866, 0.02570640507843458, 0.042504509583175754, 0.03915314606829012, 0.07011519242493702, 0.043576702695314995, 0.030983029250882255, 0.016783413225599952, 0.06339835216900103, 0.0317790391260343, 0.11244999879782858, 0.11823680054077035, 0.15171452555386655, 0.12172208091612535, 0.10538940767035965, 0.11967048868762431, 0.10867660854795647, 0.11301132480795573, 0.11972761656561415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019421053149171197, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004552733683876875, 0.11101480747390013, 0.13224962197865497, 0.1117192998157599, 0.12673986777496937, 0.12347598353469624, 0.11460250286246987, 0.11401444780456982, 0.11940477939275429, 0.11060874332257498, 0.40301231287022354, 0.42937404446100047, 0.4421868628667709, 0.42140573552980787, 0.42004880839117764, 0.41986352803717286, 0.4178739686234799, 0.42268007902769933, 0.4182781431156054, 0.10144806254437044, 0.10096446438946349, 0.08022311464576848, 0.09222269741555611, 0.11176971561331861, 0.08772547449907064, 0.08804080011627224, 0.0858651849965314, 0.09190856189530971, 0.18026474897681055, 0.13863806462448336, 0.11641696842739058, 0.1526242218157864, 0.14151066136864177, 0.16838687356845605, 0.18379835195186311, 0.19382595370965539, 0.17239791675941418, 0.3043176130771631, 0.29176012392186745, 0.2886295742521141, 0.29063570421890594, 0.292129610175477, 0.30482902511384224, 0.3100451980024168, 0.3123342381085056, 0.2856120258870606, 0.22582804156654335, 0.22206385982727483, 0.21779095589635122, 0.24005269602610846, 0.21950680581797233, 0.21897158168323727, 0.22299202976175247, 0.24471279147648728, 0.2355777890596884, 0.18182090933300799, 0.18444873592787403, 0.18635542025690333, 0.18900265616153078, 0.18751396349244487, 0.1878025206068914, 0.18622436204356807, 0.1967857199990295, 0.17373925660807998, 0.20418059949511358, 0.2130651345649408, 0.21912048248492833, 0.1831417206269873, 0.19181347967929818, 0.18122003042374069, 0.18275512509179093, 0.208997415577998, 0.19195346769779786, 0.7089833542522417, 0.6267580840067972, 0.18582209214091583, 0.6776668165652489, 0.6730900146556622, 0.18229977182494583, 0.42716286546860815, 0.1745122993272047, 0.1828820224252432, 0.4727634931602269, 0.16745713787378447, 0.18563366478503873, 0.19696536320207692, 0.5820358676076072, 0.20035753978064175, 0.2114180713793724, 0.20649649126611003, 0.1266339025098916, 0.18442813290050675, 0.16901043047379893, 0.1841203024945337, 0.1879125581061054, 0.1929417700874172, 0.19063926010453314, 0.1761364470543978, 0.19778512836624118, 0.1899651546263037, 0.07964286087710393, 0.07533287009603795, 0.0639417904693399, 0.06882925981313859, 0.08577627394755205, 0.09201701916966865, 0.06930204085863956, 0.0804539647561755, 0.084084092197107]}, "mutation_prompt": null}
{"id": "2b8b5abd-211a-44b7-854c-65fe848c65aa", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly adjusted population size\n        self.scale_factor = 0.78   # Refined differential evolution scaling factor\n        self.crossover_rate = 0.82  # Adjusted crossover probability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Enhanced Adaptive Search with tailored mutation and adaptive scaling to improve convergence.", "configspace": "", "generation": 38, "fitness": 0.2274642003545397, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "e75da2f9-bb45-4508-a98d-80789d175f24", "metadata": {"aucs": [0.46327606660244147, 0.44393268692001864, 0.4577145388427565, 0.45994853965962956, 0.48093989180236985, 0.4584214716501056, 0.4842623196430109, 0.46724350488731703, 0.4648350287384888, 0.06608775691907232, 0.05231651539147919, 0.07139701794542685, 0.09526634873250439, 0.09256956121625226, 0.05950870789285456, 0.05056221167157948, 0.061078663607662564, 0.06621120797877644, 0.12166398630830322, 0.10299867685824482, 0.10060784115735133, 0.10093249515553016, 0.10328442677113725, 0.11507330749567046, 0.10878571982372709, 0.11380403166065844, 0.10955692292324459, 0.0965871731468485, 0.09821045040551002, 0.10217433487389538, 0.09297891417676296, 0.10409362899838348, 0.10292739814011764, 0.0879583202182892, 0.09895979581651371, 0.095312229029753, 0.9378269233397251, 0.9403381806724544, 0.9606462407570969, 0.9518042962440443, 0.9633421349803603, 0.9322242092614902, 0.963210245758246, 0.9572448479530168, 0.9580577739153174, 0.2888464554124477, 0.28064699763516276, 0.30004741360977727, 0.28923418348251384, 0.288829943281637, 0.2961001638474111, 0.29483994475597286, 0.2867420160958841, 0.28423310086520104, 0.33015681326472945, 0.4882514606386128, 0.3496326600691354, 0.5193851782112473, 0.4182657982132726, 0.33783494962291927, 0.3309623522143884, 0.4320256477637102, 0.40780786019877724, 0.17813035000374344, 0.18911468802568843, 0.189009863722312, 0.1432433259709227, 0.17756579807958528, 0.21332007614228765, 0.16263088028946726, 0.17378039161820147, 0.1554356548349055, 0.16868607966036542, 0.159005554685148, 0.1832691445812622, 0.19224520954980095, 0.1802307943422493, 0.1687318775517731, 0.1855388192597689, 0.1866926215764162, 0.15317106884938603, 0.04745899320860769, 0.014412670262383798, 0.02838644078487762, 0.04816347866922155, 0.04098454146576336, 0.01642439632464121, 0.013035625034102272, 0.007541515453484693, 0.017376729853200934, 0.1020041333079067, 0.106469861477417, 0.09840767599394673, 0.09366641449781599, 0.10402944035208472, 0.08627401765260001, 0.11153676500382537, 0.10053251404333241, 0.136222097646451, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021334933591747873, 9.999999999998899e-05, 0.10789450581064686, 0.0950589586359809, 0.10945243221749712, 0.11368142915069035, 0.10695204571035788, 0.11453840942172522, 0.11060730032562205, 0.09896856111485608, 0.09709806713512337, 0.42228091617974006, 0.432151982376461, 0.4354934616130204, 0.4087671477706901, 0.4102682345627441, 0.4251590608552893, 0.4173861506219938, 0.4059378202724373, 0.4115114901393577, 0.0931205510110189, 0.0999547117348688, 0.08903721730572778, 0.09105893464633141, 0.0987544317327873, 0.08467490844411862, 0.08888246479365902, 0.08244286472753426, 0.09391943461026131, 0.213742882573273, 0.15223976505709158, 0.15806324003264782, 0.19129318222147096, 0.15152513717874005, 0.15525004945049736, 0.15235742125650176, 0.14764906365925945, 0.15888579503139844, 0.2720700442613404, 0.2845598829961338, 0.2817727912030189, 0.2765572744211162, 0.2777960425488606, 0.2791160455247286, 0.28644607839495106, 0.2895085990046359, 0.29481144912008583, 0.23159987122726977, 0.21543024499558205, 0.22339690015625513, 0.21384911470621681, 0.19915454637558794, 0.20925049210187363, 0.22621793975869708, 0.2271832646472024, 0.23106418716151322, 0.19951773313368737, 0.19918162138067474, 0.18828319318730624, 0.1765729033206671, 0.1983126263477566, 0.1821274242645281, 0.16970595751181294, 0.19790764456280896, 0.20467456455681854, 0.18861508231640323, 0.1841531606071779, 0.1929432067911655, 0.2013553002964864, 0.19935354640516534, 0.18011282530282646, 0.1826849848941995, 0.20498865361704988, 0.17690201091807356, 0.19452608826983353, 0.1579689740469412, 0.15350976782828551, 0.17820172630752296, 0.6137242154454701, 0.48466555668948386, 0.19089687375317088, 0.4488267978561038, 0.44229747732314195, 0.16507424630829737, 0.16702050444117955, 0.6042947773578013, 0.4846602762703649, 0.34133279741581757, 0.4337233029700185, 0.2042757072182878, 0.49513412670437584, 0.20873602717716822, 0.17869784013085188, 0.19469335371524865, 0.19203283926673798, 0.18055753444811895, 0.20007482408460764, 0.19686411082633792, 0.19800628095417816, 0.19585377687400118, 0.17741747630027893, 0.0710956189187214, 0.08760386209491067, 0.07937436238799822, 0.08622772068009521, 0.06820687766181999, 0.0813773467940535, 0.07500019135261993, 0.08100331494584412, 0.07039097609942402]}, "mutation_prompt": null}
{"id": "3f2317ee-df5a-4ba3-9071-ceb22054f0d1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.8  # Slightly increased differential evolution scaling factor\n        self.crossover_rate = 0.9  # Slightly increased crossover probability for diversification\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.06, self.dim), self.lower_bound, self.upper_bound) # Slightly reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Enhanced Adaptive Search with refined scaling and crossover parameters for improved convergence.", "configspace": "", "generation": 39, "fitness": 0.24728848366939712, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "e75da2f9-bb45-4508-a98d-80789d175f24", "metadata": {"aucs": [0.46384569954681243, 0.48031139701861725, 0.47233709037303073, 0.4716871870915801, 0.5017127998437803, 0.5119531813289532, 0.5048466756688899, 0.4775833369015692, 0.4900628277060112, 0.06269912432247382, 0.0900766042234824, 0.11273412804522864, 0.07577861839485445, 0.07723344720201508, 0.0821650936335594, 0.06640801638535032, 0.07068683063414227, 0.07691805877018054, 0.11042743828536716, 0.1200140104029489, 0.10829477687789024, 0.09863047758556243, 0.13011971600502426, 0.12186315652789659, 0.11674943912638702, 0.09569474287589641, 0.10543462178994012, 0.0948588849084534, 0.08830740448644736, 0.09476698484423618, 0.09393108582236709, 0.09540087353952564, 0.09091576792975953, 0.09583549797415092, 0.0973696660569614, 0.09838427281663986, 0.9733476327046049, 0.9627654363651951, 0.9301079658063842, 0.9530242307420945, 0.9308412371103086, 0.9563302981440646, 0.970123884347971, 0.9515174098119084, 0.9411337758519902, 0.30107555913131145, 0.3236100026943669, 0.34649392600431383, 0.3358683369905304, 0.2903993660094547, 0.30494676583900415, 0.3105696172349851, 0.3087054840582296, 0.2956053239175793, 0.528967083976476, 0.6354453307527186, 0.40231790392627975, 0.5945138635913423, 0.5355756326799512, 0.6344241939347157, 0.7835156615316299, 0.6923251910520354, 0.6245380914511167, 0.1959074018071073, 0.20317829295377543, 0.1990109756053674, 0.19297149013866233, 0.18109425302151205, 0.18615449927615324, 0.18217328225188412, 0.18311141710227108, 0.20036332403855206, 0.180036620848546, 0.24395575502298872, 0.20236791324986958, 0.20452178650441133, 0.21123036789100091, 0.2077565057508839, 0.22430550571781183, 0.2277200675012364, 0.19752695762557027, 0.06514969159258255, 0.06446149080318841, 0.06993603423436157, 0.02972980899093114, 0.04053237752464012, 0.06067273466581924, 0.07005867099243224, 0.09987374788638503, 0.039800454051647116, 0.10292926243393596, 0.1444030433254586, 0.09844535002056365, 0.09552831230354153, 0.10823421159981028, 0.1279805497383768, 0.15993519021761182, 0.14457304839113694, 0.11761790741573186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01105703740926689, 9.999999999998899e-05, 0.12186733172729836, 0.12115882316734006, 0.11215509585457495, 0.12821256878646348, 0.13003184754820085, 0.12606854608359974, 0.1099217930224804, 0.12913543296557983, 0.11991439617404598, 0.43100689012577575, 0.45585374009879076, 0.41984418134371126, 0.41993117201867025, 0.42708966766349554, 0.4123816528176383, 0.42523208404933266, 0.4210402574404464, 0.42584470801223684, 0.0778345438096234, 0.11005332587494887, 0.09235137491708756, 0.10023785614968017, 0.08164625174378493, 0.08401822090530076, 0.07467438314494246, 0.0827889937237305, 0.08918362011931236, 0.2198392468787118, 0.1726521034180747, 0.14850464951832565, 0.22161392655794698, 0.14576889947706329, 0.2166865382478027, 0.2001599263798305, 0.15749389845791595, 0.27868651295309954, 0.2853151441621683, 0.29312299051811874, 0.2944117033757857, 0.2934641472941838, 0.3003882482179042, 0.30009502228210894, 0.2983583153249437, 0.3046357485322233, 0.3002664738782398, 0.22174843791969046, 0.2088686936215357, 0.23623561488434275, 0.2185892022840994, 0.20362089403443173, 0.24259814021839732, 0.22961662553578177, 0.23550966628893777, 0.22667991981499414, 0.19596573132937933, 0.19107960874063867, 0.20311833819268243, 0.18692803858624052, 0.18378253487100782, 0.17822367557352903, 0.19837563382072154, 0.1940982219891927, 0.2058727110955767, 0.18605107256252607, 0.19435794753334135, 0.20145827504849623, 0.20563400298500056, 0.1905176876636202, 0.17777311368555382, 0.18448207889318124, 0.17548800189060787, 0.24541094918616435, 0.6216898421779536, 0.17782105269479853, 0.15197831552651897, 0.1748238361162514, 0.18447597046382236, 0.6121124709109828, 0.5067435371673596, 0.5231539422199565, 0.501844482586201, 0.6181703864286927, 0.16439632899692191, 0.1640098644476662, 0.538919651245499, 0.5226804657961793, 0.20686778205516032, 0.21188544979367785, 0.21048247012240517, 0.21054292375521166, 0.1959750441891529, 0.17853518497035425, 0.21900719338780683, 0.18098639369551883, 0.1942468182757512, 0.1840881128835048, 0.20718773123397183, 0.18313673146524323, 0.16903192979259896, 0.07416078079871513, 0.06901417707410196, 0.07250596151560462, 0.09161826936318251, 0.07044769303806586, 0.07368010884992204, 0.06938596957767673, 0.07689639710503848, 0.07954864934452743]}, "mutation_prompt": null}
{"id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 40, "fitness": 0.25273840728654706, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "3f2317ee-df5a-4ba3-9071-ceb22054f0d1", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "2eb2a060-fcd9-4782-8a7e-5b3e48c47085", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "1ea2ea62-c271-40f9-b2c7-7180f013f679", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "95781c9d-a0fb-4144-a341-6d2feeb0cbe4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "3c315ef6-cb85-4300-92c2-d09b088e5cb6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "19c7451f-7580-4fd9-849e-4b7c93a9213b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "12c12eaf-5f00-4d41-894f-9f6bb9684799", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "8141fea1-1718-4f99-ab92-00432a780584", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Reduced population size for faster convergence\n        self.scale_factor = 0.85  # Increased scaling factor for improved adaptation\n        self.crossover_rate = 0.9  # Slightly increased to enhance recombination\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.07, self.dim), self.lower_bound, self.upper_bound)  # Adjusted local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Optimized differential evolution parameters for balanced exploration and exploitation.", "configspace": "", "generation": 47, "fitness": 0.238936782300409, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.4618560732067155, 0.4404043165682018, 0.4505804424814651, 0.4613264878378487, 0.46502209564492947, 0.4821526602970706, 0.46832673203175124, 0.47710653387848456, 0.47511681590900556, 0.058447150109203316, 0.06519513309167324, 0.07821315048086386, 0.09503830355300436, 0.06291648554749096, 0.05721895027975299, 0.054151187263560274, 0.06741537714508561, 0.043862505049412914, 0.11365934251600196, 0.1154741995258346, 0.09484861015720458, 0.09295035887835168, 0.09454617613066407, 0.09868377557056718, 0.1299319782514382, 0.09017026580439391, 0.09952877582074038, 0.08612259848653414, 0.09750501874970652, 0.0896542097276799, 0.09789365133176675, 0.10796961181928832, 0.0977883777719819, 0.08620900979710222, 0.09869828038650263, 0.09627369630468874, 0.9725010865396561, 0.9462859021285208, 0.9703884535906625, 0.9752609532341164, 0.9570789358285318, 0.9571865481265882, 0.9718351029779689, 0.9566184739491647, 0.9686887660715477, 0.29129722833499794, 0.2794208673743245, 0.30373094052404115, 0.28719726656175804, 0.29427052323928815, 0.29039086976210504, 0.3238488478544216, 0.3050818527291189, 0.27601938010184845, 0.6126533133700351, 0.613661539592753, 0.5906996219483909, 0.6547729538648888, 0.5771703411931601, 0.34810304439868334, 0.634873880288526, 0.7085084356014633, 0.6494845142482928, 0.18813809252383473, 0.17266426969377513, 0.18149640753524754, 0.17918231645134874, 0.20126716501900388, 0.18342608590179976, 0.177118683607549, 0.1873645985593666, 0.16436381459044191, 0.20757988871838984, 0.2201027054587068, 0.17335789340190555, 0.19037603769052724, 0.2240468237869443, 0.20336998686910668, 0.21855396602896293, 0.21043839062455005, 0.1901176443172793, 0.07668540272554292, 0.055289882067102725, 0.023538855937528025, 0.0872565933928181, 0.01914581626178191, 0.027627942238580006, 0.035040031045422304, 0.020678543159046603, 0.043363035310382325, 0.09663741145472193, 0.14500116235714322, 0.07108038407335593, 0.11228480970291288, 0.144642317350691, 0.11606558599021433, 0.09555787927759307, 0.09464710621662509, 0.11312192641965246, 0.021731141202689153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03652934641731953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10844030247269343, 0.11411725043585319, 0.10569558200184292, 0.10436213814965944, 0.12087276253234214, 0.1175091787938971, 0.1117425451561288, 0.11622682566484344, 0.10949077506740923, 0.41305471139026617, 0.40865637211119155, 0.4118904111267725, 0.4229274143491667, 0.4421652672291011, 0.4392830788636751, 0.41570883478343923, 0.4292762485666085, 0.41945275693068607, 0.09762843533591781, 0.08559125375077492, 0.09391210409118944, 0.0896128623557979, 0.0917382271114422, 0.09225651767712939, 0.08711088667339573, 0.09585560061285159, 0.10133418958403584, 0.14123723970425783, 0.19119841984075114, 0.19162742258191479, 0.17021243167625266, 0.15484477550356424, 0.25170744588277016, 0.20524983646658634, 0.1984220683687563, 0.2050203890401744, 0.2780626942828025, 0.28389507882217935, 0.2858056632736091, 0.27525047840761085, 0.280633183191038, 0.2967509935911552, 0.2833316405944263, 0.2974404979124877, 0.28199251153421556, 0.21390632021649125, 0.2217601203511539, 0.231505474163617, 0.22405532154634766, 0.19837296724396403, 0.21907064078931093, 0.22507401243734027, 0.21861473918209273, 0.23211713547320956, 0.19081814566451216, 0.20433427954306982, 0.17775483538037773, 0.20871259448443158, 0.1861350281778692, 0.21688816571346858, 0.18924354321360504, 0.18380191131305978, 0.18809169434924466, 0.18266380970453122, 0.19009647840163912, 0.18485066777051706, 0.208548585915746, 0.2111915129603642, 0.2205105325510912, 0.21980903893372983, 0.20025458638192506, 0.19510376851087652, 0.4977322862983524, 0.16949017101133101, 0.15238786078264244, 0.5904615923918919, 0.1864922562739022, 0.6301939087679658, 0.18252472368568884, 0.19182954211683878, 0.5842584407812588, 0.20516246471390387, 0.20498508325254516, 0.5464233788404406, 0.19831543731128787, 0.19977188053716544, 0.4525260216286663, 0.2097997659988392, 0.21121952096552388, 0.11209864622449806, 0.1945793723121474, 0.2088173036311992, 0.18903378870218845, 0.20299731368249863, 0.18754322903652687, 0.19365762751276894, 0.17745367203111895, 0.20502733559334574, 0.18759704618821937, 0.06465942730184959, 0.07784787776407154, 0.07395546956552213, 0.08975084069875883, 0.07477256089662787, 0.07085464653863471, 0.09269620016977442, 0.08323171978073929, 0.06943742581267232]}, "mutation_prompt": null}
{"id": "8845dde5-372b-4b81-b9cd-1dc680e89aec", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22\n        self.scale_factor = 0.75  # Adjusted differential evolution scaling factor for more diversity\n        self.crossover_rate = 0.85  # Adjusted crossover probability for better exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Further reduced local search step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Slightly adjusted parameters and refined evaluation strategy for enhanced optimization efficiency.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.49292056306322996, 0.5241602052761176, 0.5179720022686833, 0.5031552189266286, 0.5026150158292408, 0.48357682597180995, 0.5028225016173298, 0.5089698910369597, 0.5021852696808433, 0.08893435578247189, 0.12110596824903008, 0.09207815057880564, 0.0800917571299593, 0.0792165736724959, 0.08667406314156068, 0.10559997839879487, 0.09895131075063923, 0.0928473208983982, 0.09744972714495703, 0.11406992503324254, 0.12084224791356901, 0.09913909350165517, 0.10676809570703316, 0.09766722735622757, 0.10367964440358479, 0.11364783998687289, 0.11541396832638728, 0.10117698417841547, 0.09257211803216236, 0.10353463777493765, 0.10437290871598093, 0.09527423571654159, 0.1127048316429875, 0.10172067874137813, 0.10191162879589843, 0.09768845194131204, 0.9642530721237234, 0.9564974315448788, 0.9234209932175564, 0.9588350717394482, 0.9334870964617739, 0.9174130564670587, 0.9703176000289079, 0.9559225596358417, 0.9402636251212498, 0.32542937529813354, 0.316423201560463, 0.3230996478551723, 0.3253472451998638, 0.35443546030374085, 0.3142678231228605, 0.32848238532176843, 0.3309445752268103, 0.3480743739393569, 0.6344599419401, 0.595372956514552, 0.5758852738418135, 0.5300700996888394, 0.6587063241382467, 0.5439180799707359, 0.587666366296894, 0.684752623996705, 0.6788370339462911, 0.18874810588742597, 0.2073772425146947, 0.19266423281568223, 0.20603846557693928, 0.2028793621977949, 0.17969592186088357, 0.19953574362292148, 0.1872398159516696, 0.19185804080968005, 0.20343486488427065, 0.24601120941660692, 0.22530735876722763, 0.19750667009181322, 0.23183958901395685, 0.191168305784008, 0.19532670238239558, 0.22101874257923193, 0.20941634774902773, 0.0707213293718929, 0.07309570646406338, 0.0607548903663252, 0.042576149915036, 0.056534500038443514, 0.03749343836294938, 0.04020623542916002, 0.05404296944618603, 0.043897948190599556, 0.1419628318335503, 0.0923260810868678, 0.12800994530743248, 0.11605480394097756, 0.1326931271870182, 0.11147087716178428, 0.11259199004768561, 0.1320175851651857, 0.13150399592817663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036881285834559074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720757224601454, 0.13970215955800935, 0.12359776077603224, 0.12264423553222348, 0.12670648945736462, 0.12423562100183738, 0.12846793047572613, 0.1407709850438047, 0.12802593320018862, 0.4402877602831796, 0.42586717239824656, 0.4492243426386785, 0.458385365113549, 0.4630035444731664, 0.44451136589115436, 0.46518932854191264, 0.44451201340029045, 0.4398559560820142, 0.10720460185892078, 0.07876820004970453, 0.08959844964858532, 0.09839208890448048, 0.09013469435845267, 0.08918929158535016, 0.08817701965380476, 0.09367199031425788, 0.08541457790095319, 0.17458025506700814, 0.2577572108427353, 0.16632433856185092, 0.18241840445545277, 0.20504911946313364, 0.1494228032668996, 0.17284284211716783, 0.14239860265936222, 0.17400176931100209, 0.3114146413399753, 0.2959556233768239, 0.3010908521234631, 0.3160821816691757, 0.30686828766695784, 0.29676341528358197, 0.3053002268093786, 0.3139900104502825, 0.30325265979478633, 0.21950493837786234, 0.2143371916464687, 0.23724369984979998, 0.2451310820887811, 0.2451661476540925, 0.24021225265017399, 0.22003282473696495, 0.2501991018551054, 0.23503619104216067, 0.18023552280294375, 0.19049497709716556, 0.21177130376909636, 0.2194104759351455, 0.20515667344057276, 0.1803510013547006, 0.1935037916291199, 0.19626879951062592, 0.18737957320448906, 0.1822994321196293, 0.18981806208214813, 0.25338194623501364, 0.2313249007226903, 0.18693630711719378, 0.23613248966850398, 0.24314825536292162, 0.18786657292325804, 0.2085605976382905, 0.7051021454526472, 0.17762234332709992, 0.1852937910956567, 0.18295655270326872, 0.18640310487157175, 0.19064295328170533, 0.6417236952522705, 0.17645876947363393, 0.18331567640915103, 0.5397389057325015, 0.5676519131670869, 0.5183516031850098, 0.5398000937416589, 0.5831161717198647, 0.16186868451359315, 0.21111205107047337, 0.16141891357078442, 0.6041798157686831, 0.19769532705947224, 0.17369320388449028, 0.18328704562723874, 0.18050387553003877, 0.18550171170058816, 0.1947993920802511, 0.19390142744866956, 0.1743975675522419, 0.18055347683561052, 0.07859952380881985, 0.07221306167486019, 0.1037524335622706, 0.0736387274643997, 0.07275902894360331, 0.09130593229357031, 0.0766793149049727, 0.0843496620603923, 0.06834050254220436]}, "mutation_prompt": null}
{"id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 49, "fitness": 0.2582725038131327, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "7e73e0c6-39c2-4709-a543-8129d8d049e3", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "cb918273-1d55-45d4-8bfa-9c3498154ece", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "9cd77d28-fee7-4e37-8c8f-a11af335c364", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "c787d2c3-9e9d-4211-be03-cc86832718c1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "3ab83dd0-08e2-4072-80e5-852c8e432bca", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "56c0f5cd-549e-4271-80f1-235358bd2ea1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "46afec6f-a125-4680-9469-c27cd61f08cf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "b8ff6d4d-d8e5-4a28-96b4-97afd638eb7c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "841bd409-f888-4cbe-a529-332f9ec69aaf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "51cdf1a0-149a-4923-9f64-da9f924c44c9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "4f3c9ecb-6c1e-437d-8895-3e95a519e459", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly increased population size for better diversity\n        self.scale_factor = 0.8  # Adjusted scale factor for dynamic exploration and exploitation balance\n        self.crossover_rate = 0.85  # Adjusted for improved trial creation\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            r1, r2, r3 = indices[idx], indices[(idx+1) % self.population_size], indices[(idx+2) % self.population_size]\n            mutant_vector = population[r1] + self.scale_factor * (population[r2] - population[r3])\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.03, self.dim), self.lower_bound, self.upper_bound)  # Adjusted local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            new_population = np.copy(population)\n            new_fitness = np.copy(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Modified EnhancedAdaptiveSearch with refined mutation and dynamic parameters for improved optimization performance.", "configspace": "", "generation": 59, "fitness": 0.25236055664032253, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5143653385677509, 0.5029986058834179, 0.5017766939380086, 0.5098972359593476, 0.5359296501183117, 0.5174182471780399, 0.5257212563440374, 0.5298114599858124, 0.5368089978653714, 0.11013473434084275, 0.1080482524607187, 0.10359860497961726, 0.09942147045258132, 0.1035026681088832, 0.10776304488454791, 0.11006383116454976, 0.13611278888340816, 0.12363684659162555, 0.11348671103699726, 0.1250188419355872, 0.107016005481407, 0.17108412547583796, 0.10119104477329433, 0.12704092724314997, 0.11546493893124865, 0.1115588678123759, 0.11326763870874579, 0.09664952617168676, 0.10727257788857936, 0.11689663316410659, 0.10665448330988236, 0.10903091541484533, 0.10573956986216548, 0.09711870776852916, 0.12253446727561534, 0.09166573119878141, 0.9573366012172254, 0.9573003997717192, 0.947731858080626, 0.94955135196678, 0.9388200534916088, 0.9456130062071876, 0.9558954219785997, 0.9488544746549497, 0.9473595323289342, 0.33015881691307203, 0.320994966839517, 0.33483115964218213, 0.3771114958059615, 0.33393536432005644, 0.3579364374648397, 0.32577914098168037, 0.32134251405451264, 0.31633799915652694, 0.5801114607952798, 0.6854869790552174, 0.6459937417865091, 0.6620690325442933, 0.6135263195559162, 0.5893630254521962, 0.6291271344338492, 0.6003338175635101, 0.6249299845903581, 0.210996209809454, 0.21119533960301018, 0.2015298236115336, 0.1936961665782745, 0.20213889982938826, 0.21148065899024027, 0.20231596573286603, 0.2300127192194502, 0.22884659680502284, 0.20427422173217646, 0.2210126722608653, 0.16121539462226697, 0.21532866812114027, 0.19890258938751582, 0.18572234330048865, 0.2252618732287468, 0.19794397362267968, 0.20305821769184484, 0.08747757715419935, 0.06266414996319358, 0.04748102836908952, 0.04851761135037269, 0.052594822683854736, 0.07389761674177098, 0.05411983688493516, 0.05331280571345487, 0.05563129984953197, 0.09331625634435536, 0.12482396740383206, 0.17130154252465668, 0.09478889882406205, 0.11558677549461682, 0.11415600270383397, 0.13338089614443271, 0.11395870937084851, 0.11569451963477861, 0.0020589506081829523, 0.00014782609303898298, 0.019091492560412426, 0.008984173329493195, 9.999999999998899e-05, 0.0009212932427173914, 0.01621002299576013, 0.0017218594209631455, 0.018626211581374452, 0.12564042837167166, 0.13113439589289555, 0.13787305120085058, 0.1471019004464963, 0.1359185166213318, 0.13315679927609725, 0.14269475170911594, 0.12619304477176652, 0.13445367290696608, 0.43808589700670386, 0.4348115176142303, 0.4483323367597736, 0.4373410816344181, 0.44303391231277767, 0.4371092003474426, 0.43524605671105876, 0.4301913314236173, 0.44889955208635235, 0.08708868648873036, 0.1072199977995455, 0.08274013114838652, 0.08502723255915845, 0.08999076382577098, 0.074172032438653, 0.09659494108732547, 0.07786500000935537, 0.0964991095016321, 0.13878045739533396, 0.16130120850265084, 0.30168000665542005, 0.15171097214025153, 0.17291263045431438, 0.14872610749090343, 0.16236133216454496, 0.32879535709781205, 0.1512379385987751, 0.3039206653249348, 0.2889477395115254, 0.3022009536426764, 0.28311886304376377, 0.2919165911043482, 0.2964835625018397, 0.31226339840773754, 0.31355547591118615, 0.30403949669442476, 0.22455369131552438, 0.21290375945160123, 0.23582413459226537, 0.23103504071777914, 0.22771711444532206, 0.2052148750393885, 0.23602872346580184, 0.23055490370965204, 0.2422843890286458, 0.18115179957243466, 0.17909002026842358, 0.2183522570005424, 0.18693118321299718, 0.1901484860792978, 0.16988474172050827, 0.19341084170941503, 0.1772213258611377, 0.17648791069058456, 0.17802534071194764, 0.18994794681870142, 0.2129395528645901, 0.2805649415959297, 0.20746349307349132, 0.1753542995480244, 0.17706488860095648, 0.20020147443958103, 0.18565813859482805, 0.7495270994765222, 0.17766841246695853, 0.19885322520924642, 0.4214466909067518, 0.1722854729491059, 0.6106287171777893, 0.15636425691691347, 0.7678309034093995, 0.20560716457838546, 0.19511786197969094, 0.1640347045488736, 0.5720345826615133, 0.18670111939868916, 0.553768420166801, 0.19457602303824073, 0.20882572153578283, 0.20645010211975545, 0.2076820797507848, 0.1967012418660843, 0.18912546971376432, 0.202553101681613, 0.1680728743661375, 0.17984054423805085, 0.17947209890676363, 0.18428186028127413, 0.1785516119470525, 0.184529273221133, 0.0744538296622903, 0.0757065561804322, 0.09502805253262792, 0.07967953727794463, 0.08381030866871475, 0.06420357785865594, 0.06914762381195838, 0.07497570495584627, 0.07692902317663208]}, "mutation_prompt": null}
{"id": "1078a607-6f24-41c5-b35a-7ce4fb3efc90", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "43e6e4ba-30b3-4a66-a784-9d690f30162f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "bafdb883-5115-4433-862d-3ca3b20a29f9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Slightly decreased population size for more evaluations per individual\n        self.scale_factor = 0.82  # Adjusted scale factor for improved mutation balance\n        self.crossover_rate = 0.88  # Slightly reduced crossover rate to balance exploration and exploitation\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c) + np.random.normal(0, 0.01, self.dim)  # Added small perturbation\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with refined mutation strategy and adjusted parameters for optimized performance.", "configspace": "", "generation": 62, "fitness": 0.25729939981346145, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5580030582349429, 0.5039957432562232, 0.5018536115325716, 0.5096765033747036, 0.5178676076861555, 0.4961322725433073, 0.5107510858069, 0.4992095745206617, 0.506738904931939, 0.1074622506780295, 0.11685122559029315, 0.10507044614171246, 0.11321267099153609, 0.09841247020747235, 0.0938458016997642, 0.11115058057672211, 0.09690502435753734, 0.12137195745388185, 0.12224342458195314, 0.11409287719851635, 0.10797438307807294, 0.09169948804941619, 0.11435968392547236, 0.12353798755227818, 0.10117423157727612, 0.11080857856798354, 0.11809000508031098, 0.11329152962247568, 0.12071360175144419, 0.10452332048461865, 0.1180318557723089, 0.10753852776458916, 0.1104600344350738, 0.11151235198545617, 0.09228752068242096, 0.09604270347338528, 0.9640390961945704, 0.9624131269114303, 0.9626062299284012, 0.9517099109999481, 0.9562969983724054, 0.9479929377089147, 0.9471925056964277, 0.9609336828216879, 0.9445667622437874, 0.3002454986915123, 0.3430271829668331, 0.33705817250100023, 0.3459725008555826, 0.31606700418107536, 0.3386864550422932, 0.335471388099575, 0.32721890436515677, 0.32142903083512964, 0.5945661203768673, 0.6422397326265318, 0.6100656233609748, 0.6702052623277386, 0.7219124474139826, 0.7592691569584603, 0.510997330397656, 0.5963669198188051, 0.6098816807319256, 0.19999723299414718, 0.2442578207315349, 0.19857951786660377, 0.20953771087588924, 0.21108913244775573, 0.21489524430607143, 0.19730536567385748, 0.2015960534295802, 0.1977190537110023, 0.21636650913021105, 0.23085318019458223, 0.1916450084813356, 0.21277949785381856, 0.20655078521271486, 0.23136952725546567, 0.21110982190938266, 0.21940017737311301, 0.21750842507925705, 0.06660567015352681, 0.054585140198018745, 0.06655604001357573, 0.06910010315600779, 0.061796365469826586, 0.05808971299523402, 0.0797594456117724, 0.048887399935528264, 0.09834983251227059, 0.1294160642369374, 0.1015882442019691, 0.1298465744212588, 0.11787292869035282, 0.13348389167749464, 0.1032351463761223, 0.14301630728802972, 0.1271651582779939, 0.14829853241383883, 0.024177859772648524, 0.0058411039611125926, 0.010124495385116283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010492880400287952, 0.0031916184874704046, 0.0067276711597614725, 0.13390202657280204, 0.14345271828146233, 0.13332748894181912, 0.14249337812788798, 0.14988669635793395, 0.13697767863243027, 0.12559740045963086, 0.12219572078514174, 0.13711481374920986, 0.45000585402179094, 0.4319044778544582, 0.44230428837641134, 0.44416741412416005, 0.45796300132962897, 0.45942760223108015, 0.44257346306463163, 0.4300307579769759, 0.4483679213017182, 0.07691538302229839, 0.08853202187647169, 0.08593233064765571, 0.0814127299070393, 0.1060279527623541, 0.09284183435508753, 0.0990685074341644, 0.09204166234756217, 0.0798131329633971, 0.20806728822745624, 0.30334197582125655, 0.14463890496502518, 0.2765783254927403, 0.2179501353563782, 0.28420645439874415, 0.2788872920809252, 0.19875041487924505, 0.22355053689267168, 0.29271666594383916, 0.2706212118220308, 0.3053419794342873, 0.28625446774675745, 0.2979805118199017, 0.3060412423436817, 0.30641298712045084, 0.3168759825695767, 0.31006092770723515, 0.22496090340672892, 0.2234790944628503, 0.237038175624941, 0.22794639026232766, 0.20441664291428918, 0.22929130103795992, 0.23613112703764838, 0.22937447189835936, 0.23109500381139392, 0.17898952285366343, 0.2172581674693722, 0.19786946917023773, 0.17373130520870905, 0.18974951663253592, 0.19539747307747035, 0.1883819952874214, 0.1919582872976887, 0.1808700066053076, 0.18554116168874346, 0.17935324185539936, 0.20841924139564594, 0.265044399719343, 0.23451969161893693, 0.2142740348017872, 0.18774204697040908, 0.1958168952800179, 0.18950817770629258, 0.16268661311556443, 0.16200500394728, 0.15245062210717952, 0.18526688366438904, 0.1833639757856772, 0.7464855522061178, 0.16814749423673914, 0.7061191583415607, 0.5489517416511371, 0.2032095679497843, 0.2064773897034602, 0.5660592628913537, 0.1929326328481481, 0.5619385161832731, 0.5176927960495503, 0.20909548757046248, 0.6400117339909026, 0.2108950959148399, 0.1689280734084505, 0.20092395145246023, 0.19123844547478808, 0.19648227059993473, 0.18065478177105765, 0.18374454770894322, 0.1845151427497178, 0.19329183341475953, 0.18500325351713243, 0.07039285413938867, 0.08057958359812933, 0.07680581814618304, 0.06900890394701198, 0.06866002181839981, 0.07063972659993256, 0.0727472371974105, 0.06887816431816496, 0.08272369790720402]}, "mutation_prompt": null}
{"id": "bd011b95-3ba2-44af-80f2-feddbf11dd72", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "24f2772a-19cb-4a1c-940c-28c1312091d0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "11939cda-74b5-4776-818c-0b47162e902b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased to enhance diversity slightly\n        self.scale_factor = 0.8  # Adjusted for refined balance between exploration and exploitation\n        self.crossover_rate = 0.88  # Tuned crossover rate for dynamic adaptability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+3) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        rand_idx = np.random.randint(self.dim)\n        crossover_mask = (np.random.rand(self.dim) < self.crossover_rate) | (np.arange(self.dim) == rand_idx)\n        return np.where(crossover_mask, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound)  # Adjusted local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with strategic mutation and dynamic crossover adjustments for improved optimization efficiency.", "configspace": "", "generation": 65, "fitness": 0.24863683044289925, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.510204344821045, 0.474995010745756, 0.4717199021192845, 0.48305587724616184, 0.5073986186268971, 0.47977198930656983, 0.4854763301986882, 0.47364892197458874, 0.48992083500889316, 0.06905599722383171, 0.0745572977676826, 0.0944063409793765, 0.084393037377546, 0.06071581962691086, 0.08940659049489519, 0.07125834256683616, 0.08384176334712079, 0.08872859543401013, 0.11927461493972291, 0.11201833269945527, 0.11617625906319895, 0.0939216100477106, 0.12333475515374326, 0.11196426300484685, 0.11780047736154808, 0.10854961390020379, 0.11348808642426356, 0.0965247707598188, 0.10673883053695277, 0.10064594423274686, 0.10159083066082963, 0.09962147265063026, 0.09046394953684411, 0.09617562157806203, 0.11594158840316826, 0.09271574366534274, 0.9569120794391007, 0.9492875100265503, 0.9335251038201088, 0.9183264695904751, 0.9448484867024095, 0.9819614249975402, 0.9478398274914263, 0.9547652285601066, 0.9704236073133394, 0.30308894183247925, 0.2990594068931818, 0.2864276554024393, 0.32076050993366056, 0.28609098988123716, 0.3170487218909872, 0.3130924085719712, 0.31510797040011707, 0.3250292289208343, 0.676720032556009, 0.705729740798884, 0.6861959779185781, 0.6806774626984904, 0.40565510225798884, 0.6552834572302053, 0.4894462027158918, 0.671802076239108, 0.4757711072095373, 0.19242029665062876, 0.18620470038302184, 0.17946533124719133, 0.199709814253905, 0.17162920698611017, 0.18557476194781142, 0.19314985034596888, 0.20972257137036665, 0.19812728968906035, 0.18611987551807074, 0.215531130612706, 0.19843677868893106, 0.23025166660806606, 0.18575744239398762, 0.19774904950297179, 0.19387524459229133, 0.21575253598877064, 0.22708808390596802, 0.0770368897306678, 0.07225859267133661, 0.04154308632390258, 0.046503320527380154, 0.06299183661022834, 0.04188433823791349, 0.05704357141606253, 0.05910654525060455, 0.0356016957375479, 0.11657403231742769, 0.11195619203617757, 0.13610425832840212, 0.1075045428814948, 0.12320752913343513, 0.10425595343888894, 0.10332836160668157, 0.13932184701778083, 0.14280157766014723, 9.999999999998899e-05, 0.0015009189237787934, 0.003750076726885543, 0.000559351345668424, 0.012507725084694776, 0.003403866084927043, 0.023676541366440707, 9.999999999998899e-05, 9.999999999998899e-05, 0.12332508297003097, 0.11668549906467107, 0.1134850856262889, 0.11685525005088782, 0.12686394985126304, 0.13404533089984183, 0.1282376705866376, 0.12538923438760718, 0.12004806006388624, 0.4224715769957649, 0.42556197567194143, 0.4299596620935008, 0.43771090928486434, 0.42665866315574685, 0.42890336114803673, 0.4211315299494881, 0.42273379581867465, 0.4426921656891998, 0.0898718698490345, 0.09107059815610996, 0.07971913973054412, 0.10626828694265256, 0.09643918941487373, 0.11733411697997087, 0.08303013592823028, 0.08156342272631789, 0.09602781705893426, 0.1811255795448129, 0.17470696570690158, 0.16111269876444145, 0.14076668879872578, 0.21833473602051823, 0.1993374771943468, 0.19579369948610603, 0.21527112955930883, 0.18052464529862244, 0.29640216072122816, 0.2874678220957333, 0.30158432200033125, 0.28716039938640725, 0.2837271489252281, 0.28557817449588385, 0.30140356697718707, 0.30900063867648697, 0.29635159459906724, 0.2304042682186962, 0.23191842413278063, 0.23114129419770912, 0.2373516184955392, 0.2161493551825332, 0.2235409903221457, 0.2233144511702555, 0.24926036641632987, 0.2162218343585337, 0.1789178662667189, 0.19578555740566062, 0.17991090291360357, 0.21437414339664418, 0.20921965359913686, 0.18786775533706834, 0.1953660756730906, 0.1886526908856817, 0.2111277971787997, 0.18171887703660627, 0.2037246663126676, 0.18165472854625397, 0.17709970883717374, 0.1780454594300318, 0.18362668838502916, 0.19158065672328406, 0.18941119583530308, 0.17948795950709118, 0.5648537143201364, 0.5120504223715512, 0.6438001642889596, 0.17976755991924598, 0.18477861280858487, 0.19411636508729035, 0.17935286777220738, 0.5244420062398063, 0.6589215395349434, 0.5530529400405725, 0.5344406649580655, 0.19838006000696617, 0.20596984765970705, 0.15659469004008464, 0.49970581048883544, 0.21271793236694891, 0.546543754225379, 0.20699256537436594, 0.1995623677855337, 0.1691236874481863, 0.19159816653491102, 0.1890801472326904, 0.19117451754089188, 0.1990717577085498, 0.1732102484954523, 0.21524238664962037, 0.18801370430663256, 0.07296941348893049, 0.07547398041065712, 0.06786048393307997, 0.07601724405912513, 0.07592904490050112, 0.06429487955587121, 0.06574916997632285, 0.07517469887956119, 0.08125275322322123]}, "mutation_prompt": null}
{"id": "82d12745-6277-4347-be3c-9aa07050b97b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24\n        self.scale_factor = 0.82  # Adjusted scale factor for enhanced balance\n        self.crossover_rate = 0.9\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound)  # Modified local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "Refined EnhancedAdaptiveSearch with improved mutation scaling and local search dynamics for enhanced convergence.", "configspace": "", "generation": 66, "fitness": 0.24428569365473538, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.4780274570563502, 0.48558609830115407, 0.4803310189798786, 0.49133502069215884, 0.4749852360011565, 0.4966405834057833, 0.4866048234380135, 0.4840817532923667, 0.4490630813175255, 0.08307979415238154, 0.059580364579636114, 0.06335106902731824, 0.07507766713584041, 0.07899571750697865, 0.07004148164492274, 0.06792972505362105, 0.12242544932773125, 0.0757662247454628, 0.09963755164608668, 0.11200926589219218, 0.10838614425037651, 0.10073657068415687, 0.10473531041343431, 0.09943254921637568, 0.11396979460952772, 0.10068754696872384, 0.10444407740192507, 0.08673470631757552, 0.0936375670124775, 0.08710593573773528, 0.09168340557528387, 0.08315955618782644, 0.09937494532459423, 0.11107888746963368, 0.104294337803573, 0.08578460187239689, 0.9502362340191385, 0.9405485628260909, 0.9383546259797241, 0.9481250152067962, 0.9657901911972145, 0.936821694231073, 0.9374107550229253, 0.9756256260493573, 0.9456767382505231, 0.2817740975496901, 0.31416619270721535, 0.2891823180776164, 0.30241654130538476, 0.29102380630208324, 0.31777762429939205, 0.30960947475391676, 0.3030015614401077, 0.3119073115943878, 0.49089899587412633, 0.3954110342843593, 0.6706948863928996, 0.6197155510716872, 0.6803889364927118, 0.502320224542354, 0.5598804888346682, 0.7114287079974755, 0.5794571092039069, 0.18457537462676388, 0.19868982255453516, 0.16851973623950212, 0.1836569501001134, 0.1798379842003276, 0.18919794879993146, 0.16516868374560745, 0.1903337411247391, 0.21550897055949358, 0.21804276888821394, 0.1900146031588259, 0.21004527888367042, 0.2032633738479135, 0.1806304845790293, 0.20429461157238782, 0.21495699066489338, 0.22367857717677764, 0.20348826158307054, 0.047235867095725026, 0.05690955799642583, 0.054527114843826885, 0.054191368554999286, 0.058089286707058596, 0.057034595019142986, 0.03260669140406047, 0.04169725604852215, 0.031422755406172787, 0.1228527637923269, 0.1360172614248638, 0.1051396663106301, 0.14091790057133857, 0.1290879395577733, 0.11260839765305641, 0.09944088262844575, 0.12376269118679395, 0.10905374046835747, 0.005421036313833838, 9.999999999998899e-05, 0.00041970953632886054, 0.013577679455850755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008240306280300813, 0.1441354403537216, 0.12228240162911974, 0.11488108183885326, 0.11715260269610239, 0.11966469463757035, 0.12893886175047087, 0.12433403163556267, 0.11955563098011823, 0.1254482908777158, 0.4115707074290794, 0.4196812977151494, 0.42240436027024386, 0.42574715361371696, 0.41692289520408476, 0.4298368284922721, 0.4372735795403403, 0.43314356053208525, 0.42543170814411846, 0.09917017756411173, 0.10092387260824032, 0.08719195523021606, 0.10652550074817702, 0.08095023893320541, 0.11154346807365179, 0.07998018968519427, 0.07561246138828814, 0.08264357086521101, 0.18855218641887928, 0.16159433203848073, 0.20632063675328582, 0.20616566021878302, 0.26454905454457134, 0.19874981200218012, 0.14706941474802748, 0.19780962464609664, 0.20926857369025675, 0.29383114107506203, 0.2879093699726346, 0.2902315154816679, 0.2913971539809366, 0.28232493231154454, 0.2813098441577234, 0.29149254747804676, 0.295758815158356, 0.2820589518594355, 0.20961471021877298, 0.2275714990562664, 0.2308791492677439, 0.2288027978093925, 0.2119256260620367, 0.22960331298835623, 0.21539725670237142, 0.2434454060938016, 0.2222941781231168, 0.1806118261348929, 0.1804923419165183, 0.1907315045334239, 0.1968602942025528, 0.1729766052909918, 0.20705196357329503, 0.18356053842257158, 0.1947025362115934, 0.18688441050183124, 0.1904954140109134, 0.1834438355042003, 0.20964871367119486, 0.17769823391767003, 0.17930546559233684, 0.24465517961808902, 0.18645157839034388, 0.1807393465374929, 0.1738088608701246, 0.18171708060018732, 0.17001359964129825, 0.15259536431260345, 0.6398773998083159, 0.4701146893704402, 0.6497804926703166, 0.6562697477517023, 0.5966076598352382, 0.16447947428530074, 0.5945957363926195, 0.19919349636006478, 0.16786908984733706, 0.5558212610328803, 0.1941744306477362, 0.48594326963076595, 0.20385745023585822, 0.20881575569080402, 0.20743789029092474, 0.19394506527129673, 0.18741050722246533, 0.17788004143124558, 0.17548861090382528, 0.20364657442217038, 0.1868079409373118, 0.17396408823727894, 0.18951290422851308, 0.1904004453064626, 0.06945238813852139, 0.06965310856298224, 0.07214361393972268, 0.07137641159064334, 0.06411225905091689, 0.08209397748335501, 0.07445986881854294, 0.07982675982037213, 0.08128040534769898]}, "mutation_prompt": null}
{"id": "54bf143e-3d14-4d82-86ec-03cbd9d7d575", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "59e1bd89-3007-40ad-8f75-75e49ee30078", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "d4cb005e-2f4d-40ce-82f6-bc679089a4dd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "b2c3c95a-98ac-427c-bb91-f510e63f7112", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "38801096-d05b-4080-b673-e13d808fcece", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "88336ab6-de6e-466f-8f79-329bcd1e5767", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "f9f700e8-48bb-4333-b38a-2bc1929e30df", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "0970eb40-1b19-4c06-87ed-0cf1095f613e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "3e4a9928-008a-4849-a2b4-efdd5f695627", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "04301cc5-0756-428e-aba0-14edc84b074c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 22  # Reduced population size to improve convergence speed\n        self.scale_factor = 0.82  # Adjusted scale factor for dynamic exploration\n        self.crossover_rate = 0.88  # Slightly decreased crossover rate for stability\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further refined local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with strategic population reduction and adaptive parameter tuning for improved exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": 0.2560808026092942, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5204844055735508, 0.5128982724925643, 0.5115280964839786, 0.5120477647330011, 0.5072525604178566, 0.504349954997151, 0.5064897862525727, 0.5049404218584335, 0.5071183802468291, 0.10891513302511413, 0.09026615482821476, 0.1213128044208368, 0.09234315511988078, 0.09794909793046958, 0.11192630321295705, 0.12321969551477974, 0.08910025301593083, 0.10424810896495218, 0.11902662486475801, 0.12067788340996088, 0.12311029313330712, 0.1229289593687165, 0.12614176421285006, 0.13592232731515652, 0.14214533020573472, 0.11507808360265348, 0.10178080618054486, 0.11805577322326266, 0.11575483810126264, 0.10278931236909372, 0.11808876736121221, 0.10057691318230078, 0.10526526831825689, 0.10320217755497252, 0.09703799799279511, 0.11397096624856295, 0.9745246852178326, 0.9427735596106, 0.9375588911976745, 0.9577613186469388, 0.9382059135769136, 0.9695355143237773, 0.9690559317877486, 0.9596344114625783, 0.9361547866963962, 0.32584066856656546, 0.32604381766630264, 0.321919509644393, 0.32783146929141505, 0.3384205665042088, 0.3218630399828789, 0.3445451798016629, 0.3617764922108444, 0.3150678331267611, 0.5956503708981333, 0.6431973870409291, 0.7072592983347772, 0.7395534646147801, 0.736886285409426, 0.6893391416825391, 0.6364534286596928, 0.7043229570350316, 0.7785485980778527, 0.2027591068473258, 0.20958061025808472, 0.21140463696512146, 0.1943957553732505, 0.2242257977376264, 0.20933045086300095, 0.18250142093499266, 0.20437932813891135, 0.2343035481432606, 0.19453312234131648, 0.24571648875895502, 0.25054935761837105, 0.21963378794633837, 0.22695975457202133, 0.2152004795201059, 0.22661050464220245, 0.22088574275492412, 0.25406006699726824, 0.05741343336901428, 0.06013015887630846, 0.06183700828659133, 0.09344415610607393, 0.06779917065235552, 0.04034870445399996, 0.058024767614432315, 0.047784431924517756, 0.06347101784138087, 0.10640576858186757, 0.13704023633749107, 0.14387475864632238, 0.12614074416447818, 0.11432530621852843, 0.12742117405001285, 0.14045135011693788, 0.11627810892277068, 0.1304168107609388, 0.00223855495961911, 9.999999999998899e-05, 0.0006935831474594867, 9.999999999998899e-05, 9.999999999998899e-05, 0.00907104961348526, 0.00247675325824237, 0.000299192456842845, 9.999999999998899e-05, 0.13463254141917025, 0.14004489454288382, 0.13169099705728637, 0.14074322699416242, 0.1511199562976222, 0.13737165004651086, 0.12689362213036115, 0.1368667835894417, 0.14728197016137767, 0.4406426514258045, 0.44624620932799697, 0.4451906213341691, 0.4399292563016367, 0.48983032850971264, 0.44726446039679213, 0.4374697525155252, 0.4342873157508863, 0.47321189992558854, 0.11100849540282398, 0.08600005113856368, 0.0921310310426241, 0.09334138291412675, 0.09303978007222213, 0.09045632481267096, 0.1088186574427622, 0.11296913913809081, 0.08556473398171638, 0.20914747604934036, 0.1402774717717904, 0.14548240848903538, 0.18189147464073108, 0.272691720178422, 0.16562248752107478, 0.18936543881340284, 0.1585475448702357, 0.16804641462183278, 0.2925392964110054, 0.3119857129915742, 0.2914651664427179, 0.30343692421103285, 0.3023055095588171, 0.30198840661457316, 0.31396148679898095, 0.31767675198770307, 0.3175295570436266, 0.23102047734718745, 0.21243282354784465, 0.25294295823897317, 0.22590306811101724, 0.22204779225282778, 0.2064676234124645, 0.25134927496476944, 0.24441615965468166, 0.23123314273648343, 0.19727686514396658, 0.17855110038689914, 0.16961863664598587, 0.18221170441391943, 0.20562548697579275, 0.18872264339417122, 0.19958190852485658, 0.18453695203885978, 0.19342316111020497, 0.22135577404503815, 0.19029247758676726, 0.1948337095516477, 0.2512140354421024, 0.18359161074525387, 0.17712883552861136, 0.1973940444304607, 0.18479407920013413, 0.1941421216192909, 0.1816339657436714, 0.1827182760109316, 0.16797191863677385, 0.17404014148999158, 0.1971075448845574, 0.588054293399578, 0.18582515292907587, 0.5924141383763415, 0.6259513502333061, 0.1644232219122419, 0.20740117257939306, 0.5831373790779015, 0.6203228951516083, 0.1586063455136707, 0.18989346147665265, 0.21124927405208194, 0.5675745399817513, 0.2114632236842946, 0.18767808628896832, 0.19063039059435816, 0.1846687481003232, 0.17764431595286856, 0.19481316023471007, 0.18798082353613488, 0.18376687718699325, 0.18892707461541247, 0.17910491261227035, 0.06978777413259418, 0.07311199323090278, 0.07075728940948245, 0.07085642451045315, 0.07653555011524349, 0.07089561976235947, 0.08020181756793676, 0.06964700025312742, 0.07405460305508005]}, "mutation_prompt": null}
{"id": "1aac395e-10f2-409b-bfcb-6bbbc66df194", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "771f4d74-ba0d-496d-a1d5-ccc8a3ad6065", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slightly increased population size for diversity\n        self.scale_factor = 0.78  # Fine-tuned scale factor for better balance between exploration and exploitation\n        self.crossover_rate = 0.9  # Increased crossover rate to promote exploration\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.04, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with improved diversity and exploration techniques for better optimization performance.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5011112096350602, 0.4980542153987154, 0.5011664999593031, 0.5208710050671681, 0.482173714687113, 0.5208227794482772, 0.5168243802615462, 0.49253475060335206, 0.5257809493176104, 0.09261846464369283, 0.11754080565343084, 0.08242578152199753, 0.10692396507235258, 0.08921076103197789, 0.11349126423065736, 0.1166475730061276, 0.08994448915209563, 0.09341403085134203, 0.11079503661305456, 0.11090414913623914, 0.10859645410615337, 0.1061144212179932, 0.12055190523225878, 0.10454059442581187, 0.11826565279672363, 0.0994812047504211, 0.11366429771898656, 0.09367441268547749, 0.090086474462299, 0.10909941229490283, 0.09612057816031883, 0.09288696637518712, 0.10852804898156443, 0.09474317195833082, 0.09582696853462092, 0.12157474043289307, 0.936602511812218, 0.9606240236141851, 0.9368039454382847, 0.9403630920348541, 0.9633522856576406, 0.9414053750408024, 0.9370495155089229, 0.9556035838175482, 0.958669906419977, 0.30374664876184154, 0.3125002072231071, 0.31117014176726054, 0.3270994985508917, 0.324302652865328, 0.32513408367044727, 0.32682106599418714, 0.3343972607710751, 0.31925862048097453, 0.6697503521769801, 0.7681640995794542, 0.7360935217807175, 0.7140317822104754, 0.7005376097830855, 0.672001272235523, 0.5680925086040205, 0.6679065671363109, 0.7559920665235917, 0.20786919710969476, 0.21671088576446085, 0.20696701569913778, 0.2214539706836014, 0.1955065286709866, 0.2024397194655405, 0.2106470245555756, 0.192120925996897, 0.19765733382408235, 0.2320408557703132, 0.25578627246891805, 0.24258483505286976, 0.24907552643706465, 0.20558790550414052, 0.19489543341321147, 0.22280768512443272, 0.2274008009558085, 0.2098876268077705, 0.07642060627015002, 0.069546511933255, 0.06277530235322759, 0.061682428673951795, 0.07972326278599307, 0.08664659910354255, 0.057052699277269525, 0.08981265277180772, 0.06435218559962463, 0.11836560313605005, 0.11625780409061559, 0.1579987465865006, 0.11242028288670314, 0.1261300151655409, 0.10956425759933608, 0.13603501972217724, 0.13501470682092953, 0.1422164095805154, 0.00230924603791971, 0.011446104423709413, 0.0063432356223874775, 9.999999999998899e-05, 0.015002520165166455, 0.0013125052744983323, 9.999999999998899e-05, 9.999999999998899e-05, 0.005244204832582922, 0.12919368667545117, 0.13419745616946488, 0.13162099971747943, 0.14786097374453588, 0.14025747003908695, 0.1309288415569294, 0.13947062091035078, 0.13115771905097262, 0.13312821135953, 0.4228631309122338, 0.42645504623867203, 0.43775466484224135, 0.43843552299482713, 0.43775276500812865, 0.4688088847866857, 0.4373727030391863, 0.4481876460109957, 0.4334967701567978, 0.08459253537791922, 0.10396010218252572, 0.09666547071765907, 0.08210619756437187, 0.09617030090489043, 0.09394270210620648, 0.08411407667764792, 0.0798862922535778, 0.09736035483300143, 0.31200822929335836, 0.18938906793420607, 0.15526410893494125, 0.1505881561496042, 0.21383852331018516, 0.19341254992065415, 0.16205896910206574, 0.18146488756991408, 0.16346999489177538, 0.2894001803342291, 0.2881761607180925, 0.2925175252627106, 0.29863465470178463, 0.29993947598310955, 0.3044836857681603, 0.30033565880882684, 0.30809679974327187, 0.31193320396901736, 0.24619206719874454, 0.2303672454036384, 0.2353275421462545, 0.22237362999828791, 0.23192644085986824, 0.23273250099595555, 0.23269366352767307, 0.2331422455772607, 0.21979327339841426, 0.18422457650290125, 0.22529068960337706, 0.18605044576618113, 0.19355915941116675, 0.20678100329901816, 0.18703233138279318, 0.19189459217691685, 0.18050615737646836, 0.19877676187586812, 0.19649921196053888, 0.2181769672970657, 0.18490789959601184, 0.17758849369944552, 0.20824118346729548, 0.19493049546803554, 0.18872652645357635, 0.19829916699005612, 0.19014000301971723, 0.7058638349364279, 0.16162964117487189, 0.18783326274388856, 0.6822656154408921, 0.18326731027222143, 0.18135435329841998, 0.7200950242729198, 0.6394055163533072, 0.17399884376826358, 0.20646732256981626, 0.20383917486182468, 0.6060657494549155, 0.6030853540868324, 0.19892709263138564, 0.583503746629016, 0.20655117266068102, 0.2084384115469715, 0.2062541934210661, 0.19259160931929742, 0.1805125974398627, 0.19682940112198655, 0.17236256076765344, 0.1878121885544286, 0.17385360051112364, 0.1907242570646559, 0.18951113640572315, 0.1817122682424691, 0.07667320181135506, 0.07239748621552844, 0.07806038453723818, 0.10885990305199555, 0.07383096911143006, 0.07810947477203156, 0.07571966040980538, 0.07466499377532598, 0.06496447481849843]}, "mutation_prompt": null}
{"id": "70034926-325b-4a54-9649-117446e7ae6c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 79, "fitness": 0.2642024727917794, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "16992e89-6443-4929-a8b5-c48bcbef83ea", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "2db441a1-4d63-4f8d-a8de-2044149725e2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "daa00fa7-6fff-45e8-8f71-4b31ae92efd7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "252be0c5-0ab6-4188-acbd-f7fd8811e573", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "6eda9595-8b2f-4e2d-9b15-c0e2ed141c68", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "83f66ce1-31de-4670-ac14-9971b6cb346d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "dd29c10e-6431-4d66-a614-9d2ce8e130f4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "d9d33b69-c5d3-48d7-b23f-0ba2fe486f28", "solution": "import numpy as np\n\nclass ImprovedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25\n        self.scale_factor = 0.8  # Adjusted scale factor for improved exploration\n        self.crossover_rate = 0.9  # Increased to enhance genetic diversity\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+3) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        return np.where(mask, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.030, self.dim), self.lower_bound, self.upper_bound)  # Reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "ImprovedAdaptiveSearch", "description": "ImprovedAdaptiveSearch with refined mutation strategy and adaptive parameter tuning for enhanced performance.", "configspace": "", "generation": 86, "fitness": 0.2560313442336228, "feedback": "The algorithm ImprovedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5106292469884663, 0.4886072482671051, 0.49640911493223727, 0.5136570140609265, 0.5271797815825314, 0.5160429391496306, 0.5361883938917082, 0.4966456235888541, 0.5471903525783997, 0.11428814994390502, 0.10551555580423178, 0.08465635908975422, 0.12723111038500134, 0.10708728800529932, 0.1376274312201844, 0.1035332813514156, 0.11228154896523246, 0.14593234898391638, 0.11007442202028928, 0.09757920018620392, 0.11821327453797514, 0.09972351016358316, 0.11288880338904639, 0.09767935080079293, 0.13609519047392082, 0.10415275120952394, 0.10570354646899105, 0.09837065916296162, 0.09629263834693425, 0.093546408708019, 0.10400947356146062, 0.105026871289156, 0.1061058915665537, 0.10033350614523662, 0.10235111461492197, 0.11319314100383604, 0.9537279351177018, 0.9550779310029357, 0.9503481494144018, 0.9496103872931695, 0.9678406601954069, 0.950818761110838, 0.9694867744370202, 0.95849650464164, 0.9353183481719075, 0.31219214033375575, 0.31600170821807705, 0.32088045384809716, 0.3434377002040049, 0.324060651819268, 0.3116330169703483, 0.32475613748400833, 0.3278081013323716, 0.33642095524796634, 0.7013912778112699, 0.6422100618595883, 0.6830516198917049, 0.7626367357234065, 0.7151621006888356, 0.666212789410962, 0.6417569458321144, 0.7529992645859083, 0.6077004745129588, 0.22670593494576263, 0.21184354604323974, 0.21922113052108294, 0.2159743770900242, 0.21686852016371394, 0.18091379115690553, 0.20599405662072467, 0.21264580961760593, 0.20509713201675928, 0.22107975841277994, 0.23159685124328622, 0.27617091335428656, 0.2234214795259355, 0.23144175805257083, 0.24231626439816845, 0.24734264544750617, 0.2230038875551893, 0.2351245882831151, 0.06999763029210748, 0.056152104497015576, 0.08856308307725902, 0.08019513465784767, 0.08085862159161838, 0.06623479992010417, 0.07372586715571905, 0.05260569185045538, 0.0832896192439957, 0.13727185938016973, 0.11450860544622521, 0.14906493683169098, 0.14896826727773083, 0.11768521403021692, 0.16446977194329304, 0.1742079620846071, 0.14138941194991783, 0.11883969250036441, 0.00476144085739616, 0.00017949123807448064, 0.02062799317453423, 0.0012277227864789797, 0.006024450920862678, 9.999999999998899e-05, 0.015845748609165766, 0.03584754037383542, 0.005668164689984989, 0.1335089885977866, 0.1377033869170171, 0.1306609349918959, 0.14448005410182718, 0.13716313046234596, 0.14657509941082225, 0.146070864408958, 0.12504919415840376, 0.13319504355463774, 0.43276235646455574, 0.45037147874163164, 0.4337800405437132, 0.43906852744792835, 0.4537458819463631, 0.44523856968593123, 0.438604168302537, 0.4354591851579642, 0.44258908063620706, 0.11259376718194303, 0.08136768648595605, 0.08464535854103628, 0.11690868895890161, 0.09456897318019253, 0.0953563602961982, 0.08895059683690121, 0.09608990455941224, 0.0918741608394934, 0.24471492054012378, 0.17154237954121743, 0.1709128717249756, 0.1328242311427783, 0.14924623392564262, 0.19939647300944274, 0.15295946212360756, 0.14302164547278262, 0.14616343092146267, 0.28385986638592475, 0.2913394411007796, 0.30688995797327967, 0.2969416952056858, 0.2893834408026934, 0.30541184234427143, 0.30185437724843533, 0.2993977602463851, 0.3282635838433261, 0.2281120290031745, 0.23281434911024934, 0.23375409915986278, 0.21945066064268626, 0.2277708624493907, 0.2464749399327294, 0.25289441078872066, 0.23823244233266194, 0.2436964536276811, 0.2024986422692472, 0.17893190085961852, 0.18279298176516934, 0.1883530772293157, 0.1835464482530963, 0.18834411047928468, 0.2020010472042525, 0.18290520970223212, 0.19048116603766074, 0.18602120761199592, 0.2024392166947876, 0.23533356653330206, 0.20733063986878786, 0.1820020422278409, 0.19461792919331888, 0.19592776020622338, 0.24044755439952348, 0.1801780924794164, 0.18174939519641065, 0.6862251591607953, 0.15267038200738425, 0.7117384969001452, 0.18876686834998524, 0.6958591076862305, 0.18364273842078438, 0.5285183361927103, 0.6960962459488559, 0.16535963959462985, 0.1670785291652339, 0.20264410051871629, 0.19211008959921938, 0.18660739502043522, 0.19912050173094165, 0.20740195048296728, 0.2056814461253672, 0.20786195988292988, 0.17517901093686106, 0.18452002312897398, 0.178312215406925, 0.20076787536177298, 0.1974815802845008, 0.1753756520067471, 0.19178510897775014, 0.17962207774398375, 0.19034099794622783, 0.07426011781687591, 0.06961509526848697, 0.06742577026449237, 0.06949294342135004, 0.07202454945074754, 0.07733233423330788, 0.07336358275661259, 0.07784958662478425, 0.07087815439557765]}, "mutation_prompt": null}
{"id": "ae79ab58-0369-412e-962e-07a6dd72c380", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Adjusted population size\n        self.scale_factor = 0.78  # Slightly increased scale factor\n        self.crossover_rate = 0.82  # Reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+3) % self.population_size]]  # Changed mutation logic\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.034, self.dim), self.lower_bound, self.upper_bound)  # Slightly reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with fine-tuned parameters and optimized mutation strategy for improved performance.", "configspace": "", "generation": 87, "fitness": 0.25399150548797883, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5128093818627637, 0.509032227851204, 0.526962764228811, 0.5006406591519403, 0.5227794562909398, 0.523494864044026, 0.5121855899260014, 0.5104127076204457, 0.5210996265256085, 0.11907217274667348, 0.09944336381118979, 0.10790264085598555, 0.10364653082668573, 0.11710353317422273, 0.1300314079329764, 0.11278648126794666, 0.11645977444901368, 0.10209383489383339, 0.10560317341241532, 0.10525374549894873, 0.12931360505981704, 0.13306151516142561, 0.11798144340505257, 0.10608226792690056, 0.11766024767308003, 0.15658440711298205, 0.12219826146534618, 0.1018589190880903, 0.09272121672731559, 0.0956994036354788, 0.11124803050433352, 0.09867849015740482, 0.1253590240033604, 0.11126049076332634, 0.11344671105456416, 0.11326488217780462, 0.9445221467702655, 0.9732688291563134, 0.933653461409897, 0.9741475045917621, 0.9544510299970046, 0.9735542907585543, 0.9708765669323374, 0.9422372946155076, 0.9475415242980842, 0.31530318590880035, 0.31927525050381933, 0.33208125022818036, 0.29420317507859106, 0.33686908113420244, 0.3294843315313135, 0.3324171538104107, 0.33322327306357913, 0.34758929108776304, 0.6655708182480594, 0.5139937998960799, 0.6109572824191507, 0.5026356378110977, 0.6176533989907351, 0.6686294628279081, 0.6711321353891073, 0.6952611911421487, 0.51048706773716, 0.19882286445555541, 0.2178334099453515, 0.20899515421203674, 0.20298665198302646, 0.18957715963940924, 0.20320503454047845, 0.18165801602893827, 0.21625188479498914, 0.19667336762809695, 0.2058979696843054, 0.21147451312437604, 0.19925567391316423, 0.226450728039724, 0.22351269050431055, 0.201962534021345, 0.20518261362579693, 0.23437554201698618, 0.20973934745775136, 0.05712779070959151, 0.04100312856418098, 0.04681053984801531, 0.04609877580073207, 0.05691336890458931, 0.04991483613353298, 0.03236548159948294, 0.06547654462010455, 0.07102982010152825, 0.1262171673678959, 0.0811368417956323, 0.11733192645953727, 0.1004021645127341, 0.11629928594957306, 0.09904994086017527, 0.13440791380552763, 0.12630837515446058, 0.1283071216126489, 0.000605961207189476, 0.005639926121887018, 9.999999999998899e-05, 0.0003950251788854553, 0.0037328431454274336, 0.013510796759110932, 9.999999999998899e-05, 0.0007328448639449814, 9.999999999998899e-05, 0.12144857290941435, 0.12246935909770273, 0.13255229768527987, 0.12207786617061833, 0.13167199507504934, 0.1374679791108374, 0.13454207576343757, 0.13136788772763686, 0.13625598922533666, 0.4338088232336188, 0.4505179621046176, 0.44175153443417603, 0.4566060294479283, 0.43641168093688076, 0.4380444854478671, 0.45005898698644575, 0.4311511310765893, 0.45505875681983043, 0.09369967707171345, 0.12094877601897425, 0.09941897074166806, 0.10229634424974443, 0.09879410572852865, 0.08871300716769437, 0.0769068331747037, 0.0905951968243136, 0.08516153561480533, 0.12033218682615332, 0.1705652608805278, 0.30510602498058725, 0.24659655673538972, 0.20340872405326393, 0.23868651664168106, 0.19680453586012814, 0.16219209492141218, 0.16288063285674836, 0.28581961723758076, 0.29862966274441083, 0.27328726428247196, 0.3020758382327179, 0.29149408917044684, 0.30019457693791074, 0.29991326873638147, 0.31642920979532874, 0.2879591507148067, 0.22585520171930018, 0.21730343404430408, 0.22567187479152817, 0.21419674144846768, 0.21323553111215732, 0.2143031852967736, 0.2560860251505832, 0.24412643029230585, 0.22143472286399435, 0.19612795764936475, 0.1861686582862544, 0.18912710647481512, 0.1853866003600142, 0.18009537843863377, 0.19752197343974287, 0.17832283757299972, 0.17849847932287644, 0.18967137847263038, 0.23012319009339266, 0.17978073943268502, 0.17840588636202825, 0.19956956530131553, 0.17994815884901638, 0.2347789559152461, 0.18878879170245888, 0.2169462683395602, 0.2114824719495031, 0.18070794082297348, 0.18896173195903598, 0.660859988230607, 0.6917264453699047, 0.18036817921938186, 0.17289826647560025, 0.5272584505430914, 0.17295679669818853, 0.668986938744784, 0.4776149069662501, 0.19954164544387554, 0.5349487567150457, 0.4240603676264696, 0.1993975693187302, 0.19388197983840338, 0.2078995315527925, 0.20761539592216383, 0.6444939223323474, 0.1901560966336826, 0.177053615312197, 0.1748801071597481, 0.19723282543983278, 0.18699059520241568, 0.17702876131230583, 0.18531389008299992, 0.17343306681008874, 0.19314530784015027, 0.07872099254653042, 0.0800184980263624, 0.07411139821932977, 0.07584575742960298, 0.0764649495992209, 0.06374948179910078, 0.06770597117265698, 0.08923046222002362, 0.08054811436444764]}, "mutation_prompt": null}
{"id": "e3b451c0-4f9e-4319-84b2-87ce8ccf68c0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "3a6cf1e2-ac80-42fb-9530-a631e240b8a2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30  # Increased population size for greater diversity\n        self.scale_factor = 0.8  # Fine-tuned scale factor for precise exploration\n        self.crossover_rate = 0.8  # Optimized crossover rate for better balance\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.03, self.dim), self.lower_bound, self.upper_bound)  # Adjusted local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with refined mutation strategy and adaptive search adjustments for improved efficiency.", "configspace": "", "generation": 89, "fitness": 0.24131139744596244, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.518086653905368, 0.5107602321880571, 0.5066832772203926, 0.4932348756309102, 0.5203496217996799, 0.5275453928257625, 0.5028867645224755, 0.5061622889073492, 0.5184321736125942, 0.10025558471040219, 0.10706177598940814, 0.09621554138893784, 0.1154334849889952, 0.09316700810122269, 0.07903776750379288, 0.10819360748957174, 0.11005446483683567, 0.10690495775501241, 0.1305547651165644, 0.12253331604675854, 0.1089786360673588, 0.11806483556860181, 0.1255915468827934, 0.11768171426170793, 0.10638366174537672, 0.09913278929715075, 0.11624003463904553, 0.1028724539068917, 0.1008259008221778, 0.09597328694565255, 0.108300126244394, 0.112292537272217, 0.10853070811969412, 0.09798473425524534, 0.11491953651141862, 0.11129536494205894, 0.953088151242832, 0.942113885675156, 0.9279616869292064, 0.9418888559376253, 0.9405647693639366, 0.9508700520877928, 0.948239226198032, 0.9377371798520782, 0.9709641646372869, 0.31094751957686717, 0.31969513634756763, 0.3057870597262291, 0.28793537559025617, 0.30952968302760253, 0.3047439395732793, 0.2745842122220039, 0.3009989370986541, 0.3004303564675703, 0.543446190239103, 0.4187457992142247, 0.4164746346498066, 0.49848398566307994, 0.5801134105847268, 0.6021732488216857, 0.5002320128778327, 0.5115513341543727, 0.5283913600162129, 0.174813554365987, 0.16229273019410684, 0.21773929188584762, 0.1593840853425429, 0.1828468808302669, 0.15600202527061846, 0.18110932708808658, 0.1846399210671108, 0.1719247165328467, 0.23905219012207157, 0.21856920676453506, 0.21228368501846595, 0.19606125528221852, 0.1927979557183519, 0.1975582639602268, 0.17714690238449893, 0.17613924998495367, 0.2078933078215236, 0.032177708059596855, 0.029919628791582498, 0.041232483876318615, 0.03469044975746416, 0.02633126206708125, 0.048107733500026506, 0.037806013068000355, 0.0389365969280252, 0.020000012048965288, 0.11254237954675994, 0.10664468574986563, 0.12909636128796298, 0.10685845370265123, 0.08889133445860065, 0.09242771828223573, 0.14141490115873134, 0.128397663754805, 0.11494645073674614, 9.999999999998899e-05, 9.999999999998899e-05, 0.014162035437897291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000549257795186664, 0.0007220957183095011, 0.11066277535079694, 0.12423725145900444, 0.1334904168807165, 0.11730639437488521, 0.12642797420953944, 0.11947384615089685, 0.12309999169169239, 0.12058597301568585, 0.12461191972145136, 0.42521156061044363, 0.4193671263615364, 0.43258018594811765, 0.43953467233123933, 0.44426109945072034, 0.4625661139308552, 0.44357910237708364, 0.4323433771485262, 0.42676620265662857, 0.08015331057058517, 0.08455317028920106, 0.09393616356803192, 0.08231501500714566, 0.07703538468038784, 0.07925575396876416, 0.0958509288427154, 0.08045774311428755, 0.08905028353081834, 0.15588996280515477, 0.16420780043587146, 0.23022096592828378, 0.22889847469979563, 0.16370389490690374, 0.14563836606936986, 0.12920684399267668, 0.15996698003201726, 0.1505211759708487, 0.2828762354999411, 0.2867385082851629, 0.29636192562570873, 0.29649386077111106, 0.2766744259705677, 0.2977267896469026, 0.3050244264373231, 0.2962204974317484, 0.3094240690632468, 0.21735433090487422, 0.20074762470286256, 0.21126674303191195, 0.19070595519089817, 0.2036940114623378, 0.1950151784071652, 0.21991770618366469, 0.22720049631283468, 0.22208051115492988, 0.2303720683686532, 0.17609081869518817, 0.1885485080410676, 0.190900216734758, 0.19003992405996872, 0.1726692078494323, 0.1851658036179249, 0.1931472936257873, 0.179051983645921, 0.19445658822134404, 0.19292109546237246, 0.1770340753963574, 0.19376910602446928, 0.1854400686390859, 0.1807470477846984, 0.19105252685062935, 0.1977122306831619, 0.1851397404062748, 0.6522462518986535, 0.16686447784663183, 0.47343839103641416, 0.49222382977751256, 0.47122988324139004, 0.5650185767693232, 0.4313473740476613, 0.16002477130919102, 0.18518837911365238, 0.44761282215163467, 0.19971198344741314, 0.19551310229258323, 0.46663610011169177, 0.401313045259854, 0.4997528967809871, 0.20955727942546087, 0.20478141650813908, 0.21091221656970893, 0.18217958358674569, 0.18332394275021657, 0.1785712556206901, 0.19006474170313548, 0.1771539949604385, 0.17600765062966073, 0.18781869669164342, 0.1937426335492637, 0.19876184354467508, 0.07355762866133608, 0.07116755109823625, 0.07663788586421305, 0.06919402427665011, 0.07848168557008373, 0.06982288576831319, 0.06571668087577054, 0.08507629726343169, 0.0748369008945361]}, "mutation_prompt": null}
{"id": "f1347a2e-7acd-4d09-a957-1e9f2fee21a9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "4c4181c4-1253-4335-896f-d7bce29557be", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "12a8d29f-4bd3-4ea4-8e48-3a5991e719be", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 24  # Slight adjustment to population size\n        self.scale_factor = 0.78  # Fine-tuned scale factor\n        self.crossover_rate = 0.88  # Adjusted crossover rate for better diversity\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.03, self.dim), self.lower_bound, self.upper_bound)  # Further fine-tuned local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with refined exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 92, "fitness": 0.26376519119571734, "feedback": "The algorithm EnhancedAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5107859921415263, 0.49977687827151174, 0.529602989358748, 0.5973304410043092, 0.5284354181698193, 0.51472066142719, 0.5430530862298153, 0.5055762198932805, 0.534988902766662, 0.10104760841518712, 0.11563382933655741, 0.10721096010185172, 0.11496574472566878, 0.10588507711445982, 0.14935160819168447, 0.119551979720256, 0.11437043013115089, 0.10705403386115009, 0.11160022131237524, 0.13419269688030944, 0.10257862774673865, 0.10733046417984438, 0.11859993782772649, 0.10050811427958506, 0.13092517899754041, 0.11498728174322348, 0.1007124722150935, 0.09251993189385499, 0.09434318198492908, 0.11987152204308094, 0.10144896050734209, 0.08985836315472528, 0.10367425153003751, 0.1070302508211578, 0.11627520968812555, 0.09658874861775091, 0.9450602400471553, 0.9395891552592331, 0.9592998916070474, 0.9502699630037201, 0.9552534059432641, 0.9391671160007523, 0.9505087490988263, 0.9550376032969656, 0.9751542410807751, 0.3389274798173486, 0.32023687057744865, 0.3280081882775877, 0.3275491494973951, 0.3342240159069113, 0.32992285363526475, 0.3302376277080732, 0.3436619055892034, 0.3251974405928054, 0.7180158382710077, 0.7556830063869697, 0.6601502515396429, 0.6599425043821109, 0.7180959749856768, 0.663180943785231, 0.7734219846632732, 0.6031651226335327, 0.731343859814888, 0.2137116458004722, 0.2023634766032516, 0.21987464327609263, 0.20582771285853974, 0.25201707509717786, 0.20729277409783198, 0.21149007093719852, 0.21179087446281342, 0.23411489479483671, 0.23845744404348956, 0.2286420764544398, 0.24111797931153, 0.2531916921024162, 0.2728532395885582, 0.20688897999709743, 0.2282006294080724, 0.2178020713498907, 0.24961092847448174, 0.06796454478396063, 0.08066081608762266, 0.08200119343027923, 0.05559249637626962, 0.06454750754120286, 0.06575525643348556, 0.07641627179729205, 0.0657095613662082, 0.09327647404037653, 0.1305197962406317, 0.14783914943760534, 0.11933280377844202, 0.11892625880960972, 0.1294439537250882, 0.1416040874413006, 0.13062760086490466, 0.1514752783320784, 0.13860283668228934, 9.999999999998899e-05, 0.004838683343834083, 0.015684737456188702, 0.024073707709411973, 9.999999999998899e-05, 0.0031625353373164744, 0.0011496181574198738, 0.02791518894288403, 9.999999999998899e-05, 0.12957757727073826, 0.1471081889978303, 0.12861352323338382, 0.13796561978829291, 0.14994912291480555, 0.13536468522681278, 0.1367087881772603, 0.14597233734014226, 0.13908221530777576, 0.44704047397624114, 0.4646269003765082, 0.45582914773084304, 0.456819427011831, 0.44432449377837346, 0.4592237121316901, 0.4504040186461026, 0.48245932880680975, 0.45827733323942565, 0.09763979527800515, 0.0844748535454859, 0.10900609718380072, 0.09962318456219688, 0.10371286442916172, 0.09540903350460261, 0.09640292947463491, 0.08342037861849294, 0.08553012395199644, 0.2077382167861963, 0.19488331878448584, 0.20756903806464266, 0.13474297641570065, 0.17012543892337872, 0.14756060132731474, 0.15948503748790588, 0.14980413743563203, 0.1521813389921315, 0.29801923964262345, 0.31381163416646196, 0.29789562088999033, 0.30315236707408244, 0.30037528452219, 0.3074475533383242, 0.3091147086605551, 0.3059776018058221, 0.3068866566290903, 0.2645991762234743, 0.23997411969753146, 0.23951722453063629, 0.23393005345763085, 0.24319235726459387, 0.24212890163070055, 0.24508784517616333, 0.23683738909576557, 0.24419732291050578, 0.17763603513990744, 0.18845707258445654, 0.1736702170138673, 0.18209806227903214, 0.19062835084930407, 0.21079509031107568, 0.1956710706115229, 0.17820516853751356, 0.1848587549364178, 0.18118810497641769, 0.19455266381724123, 0.19102183819297447, 0.19594643202574047, 0.19142568968941032, 0.1894719076608411, 0.24283387518522348, 0.20917303403476706, 0.2685757339249383, 0.17044468449414307, 0.7138746490568804, 0.20473886015298792, 0.6773096429434082, 0.18208486732915885, 0.19369589197042147, 0.6539982118180303, 0.6807827820585155, 0.6306836975536849, 0.19928588093228605, 0.16631614622286706, 0.6560133513742318, 0.4139129112086656, 0.20160514966323484, 0.5317536079519709, 0.1264664192497219, 0.2054461524112826, 0.20998181481966793, 0.1875865416532947, 0.1722364667629609, 0.18340163334275716, 0.18260389268202315, 0.19392235761581678, 0.17654405107913862, 0.17882426858621914, 0.18264275111724193, 0.1765461220525738, 0.07934751835682419, 0.0830521297718606, 0.07520715208624895, 0.08119067617591935, 0.07866453082885005, 0.07139990526186013, 0.08099935741905118, 0.06558604105315913, 0.07275953755028697]}, "mutation_prompt": null}
{"id": "975b7916-d28c-4471-82cb-7afa812556a1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "2c56c583-e0a5-4e3f-8a53-2bd225fa3a1f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "c84b3772-7633-4c56-b5c6-7cf4d0af22f3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "6936830e-1817-4ffc-94cb-63ac22e4d7b6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "3b6a1c50-8557-402e-b414-78fcdac9b9e3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "f97a7997-b1ab-42f3-8d3a-31ac42801ab6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
{"id": "66bcb696-0a77-4468-a869-4c5ff0c770f2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for more diversity\n        self.scale_factor = 0.75  # Adjusted scale factor for better convergence\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        for idx in range(self.population_size):\n            if idx == best_idx:\n                continue\n            a, b, c = population[indices[idx]], population[indices[(idx+1) % self.population_size]], population[indices[(idx+2) % self.population_size]]\n            mutant_vector = a + self.scale_factor * (b - c)\n            yield np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n    \n    def _crossover(self, target, mutant):\n        return np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, target)\n\n    def _local_search(self, candidate):\n        return np.clip(candidate + np.random.normal(0, 0.035, self.dim), self.lower_bound, self.upper_bound)  # Further reduced local step size\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            best_candidate = population[best_idx]\n            \n            new_population = np.zeros_like(population)\n            new_fitness = np.zeros_like(fitness)\n\n            for idx, mutant in enumerate(self._mutate(population, best_idx)):\n                trial_vector = self._crossover(population[idx], mutant)\n                trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[idx]:\n                    new_population[idx] = trial_vector\n                    new_fitness[idx] = trial_fitness\n                else:\n                    new_population[idx] = population[idx]\n                    new_fitness[idx] = fitness[idx]\n\n                if eval_count >= self.budget:\n                    break\n            \n            population, fitness = new_population, new_fitness\n\n        return population[np.argmin(fitness)]", "name": "EnhancedAdaptiveSearch", "description": "EnhancedAdaptiveSearch with optimized parameter tuning and refined logic for improved efficiency and convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70034926-325b-4a54-9649-117446e7ae6c", "metadata": {"aucs": [0.5189153108372111, 0.5040264890906947, 0.5194271668580102, 0.5109926884552556, 0.5230482346406599, 0.5091483571974136, 0.5083948116309372, 0.5002186116093583, 0.49174804132178296, 0.08747287040952001, 0.11556761969078566, 0.11210842270356425, 0.09523759584266922, 0.1037005479360058, 0.10002401023624752, 0.09736579474783069, 0.08675537983020853, 0.1149480820904426, 0.11842102620611261, 0.1019337337107048, 0.11649843444546537, 0.13018429870364123, 0.13169191477489095, 0.11873918544486117, 0.105386835266299, 0.12196038302073009, 0.10265864131824542, 0.11687280301845271, 0.11359613967388382, 0.10084851712668574, 0.10679529691189837, 0.09995802772387052, 0.10208701306697932, 0.09673810547938388, 0.1044753057477692, 0.10113853595300681, 0.9655903717264034, 0.9499211108002649, 0.9492019999740382, 0.9421395748658883, 0.9534051253534319, 0.9552082832842139, 0.9511030170425923, 0.9404967075558178, 0.9458115150893316, 0.3426526227192287, 0.3169379823813764, 0.3209845309453959, 0.3169698759944869, 0.3122508466780086, 0.3356209330029163, 0.3344872285080144, 0.3120023600971531, 0.3275201724548422, 0.730940003963662, 0.6499211502748982, 0.6520170807400341, 0.7581180153480481, 0.6949873991411087, 0.752477971258098, 0.6804492917615643, 0.5811102985585115, 0.7220968711622153, 0.22018575583350652, 0.22248535028188365, 0.20439230680627818, 0.22755441362033912, 0.20051624778304444, 0.18838179221426543, 0.2054518077780395, 0.20012348903900334, 0.2134449421659408, 0.23889850538277946, 0.22630548319292187, 0.2032274372741425, 0.22502728987933196, 0.23412898407666194, 0.22409911616679123, 0.1913373323367462, 0.20187745527774315, 0.2190424405357546, 0.06522038804442232, 0.057817013991274924, 0.06369298969765946, 0.0912665982705827, 0.06397960636066413, 0.04193547938017961, 0.04985375097254874, 0.05356844432949659, 0.05218624288895646, 0.12735743492489104, 0.09566724675365257, 0.13642561451149182, 0.13850915809660547, 0.11683291753858394, 0.11406476605884053, 0.14063762786846257, 0.14133087081482243, 0.1258386454215732, 9.999999999998899e-05, 0.005477112617826574, 0.0018878623289376728, 9.999999999998899e-05, 0.008738042922020073, 0.013290577530425285, 9.999999999998899e-05, 9.999999999998899e-05, 0.004437438449957143, 0.11638535684242035, 0.13396274223659677, 0.12507983439673132, 0.14483952294274316, 0.1311841959269202, 0.13281726123936222, 0.12581130585307054, 0.12823470317607755, 0.1361284068773292, 0.4360316291136819, 0.4378021764857657, 0.4452706536811769, 0.4307733841117275, 0.43739210304612564, 0.4545302402453316, 0.43625795873181206, 0.4383256342754025, 0.46597712394705393, 0.1021023621971675, 0.08853476604210098, 0.09061677459526041, 0.08647335926840982, 0.08580544964752446, 0.12330683838019718, 0.08146921909464999, 0.09498586614755988, 0.11212115522498256, 0.27782307587756505, 0.27202631062186144, 0.19456563877228927, 0.20904974229868778, 0.1487626794077651, 0.15426289985347963, 0.17838216216579894, 0.18082024929547846, 0.18827453331527333, 0.30637331364568954, 0.29354059177080016, 0.3125380632971704, 0.27908899896128914, 0.30900582155030554, 0.28601594926743323, 0.309613197857752, 0.31182146397793753, 0.310502387385618, 0.229109456145146, 0.23627656482722637, 0.22980696124539002, 0.2244527816249069, 0.23557374184024626, 0.22891938137063494, 0.24200622262153593, 0.25343862910932, 0.2323807498236039, 0.19128993023173035, 0.18974038783088398, 0.17410319372484262, 0.20925975237041838, 0.18998277192037594, 0.19462926768846756, 0.18033667918675933, 0.18418108078857298, 0.206459771681185, 0.17971233188457514, 0.1983973951464223, 0.1959323247591066, 0.19488245186374842, 0.22795228584726035, 0.19310664992370274, 0.22162805592390822, 0.19262119710829118, 0.18584558220918546, 0.6766514170393836, 0.7013721291651842, 0.1518653207610683, 0.17272912735338108, 0.6188862157124553, 0.679292145184347, 0.15350074693946847, 0.6246467755724048, 0.6304582385737052, 0.6198326867413634, 0.49830145523154623, 0.20061970164487852, 0.1939151630143745, 0.561710160186951, 0.20097160026640892, 0.210335999978983, 0.21079655103271655, 0.6586984062609238, 0.17845971217615497, 0.18141786954092276, 0.182577033773623, 0.19232119746367515, 0.19775183679166486, 0.1910329259222845, 0.1824770622579075, 0.19838265119938037, 0.1905269686658475, 0.07381754092148418, 0.0783563072477691, 0.08373595283466528, 0.07631675299054408, 0.0873387161112309, 0.07317017738795406, 0.07399916187560351, 0.07789970881959873, 0.07645345181559537]}, "mutation_prompt": null}
