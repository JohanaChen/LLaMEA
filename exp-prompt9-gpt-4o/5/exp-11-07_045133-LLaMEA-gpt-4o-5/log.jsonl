{"id": "86e53284-d5c8-4206-b9e5-c1d68500594b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 1, "fitness": 0.13614697234122092, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "86e53284-d5c8-4206-b9e5-c1d68500594b", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "b085e125-0a75-42ff-b55a-926993c5b7bd", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "38383e34-c92b-46fa-b00b-72cccb83bcf8", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "8f8f354a-0786-4ec7-bb3f-6cf5ecc584f5", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "b517807f-de5e-4c5f-aa5e-5b1ae6dd3eb7", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "7bad2253-8d8d-44e3-b04f-0d8fb2d0f015", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "a8c148ff-7459-46bb-9146-d23bc129d1ed", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "7fcbd335-ec74-46cc-9b2d-c2e0b846dd25", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "96a6d5ea-b7bd-4e05-bf12-8eaf1a0848f0", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "b8a1f533-65dc-4301-b933-22858e057501", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "27d43b84-314d-48c5-bc95-2bed4a5ce8fc", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "ba300099-0a3f-4b88-906d-e1de1f5e7550", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "a4ee0208-adc9-42ef-a8a6-7567dff28701", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "dfec329c-3db0-450d-b754-7a23e4aac749", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)", "name": "QuantumInspiredPSO", "description": "Novel Quantum-Inspired Particle Swarm Optimization efficiently balances exploration and exploitation using quantum superposition principles.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21085781596971054, 0.2049240465392108, 0.21306996558677815, 0.2005522034518734, 0.2008234612759564, 0.23191745892657423, 0.22131674291607628, 0.23301025527187447, 0.2195063351570229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05363272054927437, 0.0707576209383517, 0.056715685099756996, 0.05069353521297648, 0.04296401309240683, 0.047844907446955354, 0.044273162508584596, 0.049805679338720266, 0.04067473528636778, 0.039046309052736206, 0.03397269137029357, 0.03534334254391436, 0.04841069071270809, 0.0656247058284174, 0.04045271178354337, 0.05246011589929278, 0.04401436512307022, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.1003386614053774, 0.08384390880086157, 0.09027288274760126, 0.09167689138329094, 0.10437184968765245, 0.1207795024870989, 0.08737940414290968, 0.12039557016122326, 0.08256944747250494, 0.1651936536674582, 0.10271973782215649, 0.12848221634884138, 0.17072940872113795, 0.16080682431271065, 0.15392295262375233, 0.10800683049359672, 0.12306264794113264, 0.13972935698558286, 0.0007241494342812294, 0.01113607914886905, 0.015715613286935493, 0.009987687059790584, 0.008495306130615221, 0.04333811603173088, 0.016503482017277027, 0.003339458310706145, 0.013214566250772442, 0.010814974294228286, 0.02757994149327736, 0.010113914698907545, 0.030668145066869545, 0.006468368799965485, 0.019404016456370687, 0.0466465905541017, 0.046510303791189145, 0.014860222398710765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787055601924661, 0.015856616415386604, 0.0370690396401, 0.08290509865664808, 0.0053310299625709545, 9.999999999998899e-05, 0.022460043478002678, 0.0506930505999037, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020571500886595873, 0.006612353321384212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02023965683620832, 0.004991437339954663, 0.00012223386492771215, 0.2161213069954775, 0.22229953415230452, 0.19650074957682961, 0.2549584703194018, 0.21799076092597114, 0.20342823039013658, 0.22380019141847818, 0.21417719251756484, 0.18683778576873633, 0.06521966162113002, 0.06645665383138766, 0.053989420825462764, 0.05429421785600719, 0.05254763607241508, 0.06750433589509286, 0.05396826658369047, 0.04255675879899534, 0.059059267125992077, 0.1259929600895634, 0.13489173286597067, 0.14019140276750108, 0.1636373886884348, 0.16364649158347488, 0.1413386031606937, 0.15837653837918475, 0.17429179042359688, 0.16834033870545173, 0.1955503746931625, 0.16922650345980894, 0.17990058857429814, 0.20145704374351892, 0.17128662765999603, 0.16314712983959467, 0.1765893354422171, 0.20153874024093232, 0.17291996900223416, 0.13798610791105803, 0.1268898660087292, 0.13025884972522794, 0.15682267041339437, 0.1353861978585844, 0.12275933161473562, 0.12551881906721551, 0.13071811861976146, 0.12972103642639465, 0.17487428062678934, 0.13850423269703338, 0.1688855559792033, 0.16514908508065096, 0.16168008404195822, 0.15919482721107692, 0.16557334639078358, 0.18391197997408104, 0.1573305605754447, 0.15163122639848603, 0.14164153587315798, 0.1559560374741361, 0.1538728166768526, 0.1542839512374572, 0.16627225772538312, 0.18226290464803663, 0.162761029619382, 0.15774185153274922, 0.22777092339104954, 0.1619233420655728, 0.13619148168069184, 0.2183146465946566, 0.14881169977557251, 0.16179326706701724, 0.13617204374383074, 0.1676817066589763, 0.1514590327285681, 0.2582422492854606, 0.16140197524790434, 0.15440892469995326, 0.14795706099494932, 0.158966085672123, 0.14783043419998432, 0.1861881648421726, 0.19564840124969274, 0.1781444141080174, 0.2011272377786073, 0.19782110525751484, 0.17962036983244922, 0.18341099413466522, 0.17549629988133675, 0.1734571726908093, 0.18406665932233002, 0.1771333505959246, 0.19794740996485605, 0.049567009802215733, 0.06079835058025751, 0.056783233708784575, 0.057729737013550775, 0.06460454692725093, 0.05186181581294713, 0.05219169779866806, 0.05388559521801639, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.1378021595561639, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "28de345e-a528-4e95-8a2d-570e7bea4a1d", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "de5f5dbc-447f-4cbc-bce3-853e0e0e7bf5", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "6d391c11-05c4-4c1c-b691-c15fdadcf41c", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "20636e2d-d0c7-4ea8-8ef4-556bd2841ad0", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 18  # Slightly reduced for quicker focus\n        self.population_size = self.initial_population_size\n        self.phi = 0.55  # Adjusted for stronger quantum influence\n        self.cognitive_weight = 1.7  # Slight increase for better self-exploration\n        self.social_weight = 1.4  # Slight decrease to balance social influence\n        self.inertia_weight = 0.88  # Fine-tuned for improved stability\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 11))  # Slightly slower reduction\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with improved parameter tuning for better convergence within limited evaluations.", "configspace": "", "generation": 18, "fitness": 0.13492027086047842, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21346412160402384, 0.20074351861488737, 0.2071641432690502, 0.21273068348743718, 0.22476017685029004, 0.23729495365936448, 0.19495915625460336, 0.21485840886832852, 0.1920524195682729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692636879819829, 0.05129251606207996, 0.0546199662479927, 0.05215939031481398, 0.07647604647837691, 0.05738783026528049, 0.05508097715744975, 0.04844737572994651, 0.04143371920366867, 0.03845444095024608, 0.042388275650731555, 0.03584625909947048, 0.038122814272616434, 0.034836022423183954, 0.04250069599144568, 0.046077989268585196, 0.03376102734433861, 0.03740322634324278, 0.9881731949106178, 0.9943078353705185, 0.9916843369823556, 0.9812163129189662, 0.9850841127311354, 0.9767443788589771, 0.9879033410155812, 0.9892017461034864, 0.9908399924828973, 0.067777066657559, 0.10775387638149492, 0.09044420587021973, 0.09958010931423866, 0.13127432586873178, 0.12579413706101006, 0.11784902111817941, 0.097006098381481, 0.11544461872152423, 0.139428842331333, 0.12694920452089575, 0.14380096615979965, 0.18786330663192075, 0.1627479431694856, 0.15678317704872646, 0.11278935366399856, 0.12219987782731112, 0.12982330960061772, 0.0016752946058375962, 0.016957474083748814, 0.025244470318658063, 0.01424701234212955, 0.032897974523213636, 0.022550556512818343, 0.007712816934148936, 0.02096800005901933, 0.00903328032232642, 0.015295284554186273, 0.07775968742370765, 0.014373064082752407, 0.021141235152488114, 0.007069540110767436, 0.003717061315116732, 0.0016336978408467706, 0.010283312120540677, 0.015957375449409117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042989120216710086, 0.029346885957791002, 0.06776316326630927, 0.036177109495296955, 0.017043086236782967, 9.999999999998899e-05, 0.06757988183502239, 0.03670121657101422, 0.013010210917476117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007187061686622975, 9.999999999998899e-05, 0.0009944118686234793, 0.00011950118877035454, 0.0037395726073585767, 0.016745476405707227, 0.01722343383000502, 0.00010183931331775309, 0.0005600595785572038, 0.2235609257690695, 0.24675271697823253, 0.21814482402979596, 0.20619112296854625, 0.23611312598703194, 0.2193346214456554, 0.22165030370617134, 0.20064178229581264, 0.2398432020767819, 0.06599352568837402, 0.06127312870639268, 0.06276723459686417, 0.06813324935727483, 0.057027990342933155, 0.05518811352181707, 0.06824839902366076, 0.05808612051713591, 0.05623076791370418, 0.1354285357080658, 0.13292539160998862, 0.14157735255684056, 0.1816040553337911, 0.1410896638286222, 0.1311997808531865, 0.1454979901845216, 0.12056703540919878, 0.1665066792166766, 0.1758873619494412, 0.1819352240609884, 0.16818490310114464, 0.20701685276701343, 0.1759466944437048, 0.17463839164705364, 0.17662793016717004, 0.19756535448930868, 0.18452534260041242, 0.13455061042949545, 0.1438227965948683, 0.12571409977677317, 0.1716116970916346, 0.10717835650100882, 0.12607299224558932, 0.12818165874103848, 0.11875820629274625, 0.11459951189336515, 0.15188075794791878, 0.14377276455636967, 0.15160788420274962, 0.16703522558196582, 0.15222855725308704, 0.1891615495825938, 0.1601742850707919, 0.1559983167115948, 0.16780993168590108, 0.1497533096238094, 0.15356536252925923, 0.15705121170522285, 0.16322458935429385, 0.15423596146179352, 0.15052035790585327, 0.1533197565674458, 0.1543736339279752, 0.1606156006350864, 0.18668272725949697, 0.16006936905416969, 0.14190343704171793, 0.178014056740593, 0.1268081563039175, 0.1310358469944749, 0.13148951069224424, 0.1666712947616843, 0.22874729246845493, 0.167764613297685, 0.15496537793082044, 0.1694172184018904, 0.15083151294127906, 0.1376142335917302, 0.14889914337546928, 0.17945487534176086, 0.18410354922925487, 0.1258238204442359, 0.19073575132035003, 0.19454490143045766, 0.19176999750105184, 0.17245762608252935, 0.19298535230314118, 0.17765795225119596, 0.18706839719579638, 0.18949090102517807, 0.19567110439840563, 0.060463500109446455, 0.04898856990756595, 0.0630075533034411, 0.06568182911576226, 0.05363271163537664, 0.057582883977121635, 0.04643706723576779, 0.05871643850890906, 0.0621215485764971]}, "mutation_prompt": null}
{"id": "b2622b37-90ab-4a39-8b54-f07a59a1c0ae", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "662dd127-8463-48a9-83fe-2b40fe6dd927", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "7fa5265a-bf5b-4fab-920e-72e09467523c", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "e6ddc5ae-c52a-4ab0-bea2-7462c1916e95", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "87b0849d-4429-4f80-abf2-b7d33ca18bff", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "23c49631-b460-4c69-9218-061088812b9d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "bdacab7c-4571-465c-ba27-5b1d865d4aa9", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "8e672441-98de-4613-ab30-36200ef8e73a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "912f5f0b-fc88-4c95-8ba8-54a3b621c172", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "6c9cdb9f-6a9c-4078-a24b-967ad61542ee", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "6b2d1d62-065c-4a7d-9260-bf9e1a46e7ef", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "25066251-0bda-4508-91fa-28c04149dcbe", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "478040cf-10e1-4836-ac36-cc9f6e5856f4", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.4\n        self.social_weight = 1.6\n        self.inertia_weight = 0.85\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log1p(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with improved quantum effect modulation and adaptive parameter tuning for better convergence.", "configspace": "", "generation": 31, "fitness": 0.13629631426030112, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.17127198479849626, 0.21490870010819918, 0.20282793120031406, 0.2252489416700505, 0.2383891877185299, 0.23367007460937783, 0.20588741870638005, 0.2034500833006384, 0.21926108121288146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04820570007828484, 0.06100853380965887, 0.04627797090820751, 0.06024290382369546, 0.06299969586478804, 0.05290030958673375, 0.05118897214402329, 0.05725887405995522, 0.04820781485550363, 0.03935641642512333, 0.04301794493950728, 0.04237171624795011, 0.035715135908160445, 0.043594052156715635, 0.044743220964558184, 0.040068612029493855, 0.046399132438772694, 0.040623479298579346, 0.9912814702888114, 0.9943678651926903, 0.9941874615114985, 0.9756888547935738, 0.9872139678082771, 0.9842132513887581, 0.989236612450585, 0.9893270497374339, 0.9926847385628257, 0.09098952733000676, 0.14058933189385459, 0.10658069395059777, 0.10891176592733243, 0.09876315935092184, 0.11459456934679457, 0.0955467407394468, 0.08759614623112544, 0.1451379385359991, 0.16262538197596021, 0.13902837771878718, 0.13453627308116034, 0.174343993460373, 0.13994247583119634, 0.15402066547565652, 0.11927718238003149, 0.14646058067532053, 0.11306813225183376, 0.021850530565095116, 0.03792271739803177, 9.999999999998899e-05, 0.003091058733303398, 0.032536149016053284, 0.04122251645278008, 0.045953347591208726, 9.999999999998899e-05, 0.04189388942818073, 0.013703440122506017, 0.060461857090487126, 0.01691153718327698, 9.999999999998899e-05, 0.01140227931607829, 0.0481943899996613, 9.999999999998899e-05, 0.0021094394418574858, 0.021802617285269887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014859639991071871, 0.01584575921441589, 0.04689325113487197, 0.043971959838383534, 0.012009951986416856, 0.006413079413189915, 0.023791575076551053, 0.022472306985944823, 0.034303943988764685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026587530934294556, 9.999999999998899e-05, 0.0022943876179777334, 9.999999999998899e-05, 0.007910295391803657, 0.016748010998236862, 0.004474102091939991, 0.2371829492001677, 0.21683325855810553, 0.24183298874096848, 0.231922816635863, 0.21306371267072055, 0.2210841224882396, 0.2137602325094624, 0.23628276511393542, 0.21704609602961056, 0.05740477547189382, 0.06264293162218804, 0.06838416248958734, 0.06302526347374893, 0.0582947951329954, 0.06570572160388388, 0.06164866053056883, 0.058216807411479055, 0.06039478028812861, 0.1406491145852038, 0.13559898056034492, 0.17120712122616022, 0.12702376278787453, 0.1334617968482824, 0.12401625414007045, 0.15128255688401349, 0.13457621984452983, 0.1341244586948107, 0.17836033581928645, 0.17085571217365958, 0.21488958949382997, 0.1811982515501005, 0.1921395085635773, 0.17194232769200501, 0.17779374194894249, 0.20247806260370627, 0.17665333976950803, 0.11713644972143578, 0.13687936700295344, 0.11671064161198696, 0.11024908491029306, 0.10385777545253527, 0.11577394994188339, 0.12982652864401223, 0.13929726698074918, 0.12284209146531044, 0.17790645369645897, 0.13902056432575194, 0.16883675880617555, 0.1525972715109699, 0.13889706372528632, 0.1846111665655119, 0.14984583827354803, 0.14257941286606512, 0.17513713519730356, 0.1692005979450809, 0.15417826999951445, 0.1486581312775339, 0.15763796415900722, 0.16625891500814616, 0.16394566137138677, 0.15693270954420657, 0.16918714961596792, 0.15226464087176705, 0.1850848545649515, 0.16529164370483362, 0.14668526288456074, 0.17909207453587717, 0.15743061094210098, 0.145826295094046, 0.157275648150226, 0.16425598722272716, 0.19132979153736362, 0.16568363830560406, 0.14851722962119818, 0.1783934123652916, 0.19650514944366582, 0.3237136529801178, 0.13764256039442613, 0.18460816283159787, 0.18949788843372284, 0.18770318393897922, 0.180703667518892, 0.1890335181704601, 0.17075222882085161, 0.19061840856214096, 0.1845511521262888, 0.19065309671491426, 0.18332399183013726, 0.18442193519020234, 0.1836922701211665, 0.052287440426635134, 0.059818463586666426, 0.053153063689189706, 0.04381086099105813, 0.060774781109041776, 0.047823028370451715, 0.05973299972629409, 0.04870798030081391, 0.05791944932716686]}, "mutation_prompt": null}
{"id": "617e651e-3ee2-4958-9b1d-d259bd7a3ae7", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "f4679185-e86e-4d93-aa6b-ed04e34bdd3d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "a266e979-b19c-423d-b7a0-d2b554f511a0", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "184c57e1-a09c-4616-b249-d508f9be8201", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "3d55bf69-62f4-489a-aa12-2156dee7e60a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "dc2fbcbd-b062-4300-ac69-9634684d5298", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "9c1c711a-dd69-48c5-89df-c26f3d53bc6d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "1e68a97d-3759-447c-a7fa-69f315bf73ed", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "9b376cd0-079e-4f94-8347-a72a589d1e25", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20\n        self.population_size = self.initial_population_size\n        self.phi = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.inertia_weight = 0.9\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n                \n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(1/np.random.rand())\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n            \n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive inertia and dynamic population size for improved exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.21741312887895203, 0.2626139940578921, 0.19228021605781342, 0.21308096017933853, 0.2072054069478586, 0.22954872048244712, 0.21102190206528082, 0.24275391878867847, 0.22246721083410392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07388924167379207, 0.05759516106787177, 0.05431998888838807, 0.042369600659824536, 0.0534470516638057, 0.045793855297728614, 0.049702962785212135, 0.048166745001405276, 0.049137488613408276, 0.04067473528636778, 0.04319633334489659, 0.039783916390609964, 0.04225957922951307, 0.04071828228793206, 0.0656247058284174, 0.050359344390812244, 0.053980180499225705, 0.05304261955144063, 0.9894916356198284, 0.9943375249800717, 0.9935321446951463, 0.9787523411622505, 0.9853254115850468, 0.9861684767640106, 0.9908443530228936, 0.9893063159291621, 0.989994957255283, 0.09762032334561932, 0.08300783268598355, 0.10731216120599474, 0.09837606279135724, 0.10521577337340371, 0.12239799767768345, 0.08329983754181436, 0.11122790851501307, 0.09170570227513963, 0.14323153727256754, 0.12364685498542927, 0.12867282564929394, 0.18361793048141284, 0.15745368139965943, 0.16383490458037264, 0.1119819714707253, 0.14661831300684303, 0.13570262487682416, 9.999999999998899e-05, 0.035734406280232944, 0.006923519390204413, 0.00782241584475718, 0.0102359929633562, 0.04532644187721324, 0.018350221112186094, 0.001991083345961653, 0.03607941551863403, 0.005170523149364614, 0.02178537184995022, 0.011089419140246859, 0.03403556248264161, 0.010431867284979468, 0.019404016456370687, 0.0006234314899978832, 0.023819965205185922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04559893989975483, 0.021506937579701124, 0.04582934966282648, 0.06341444655270423, 0.0007211762967821445, 0.0023381565319452458, 0.04951176342517283, 0.042543737535935544, 0.07623395554769397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005378477929759873, 0.0077943968822628, 0.0003687260197663411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01851253327085456, 0.0018724703225876382, 0.004140923066222935, 0.21056499495305592, 0.22257116934515675, 0.24025019811531934, 0.24180823715023103, 0.21047248722281164, 0.2148022835759663, 0.262472751953273, 0.20367605173835668, 0.21220957737152235, 0.06367845778345471, 0.05159786288403334, 0.05475568719589596, 0.062114406097998454, 0.0509801683974741, 0.050710864494503904, 0.07439313877497478, 0.042713965073351234, 0.05909041761129452, 0.14673399140876353, 0.13062625051322707, 0.13988903646236683, 0.18985316194002644, 0.14225645217756244, 0.14008394046016237, 0.16782338017090948, 0.17429179042359688, 0.16524776987235323, 0.16571203855062155, 0.17205534789232058, 0.19127118709486568, 0.20166770584938054, 0.15435143119359274, 0.1777649160973408, 0.1648433214447661, 0.20153874024093232, 0.17511074915929326, 0.11428911946185394, 0.1302913974064146, 0.12618234723802668, 0.13454042267839106, 0.11091563969925866, 0.12251274273691248, 0.14023995625626284, 0.14130165379942905, 0.12775015336688178, 0.16892130050088794, 0.13774909299084193, 0.1756413628833403, 0.17434787748702896, 0.1485124674039071, 0.15959057800776633, 0.16446169731983296, 0.1624784708524758, 0.1621089157066974, 0.15438271735996745, 0.14139311127154375, 0.16122382366638321, 0.15679929187916475, 0.15214195686715304, 0.1615800736714642, 0.18226290464803663, 0.16154261837572015, 0.1513774315536286, 0.26669631105176606, 0.1597817036914697, 0.14277074413209723, 0.238883895992551, 0.16222709301328508, 0.14197046702751936, 0.17881629221387885, 0.16276259029534446, 0.1896752999582142, 0.2582422492854606, 0.20534931021192682, 0.14715488335119042, 0.15366099881314588, 0.15921201793832696, 0.21536885758993063, 0.19037227723623795, 0.18732640393629185, 0.17984080540764902, 0.19625871062473743, 0.19782110525751484, 0.17344497180587348, 0.19210188663646, 0.18028806757653204, 0.17468176277085823, 0.19700217512772777, 0.17443440281612999, 0.19644350112499465, 0.06682941299448286, 0.05781253173052214, 0.05618037207147464, 0.056024221483367054, 0.04630475789331756, 0.058239150205003365, 0.05172677813414972, 0.052160659930080344, 0.0699624402047595]}, "mutation_prompt": null}
{"id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 41, "fitness": 0.14331312422363443, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "6719d5ae-d09c-4003-ac44-5dfc1de8e491", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "bedbb7ba-663c-4c9c-ab8f-056dd610f9ee", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.40  # Adjusted phi for more significant quantum diversity\n        self.cognitive_weight = 1.45  # Fine-tuned cognitive weight\n        self.social_weight = 1.55  # Fine-tuned social weight\n        self.inertia_weight = 0.9  # Enhanced inertia weight for stability\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.random.exponential()\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO with adaptive velocity damping and diversified quantum effect for improved convergence.", "configspace": "", "generation": 42, "fitness": 0.13758449655493568, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20458856437698447, 0.1876273050762205, 0.2325984898914487, 0.23135563826121475, 0.23206256998936325, 0.21103254229677337, 0.21502488572179113, 0.21938236157177915, 0.17507208267237506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051826199853106325, 0.05916841284774821, 0.06394600371263992, 0.048333988770050795, 0.047837948269070174, 0.055590152001336324, 0.04942654581162731, 0.0581412752988093, 0.04502934303852513, 0.04532655524918805, 0.0381180187808996, 0.05077392474040321, 0.04416281373296027, 0.0298247278351631, 0.0559891288370451, 0.05122924233020598, 0.03988815349656849, 0.04524138297621649, 0.9912286186866937, 0.9943902739516985, 0.9940062485325541, 0.9700485719172283, 0.9871804626477204, 0.9807914003654691, 0.9891177845861188, 0.9912163513816471, 0.9934498413696516, 0.08070744000295649, 0.11064563211573952, 0.10264686502719944, 0.10194769548505811, 0.09319851926071099, 0.10613854834047831, 0.10352340397545612, 0.09972909337098368, 0.07724455670179431, 0.15514896215995577, 0.10790013551796929, 0.15588104620216514, 0.17880656587083743, 0.1508438938756561, 0.14516490409371707, 0.1447989750374814, 0.11802693569494205, 0.12901007069837955, 0.011187817301550829, 0.054825019515267415, 0.04073820536654549, 0.06570385726036287, 0.04816041579157104, 0.016672305060580928, 0.019709131713546935, 0.0015953925774110367, 0.05231879198390399, 0.008794813671525126, 0.020216498764766944, 0.02157637768365006, 0.013745978608719844, 0.03394732641856024, 0.020458835631036343, 0.041867957639307285, 0.02764788450123301, 0.006264095029877348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01582515833190723, 0.01661512966487666, 0.02651795268426882, 0.04988546136805705, 0.016677315414881155, 0.0017087186651333353, 0.11532494623369727, 0.039858327928650406, 0.0261375434672515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001739052166676247, 0.007433651748317782, 0.0005025017452089386, 0.00036289617424045684, 0.014298159618009953, 0.012408964724493154, 0.007258250102290531, 0.23378495280416123, 0.22644678778592642, 0.21867613690745547, 0.21771258471844424, 0.24071117751197912, 0.22695253356562384, 0.22552130198987674, 0.2354277895114293, 0.2533701944484531, 0.06868699059611405, 0.06190585424547812, 0.07290056697754121, 0.0487032638916679, 0.04769111315919694, 0.05742283611672261, 0.06211482139630642, 0.061982594487050346, 0.052383071777691526, 0.12711877183255926, 0.1395097237481404, 0.17246340317661124, 0.13968799781431784, 0.1251769411319692, 0.16719020505487592, 0.15109235627092876, 0.1674312860970354, 0.18108513535698412, 0.17386522546593408, 0.17213431934508627, 0.187101801931844, 0.17573187060660234, 0.16873057948159098, 0.17893312871326505, 0.1936074385312052, 0.20744850863849118, 0.1869558274751053, 0.12180288008676421, 0.12973314137598158, 0.13513628931397892, 0.12087960971250034, 0.11961252807102629, 0.13195595633033952, 0.157733489010764, 0.12978792278839824, 0.12858082773915191, 0.18868818207961624, 0.1300701663974878, 0.15808743064848363, 0.16597821779024147, 0.1531706165045087, 0.16617170030082473, 0.15728397963574048, 0.1892894970301452, 0.1542470174911954, 0.16869569678489837, 0.16960980679705862, 0.15535122866249673, 0.16294741192142304, 0.1559535560136277, 0.15611487952800684, 0.1492852653763146, 0.14638296995316646, 0.15358623867288257, 0.2024662701381842, 0.16156945372181686, 0.14259948024318314, 0.15427431579475415, 0.16692719703732362, 0.22156143276678764, 0.11148405610433798, 0.1740938962965729, 0.2053704433364847, 0.20416466822020374, 0.1765632166997937, 0.15548953580934866, 0.17173729379792768, 0.18323055827694412, 0.15267423270699054, 0.19330027102949787, 0.1948939042666199, 0.17282479699866904, 0.18418389587154793, 0.19115465168322854, 0.17784379085412716, 0.18274430147879916, 0.18416336936464817, 0.1815478934093837, 0.17820090192380156, 0.18593532647261346, 0.1720309627514296, 0.051979834379761614, 0.06419131171295289, 0.061552707987031496, 0.06852269498106833, 0.056888364320729634, 0.06807624076496777, 0.0674715048827067, 0.04744930153976512, 0.0630177907942634]}, "mutation_prompt": null}
{"id": "acbf758a-4d3f-4f01-a345-c88dbc4d6152", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "fe441501-1c99-4147-ba64-22d5aa8d1291", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "9d5fa8a7-8925-4094-b07c-da2ba576f22e", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "86814611-674c-44a0-b775-a883c087fead", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "6231d4f8-e01d-412d-8775-0a6235d84ac7", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "68e38936-63ff-41ec-afcc-6862be2c12b2", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "4d881ea4-5fff-40fd-b2b7-f1bfb928c98f", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "41595275-7190-4509-890d-3b1ae71a59de", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "5052848a-be20-43f1-9f61-ecad8e5b99ec", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "5a15fa9e-f3bb-452b-93eb-f1a5f53e6f6a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "18bd104a-8ceb-4ace-90f8-2886b82c6a2d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "6c06b6b8-d75d-46c4-ac1e-d83fe151afea", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22  # Adjusted final population size\n        self.population_size = self.initial_population_size\n        self.phi = 0.45  # Slightly adjusted phi for quantum effect\n        self.cognitive_weight = 1.4  # Adjusted cognitive weight\n        self.social_weight = 1.6  # Adjusted social weight\n        self.inertia_weight = 0.85  # Adjusted inertia weight\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.abs(np.log(1/np.random.rand()))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            # Dynamic population adjustment\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 10))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Optimized Quantum-Inspired PSO with refined velocity update and balanced parameter tuning for enhanced convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.20220026181434114, 0.25203895317708314, 0.20154613675192723, 0.2466740809988085, 0.2235510974467727, 0.24992992000572034, 0.23242644499284604, 0.22705813567832145, 0.22949290866471017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06462147876850155, 0.05946285188844469, 0.06056081852302064, 0.05512899090223855, 0.05463680050874575, 0.05386041002370223, 0.0581518511248289, 0.06318546287358895, 0.056100214190956676, 0.030257505168235554, 0.06659577258131799, 0.046713940383042996, 0.03741089873989145, 0.045614119429658984, 0.08272733745828065, 0.04505456095111715, 0.03801303880531437, 0.03934185265359469, 0.9895429702826386, 0.9944909181373056, 0.9941599385113945, 0.9753762667281007, 0.9871754735601098, 0.9861707205237946, 0.9912016688495335, 0.9894087496259196, 0.9934361044047096, 0.1264485800502394, 0.08199682076080295, 0.11001629687497694, 0.11322037689818809, 0.12019532623997509, 0.14638921371052094, 0.10657011635103042, 0.11590873259923462, 0.11365426370489895, 0.19660220319524746, 0.14137411900239893, 0.16048399355515397, 0.1627268752455675, 0.16014005483035942, 0.16890388193121686, 0.136692427982383, 0.16571231165129907, 0.14792142065457448, 0.03193336092951926, 0.024313205814230243, 0.04886280893031347, 0.07127311523215463, 0.06310417089507103, 0.044116996362991046, 0.029216113659301435, 0.017743497024933497, 0.09373625115545614, 0.04674597275355974, 0.027357039853043386, 0.02301612416267307, 0.025206284627134257, 0.0014333688771867026, 0.041388923528304256, 0.06497078850868021, 0.001207545900428486, 0.018657131982968922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050064960670768044, 0.008260033566355407, 0.013019204433658671, 0.06598666255585517, 0.007755211442579069, 0.015477327019625453, 0.05731993533029223, 0.03554977223443623, 0.03972221043439872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727935122946782, 0.008068425811528668, 0.05095065167949109, 0.03859800362782684, 0.002641858416829179, 0.0018379411400067935, 0.017908624575651788, 0.03065260096090039, 0.007379700836815162, 0.24383532141723663, 0.2542854415758964, 0.23520229748886612, 0.28667871357656083, 0.2413940811372558, 0.2293944235254851, 0.26874880227143416, 0.22162343439175025, 0.221962178375414, 0.06203116637339667, 0.05318390847712895, 0.06845601594022888, 0.07202509418905634, 0.061492645441505345, 0.05654947457462001, 0.055424769160754894, 0.055321965793963535, 0.07575128891065452, 0.1367221195859203, 0.13902838110593074, 0.17552779655886974, 0.13116808629959742, 0.14887603891187806, 0.13633876639757403, 0.14845445082117126, 0.14090272868138887, 0.14326725301681253, 0.181786568247837, 0.1760897074906601, 0.179476282739091, 0.18801360825142177, 0.1840586565101079, 0.18848921432469856, 0.18197688065066897, 0.20295989967868655, 0.18663559764768667, 0.12851159875436258, 0.12136803329330215, 0.14253949100123386, 0.15401330390694234, 0.14256305260284496, 0.12175924997051313, 0.1304391733654775, 0.1568520751231337, 0.13553144716351528, 0.16491854506878068, 0.13467177612245873, 0.17408724868310632, 0.18404697792080382, 0.15113419713836285, 0.1717388968937701, 0.19783024472645916, 0.17339218430243075, 0.171495712939986, 0.15990888670670156, 0.1577451893295947, 0.16143205558332863, 0.1638023217242478, 0.1602226304608172, 0.15746931742769799, 0.1587115502352353, 0.15627758279244575, 0.16005779399124453, 0.25377998109983047, 0.14317662174595902, 0.13935343395270627, 0.21881112572174966, 0.1587973386126318, 0.1584510441497221, 0.09676793509433224, 0.16870673376416268, 0.24372223978610996, 0.22153924655223034, 0.14901280023275199, 0.19671020421310648, 0.1856340449281274, 0.18850446743334082, 0.16224574852244045, 0.1899793849946826, 0.19585819897433043, 0.19169602298756494, 0.1804525310448507, 0.18000015611860998, 0.17258642805958824, 0.21667219604405252, 0.18527030097410924, 0.1873140257678365, 0.19123097775479647, 0.18220433836226835, 0.1742158592818841, 0.07409996742618985, 0.06706619602328479, 0.06842457556928216, 0.058019838612474284, 0.0652398727824458, 0.0604807959740048, 0.06116098185356367, 0.054213798996312845, 0.05540239169919137]}, "mutation_prompt": null}
{"id": "2df80944-8377-4259-bef2-ef51917553bd", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 55, "fitness": 0.14586655523664885, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "95b689b6-92a8-4eda-a212-4f5e67f83052", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "3a8c6f07-ea4c-4e4c-86f7-f970edc76757", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "9ee51994-b2b8-4e13-a281-7bf61da7fdf9", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "3682bd5a-4823-46d7-85e7-1bf1b21b9ace", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "550036e2-e325-4271-85c9-60ca30058f9b", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "279015d1-a58d-43d5-b2db-a1ebcb62bb4b", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "11984aa2-5c78-4567-b5bf-c5a4e0101e2b", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "99a2b5e0-45a9-4de7-aec4-1805d494b948", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "bded6c47-1c59-488e-aa16-40675e1a34f9", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "87fe101b-7eff-4168-9d07-37225807cd85", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "30104886-6525-4a48-b81b-867f49bd706d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "68ac4e47-933f-405e-8861-34e0af8146b9", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "8d5d27e6-06e8-4691-8eee-df8b115a4f93", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.44  # Slight adjustment to phi for a more pronounced quantum effect\n        self.cognitive_weight = 1.45  # Slightly increased cognitive weight for better individual learning\n        self.social_weight = 1.55  # Slightly decreased social weight to balance global learning\n        self.inertia_weight = 0.84  # Slightly reduced inertia for faster convergence\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 12))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "QuantumInspiredPSO", "description": "Enhanced Quantum-Inspired PSO by refining convergence mechanics and optimizing parameter dynamics for improved efficiency.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.23830968757510995, 0.20165574024247457, 0.21669849837420485, 0.24462926005710195, 0.27222211953909725, 0.235102570331019, 0.23988598490743984, 0.24722340381550845, 0.21129339164305627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637572089374388, 0.05142755924195985, 0.05637886054570429, 0.05027429696016228, 0.05982385873154983, 0.05385777671500691, 0.06626171790980329, 0.058816351020152924, 0.05862138054057564, 0.04318103617501767, 0.06546682036455043, 0.041886930368297715, 0.046561553998209604, 0.06110062637968183, 0.05606235417908645, 0.0432534619243119, 0.039263628581661214, 0.04492169434867388, 0.9895283936347414, 0.9944461239786596, 0.9920030840849727, 0.9782837700359034, 0.9843350878977251, 0.97306372572216, 0.9908627861166962, 0.9893428485009788, 0.9909863561011593, 0.11389047767125537, 0.10484678749911525, 0.11174281646169781, 0.11852590224590298, 0.11227968229641261, 0.137013742212601, 0.1158525314751443, 0.111916015736101, 0.13597067917877648, 0.17182238905574942, 0.14142323321138317, 0.16232342570234637, 0.17231125097259992, 0.16149835143814073, 0.1600979686370294, 0.14024406557864444, 0.141904501118312, 0.1723686089961397, 0.032018487965928766, 0.03896556422234532, 0.05345557765853626, 0.04456806388347068, 0.07357820599712595, 0.04318179406169598, 0.051917985562106916, 0.023900608653699584, 0.025933734008931397, 0.07414648655771872, 0.045284883845997714, 0.008983058216633255, 0.03287626954371137, 0.023653978501372297, 0.06796951285878006, 0.05549989029247804, 0.0428315792890549, 0.05620755235131547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039842860263699764, 0.013090636003929124, 0.04440672896161468, 0.03812812426463552, 0.0006663281336514171, 0.020467176266417475, 0.02521382509486103, 0.03131890541517657, 0.018698465406171594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018937573358833504, 0.0007895445325896144, 0.0082704488337495, 0.03510709213571994, 0.0013280545333371752, 0.005268932064293019, 0.01720664872165456, 0.019033036290036054, 0.036156099089737825, 0.25029883395349917, 0.25622404671322785, 0.251292420050373, 0.24250403500872242, 0.23493195152347435, 0.22945517509623115, 0.2404427096490297, 0.2592134201436319, 0.2387895792534882, 0.0753638162514293, 0.07088979192661315, 0.07184367773456779, 0.06484467414369133, 0.0626927504264726, 0.0655504807820726, 0.061897571389398554, 0.053409254502900905, 0.0648533916802071, 0.16134911964901333, 0.1344921932009564, 0.13305398035950033, 0.1942736906647694, 0.12849796006141845, 0.13200651763427362, 0.16714148583620914, 0.13160333924948753, 0.1629109172191192, 0.1943010517118411, 0.18478268978892642, 0.1881652993829961, 0.2256108060754255, 0.18404811080415207, 0.19185678746853174, 0.2053034589918855, 0.20275389331246962, 0.18303756272061678, 0.1360929390185116, 0.14414893977837162, 0.1374538955101403, 0.12364837811307838, 0.13455358034401066, 0.12817266762633994, 0.13358850108334686, 0.1515902622472557, 0.14160257225003392, 0.14967531316480986, 0.14353342947041725, 0.16973782603024068, 0.17196786006506304, 0.1419089805993855, 0.16851677678853283, 0.16378997517441418, 0.15403169126308236, 0.2065352987715351, 0.16750201039047063, 0.14829360310030693, 0.15916724723731568, 0.19897839775196835, 0.16368725919600124, 0.17197000931010065, 0.16145524763711017, 0.156073957675268, 0.18237398850952502, 0.29332788894152917, 0.16673283008809536, 0.14900236068983974, 0.24381421027372074, 0.18295666496805407, 0.15038999809427223, 0.24951541406532174, 0.16735559532226962, 0.21022661186466607, 0.3011718000327921, 0.14587856955764233, 0.16170896125741707, 0.16992664414578207, 0.2029745470205483, 0.16544386997348826, 0.19202250008785238, 0.19817972987431587, 0.18269178135822306, 0.18708991987411383, 0.18020742950316437, 0.17305596711293803, 0.17412201070266187, 0.1791776434556761, 0.19863055228712467, 0.19374823333241797, 0.20653852798307404, 0.17710182604176739, 0.06358013212607239, 0.06202462602854231, 0.060092030301714616, 0.05832328207056292, 0.06793523531571555, 0.06267980294191233, 0.058141504795786614, 0.08250853247141654, 0.06811704092387905]}, "mutation_prompt": null}
{"id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 68, "fitness": 0.14869087785177693, "feedback": "The algorithm AdaptiveQuantumPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "2df80944-8377-4259-bef2-ef51917553bd", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "411d685d-26a2-42f0-b68e-0d581ec306ca", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "ab7b9fb4-d63e-4aeb-a7ed-d463a28af83f", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "0b52dcac-9063-4b28-9b01-4eee17a092ce", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "57de272e-5010-4148-a402-cd43d15b6bee", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "d2dafbc6-d93e-4076-8a7f-90bd3c026107", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "f83ea009-93be-43b8-99ea-6d0bd7664a19", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "9a6800ce-ea50-4519-abe4-4696372cecec", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "cef4b9c9-aa65-4d82-9e9b-09099c9b729e", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "f8095a18-90b9-4deb-9f2e-829120c8630a", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "34a6b987-f10a-4e4a-8793-24fc52d852a9", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "dc2a9874-630c-4c8d-9b5e-b3fd52f594e2", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "086b6b9b-affb-458a-961d-3936c7adb7b5", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "a96167ac-c101-4ba8-80a2-f907bc022a76", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "87adbbea-da95-4d62-b2d0-10aa1198a2e7", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "960760a2-01e9-41ab-b473-55237a584ece", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "cbe463ec-c297-4efd-a975-b534f867cd2f", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "350ee32c-d1c6-4a8c-ae69-8369a5711904", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "63009fe3-52c3-4f32-bca0-47dbbe2716c2", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "c294ef3a-9aa0-49b9-a083-ace67e68c65d", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "f16a430b-6bf8-4b5d-9c35-94fd0ff04127", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "af12be31-4e42-43bd-96c2-aa78e55e81cc", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "2b5e7f92-6c74-40a1-ab1e-ac6f9e1f8810", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "3c1d32f6-37ca-4e8c-b24f-6b541109cb7d", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "41961a8a-a957-4343-a6fa-ffacc40ba7b2", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "708b7270-53e4-4eec-8eb7-7ab820d02e0a", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "ed8eda46-0562-4d8e-a783-6183efa237a5", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "8fe3e0d1-1304-4976-9b19-eb57be33d4c7", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "90c4d9a5-785b-495c-83bf-057366c02c02", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "d5681eda-87c4-4379-afb2-309ba9c98b58", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "c4b029cf-496a-414b-b7a2-a224f627de9c", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
{"id": "a644f6be-b34f-4c88-9c8a-48aa424cac3a", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 22\n        self.population_size = self.initial_population_size\n        self.phi = 0.46  # Slight adjustment to phi for enhanced quantum effect\n        self.cognitive_weight = 1.47  # Slightly increased cognitive weight for individual emphasis\n        self.social_weight = 1.53  # Reduced social weight to maintain balance\n        self.inertia_weight = 0.82  # Further reduced inertia for quicker adaptation\n        self.position = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                fitness = func(self.position[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.position[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.cognitive_weight * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.social_weight * r2 * (self.global_best_position - self.position[i])\n                quantum_effect = np.sign(np.random.uniform(-1, 1, self.dim)) * self.phi * np.log(np.clip(1/np.random.rand(), 1e-5, 1e5))\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] + cognitive_component + social_component + quantum_effect)\n                self.position[i] = np.clip(self.position[i] + self.velocity[i], -5, 5)\n\n            self.population_size = max(self.final_population_size, self.initial_population_size - evaluations // (self.budget // 14))\n            self.position = self.position[:self.population_size]\n            self.velocity = self.velocity[:self.population_size]\n            self.personal_best_position = self.personal_best_position[:self.population_size]\n            self.personal_best_value = self.personal_best_value[:self.population_size]", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum PSO with precision-tuned dynamics and enhanced exploration mechanisms for balanced convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "68498d64-866b-4e30-a9c3-839a982ff4a0", "metadata": {"aucs": [0.27223812113353585, 0.216292867039373, 0.22185483538066697, 0.2441996488477206, 0.2647573754278112, 0.23202923471974135, 0.22658925224805793, 0.2578065064413587, 0.227912632393804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06362223618167484, 0.06580388768400769, 0.06831699019583104, 0.060226492188883096, 0.06446181249204219, 0.0685155734435079, 0.05216833172623769, 0.0890956345672943, 0.060061247184553745, 0.0493801032385669, 0.04738970015961963, 0.04635668864643139, 0.05490762164561691, 0.05215301045445486, 0.04161816284172981, 0.0489517069282579, 0.03899709911685534, 0.040124113186730925, 0.9895007222047683, 0.9944324118179102, 0.9919408328848524, 0.9781082319800173, 0.9857117230115914, 0.9743665825301654, 0.9906789938768424, 0.9893014889934604, 0.9909769100185671, 0.12710216427540066, 0.16994115193332326, 0.10917254264253062, 0.10291610227758408, 0.1248904439231091, 0.13460153251051976, 0.13512980178649303, 0.15642184154319494, 0.11112507987515674, 0.21134806317818589, 0.13294633193201766, 0.2070790424788308, 0.17515481439200753, 0.1633898706686061, 0.18906088833193613, 0.14378189818695641, 0.1733838243086946, 0.14362374827672042, 0.015230433482641414, 0.0852561922214552, 0.04855707080603622, 0.05758369907998717, 0.07748003195754116, 0.06971851400161633, 0.03534861480477125, 0.04358273543163782, 0.022397693921295425, 0.0599723332485419, 0.040798497815848545, 0.03942410371295557, 0.034244931567538384, 0.07304428716305267, 0.026100921795413012, 0.007828605541829292, 0.04958982826594638, 0.022073195130283607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02897058075686676, 0.02106852586042207, 0.03974841069051893, 0.044882225208890625, 0.06611678299648627, 0.06466395841083117, 0.008179399642752827, 0.057923277601805934, 0.009754848604946575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00987117748067301, 0.004487816174609138, 0.015510630288402716, 0.026165988180539168, 0.00793585024293375, 0.006808024083175379, 0.025594881027627303, 0.018459453232239187, 0.0056787653833128005, 0.24327509218773724, 0.25721960314037584, 0.2582896414590419, 0.23636538269190732, 0.226652098068151, 0.23473921578494505, 0.25030813438774724, 0.2718110674212173, 0.20942029792749128, 0.06930993546668396, 0.06385887548349278, 0.09157893552246565, 0.0888102465175733, 0.06308229328013204, 0.07071035197153819, 0.07050966161842176, 0.06636468632375803, 0.056177378882682594, 0.1600977343582255, 0.13754892651623685, 0.14796834874722864, 0.16711453464742299, 0.16971583650699307, 0.15288562969913988, 0.1624851282507529, 0.14689247993000665, 0.17695449400318608, 0.18527390789043952, 0.19367101864048852, 0.19959544200936696, 0.2099511742576473, 0.18751249810841908, 0.1859730537279365, 0.1906426251111264, 0.18984307454554483, 0.1943030098026941, 0.12614236606720186, 0.127265083591097, 0.16978324538901812, 0.1514828439238568, 0.11810397371964865, 0.12022266375919388, 0.13992237676898034, 0.14434534277612288, 0.14218913544510103, 0.16966849226266023, 0.14923137634209216, 0.17244072680345146, 0.19802971387465573, 0.1768382548545695, 0.17882386069494116, 0.17759396598972832, 0.16554372967443864, 0.1763115797217717, 0.15913710608167586, 0.14614618323778872, 0.1649073054655088, 0.15943286491489306, 0.16140656250206953, 0.17735508939070865, 0.16630064905892228, 0.16819412420951207, 0.16334543378195665, 0.2032357733973632, 0.18417891237903594, 0.14694206315532155, 0.21954598939640635, 0.17527851457788768, 0.1278104609055255, 0.16908800701699378, 0.18058368095885924, 0.2536724993645002, 0.23635756651930662, 0.1929940937629958, 0.15885742516004464, 0.1571603862642449, 0.34796732628939175, 0.17088304967498336, 0.19488271957683023, 0.1913951409606638, 0.19133088001372134, 0.18333984370028156, 0.18745803010303552, 0.18457518871098766, 0.18763186879130467, 0.18066399786334786, 0.2153596184335005, 0.1857912939079297, 0.18850186983689443, 0.19575180694316063, 0.06986455043938966, 0.058709288266433624, 0.06688653226122043, 0.06642835154962157, 0.0680285475680159, 0.07182005245010947, 0.06404316071263749, 0.062167282215945474, 0.07629776649690723]}, "mutation_prompt": null}
