{"id": "5c7bf92f-408b-4483-a67b-de6f69af3596", "solution": "import numpy as np\n\nclass DynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.ones(self.strategy_count) / self.strategy_count\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.1, size=self.dim)\n        elif strategy == 1:\n            return x + np.random.uniform(-0.1, 0.1, size=self.dim)\n        else:\n            scale = np.random.uniform(0.5, 1.5)\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = success_counts / total\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.randint(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts[:] = 0", "name": "DynamicMultiStrategyEA", "description": "A multi-strategy evolutionary algorithm that dynamically adapts search strategies using success-based selection and self-adaptive parameter tuning.", "configspace": "", "generation": 0, "fitness": 0.18460903828637085, "feedback": "The algorithm DynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.4951964272606926, 0.4779616814288501, 0.48299578102072205, 0.46331860519419044, 0.388936482107306, 0.4302895221634436, 0.47982035296454817, 0.4547273193404334, 0.4439222438072429, 0.009996747671444095, 0.01093105376826864, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011245947099702835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04189803660636282, 0.045193446227544176, 0.07587822184810467, 0.08177694407646086, 0.02616981087669068, 0.06994842483685881, 0.038329307545514, 0.055921215139799973, 0.14429467162647802, 0.048117287769924744, 0.017131535521318852, 0.032615150469454735, 0.08237569296498115, 0.05434028426899529, 0.005181936584159663, 0.05585659745507532, 0.012178623357073093, 0.010326219711332074, 0.9516810583781502, 0.6396402378280102, 0.9021900533852107, 0.10426982148170227, 0.7463091369463284, 0.9744880174771914, 0.8219026133265748, 0.748958711803204, 0.7885833309325311, 0.29079738634617613, 0.22026550920661192, 0.27157554450406174, 0.28737759339134994, 0.25884402577258214, 0.3446050744738359, 0.3084465253591051, 0.2880640922247344, 0.2064068992406124, 0.16303144547716142, 0.21346645499556993, 0.1308760222353429, 0.15977833432993171, 0.14404140012293432, 0.08001025361936209, 0.11469203316035892, 0.12888492497444315, 0.17603206293901585, 0.1202293261313363, 0.14288920322217546, 0.11152136878498731, 0.09387964281210226, 0.14133512083891397, 9.999999999998899e-05, 0.1604109751168311, 0.130397388804098, 0.1459757827587942, 0.1684393188430966, 0.13630304816197858, 0.20800884876575298, 0.1657708716362255, 0.2243326772997426, 0.13944456744821565, 0.2385163142562311, 0.1314646615402073, 0.17216125217499212, 9.999999999998899e-05, 9.999999999998899e-05, 0.003216030037900608, 0.0138510275129069, 9.999999999998899e-05, 0.0014448454489136564, 9.999999999998899e-05, 9.999999999998899e-05, 0.04099680816135953, 0.07978370381945077, 0.11014434644844062, 0.0922149287426075, 0.06702386427301077, 0.010946294673672807, 0.008103750821158773, 0.15804949131754342, 0.05575462944488796, 0.040104889775619657, 0.006502290485988826, 0.007520624032826717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08168248458436278, 0.07521851385197642, 0.12388946998218564, 0.09402163199627922, 0.017295967917391852, 0.017896145338240466, 0.12565310999780044, 0.11584388517953303, 0.08587912245539064, 0.46304483088911463, 0.43850302685672615, 0.45065558539255546, 0.41556587103914666, 0.3984336421615605, 0.42237651607359106, 0.4139944600489479, 0.401653005586873, 0.4675221332683087, 0.03190759793257425, 0.05060224957089088, 0.004349561627897125, 0.023240771080406786, 0.03643439023669126, 0.06220216364140163, 0.03692960100741949, 0.02822433169510752, 0.07187704144761775, 0.18255314998130245, 0.2567093992348535, 0.2511639100007025, 0.3419893349354466, 0.3155473773594395, 0.25777739176772607, 0.31413368793151575, 0.19884814279370677, 0.1940768211956373, 0.15999751990061928, 0.2484063690876246, 0.17562182194212872, 0.2068687213144892, 0.17301276415040867, 0.1850514602779736, 0.14535071402946853, 0.33265320142915267, 0.11079037699449457, 0.06551522008113575, 0.08584206330973776, 0.14302108040395145, 0.16769884135771718, 0.16764746272358955, 0.165770101607856, 0.08692846757179107, 0.23210794138843927, 0.06364182786361161, 0.19226022755961436, 0.24287817512133547, 0.21096168351445732, 0.1950674083283509, 0.2156448331575611, 0.19951924534098853, 0.19325276027776217, 0.22502813896252083, 0.2197646088670041, 0.15564076172698094, 0.1698433730810679, 0.19521893688540892, 0.1724463611231637, 0.17187017627308943, 0.15220834738926914, 0.1744732606314492, 0.16453426259338066, 0.1589275548055108, 0.12550216873406406, 0.12705398897908804, 0.18765252269306187, 0.7025829229445768, 0.20175723838851733, 0.6921117676328896, 0.14753405238461326, 0.16870077086100632, 0.17669663017706205, 0.08209395424250121, 0.19928359621748204, 0.46710053463537193, 0.4025933423589205, 0.1440640329310625, 0.4560712511771383, 0.10390152590090529, 0.432407475561819, 0.2795537375411552, 0.20005687466709532, 0.17925353425905088, 0.17967807199008057, 0.18536138648953893, 0.1792907393730293, 0.18713408309337076, 0.1957352478927662, 0.21595856855255136, 0.1910534840502489, 0.09422207706340757, 0.07526056253756686, 0.06512312710045787, 0.06311670761540555, 0.0889195812477841, 0.07376666060369375, 0.06520266717798817, 0.047300040918080266, 0.06969640412098976]}, "mutation_prompt": null}
{"id": "464f74be-da92-4d2b-acbe-45e085a9bd1e", "solution": "import numpy as np\n\nclass DynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.ones(self.strategy_count) / self.strategy_count\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.1, size=self.dim)\n        elif strategy == 1:\n            return x + np.random.uniform(-0.1, 0.1, size=self.dim)\n        else:\n            scale = np.random.uniform(0.5, 1.5)\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = success_counts / total\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.randint(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts[:] = 0", "name": "DynamicMultiStrategyEA", "description": "A multi-strategy evolutionary algorithm that dynamically adapts search strategies using success-based selection and self-adaptive parameter tuning.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5c7bf92f-408b-4483-a67b-de6f69af3596", "metadata": {"aucs": [0.4951964272606926, 0.4779616814288501, 0.48299578102072205, 0.46331860519419044, 0.388936482107306, 0.4302895221634436, 0.47982035296454817, 0.4547273193404334, 0.4439222438072429, 0.009996747671444095, 0.01093105376826864, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011245947099702835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04189803660636282, 0.045193446227544176, 0.07587822184810467, 0.08177694407646086, 0.02616981087669068, 0.06994842483685881, 0.038329307545514, 0.055921215139799973, 0.14429467162647802, 0.048117287769924744, 0.017131535521318852, 0.032615150469454735, 0.08237569296498115, 0.05434028426899529, 0.005181936584159663, 0.05585659745507532, 0.012178623357073093, 0.010326219711332074, 0.9516810583781502, 0.6396402378280102, 0.9021900533852107, 0.10426982148170227, 0.7463091369463284, 0.9744880174771914, 0.8219026133265748, 0.748958711803204, 0.7885833309325311, 0.29079738634617613, 0.22026550920661192, 0.27157554450406174, 0.28737759339134994, 0.25884402577258214, 0.3446050744738359, 0.3084465253591051, 0.2880640922247344, 0.2064068992406124, 0.16303144547716142, 0.21346645499556993, 0.1308760222353429, 0.15977833432993171, 0.14404140012293432, 0.08001025361936209, 0.11469203316035892, 0.12888492497444315, 0.17603206293901585, 0.1202293261313363, 0.14288920322217546, 0.11152136878498731, 0.09387964281210226, 0.14133512083891397, 9.999999999998899e-05, 0.1604109751168311, 0.130397388804098, 0.1459757827587942, 0.1684393188430966, 0.13630304816197858, 0.20800884876575298, 0.1657708716362255, 0.2243326772997426, 0.13944456744821565, 0.2385163142562311, 0.1314646615402073, 0.17216125217499212, 9.999999999998899e-05, 9.999999999998899e-05, 0.003216030037900608, 0.0138510275129069, 9.999999999998899e-05, 0.0014448454489136564, 9.999999999998899e-05, 9.999999999998899e-05, 0.04099680816135953, 0.07978370381945077, 0.11014434644844062, 0.0922149287426075, 0.06702386427301077, 0.010946294673672807, 0.008103750821158773, 0.15804949131754342, 0.05575462944488796, 0.040104889775619657, 0.006502290485988826, 0.007520624032826717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08168248458436278, 0.07521851385197642, 0.12388946998218564, 0.09402163199627922, 0.017295967917391852, 0.017896145338240466, 0.12565310999780044, 0.11584388517953303, 0.08587912245539064, 0.46304483088911463, 0.43850302685672615, 0.45065558539255546, 0.41556587103914666, 0.3984336421615605, 0.42237651607359106, 0.4139944600489479, 0.401653005586873, 0.4675221332683087, 0.03190759793257425, 0.05060224957089088, 0.004349561627897125, 0.023240771080406786, 0.03643439023669126, 0.06220216364140163, 0.03692960100741949, 0.02822433169510752, 0.07187704144761775, 0.18255314998130245, 0.2567093992348535, 0.2511639100007025, 0.3419893349354466, 0.3155473773594395, 0.25777739176772607, 0.31413368793151575, 0.19884814279370677, 0.1940768211956373, 0.15999751990061928, 0.2484063690876246, 0.17562182194212872, 0.2068687213144892, 0.17301276415040867, 0.1850514602779736, 0.14535071402946853, 0.33265320142915267, 0.11079037699449457, 0.06551522008113575, 0.08584206330973776, 0.14302108040395145, 0.16769884135771718, 0.16764746272358955, 0.165770101607856, 0.08692846757179107, 0.23210794138843927, 0.06364182786361161, 0.19226022755961436, 0.24287817512133547, 0.21096168351445732, 0.1950674083283509, 0.2156448331575611, 0.19951924534098853, 0.19325276027776217, 0.22502813896252083, 0.2197646088670041, 0.15564076172698094, 0.1698433730810679, 0.19521893688540892, 0.1724463611231637, 0.17187017627308943, 0.15220834738926914, 0.1744732606314492, 0.16453426259338066, 0.1589275548055108, 0.12550216873406406, 0.12705398897908804, 0.18765252269306187, 0.7025829229445768, 0.20175723838851733, 0.6921117676328896, 0.14753405238461326, 0.16870077086100632, 0.17669663017706205, 0.08209395424250121, 0.19928359621748204, 0.46710053463537193, 0.4025933423589205, 0.1440640329310625, 0.4560712511771383, 0.10390152590090529, 0.432407475561819, 0.2795537375411552, 0.20005687466709532, 0.17925353425905088, 0.17967807199008057, 0.18536138648953893, 0.1792907393730293, 0.18713408309337076, 0.1957352478927662, 0.21595856855255136, 0.1910534840502489, 0.09422207706340757, 0.07526056253756686, 0.06512312710045787, 0.06311670761540555, 0.0889195812477841, 0.07376666060369375, 0.06520266717798817, 0.047300040918080266, 0.06969640412098976]}, "mutation_prompt": null}
{"id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 2, "fitness": 0.18773711026670015, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "5c7bf92f-408b-4483-a67b-de6f69af3596", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "1806bcb8-950a-463f-a8ea-797c9528dfde", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "5403b458-e9cd-4de8-881e-fadede04cb6d", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 22  # Increased population size\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.13, size=self.dim)  # Refined mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.13, 0.13, size=self.dim)  # Refined mutation\n        else:\n            scale = np.random.uniform(0.7, 1.3)  # Refined scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.randint(self.population_size)  # Changed selection to randint\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced algorithm with refined mutation ranges and dynamic population adaptation for improved efficiency.", "configspace": "", "generation": 4, "fitness": 0.18321281772722664, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.456755386270161, 0.49276879831556064, 0.47634054279600324, 0.45325626379682094, 0.4289455176591831, 0.4604742673337333, 0.44131746938135274, 0.45038128944763334, 0.4280490020568287, 0.06217509817355604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003087339911262421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04208282455239443, 0.06670541300603394, 0.07323864624915133, 0.043872837141234466, 0.05669467162508535, 0.058163718759682737, 0.04096348175792408, 0.04026856109375565, 0.11862832859923145, 0.043726470007638296, 0.020717858820239465, 0.019026697691304828, 0.07905948888433245, 0.06414653696904371, 0.027493017771642925, 0.013933663161720844, 0.03288230329417441, 0.024354914737770517, 0.9252975212889526, 0.7855638489307393, 0.9134953620135843, 0.4911765563948107, 0.7061149817586687, 0.9547475692047658, 0.699688215628611, 0.5479666732532125, 0.8213493926891056, 0.24967963627183642, 0.2977361412778575, 0.25879725117793806, 0.25261039753806147, 0.26649144443771255, 0.27580598945102497, 0.2792638848784572, 0.2980660433607937, 0.24314354113416226, 0.22701504159231622, 0.4332183365160378, 0.16035035920685026, 0.14635497743799353, 0.20419169684282878, 0.17371979533260806, 0.12679499215363865, 0.14554182930407855, 0.23327356648155217, 0.159066351007897, 0.15798943935478726, 0.10209735617134286, 0.13229579841043726, 0.15407471164841113, 0.10585348569670483, 0.15515470460106462, 0.17998504367252155, 0.1530939878341092, 0.1803213282818097, 0.20125390103682317, 0.26186328308522233, 0.19608961813037162, 0.11635796201114812, 0.1373282254693189, 0.21437383646930608, 0.1077146296511925, 0.1477873069607274, 0.000859299320377982, 9.999999999998899e-05, 9.999999999998899e-05, 0.015960527775986888, 0.00010794161470817354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0648817454038002, 0.09472747996709674, 0.06922038671074571, 0.06575808110593284, 0.05956083498516529, 0.02715703300412864, 0.1348646883470328, 0.05637507364360428, 0.04048657505294795, 9.999999999998899e-05, 0.01014123361913466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0544724555603221, 0.09043721819026795, 0.12121000387992387, 0.04362960477303823, 0.043099584562368176, 0.04672708969950723, 0.13109298857218543, 0.1183966683067762, 0.08786782918197333, 0.43799112894981407, 0.42355219881096795, 0.41949113676714556, 0.40430881615636305, 0.3984032660295094, 0.3772437296057909, 0.3943941085280329, 0.42132668000467777, 0.43959025080000025, 0.034552899293826655, 0.04098309426216051, 0.037480029497910294, 0.04633389599774529, 0.03933968710483604, 0.08222460983083912, 0.07850104848161776, 0.047395785880184116, 0.06923926768762445, 0.15368393540560776, 0.18725216682782886, 0.1673122569383828, 0.29644978450934734, 0.30797501169243124, 0.2065138930959508, 0.26190370712938404, 0.1823670458013078, 0.16035788472883328, 0.15503849829578176, 0.2605841148145812, 0.19547458771408388, 0.22566416561210523, 0.24422175200941643, 0.1888244058967704, 0.14341566677385786, 0.27895327650064605, 0.10792353251993991, 0.07793190826110818, 0.08379139333317143, 0.15610353300209767, 0.21805030506528822, 0.15612771351254473, 0.15884199597615334, 0.08584612718637619, 0.250111149848816, 0.05871859643826771, 0.2158363254319865, 0.1955045253137676, 0.19759907084484252, 0.22229601868658355, 0.22896647767503053, 0.2092817392684383, 0.19862299444939457, 0.19935904196657184, 0.2352163928258053, 0.17801863061380085, 0.2186054894472188, 0.194706101872947, 0.2099359062709285, 0.23657995837625245, 0.20909742857641245, 0.17422655206778104, 0.1686265347742283, 0.16388834817725617, 0.12618213972294312, 0.18740931987103637, 0.15289341293404102, 0.6751756321850442, 0.20051629477807575, 0.6593582763359389, 0.10353952886155349, 0.1685944142630993, 0.1766680743147605, 0.0815196730473694, 0.11093116638070588, 0.05100801780745767, 0.2012939570964728, 0.16285170448448028, 0.19652227902997388, 0.10412804933469577, 0.373178581769702, 0.2598772223370698, 0.18104213035332217, 0.18965827330835305, 0.18970668176361283, 0.1848355120191837, 0.19824035189339084, 0.22373006808420892, 0.19582653310140075, 0.1793105415756876, 0.17663039154438576, 0.10566618503158987, 0.07562628342571209, 0.06254517497068024, 0.07202504708773771, 0.08872639560430273, 0.0642709776586835, 0.07527510779989333, 0.057127083230764986, 0.06511979926237399]}, "mutation_prompt": null}
{"id": "b2acb826-4aab-4033-8493-6deab663c389", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "373a7473-0a8e-488a-8930-f6c7ea6a11cc", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "522266fa-859d-4e1f-84e2-0fe02bf7b90c", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "ea396cdc-bc9c-4a76-8b68-f16145c947e2", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.12, size=self.dim)  # Slightly reduced mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.12, 0.12, size=self.dim)  # Slightly reduced mutation\n        else:\n            scale = np.random.uniform(0.7, 1.3)  # Adjusted scale range for balanced exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size, p=(1/fitness)/np.sum(1/fitness))  # Fitness-proportional selection\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "EnhancedDynamicMultiStrategyEA with improved selection pressure and adaptive mutation scaling.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities are not non-negative').", "error": "ValueError('probabilities are not non-negative')", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {}, "mutation_prompt": null}
{"id": "5b76e543-9f9c-4d85-a5e2-01b7f250e95e", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "9e668bf6-b355-4b4c-a797-89df9aca13a9", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "e1d429eb-c4da-4c3b-92c2-ff4a483a2220", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "3b3fe695-2667-485f-b076-b547eb418dda", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 22  # Slightly increased\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.12, size=self.dim)  # Fine-tuned mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.12, 0.12, size=self.dim)  # Fine-tuned mutation\n        else:\n            scale = np.random.uniform(0.7, 1.3)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.92 * (success_counts / total) + 0.08 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.randint(0, self.population_size)  # Altered selection for variety\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Refined mutation strategies and dynamic adaptation to enhance optimization efficiency.", "configspace": "", "generation": 12, "fitness": 0.17607040956147202, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.4661246423804827, 0.4622903547190733, 0.48627384978957466, 0.4554686682437855, 0.43507919588975497, 0.4658765399731334, 0.443697960553014, 0.4733376585012752, 0.47252073019647167, 0.05743120630229137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023919116981489, 0.06136660426780016, 0.05727839016034064, 0.0793807591020872, 0.07008926122586234, 0.05844352715065304, 0.0468941061122663, 0.044600186743515735, 0.1077502183625203, 0.05228501427299037, 0.014094759823634728, 0.00430552014176433, 0.08909164002561543, 0.06284406419620103, 0.0024948671817460744, 0.008219797110125882, 0.012841010065477887, 0.013866330675830651, 0.7250230419831271, 0.7439287286260164, 0.7165405670481169, 0.09384186255334426, 0.65216759310234, 0.09336720689515365, 0.46960903778085483, 0.7155416901630066, 0.6662583045233328, 0.22765490585641857, 0.23098600800104674, 0.2595241102303497, 0.288792385464434, 0.2591421782018053, 0.235538988591787, 0.2776124967186797, 0.25716503293931314, 0.2489591783408288, 0.5967002791089706, 0.16981051970975036, 0.15537281737619635, 0.0866363636157923, 0.13929077303712, 0.1990204387661474, 0.14550514523188762, 0.1310538747963912, 0.1861244685973389, 0.12234338167448366, 0.16037842789206747, 0.10117565726103583, 0.1775557333903418, 0.1388561691096335, 0.11524651312816836, 0.16155620899243273, 0.15503837411046573, 0.14962298961087417, 0.2052423840749893, 0.14906161562013154, 0.24266633411452532, 0.19651934341846788, 0.1229391705645847, 0.14821426240632352, 0.21826286635003034, 0.12784379488997033, 0.1518978246151944, 0.0014100312891057731, 9.999999999998899e-05, 0.0019677967497715443, 0.02303637676104242, 0.0016704937885125837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04581864103402766, 0.05542361841025378, 0.11072832364787466, 0.09962961292077854, 0.06526108541453723, 0.05678257774749529, 0.024293704636394575, 0.06983035223534517, 0.06026958344089395, 0.04029442267579453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013343800570286835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07883346360432553, 0.09685441036648623, 0.1430536984346793, 0.08643388473681535, 0.0614181639400605, 0.049605385364031696, 0.11948211764422412, 0.060359102229571526, 0.07765557689556057, 0.4119266991173448, 0.4064556502920176, 0.4355685621747407, 0.41103608386999624, 0.3949123611729184, 0.3485170447475564, 0.4450616250359961, 0.41730461332711977, 0.4343307013988076, 0.03475945399684788, 0.016582131258362498, 0.031444439603836694, 0.05452149258795924, 0.03975951113428633, 0.07768208446169189, 0.07337659134208685, 0.033531386097111815, 0.08068012612954212, 0.19876360965417283, 0.24611918732996918, 0.25223617011323196, 0.30306337909464753, 0.28348784912049785, 0.22960083399625386, 0.26814949587286396, 0.25239896992436617, 0.15875899070581434, 0.15697652843742638, 0.14522300987095327, 0.18529055021027507, 0.22460255872293355, 0.15960113592387604, 0.1864794805476464, 0.14274406755531022, 0.22701384493835497, 0.10596257864182757, 0.06163933607008598, 0.08262258971287284, 0.14796280068757972, 0.17720608045054764, 0.1601131206006281, 0.1568776147882638, 0.07829146589753566, 0.26534727385762, 0.05891893609834353, 0.2029881439108614, 0.19155857738282434, 0.20314490562726395, 0.2066108057281426, 0.17675521132528826, 0.19625684760001405, 0.211269236923892, 0.1850427385715625, 0.19599773376218244, 0.17789036655287727, 0.18355843297672747, 0.18255679031019156, 0.21018701953456387, 0.1765060619362846, 0.20274089889720115, 0.17435038770596278, 0.19460442140766865, 0.1633161584936641, 0.635971912776453, 0.18704855752401317, 0.15246605744605457, 0.6571273010985119, 0.20135288904117044, 0.6903882707295436, 0.09982095722912232, 0.16847116798535977, 0.17752370340401247, 0.08208837776248912, 0.1992598561622131, 0.051107066788460886, 0.43023281709805794, 0.1640675428344055, 0.19377122751341258, 0.10347408108147049, 0.36878342981872136, 0.2779842010561039, 0.19937745415088737, 0.19026437785102557, 0.21550081153231282, 0.2046171619903019, 0.18850809425237436, 0.1909225716633659, 0.20451869688774116, 0.19864226718757505, 0.18617239970897492, 0.09468739899304224, 0.06872425743613642, 0.06662632977161997, 0.060630034474207006, 0.08196755231087705, 0.06175850844081576, 0.06555384994798497, 0.055865999683622936, 0.06567356163255733]}, "mutation_prompt": null}
{"id": "fd7858b5-a957-4382-97f5-eb0e13b333c2", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "b3265248-65f8-4352-929b-03c79de67f1d", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "c62df2bd-88f7-4809-8fe0-f454dee97970", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "aaadc108-96df-4703-be1b-63f8b9b2a28d", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "a7846ca1-d6cd-4e6b-9a57-b82b47b8b11f", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "76a0a0e8-e301-4752-b7ad-de2816c1e0d1", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.12, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.12, 0.12, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.5, 1.3)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Adaptive optimization with enhanced mutation strategies and dynamic strategy weighting for improved performance.", "configspace": "", "generation": 18, "fitness": 0.1788958480938192, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.49849385818820746, 0.4727183979846814, 0.48545258701465477, 0.46214454955129336, 0.4120040440657389, 0.4876453769466148, 0.4330138510642352, 0.44502003150752867, 0.5042795807002964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00040576285978854987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047249464159788146, 0.060986896523842704, 0.032157905461417946, 0.07335089061786015, 0.054808486911296805, 0.0696421514365062, 0.0432570158020692, 0.04764535231935729, 0.11715973793730994, 0.04328875622144801, 0.06407201090078363, 0.033794609819107424, 0.06901648433726082, 0.0451370202062078, 0.017187540931044354, 0.06949693388786604, 0.018155803521236358, 0.015992666288893398, 0.9214428460654496, 0.6679573800318708, 0.902811480926081, 0.10084097423185667, 0.39219051690464424, 0.09304032662084705, 0.8532691736813154, 0.5283096394491777, 0.768315806559217, 0.24832824699469092, 0.2623215813562161, 0.27921315526008483, 0.33546731807365615, 0.27520471384159284, 0.2925265312873484, 0.28163001552944245, 0.28974206426569515, 0.2509697507139329, 0.22224787480364294, 0.16645764917235606, 0.13083910433222568, 0.1836754563769032, 0.1835607683731808, 0.17781326716051882, 0.14764026297752775, 0.12814958595961945, 0.23063335971057064, 0.14895878188447242, 0.18842168834722384, 0.11112689994109426, 0.14792813547231054, 0.13791438734107686, 0.12088337655466652, 0.16645286862880493, 0.12506718462859812, 0.15782620002558756, 0.20434384460709576, 0.14702732274904307, 0.17348246755103536, 0.21082735126822705, 0.23818725678840602, 0.19827102899494198, 0.21423192106981104, 0.1798058975565271, 0.15200451906567647, 9.999999999998899e-05, 0.00322611229624048, 0.00048224231033766607, 0.02542225623661376, 0.036278925453663624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035690758655182453, 0.07520477304995166, 0.05428261540830459, 0.10898056422833602, 0.026874405516643662, 0.04919312181213886, 0.017347078486924183, 0.16603252996788198, 0.05612633839752856, 0.04132250090220424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043758519873167145, 9.999999999998899e-05, 0.08065684617658353, 0.09856711144983943, 0.14138381012358026, 0.07224988553013789, 0.0406391809616613, 0.02017968536128023, 0.11786167027771022, 0.08845493898423373, 0.08057364108276766, 0.43904178885208, 0.4172652381888613, 0.4321192825328851, 0.41757428411315645, 0.4166136564528291, 0.4021909491549538, 0.44766593624714646, 0.4272457910017404, 0.4215307044799853, 0.029127092718510328, 0.03880827833320144, 0.009894465193582613, 0.05495417252382462, 0.0427011694560846, 0.07404614579005808, 0.04479689097484352, 0.04091950223172991, 0.0708874703876069, 0.19656821246072909, 0.22541142604485376, 0.18175723956666512, 0.3411924244289295, 0.3071924010598225, 0.2463687801542025, 0.29722827437634924, 0.1855675372531812, 0.16804356715487667, 0.15764006821245635, 0.3023782338144906, 0.17181911936737215, 0.1500474968742601, 0.1897324333371745, 0.18975378355118955, 0.14341206374115323, 0.29519028368538924, 0.1424285183934153, 0.07150499660420939, 0.18830295877786762, 0.16325946331655194, 0.1610369722833893, 0.16571547832693123, 0.17068369668284666, 0.08157543041181148, 0.2071790472596472, 0.059346562869457054, 0.2381063271690248, 0.27771218216869886, 0.24086295347482956, 0.22605737334081732, 0.25309673756016837, 0.21434883612233058, 0.23528566282432817, 0.24078537320850935, 0.23525747491594162, 0.19024961449008349, 0.19847540601277347, 0.1913387119342287, 0.1734918682226635, 0.17311397108922943, 0.18849907173365488, 0.17424740115645998, 0.1902832313345869, 0.17404565336999278, 0.1266018950108171, 0.12728728460274308, 0.18737752134126173, 0.6989014973278589, 0.20046282762972045, 0.11454772011538372, 0.1470176836075241, 0.16946814323069626, 0.17624464490743552, 0.08217467214220375, 0.20253209651498316, 0.4489032874209149, 0.10350618326630834, 0.1635360045737525, 0.4449130251939519, 0.10427307751240333, 0.39826003136803845, 0.2560024828103501, 0.1949596307014514, 0.17911227939959917, 0.17983357949903966, 0.18824279967089508, 0.18871456796195485, 0.19020908385705038, 0.20511771554711777, 0.18136961976303345, 0.19127038663062357, 0.0987353069769411, 0.08261314346211346, 0.07424073246367602, 0.0792674941025171, 0.08528715351834071, 0.09475131727031771, 0.07906832724947799, 0.05695615227144768, 0.06454376840438347]}, "mutation_prompt": null}
{"id": "68ff8282-7828-4333-b058-ce7255f1706c", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "4e7d516e-6a44-4fde-982e-7643056a7812", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "f1ee363c-7b3a-46e8-9953-6787402a088a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "5a8b896e-f363-4ddf-92b9-18fc276b0644", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "c93ef449-32bf-484d-b646-85bc6ff8e18d", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "e7fa3266-9bfb-4bc3-992f-96b9b6b3ba51", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.1, size=self.dim)  # Reduced mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.1, 0.1, size=self.dim)  # Reduced mutation\n        else:\n            scale = np.random.uniform(0.7, 1.3)  # Narrowed scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.randint(self.population_size)  # Simplified selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Optimized selection method, mutation scaling, and iteration logic for improved convergence in black box optimization.", "configspace": "", "generation": 24, "fitness": 0.17851146571754853, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46781396481754156, 0.45665687736284055, 0.47309541905239805, 0.46585543316206357, 0.3973282898818218, 0.439055286152933, 0.49829718324078365, 0.4612844512836233, 0.44208484364561784, 0.05841671505321355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000918938270285441, 9.999999999998899e-05, 0.03940038077975172, 0.04447586103034662, 0.019980835226548366, 0.07318982322611778, 0.05428965437821265, 0.06747085860443292, 0.043935563019116275, 0.041354826610494055, 0.06659409578498598, 0.021359332973671874, 0.015503977733809182, 0.0033729665764058447, 0.08510385665009712, 0.051757844923087215, 0.0028169071254183775, 0.06559129205659264, 0.02549910505639197, 9.999999999998899e-05, 0.7438595709338072, 0.5345075512259524, 0.9230431876084816, 0.10348880989506692, 0.7818728134709887, 0.4986213901284685, 0.8119698471557678, 0.4845064498545264, 0.6734517336532428, 0.3066761508824567, 0.23443812250270346, 0.29177931027373016, 0.29353861666574577, 0.25227946555179825, 0.24359009832676026, 0.3045683573450426, 0.24479034118365828, 0.19697010403796644, 0.826261841636561, 0.16348440668694053, 0.12662443902572829, 0.19763019517595437, 0.4942384658635548, 0.026287330809026233, 0.11652761850204263, 0.14444805595433263, 0.17697092457289787, 0.15737213444946607, 0.10969354594286329, 0.11396012140361911, 0.10936401449231958, 0.15802769943773853, 9.999999999998899e-05, 0.16161223844885841, 0.10019862404466917, 0.1229314547730681, 0.09670372833900898, 0.15003579096210873, 0.13143488075627496, 0.18126527332538467, 0.09501095221660072, 0.1378355131442197, 0.20456915236428264, 0.1915891212146802, 0.14887124354497205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008423591778411121, 0.019187439950972274, 0.0023120529673374968, 9.999999999998899e-05, 9.999999999998899e-05, 0.021519147549258544, 0.07543399422221775, 0.06478767669430763, 0.09731885953090513, 0.06550682311433353, 0.012636882977668962, 0.01516035508718383, 0.14492726317463456, 0.05665125855343123, 0.0385437382000009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015284993978870176, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032455822401700196, 0.10023630743434209, 0.08751970563451617, 0.13790392443806754, 0.10251023468135767, 0.052429463603208215, 0.016903789811726133, 0.1440140539896011, 0.09146562109819556, 0.07885152214320934, 0.42949456169101763, 0.40354623026107306, 0.43503612608830644, 0.41462817478820213, 0.38695636550294776, 0.4259131689521639, 0.4624727180881265, 0.45758407905279463, 0.435162436236878, 0.036010759097120926, 0.015542077675100852, 0.029386446411476586, 0.059579138831781675, 0.038502953789715466, 0.07087318690049438, 0.0373322703505542, 0.028468098678999576, 0.07772854312548405, 0.24119905015431786, 0.2709545685546374, 0.2742784883375371, 0.3183038661596175, 0.32855009379641664, 0.19684198368835337, 0.36064727725758794, 0.1286574525789672, 0.27118195486447283, 0.15676654272899737, 0.15245888849217115, 0.20277356361574406, 0.14886183985943569, 0.1501574931979801, 0.17630684890405623, 0.14312456000020135, 0.3115390759884037, 0.10773523909318461, 0.06687570373173735, 0.06904001308795849, 0.15535197767125208, 0.08970391768770991, 0.17041151197191773, 0.11960391779726065, 0.07692360989899083, 0.21213197638885395, 0.05497743132977362, 0.19869552473220742, 0.21510901178944764, 0.2046024674881285, 0.2014654720330642, 0.22578896758467026, 0.18115834362986338, 0.1894588983047807, 0.19385935441252133, 0.22683314418308897, 0.16895729524943248, 0.17612582599690063, 0.19329179737922175, 0.1903358485074249, 0.17369002537899236, 0.18900959437554687, 0.18141639888990035, 0.1872754016139393, 0.16028406670508777, 0.10482128580066241, 0.12691334136113508, 0.1536841638728047, 0.6623355408785028, 0.20080649953933938, 0.7045243255475725, 0.09977899529234946, 0.16812776839795174, 0.17569142016618444, 0.08200479521948656, 0.19840914124502762, 0.4475972735232, 0.45993091000093933, 0.1430900653131706, 0.200948682535402, 0.10449176016655415, 0.3963057496423982, 0.24856023719526232, 0.1798351490696879, 0.19533244391642557, 0.2072933724646714, 0.17268345827197484, 0.19566057809254722, 0.2092990311491909, 0.18665170431783396, 0.17496075292075364, 0.21826734364365485, 0.05265917655188679, 0.07012415440124475, 0.07029865869415841, 0.07048915044427084, 0.08074499650641664, 0.06740502087804034, 0.06695346505815103, 0.05142116226176463, 0.0672150137752402]}, "mutation_prompt": null}
{"id": "c6048b23-7ef3-499b-bb3b-1a2f63f4ebdd", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 22  # Adjusted population size\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.12, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.12, 0.12, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.65, 1.35)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.92 * (success_counts / total) + 0.08 * self.strategy_weights  # Adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.randint(self.population_size)  # Adjusted random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced Strategy-Adaptive EA with refined mutation dynamics and optimized strategic learning.", "configspace": "", "generation": 25, "fitness": 0.1856578707210013, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46999571355599357, 0.46118137238723633, 0.4746792309679815, 0.45058200229544154, 0.41156719492429983, 0.4590845186777397, 0.43622331875783893, 0.4504178704603803, 0.45288930286125373, 0.054662125847676046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008606034119826633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04138275308861139, 0.035510796619966145, 0.07319940515144385, 0.08429516375057433, 0.05712074516689203, 0.04042285367908349, 0.04534418974828913, 0.05394085593030262, 0.08617954044135245, 0.04104218370006163, 0.02841696500228519, 0.021147908003821048, 0.07754861181971706, 0.05405017600561346, 0.018871709942980153, 0.011930982246118771, 0.02442973103542878, 0.019553145289085694, 0.9470041641109518, 0.5445902534970528, 0.5416702956499535, 0.534545706781874, 0.7681236724234629, 0.35495322736009494, 0.8053356030228345, 0.7357832261959565, 0.5766554259324042, 0.2279468842098189, 0.30820706449516944, 0.2780161484161352, 0.28666119200775475, 0.26136731825302073, 0.2891423600593219, 0.2757869632290124, 0.2746413510183169, 0.24770538898125127, 0.6306368029560736, 0.39385561478464814, 0.13173016962133843, 0.7226742890409696, 0.053779808713455, 0.1908689776046888, 0.1477296167676021, 0.15019932206781772, 0.23230681111081086, 0.15005701132744087, 0.1218426995136328, 0.0956573089624988, 0.14876901635999817, 0.14426327237045733, 0.11287455600048724, 0.17392592896800108, 0.15094081146210414, 0.15162603864089275, 0.1889965956882298, 0.15784479041503452, 0.2624979585641467, 0.18185788578994033, 0.1676068115818221, 0.15330058216709763, 0.21389990299450112, 0.17972148203620908, 0.15314124454318534, 9.999999999998899e-05, 9.999999999998899e-05, 0.007597168724104764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02446478509853589, 0.06512275259082212, 0.11403555783401975, 0.07025508512752876, 0.06629318744858681, 0.06083540167935775, 0.012096661312463897, 0.144874487189536, 0.06286642397848552, 0.03974479159693678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07564972634976053, 0.09680708368891777, 0.12272382373156232, 0.060555002562632576, 0.03847733456148539, 0.047093840842692414, 0.11837982331253916, 0.09411943946848766, 0.07812181628166615, 0.4314973867144204, 0.4168692102127659, 0.41324689559767125, 0.4264876187414465, 0.4092491245587905, 0.39408232070074123, 0.4179507266405551, 0.4389491925135266, 0.437248165631543, 0.03450894942736382, 0.05311091118392286, 0.02338835917547144, 0.029227469749512403, 0.03467772911173728, 0.07776729380614855, 0.08544745969672585, 0.048451512170082034, 0.08022845575589732, 0.15967782700341016, 0.26782002188710163, 0.2600473270531716, 0.2868095624954292, 0.3053990412147045, 0.18561626698974043, 0.2927152470896339, 0.17732878327740742, 0.29873865159480906, 0.15567321317215177, 0.1588618766831974, 0.17826903375612746, 0.20977778765058663, 0.20925004949793025, 0.17739858685348586, 0.140935890047447, 0.30640341346002176, 0.10910466773260796, 0.08464090571608862, 0.08723462582269148, 0.14509237908314276, 0.17243827014086088, 0.16583136891732742, 0.1745006181837433, 0.07474292105720037, 0.21020099592312558, 0.05127879462659135, 0.21398408810573344, 0.2661297881861494, 0.240185166417762, 0.21401685636568346, 0.2251349727119748, 0.2024153157340267, 0.2355260516418678, 0.19495822496152182, 0.23700646998303632, 0.1794769558979704, 0.1899062107886894, 0.1916491525804197, 0.1703137700244941, 0.20049658952706706, 0.17691798092762223, 0.1750011699937315, 0.18140257737755505, 0.15942012715846943, 0.12635414845318405, 0.12724604027251685, 0.15247285880882278, 0.662944902296829, 0.20129036930918642, 0.19874350827288723, 0.099848128096785, 0.16853193111707365, 0.1767734560462948, 0.5438849459425346, 0.2004736301373562, 0.4125518538145043, 0.40507135606940814, 0.1613853291979529, 0.19372131215649402, 0.16243697379822064, 0.41145847742592856, 0.24253177355807265, 0.18850202216476142, 0.17404021209356813, 0.17433520054389062, 0.1979536830101677, 0.17884652208315077, 0.17027717261799102, 0.18526655562003425, 0.18631472684277728, 0.20737964241426565, 0.10028833622021427, 0.08426109692044703, 0.06596708873673174, 0.07655798039688766, 0.09175902960710314, 0.055759962179125266, 0.06499339945783889, 0.06306263616199448, 0.06926328663456094]}, "mutation_prompt": null}
{"id": "29fea6ab-2f15-47ea-b74c-3bfba3641213", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "167b83d8-49bb-4ead-b71f-547a87e6e95c", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "1d741a34-c651-49ae-88c5-99bf710162b7", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "8355c6cc-c5f9-4e13-9494-8b317cd2a3ab", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "498acdb4-6db5-407f-bd01-f0a2dc2d631f", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.12, size=self.dim)  # Slightly reduced mutation range\n        elif strategy == 1:\n            return x + np.random.uniform(-0.1, 0.1, size=self.dim)  # Narrowed uniform mutation range\n        else:\n            scale = np.random.uniform(0.7, 1.3)  # Adjusted scale range closer to 1\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Slightly adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Random selection maintained\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "EnhancedDynamicMultiStrategyEA with refined strategy adaptation and optimized mutation dynamics.", "configspace": "", "generation": 30, "fitness": 0.18534997270820736, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.4660427823253833, 0.4545575535289288, 0.5389403186703617, 0.515661367041405, 0.4387713103329204, 0.4456123455472236, 0.4563529715193958, 0.4638631496648915, 0.46274400755484313, 0.07708699989781198, 0.013587588285052687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02465126293177855, 0.04009376954450894, 0.029957494333912482, 0.043569047502700076, 0.06361303261504203, 0.05426186046932635, 0.06153704075041333, 0.05583207532634005, 0.10468399836891729, 0.02231334592962919, 0.0208640711806094, 0.02783688804660911, 0.08409243665445776, 0.04087696821971476, 9.999999999998899e-05, 0.054892060619580074, 0.01840294376966689, 0.01366798868428687, 0.785536314748252, 0.4404688943546835, 0.9276847073462261, 0.10086275249722276, 0.549832935252557, 0.6501355743379866, 0.7769539000786414, 0.70071332024859, 0.828128978470398, 0.29145389753064865, 0.2407053844871434, 0.265919065664448, 0.3057280537897662, 0.2514166602034208, 0.31191113779973956, 0.2838089369806298, 0.26017822732139906, 0.2039722078141667, 0.5509682756455498, 0.45479863112500485, 0.13248251667467015, 0.19533581033662428, 0.22926989514988905, 0.17452474188796185, 0.1306712380670797, 0.12948688745457493, 0.23805807131229717, 0.1699613775157386, 0.20714970015045098, 0.09980226789964453, 0.15789613869192654, 0.15773308042978296, 0.05011403454871777, 0.1764929098064395, 0.09969768783699706, 0.12886366048167952, 0.09898020332326884, 0.14325291910708038, 0.13573388577949097, 0.19659421468781468, 0.12636767672946736, 0.14517770502698624, 0.22521200982642653, 0.08857920012540621, 0.14908906173290615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012807702863397163, 0.00408166462509163, 0.002177482147458054, 0.000514043530535857, 9.999999999998899e-05, 0.0319617314962134, 0.07631388076916934, 0.06048461423690732, 0.10134199674419997, 0.06477352412547355, 0.017678047697247012, 0.016649839329201166, 0.1382226689187126, 0.059458598739533075, 0.0404309365113833, 0.0003016567658936653, 0.0004245117376862062, 9.999999999998899e-05, 0.002832423032820608, 0.0012172501017790882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11717920402165327, 0.10603689445476994, 0.14038271100342758, 0.10920135063049075, 0.05343350642881539, 0.020532446179008512, 0.14411978611677367, 0.10530730352984208, 0.08871527956393566, 0.45350883858576574, 0.40088147511945915, 0.46253830964026754, 0.4456443194003388, 0.3827048956234338, 0.41947040915637823, 0.43878004405936255, 0.41834263605330024, 0.4223825211459047, 0.029992535753884164, 0.0413509662871816, 0.015722034197004686, 0.038955884584431444, 0.06473030712550498, 0.06362897148530666, 0.03672368793149672, 0.0355874845172901, 0.0699573251587291, 0.2232684358711492, 0.240941478756461, 0.29226997706905655, 0.31833194853595825, 0.314756050230522, 0.20251106481214975, 0.3212473125502432, 0.13370376949986162, 0.14366392110322546, 0.15896364403011265, 0.14668515758076794, 0.2030071128375227, 0.14852429593668426, 0.17833540856061658, 0.1809036373730739, 0.14635459808240958, 0.2793987555535655, 0.10726977424112372, 0.08085644698704397, 0.15246271786684507, 0.168865648417709, 0.10017635763990496, 0.1664207814597356, 0.1674356943223082, 0.08602019351347989, 0.2317073214146348, 0.051215633090595625, 0.20553822421470924, 0.26367796190883264, 0.19931674791147114, 0.20341873130637556, 0.2068206117783138, 0.18379794175987296, 0.20123243698248539, 0.1824428991325322, 0.18662099902527907, 0.16377299384265065, 0.20728520469322043, 0.1926636889246287, 0.2097288695661963, 0.17512614738917742, 0.1895280633505757, 0.1731216295101594, 0.1943502107611511, 0.15801373415958297, 0.10486947352777365, 0.12706723310936197, 0.15363086875515453, 0.7595340154302713, 0.2013673246323906, 0.7355468989460074, 0.1476808806530142, 0.1681225747877303, 0.17687274042278311, 0.08161092673947368, 0.6640542816699826, 0.5632684225114335, 0.3755965941573647, 0.1611887610755286, 0.2031209176582991, 0.10462473741300493, 0.4077799467734402, 0.2559477639140586, 0.178651064076765, 0.18307924512859297, 0.19001641322131702, 0.20239323956448596, 0.17981056063907186, 0.1981087607857971, 0.21768218927349758, 0.18080197477327442, 0.20691664428988887, 0.0940751884459502, 0.07161281998014479, 0.06316946445874816, 0.07290495729525193, 0.08092855810768218, 0.0720245774258167, 0.06219372666162404, 0.05595101062853369, 0.0703799837633291]}, "mutation_prompt": null}
{"id": "92b462ab-facc-4bff-a291-31dbb06cbf2a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "89f031ea-bd69-436c-b29d-d621b2f7c001", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "a3a017a9-8ed1-43d3-a0e3-b16d36ae58a7", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "61369565-f0e2-4597-8465-c0d719b971a9", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.1, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.1, 0.1, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.7, 1.3)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population_size = min(self.population_size, self.budget // 5)  # Adaptive population size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(population_size):\n                parent_index = np.random.choice(population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation range and adaptive population size.", "configspace": "", "generation": 34, "fitness": 0.1733143359024771, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.4553114031986669, 0.4654015306214193, 0.47843847469907075, 0.46163931860045937, 0.4267267032845907, 0.44152223464972407, 0.44205777485846776, 0.5171528013538469, 0.4980171467724518, 0.04521637730223105, 0.0007766561933051364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039112284054195645, 0.047749449752885975, 0.02053445482633054, 0.07816575343855181, 0.0448010646617244, 0.05292740725693135, 0.04394990017896183, 0.05485689400811955, 0.06974958716479718, 0.01985855162307837, 0.01799968047532441, 0.015506594112372096, 0.08320933083044146, 0.04329153202996838, 0.007888095635118053, 0.06598974719414585, 0.0177645946729319, 0.0067957440399813995, 0.7438799494211588, 0.5249474788374746, 0.8649749864607856, 0.2766906822898507, 0.6666912272799483, 0.5819965353655607, 0.795717907289395, 0.5938554466890127, 0.7414459215067002, 0.2931140021835079, 0.28271886803425017, 0.26607787060261967, 0.33434432843490325, 0.26578856846877374, 0.3113347029964805, 0.30984414136168104, 0.2497648288144494, 0.1789560774157839, 0.22736121065746173, 0.15722703439217, 0.11211983088340216, 0.1615525734613551, 0.13503846297898048, 0.15585801983255188, 0.1441327639223653, 0.12890681637511514, 0.17935746527082208, 0.16171539331502804, 0.1220052203328219, 0.10919615241319458, 0.10120902648316044, 0.17873183231625467, 0.04309482458251346, 0.15581759372711035, 0.12411709827980844, 0.12863913202946387, 0.12679084835668342, 0.1372218557544327, 0.13794379502965115, 0.1364108756300606, 0.07729855509543337, 0.15781161811013045, 0.21137247727160835, 0.09783958258904912, 0.15133337481916265, 9.999999999998899e-05, 9.999999999998899e-05, 0.003241602917862796, 0.017575758202957315, 0.02681785017992333, 0.00047611368903088813, 9.999999999998899e-05, 9.999999999998899e-05, 0.010611740835124284, 0.07483875115886951, 0.10129162492228372, 0.10900147753955758, 0.06292429331412808, 0.01898336651894572, 0.025899709237312885, 0.061527488337181024, 0.05721861228478231, 0.03885437924903312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014080532660329936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09801320348641496, 0.09055298817302115, 0.11924706864883428, 0.10297242292640385, 0.029431876292735804, 0.015488215060239563, 0.12441595299941532, 0.06771110419262494, 0.07426434363218481, 0.4267963377813113, 0.4636952203478131, 0.43406316764975805, 0.4154113915370513, 0.421693522407811, 0.4044120659443231, 0.44425620641019536, 0.4194951313328392, 0.4424746293539884, 0.031754657878107495, 0.015595266578666611, 0.03197665636134439, 0.039885803183323354, 0.03269159741589611, 0.06843342383686035, 0.037239978144664176, 0.03487050118121948, 0.0792047026542676, 0.21921505974464794, 0.2909605233722845, 0.1639370491218639, 0.3149834774561493, 0.3534334622206359, 0.2770067917438547, 0.33904048048058144, 0.13149554056349733, 0.2702274959684412, 0.15754835066394512, 0.13284305313444822, 0.17178298487936228, 0.14578788949924615, 0.13676467563652606, 0.17312190352762225, 0.14314966632952586, 0.245985379529587, 0.10964105057073903, 0.07177764886936222, 0.128702047158317, 0.15618602577790897, 0.08685450925925031, 0.1656107783660622, 0.142825189898931, 0.07829335917372937, 0.214076234154992, 0.05253699784039256, 0.18400674014997076, 0.218179538031681, 0.21889983842239613, 0.20038053966108882, 0.21462431913451996, 0.1927207908397155, 0.21594790091620475, 0.2171232829094758, 0.22161155655032228, 0.17271403346772018, 0.1719388127516862, 0.1880199274441875, 0.17366447725177203, 0.18110889003690023, 0.16070067465101223, 0.1598731612170372, 0.1729216560865685, 0.17419126564085508, 0.12632124189725413, 0.1272571972293428, 0.15282372786342202, 0.7158495582108801, 0.20098438322875234, 0.19814286240503776, 0.09969416315132018, 0.16812693791464572, 0.17578580608629923, 0.08200711787105341, 0.1984233949704628, 0.43965176115607174, 0.39115215465345565, 0.16365070604080034, 0.2008539858488413, 0.10429965434988075, 0.39230853730228954, 0.26500871661701064, 0.18062897018058444, 0.1822740839770569, 0.17735386126342878, 0.20354636287272587, 0.20128505314912026, 0.1981514391570992, 0.18014233477434227, 0.17804088121919326, 0.19944818944271658, 0.09299375845121927, 0.06281314660053428, 0.07108315227605522, 0.0762461863200069, 0.09251556772686076, 0.0574984971262853, 0.06303283120817427, 0.05726553000681467, 0.0635434703644363]}, "mutation_prompt": null}
{"id": "1d269142-03af-4d1b-a53f-b89c24106f30", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "27617b27-995f-4492-b4b5-461de3788b42", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "5f7329ec-2aca-401d-8161-a5175146c2c7", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "38f9a72d-fb01-4805-b1ac-d2f289d7ed05", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "36f39a50-e9aa-4282-a744-314dc2395abd", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "f6daca73-ad82-4309-903e-893e480ac800", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Adjusted mutation\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Adjusted mutation\n        else:\n            scale = np.random.uniform(0.6, 1.4)  # Adjusted scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.9 * (success_counts / total) + 0.1 * self.strategy_weights  # Added smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)  # Changed random selection method\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced DynamicMultiStrategyEA with optimized mutation scaling and refined strategy adaptation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.46697339903072976, 0.4403844365764268, 0.4338202499556655, 0.4594408847999685, 0.43553526498934203, 0.43323900264415693, 0.43126283095013673, 0.430198028482111, 0.43519116160820437, 0.06334245978939179, 0.006751754967968537, 0.06545529925733595, 9.999999999998899e-05, 0.001354162638762535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725463756250724, 0.04809346230236111, 0.07604875021678503, 0.07409836092428723, 0.052827092598556, 0.06831504841778802, 0.04794387905573949, 0.04286280117426755, 0.09913944085000981, 0.042076474718317325, 0.029036747283301856, 0.028836473435853938, 0.08893037971709705, 0.04709473746130621, 0.029869574658665132, 0.06446290414925149, 0.04666040506996183, 0.023833379669716104, 0.7917912958253811, 0.6549805522535779, 0.8800388704268655, 0.12357962854466331, 0.7702017026796029, 0.9635522897700832, 0.8017430764097099, 0.6776591279837043, 0.37073168022058134, 0.3067039189629839, 0.31799546543104296, 0.2568047753218574, 0.29700069787951755, 0.25969557401088106, 0.2827649671377508, 0.292530498797708, 0.2683976441090036, 0.2585553965805115, 0.43570166023085044, 0.16729198140874357, 0.18999420146659085, 0.17012989986312388, 0.1996798108242941, 0.1485406780578129, 0.14820079327882119, 0.15137144610153352, 0.23319776812413662, 0.15274843550271378, 0.17148323298707624, 0.10243791418874792, 0.11895580951699469, 0.15741319303010226, 0.0930524901359342, 0.1751233816534159, 0.13092502716991616, 0.14933217533507614, 0.14767111052412818, 0.19303470715154614, 0.16137515366982302, 0.17518488686989153, 0.19671729854805908, 0.16580335707459126, 0.20606005675772998, 0.16664798957662896, 0.16064353385555952, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010401987184960326, 0.030393615777116634, 0.0025075865945470843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360101044991115, 0.07591989861014137, 0.09982022269780899, 0.10439877936685882, 0.06112655310093795, 0.01363677824985099, 0.014425161731241531, 0.15577981105872818, 0.05916118448113106, 0.039729971681175424, 9.999999999998899e-05, 0.002076192054794257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08619582811848081, 0.10215264154693449, 0.11938419613315399, 0.04747894473813363, 0.05409645396473384, 0.03528637697925807, 0.11660181108367562, 0.05948120904818477, 0.07934152924525262, 0.43233660503325755, 0.4162192937693937, 0.41334284192361703, 0.39671544765455924, 0.3878896554130803, 0.4064376467470121, 0.4357290239886199, 0.42118784215177785, 0.42676224701291143, 0.04108403264257299, 0.046040098581626276, 0.02592711391699143, 0.038714709360541555, 0.04918502918506562, 0.06984915668133362, 0.08689378906348377, 0.02812329618575038, 0.080111222406969, 0.2784504374866721, 0.28330545534519935, 0.1779091504997632, 0.27261260385900754, 0.30727155139157847, 0.20808621211056288, 0.29465119153468833, 0.13462383260410749, 0.24947038982893832, 0.15385050538588585, 0.3284407594147376, 0.16804762651462557, 0.15839146515145153, 0.22539167645245672, 0.18681626449062172, 0.14420119825468614, 0.3049324280906991, 0.1329238098572174, 0.0809100340709702, 0.07522437830839301, 0.15904005729726722, 0.18082174512096827, 0.16909819527099013, 0.16216397302380925, 0.09024278998235169, 0.24686250645481955, 0.05919863748413701, 0.23131115372358002, 0.2384107549562331, 0.22941318339861527, 0.1999907468178208, 0.2605077705834492, 0.19417253179297123, 0.1967833004981402, 0.19895566481717253, 0.1954311961202636, 0.18555936317173394, 0.17744332649248806, 0.20715742357319555, 0.19876782434679086, 0.1783351634973982, 0.18505735215323038, 0.1880649457231699, 0.20492198327343014, 0.1652174887166713, 0.12582743547348907, 0.12728849029890987, 0.152816768212516, 0.6284204302899918, 0.2015228816080219, 0.6396305591736198, 0.14772710327119332, 0.1694103331582677, 0.17676341037078946, 0.3025297942385956, 0.49096699191484305, 0.46861797641780345, 0.50292513767271, 0.16522254247769375, 0.4655837990600932, 0.10467391780554969, 0.3703912318503165, 0.24640483902765953, 0.19138845520620706, 0.1859725540890952, 0.19229761211731045, 0.1883014959871655, 0.18554237053083866, 0.1814267933922642, 0.17800482147456065, 0.1911862782317989, 0.1921919420725675, 0.057598723960988196, 0.072189000874325, 0.06865692656820888, 0.07299509168453022, 0.08261401700985971, 0.0738589771556446, 0.06535302096319251, 0.06398434086124394, 0.06166223565470175]}, "mutation_prompt": null}
{"id": "8374d284-18b4-4895-b3e0-80f493d43db8", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.1, size=self.dim)  # Adjusted mutation rate\n        elif strategy == 1:\n            return x + np.random.uniform(-0.1, 0.1, size=self.dim)  # Adjusted mutation rate\n        else:\n            scale = np.random.uniform(0.8, 1.2)  # Narrowed scale range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.randint(self.population_size)  # Changed selection to randint\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Refined DynamicMultiStrategyEA with enhanced strategy selection and adaptive mutation scaling.", "configspace": "", "generation": 41, "fitness": 0.17293466749547884, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.4488631439125952, 0.4540183459136752, 0.4940048163097601, 0.4798513695476283, 0.4197114152925955, 0.47720896826010895, 0.4570738106130594, 0.46125974636203615, 0.45336003539052483, 0.015158015530215563, 0.01100850074550741, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002526553374451179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024599298154332816, 0.04929506232510361, 0.08182327104848586, 0.0337567630206177, 0.05892224460394668, 0.05406613869785215, 0.03950914211689838, 0.043620727664553494, 0.06886333726432892, 0.019909735875131118, 0.014719610264202099, 0.015590723251593386, 0.06952914098670626, 0.047951085449827624, 0.00908677603333563, 0.041921677238666244, 0.016040917797770837, 0.00111995972785206, 0.7198854764373075, 0.48808594825624874, 0.8644846766633425, 0.10052379914636911, 0.7662221917732404, 0.5799605419470021, 0.8306930942581592, 0.36457682199292885, 0.8429927393648565, 0.30389709433428413, 0.29498121265545263, 0.2764843106069709, 0.3151348556637301, 0.26618136958249883, 0.32152827624182645, 0.3278953423337494, 0.24250684589369886, 0.21042812694722335, 0.6527614585898582, 0.1656189736127488, 0.1277149539659358, 0.0858292660315989, 0.11260343657247829, 0.08843215151745787, 0.1454657830771373, 0.14908285544776922, 0.17682736007331146, 0.15420904672792113, 0.10853807518499703, 0.1137355121788387, 0.15097424322553998, 0.1429348016088019, 9.999999999998899e-05, 0.1769528245143398, 0.14036429829895936, 0.141583101720265, 0.18365714002259537, 0.08301804325655882, 0.11565270429939467, 0.18075557503270412, 0.054532797959157664, 0.14692780619804524, 0.2017010514866725, 0.04830411348795083, 0.149538102381086, 9.999999999998899e-05, 9.999999999998899e-05, 0.00947889433534188, 0.034324994151430976, 0.002523359468657338, 9.999999999998899e-05, 9.999999999998899e-05, 0.004059341986040854, 0.013017490179527913, 0.07327418400728403, 0.06524649063954735, 0.0934947869151791, 0.06851562131635514, 0.00076342583572786, 0.016164394116751968, 0.05937325647222169, 0.05595199728013922, 0.0385437382000009, 9.999999999998899e-05, 0.01753972775173207, 9.999999999998899e-05, 0.002972495956927057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003684411522066111, 9.999999999998899e-05, 0.07953931421788651, 0.056765761656732305, 0.1440562913728769, 0.07326977265368517, 0.03776815314729376, 0.020239395676327154, 0.130852289106137, 0.06518190235639054, 0.07952463127083742, 0.4420982567105439, 0.40634246844864796, 0.4285099189457896, 0.40027913282242156, 0.38000276711694636, 0.3912248590568371, 0.4439656127054009, 0.4127283210630358, 0.4323161274210253, 0.03164168655459232, 0.01832141817968591, 0.013378046490605255, 0.023204947074631166, 0.03826710406449474, 0.06406679304904883, 0.03698352153227957, 0.033670702536158004, 0.08142876197749682, 0.13368325622833976, 0.23740612267163197, 0.19065680034856047, 0.3438060368995557, 0.31220237685609464, 0.18316354679870028, 0.3064167755730355, 0.17435334587165507, 0.29356612238091706, 0.15586096947287698, 0.15163797119050082, 0.17185438746763027, 0.14884235824067216, 0.14851044056618234, 0.14052290550704616, 0.14451312426214824, 0.21289654070811515, 0.10810822543858556, 0.07506179200591756, 0.13757067356660957, 0.16696870054582902, 0.15168983958169158, 0.09631330029697438, 0.1475752115165666, 0.0728678506232372, 0.19349900147389976, 0.05277391458602598, 0.2207743606240139, 0.20661222729605289, 0.2007379122974119, 0.2081414087398975, 0.17439565909958998, 0.1867164299906473, 0.18638770333476462, 0.17458547576564853, 0.1860712124436662, 0.1560779522057164, 0.20548936768285708, 0.1911860631900758, 0.17840378712088967, 0.17173093709212028, 0.1988891657507118, 0.1841753466089514, 0.17261392228008188, 0.17251024485962463, 0.1258689395831487, 0.127284296858308, 0.15319194190350904, 0.6778234523933693, 0.20026004827509136, 0.7544814565205253, 0.14677866005991147, 0.16876388647217333, 0.17586771864139794, 0.08070893580276084, 0.371059651052972, 0.4945915370138192, 0.10393893475386662, 0.16070150325014132, 0.20097046649537664, 0.10441854834009101, 0.3683915849455843, 0.2397379706969518, 0.19201223999598727, 0.19763089540847079, 0.18932103282779067, 0.19079885214956027, 0.17589098035167094, 0.18116673159937313, 0.2097741575579215, 0.19328745499087863, 0.21617140889074626, 0.1016043043296988, 0.06338749456778348, 0.06622856088936746, 0.06676085000567522, 0.08478850545284389, 0.05419834293394166, 0.0641927655336243, 0.05692131373790321, 0.06456078502935902]}, "mutation_prompt": null}
{"id": "4f8e447a-4ae4-4f07-8691-9bba620b870d", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.14, size=self.dim)  # Adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.16, 0.16, size=self.dim)  # Adjusted mutation range\n        else:\n            scale = np.random.uniform(0.65, 1.35)  # Adjusted scaling range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Altered smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Improved adaptive strategy selection for robustness in multi-modal landscapes.", "configspace": "", "generation": 42, "fitness": 0.1896485089771875, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "d1a87c76-4d81-4c47-8962-2c5374a250ce", "metadata": {"aucs": [0.4410217110814406, 0.43643335492567437, 0.4554031817385177, 0.4440936831429051, 0.42826917016961996, 0.443656557390536, 0.42387359022063475, 0.4136184086359239, 0.41157263277984724, 0.08367479670184874, 0.019046995230494246, 0.03656562220824, 0.008730492503939424, 0.0011139982987998787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038386506680242904, 0.054753929810130275, 0.07343586348993669, 0.07362168863317542, 0.043174114059999935, 0.059886975944726695, 0.04472213642803924, 0.056580007456635384, 0.06612960743399199, 0.045304295521600535, 0.034593026965486384, 0.04081039647702778, 0.0810695585509531, 0.07477191335326339, 0.02775913970846522, 0.07102105212292953, 0.05442545728082682, 0.026273257934875227, 0.7833580728278348, 0.6144766263951073, 0.9338387450455299, 0.30688627580745254, 0.7671743735905402, 0.9630188774020947, 0.783126050842181, 0.6790707950155646, 0.8487532116572822, 0.27996696744906135, 0.2879859017313161, 0.2877137916591789, 0.32144684416887226, 0.2707330236558432, 0.28582656197818, 0.2937496646075539, 0.2573689717368154, 0.21190022148607135, 0.6474809875293932, 0.22240152781760503, 0.14023787436118595, 0.18251539732895028, 0.18752786741849747, 0.19388741661917852, 0.14441426214903152, 0.15034827689847985, 0.23498004037603681, 0.1375710581509002, 0.14533385814755106, 0.10681039294141625, 0.11340836646222907, 0.16074046217531235, 0.08894988382894131, 0.16119535651292938, 0.120562707234936, 0.14771582932313887, 0.13264222376757695, 0.15302118184795277, 0.12148979519259351, 0.1695902101489073, 0.22074138629641216, 0.13976008562029818, 0.20144763746237726, 0.019169672372152724, 0.14345273244264134, 9.999999999998899e-05, 9.999999999998899e-05, 0.013821532142672899, 0.01281079535237517, 0.005577644297666162, 0.004625003806875583, 9.999999999998899e-05, 9.999999999998899e-05, 0.0173578721936426, 0.07800410280152414, 0.05380311670308746, 0.08290447143839652, 0.06531640733625355, 9.999999999998899e-05, 0.01250822053471512, 0.14272345297140676, 0.05950733048744372, 0.03956713993358407, 9.999999999998899e-05, 9.999999999998899e-05, 0.006187789874274263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08851957607498806, 0.07317141538315342, 0.10852387916930073, 0.08287604422769712, 0.049810660631943615, 0.04733769047252867, 0.13160992476076794, 0.10596523149096337, 0.08763151128597324, 0.439695928979671, 0.4136448581072474, 0.42358771665102846, 0.3733216386343442, 0.39429779575530133, 0.4032811557880772, 0.4178698653338695, 0.4456653133547678, 0.41879196447035705, 0.03602511495316085, 0.04688112673409783, 0.04006493258450139, 0.047113161129868186, 0.05185570216341184, 0.0834176685701874, 0.0986430253884788, 0.043400113716662636, 0.07938407315965157, 0.20893923855815788, 0.27838897417743225, 0.2883870342800089, 0.29001236676745934, 0.3039926201109411, 0.24186617678063915, 0.3002713103125976, 0.19076090702288306, 0.24853105452954183, 0.1561187975020082, 0.2848367834012653, 0.19829802984267964, 0.1573843692124306, 0.1890524263746861, 0.1907289078093024, 0.1438745636798301, 0.2894533968034928, 0.11653119764695163, 0.08071673845260319, 0.08392152633017591, 0.1740307455188036, 0.14097768606974737, 0.16581849875008337, 0.2203103601530414, 0.0814650404282331, 0.21017433901659455, 0.05091050715819534, 0.20787408509142158, 0.2171077748606819, 0.21855728610460845, 0.22152150466212284, 0.21364291491109966, 0.19099346802239292, 0.20694435575961156, 0.17585031994112887, 0.18964339842733047, 0.19411840382655843, 0.20477359539300155, 0.20758720750133874, 0.18166638472054952, 0.1970532156949496, 0.18929813027616815, 0.18228291323408152, 0.20054455180689412, 0.16486592671947742, 0.10499513880067302, 0.1273570375060986, 0.6849903543925215, 0.653754209404588, 0.2010290428066932, 0.6566731481881345, 0.14798402007952027, 0.16956052679045353, 0.1755438483783912, 0.08203507030957935, 0.2052770899985309, 0.5412651270958581, 0.4886035151376025, 0.1481510940898637, 0.15241287916725454, 0.10467281233968462, 0.4561409001329857, 0.2608107810534307, 0.17184647241130424, 0.1924240597572231, 0.18555874449115073, 0.1876846900549367, 0.18582127371524249, 0.1916775435967888, 0.19525850005490342, 0.18466737098307995, 0.186529361446384, 0.09970621531413204, 0.07030245743270425, 0.06408684532805387, 0.07692518302798379, 0.07389596825287514, 0.07071813053440434, 0.07104750272782256, 0.06163372418544055, 0.07657170723324636]}, "mutation_prompt": null}
{"id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 43, "fitness": 0.19072607409651535, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "4f8e447a-4ae4-4f07-8691-9bba620b870d", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "b0d5f1f3-5ad3-4f83-9c98-7dde77f96cff", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "8dad5d0d-cd89-4c96-b81b-0aafe517bc3b", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.12, size=self.dim)  # Reduced mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.12, 0.12, size=self.dim)  # Reduced mutation range\n        else:\n            scale = np.random.uniform(0.65, 1.25)  # Narrowed scaling range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.75 * (success_counts / total) + 0.25 * self.strategy_weights  # Adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Adaptive mutation scaling based on strategy success rates for improved optimization convergence.", "configspace": "", "generation": 45, "fitness": 0.18522918518879708, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4639964971243359, 0.45291670537203776, 0.4581446795400157, 0.47020898616192774, 0.41922648509444427, 0.4466236457839785, 0.4497473253839219, 0.4760299347989516, 0.44518099528567767, 0.06722490546179283, 9.999999999998899e-05, 0.04515977796902293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004278682778989795, 9.999999999998899e-05, 0.03325766636405736, 0.04968628742523706, 0.07453276275242693, 0.08746611466007603, 0.05376008012187161, 0.07021724736564194, 0.03920049855680119, 0.04449773946670521, 0.11316332222520398, 0.04095054832483469, 0.02776324152960641, 0.024190042990806293, 0.0836508350565619, 0.054489439219691516, 0.03140368720355613, 0.053445963060713475, 0.027379164555832225, 0.013461628151527627, 0.8015920139391335, 0.554045226328957, 0.8999112657776696, 0.09999910592378147, 0.5158494228753883, 0.6340019058498545, 0.8484690308475232, 0.5803201443640631, 0.7431280632340378, 0.26668939783405476, 0.24152831014979226, 0.265351304990609, 0.3137270524818071, 0.281341777334181, 0.3046539817498686, 0.3206434869062762, 0.27080517956000394, 0.26309754828902787, 0.22598533643909446, 0.4845697378356092, 0.1268972169865501, 0.18489957823711167, 0.1838167647675909, 0.14103056827710903, 0.15016708621276953, 0.14877100933903642, 0.24522020663519672, 0.20918307207009956, 0.1173973374319135, 0.08945825389711304, 0.16054216862311788, 0.17621517487211968, 0.06787332238705313, 0.16006157110909225, 0.1035536268151751, 0.13321718061457288, 0.1555750364968257, 0.1815158939994984, 0.19861612672699702, 0.2639114290785456, 0.21729921964611365, 0.20194982504996273, 0.19151751877532075, 0.12797135000426152, 0.15676726888272552, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011857593449294823, 0.005183170170455553, 0.00469925366516144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031145707251542087, 0.08536220781332593, 0.04940051045742422, 0.0884543217495728, 0.06917686362363817, 9.999999999998899e-05, 0.012509387963466567, 0.06766006649019218, 0.05720489991414657, 0.041371692785139524, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033265443200447553, 0.003788198073744198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006636620275117799, 0.06352653211660186, 0.10265471440413199, 0.11504943660633593, 0.09952745658006845, 0.048518318355090795, 0.01954361579288011, 0.12391934091203005, 0.10725016948344457, 0.08691211230226326, 0.46583874732398567, 0.42430855419044444, 0.43701079427802836, 0.4013756252099109, 0.3916453592825878, 0.37729683655725543, 0.4407911895981472, 0.46174406237354537, 0.43355986073992603, 0.04103505782536354, 0.014027267796467124, 0.016088486838886973, 0.05449117015005378, 0.06258525580304053, 0.07644443138342594, 0.07484581277490288, 0.0355294043959784, 0.08073542668704958, 0.19553124543476386, 0.21140925148625722, 0.26607358888061505, 0.302883464928948, 0.2279768684713649, 0.2955414373709394, 0.31152422248406775, 0.14624190647071955, 0.19322736317913913, 0.15940778775257403, 0.2433056410590816, 0.17444818426634534, 0.1501372777182034, 0.2200658760898414, 0.16607014348668914, 0.14356662794518793, 0.2629485854257415, 0.11133083735630822, 0.0793150542572586, 0.08311024386029198, 0.17097218956983673, 0.1155736791388865, 0.16701661402442314, 0.1376119784917229, 0.09997791617444962, 0.2109508218871322, 0.059094501461809834, 0.22881761372805232, 0.24900658198239567, 0.23143749483187936, 0.19605952983911967, 0.25500100678645143, 0.22256389336604598, 0.18733269506410566, 0.20282543630014105, 0.2311683639270693, 0.18751787308031376, 0.1990975748322672, 0.20899300220623807, 0.18894810438566056, 0.1750242347406813, 0.20384163721221193, 0.17325042116292444, 0.2058561700927214, 0.1632616119585515, 0.10480106253548949, 0.12700834187173626, 0.15372895228751837, 0.7125124562139475, 0.2012382119708248, 0.7277785791852786, 0.09980035239273055, 0.1695278803348521, 0.1767289404037461, 0.33672572690791225, 0.45906855088774956, 0.5033797489402927, 0.4301371838646524, 0.14632887072114154, 0.2024912779474073, 0.10451069526422196, 0.38941877829667637, 0.28400635008910535, 0.1920447042584088, 0.18101662851756228, 0.19577193235773616, 0.18545781752072654, 0.18173206094750016, 0.1775221127807457, 0.18730534176718738, 0.1872504053584645, 0.2064360692487166, 0.10174273450742544, 0.07071577844746402, 0.06105851512062288, 0.060184976957512126, 0.08984771508119871, 0.0730092623071179, 0.06861690330276493, 0.058056215478810014, 0.08149785219158834]}, "mutation_prompt": null}
{"id": "694235f8-ee7e-4fbb-bf54-4a5d82422613", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "da75e45f-e4bb-47f7-811c-8070b1126eca", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "8c9d558d-e52b-47b4-8a69-af81f448412a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "10e2035b-98e3-43c6-8177-cc5dc5235548", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "dac4ec8d-ebef-464d-b51d-453e25c60264", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "017c95cc-9175-4d3b-92bb-0bb0278f8038", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.13, size=self.dim)  # Slightly refined mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.13, 0.13, size=self.dim)  # Refined mutation range\n        else:\n            scale = np.random.uniform(0.65, 1.25)  # Refined scaling range for balanced exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.75 * (success_counts / total) + 0.25 * self.strategy_weights  # Slightly adjusted smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced strategy adaptation with refined mutation parameters for improved convergence.", "configspace": "", "generation": 51, "fitness": 0.1803839095426755, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.44584843655641804, 0.4534644242294592, 0.46462865617136717, 0.4619323011744303, 0.4211328443556511, 0.45139306612753305, 0.442251060491037, 0.4647773122213683, 0.459320651743382, 0.05029718516477766, 0.04001165321120348, 0.03507829666068174, 9.999999999998899e-05, 0.0007305165873155994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039227679005449656, 0.04876215428046704, 0.07420576083690389, 0.08534003629110609, 0.06905779354918051, 0.0685101001430729, 0.04299264104596001, 0.040094134057623854, 0.11065029758764489, 0.057269296710478756, 0.004536131072760186, 0.027125506597846294, 0.08714470489834325, 0.05415363951733432, 0.023733946519403748, 0.06883223227150648, 0.028062337438249818, 0.020792980129439087, 0.7837905567999616, 0.6568760909106559, 0.8646507798129259, 0.09981558633807086, 0.6575492850508105, 0.6201947527996517, 0.8010712672763315, 0.4884374829105673, 0.5414442617909958, 0.27998054789663784, 0.2422016936707525, 0.28643295431491445, 0.34644001910652256, 0.2889791170928995, 0.2844889247863396, 0.3030383556612015, 0.27211431243576845, 0.2566161666110023, 0.22363770934072735, 0.16700943488509823, 0.13035996330341804, 0.19643586130838198, 0.1935991903912666, 0.17040559366772667, 0.15130494742701872, 0.14326354241360417, 0.1794022732069399, 0.2521189198025733, 0.13278879385721487, 0.13299615848640278, 0.11271095253304853, 0.16949846553513248, 0.07827375723885799, 0.1872959817849742, 0.10124041563214159, 0.13950067694412138, 0.12056474572114928, 0.17867780757020135, 0.1408505123539826, 0.23413413840364217, 0.21746123010784235, 0.1518036477508946, 0.21567758104291046, 0.1290350680403246, 0.14452612678609256, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023675493848318574, 0.01301715973519424, 0.029600000610598753, 0.0007737292374484506, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027747979232479736, 0.07603644806528098, 0.05713162923122239, 0.09919566285212245, 0.06702089296099023, 9.999999999998899e-05, 0.016723649638186178, 0.06926658806239738, 0.05648219267309318, 0.04173411544146477, 9.999999999998899e-05, 0.003952660509056294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06765676613235005, 0.10287720345595386, 0.11468088721685255, 0.10152269220366128, 0.05558553170743874, 0.03995064932722692, 0.14060557823577513, 0.11153781439845556, 0.08368101236712244, 0.4423108875848776, 0.4135144895164482, 0.4560247984020853, 0.41717922921871176, 0.41274570873107674, 0.42299975423262504, 0.4270639855243229, 0.4301181752514903, 0.42270927451952933, 0.04141826633147461, 0.011659260741551769, 0.02283220584060741, 0.05318093217709863, 0.050370984825629406, 0.08471107736763206, 0.07353943007394415, 0.03760272104830242, 0.07941513021106161, 0.18928759748266988, 0.26064445389660595, 0.2857598302453044, 0.28378088726357265, 0.2877344084416005, 0.18608069929561932, 0.33217224199440976, 0.12958630869464927, 0.1238026127303481, 0.1565978429236824, 0.276379749091597, 0.1856161098048641, 0.18589971746277556, 0.20667137542184177, 0.17578925004905466, 0.1439798719624874, 0.22572761440047917, 0.13484757814898385, 0.0791564271783951, 0.08806415850129035, 0.1723991249260387, 0.15638971927547407, 0.16711518562374605, 0.1489894026038019, 0.08217621203586933, 0.21010237653530195, 0.07934221293508037, 0.24495268285298855, 0.24737829117431753, 0.21126316800742984, 0.19956462101197225, 0.22372635944573716, 0.2070532848013048, 0.2272589966352475, 0.20335599877878274, 0.18217541675128257, 0.17757315957687148, 0.17667216390026863, 0.18767138190442267, 0.18099453679063982, 0.17547846462382244, 0.2040092716647881, 0.17872966489439024, 0.19370310098924892, 0.15575680520565072, 0.12620590111589003, 0.12707631122456442, 0.1537657547227147, 0.6981493629933764, 0.20139955858574876, 0.6969236251531973, 0.14775507869223548, 0.16927430246376485, 0.1769208573603266, 0.0822926850024096, 0.20242270323740408, 0.5384693511147278, 0.40592746763998, 0.14705572586591265, 0.15103649852878898, 0.10462499663766434, 0.3897007335569691, 0.253834874350533, 0.18725247090356123, 0.1954281371336436, 0.20328737539580521, 0.204660697082927, 0.18617405622645533, 0.1969496990799775, 0.19202317659857637, 0.18538577089947283, 0.19528699516725345, 0.0951460128458802, 0.0766289913375916, 0.06528251131733942, 0.061740655979974135, 0.08349850929599001, 0.06267589932545803, 0.06791383101964532, 0.06161813561312679, 0.07443125384312699]}, "mutation_prompt": null}
{"id": "df1b1252-e53e-4249-aa07-a5a697f4239a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.14, size=self.dim)  # Adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.16, 0.16, size=self.dim)  # Adjusted mutation range\n        else:\n            scale = np.random.uniform(0.65, 1.25)  # Adjusted scaling range\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.75 * (success_counts / total) + 0.25 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced dynamic strategy adaptation with improved convergence sensitivity through nuanced parameter tuning.", "configspace": "", "generation": 52, "fitness": 0.18173814262813923, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.42834828586276386, 0.4511613469126806, 0.43675621088036465, 0.5283827113251154, 0.40954186606950604, 0.46898396941404785, 0.43452616605608363, 0.4251819311360554, 0.43442213447729705, 0.034769734081353976, 0.0035731350474232926, 0.019466496808437483, 9.999999999998899e-05, 0.0010799994634422827, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011790743803918868, 9.999999999998899e-05, 0.03974537997756411, 0.042656156666915024, 0.04942364481815564, 0.08607630701918056, 0.07475392549314852, 0.04825308212244239, 0.04566815256649537, 0.05033459298377052, 0.11257627616593069, 0.04745723270723923, 0.019009447678585145, 0.04352222308351228, 0.08447761934331843, 0.06362521356523143, 0.023458226775884383, 0.08663825589270968, 0.03519726064680673, 0.0232746971148039, 0.8136512068201117, 0.5274882265921657, 0.8716783399248699, 0.10745919578631746, 0.7197080853990889, 0.10127797796269855, 0.773552654018963, 0.5645704289036355, 0.7616329165078429, 0.2523333827077666, 0.2504125860908968, 0.29394147239492885, 0.306474654564563, 0.29721911607177376, 0.28662173387913437, 0.26905447477974176, 0.2642755010709461, 0.23350021696700562, 0.3636842688193249, 0.2225851300053575, 0.13851786368832286, 0.14086699657250124, 0.3310553191946314, 0.23044476444134565, 0.1510763711824813, 0.1506780398575409, 0.23601927003156287, 0.14611164715906344, 0.1353989301412949, 0.11571615871586038, 0.15256782504732924, 0.1839552474496421, 0.08421372313022735, 0.16038715815441063, 0.1719542186169365, 0.14697911356159987, 0.12499772388228303, 0.1719677825990964, 0.12082358074460753, 0.131598142335567, 0.16397735051320705, 0.20224983546828257, 0.19058798194784343, 0.1412412220703383, 0.1515715507023886, 0.0029708433827166925, 9.999999999998899e-05, 9.999999999998899e-05, 0.021419254100425444, 0.003351699892163218, 0.027548207947662884, 9.999999999998899e-05, 9.999999999998899e-05, 0.0443881805468338, 0.08377139441411241, 0.0552356318759466, 0.09624818222563858, 0.06878384161926865, 0.05340545464341506, 0.02579395210774149, 0.07105732671895204, 0.05566864345344913, 0.040210778727350904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0749376280507591, 0.10245388551432155, 0.12417609027298893, 0.08145379227761695, 0.061967058136815245, 0.035246553627002464, 0.12143219253020798, 0.12325463815411308, 0.08814917142772083, 0.4115255828261224, 0.40076514550257103, 0.4785038139784421, 0.4073413270676257, 0.3936509900837125, 0.3804532945115563, 0.4113721035384257, 0.437141072605143, 0.4130275676722135, 0.04146607921360901, 0.05129049746737946, 0.044014150594339996, 0.05762715538535834, 0.06354787197600797, 0.08648419064776958, 0.07769912247040811, 0.041654071905030676, 0.07024396562486868, 0.18378779796499345, 0.27141872313483095, 0.17235224062028665, 0.28394300101364855, 0.27491824442003787, 0.18714222375056022, 0.30698864833365147, 0.14302076296390354, 0.2692610358313705, 0.15546330338868886, 0.29218295927981175, 0.1836098350433224, 0.17624380496450232, 0.19255801139438666, 0.1830841667042321, 0.14316301341272897, 0.297006918443521, 0.12976583369502404, 0.08354147238848986, 0.2157712777340416, 0.17831761138589286, 0.13820667383085639, 0.16278598252863974, 0.16138025854268467, 0.13453568141869565, 0.25872539635135694, 0.08703427553250365, 0.27488837236058483, 0.23521825727314194, 0.2102077706334594, 0.21605804580344834, 0.21562838575189502, 0.1895672369882303, 0.22601626031924338, 0.2535417781807401, 0.19080289217699342, 0.19779475734039398, 0.1896613532065179, 0.1865900115998418, 0.20763721605061825, 0.17792388424484362, 0.1999032775520848, 0.18168327073421286, 0.16468621434013697, 0.15662463561064632, 0.12623365620313343, 0.1271343863329294, 0.18763383945806966, 0.661386384614532, 0.20153281663167022, 0.630513570017414, 0.14819145636156605, 0.16922913733274436, 0.17567998381466987, 0.08203571451360003, 0.20486968753376755, 0.5145701606278001, 0.41843354034082225, 0.1454016575051661, 0.2037594219329799, 0.1045069987543038, 0.3899939179958146, 0.2478439427564978, 0.19053417310538012, 0.20455780991712214, 0.2056441903805467, 0.17765173669290468, 0.20619128324842984, 0.18701258224631467, 0.18934393393465043, 0.19406737337359992, 0.19086829364694757, 0.09668884686440082, 0.07533822136953827, 0.06947411910185475, 0.06975882770739061, 0.10147411355894487, 0.06433934648239936, 0.07484110724384152, 0.059129025431797655, 0.0779593956172201]}, "mutation_prompt": null}
{"id": "2f724566-b6d7-4935-8271-cf13fb488ddb", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "dab14d2c-f7aa-4347-afc1-9de016a1d59e", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "754971a3-f828-4eb0-be3d-48e1b33a4079", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "b27f302d-bd9b-4cc2-bedf-0c1399fda7f1", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "c03a80e2-443c-4c49-b150-25fee61a4872", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "3f266098-bd8e-4b56-94b9-a98b1fed660a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "1bf7c2c0-fca5-45fa-b3b4-3b762abc384c", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "03e779a7-49f4-489f-86aa-f8e62cdd3366", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "f4f6d607-6bbe-4b27-a7ca-fc741aef4dfe", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "4a418751-4920-4840-800e-af65cc0cba1a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "7d70412c-5e35-4d86-b706-95de451c211e", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "9ff39517-2f6a-4f3e-bfd2-0f4fa981aec3", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "b81dbe03-892b-44a8-a85e-12d3c3d52ec1", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "15f6ab2f-e476-4fb7-a6ad-9a49d8a8ceef", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "efcc692b-1ba6-4b96-9f3d-5aeffd19c579", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "4cf79ea2-bf61-443e-8bc8-65e84d14af19", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "76899d00-36cf-49c9-bb05-00dfe9b7246b", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "9062d90a-f63a-4965-87d8-190a39e69726", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "a596337a-77d9-4a1a-807c-147f130a5cee", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.1, size=self.dim)  # Adjusted mutation variance for precision\n        elif strategy == 1:\n            return x + np.random.uniform(-0.1, 0.1, size=self.dim)  # Adjusted range for smaller perturbations\n        else:\n            scale = np.random.uniform(0.65, 1.25)  # Refinement in scaling for balanced exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Slightly modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Optimized hybrid strategy with refined dynamic scaling and mutation parameters for enhanced search efficiency.", "configspace": "", "generation": 71, "fitness": 0.1740561836316907, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.438680329325263, 0.5048147335237054, 0.4607249589371859, 0.4503091970585005, 0.43170550797640395, 0.454339025362514, 0.44488552500277323, 0.46540698068191566, 0.4342444950332125, 0.0386656162973088, 0.0036447617866744997, 0.00018220407634506053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018393133030336628, 9.999999999998899e-05, 0.0408769649262376, 0.04936658041929076, 0.07521991283048735, 0.02394324788227875, 0.07408386580439508, 0.06928216352328909, 0.038545166034351874, 0.04838518348224574, 0.06679174518210018, 0.04062522294255777, 0.015923766090398694, 0.029649886678110082, 0.06818393936297962, 0.02692065634439844, 0.009025479668331338, 0.055155994451870916, 0.01400571202562828, 0.001943351696595319, 0.6499996432335136, 0.45539724717889096, 0.9010069452814777, 0.10737271073848953, 0.767987536950038, 0.4826581005862306, 0.786848724582991, 0.48315803963216797, 0.7489870612832922, 0.26176828817287456, 0.28388890077330275, 0.27453830404930957, 0.3276300728165127, 0.2697393104792475, 0.3203089032991341, 0.2971161757241172, 0.25961619258449586, 0.19337537641742153, 0.19408707961445937, 0.1357455232410819, 0.13007274041758443, 0.12002325417107529, 0.1791461304106058, 0.1360226090497414, 0.1479860146994708, 0.1293623661859088, 0.17729844948573203, 0.11351202767917457, 0.11728763501698136, 0.09267063252656849, 0.10741609962184595, 0.17132461876212235, 0.048180107621560664, 0.15988587430746504, 0.12567751668284421, 0.1496439144325321, 0.1549947414935403, 0.23045265178811336, 0.17173826543981252, 0.1735851950763483, 0.14063946728032006, 0.21785211126044068, 0.2177722641175115, 0.2111710331297395, 0.1536148382752266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022959066874778333, 0.01026184344961334, 0.0028174825857261165, 9.999999999998899e-05, 9.999999999998899e-05, 0.041451658881710096, 0.05780661567636958, 0.054471130884795604, 0.10169152114294844, 0.02217104571678208, 0.016143967100841428, 0.014412430694373146, 0.06621701038630523, 0.05509858012723923, 0.039694015042076924, 0.008336095711017122, 0.0024442022456933055, 9.999999999998899e-05, 0.0028967657045659845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06376475116257241, 0.07519234045747669, 0.1272965070570401, 0.09455665611014719, 0.05726457989540412, 0.016828767481952167, 0.13530436153469405, 0.07108950821316207, 0.08174660429416325, 0.4395144868041141, 0.43599141221079996, 0.4559432362622976, 0.339087793834811, 0.38197978466833504, 0.43268920035781944, 0.42800382806595927, 0.4461221168991444, 0.41391305684742596, 0.03127605169062009, 0.01854253854034882, 0.0019299885485137835, 0.022988555103001684, 0.03597722218664712, 0.0691225349417568, 0.08295397100892132, 0.0322096275778333, 0.0819738772528712, 0.26021674233107894, 0.1689700661393041, 0.18128940468789456, 0.31073810654347467, 0.32129427539895716, 0.21309250956803205, 0.33693208436365973, 0.19108295586705248, 0.1913356564460984, 0.15625423623223, 0.13811629775931955, 0.18237080019104046, 0.1504851005924711, 0.19583582040698166, 0.18472673413901342, 0.14500716326020324, 0.2379759511662204, 0.12012243926642419, 0.08157703021365792, 0.06755569713001786, 0.16088759169470646, 0.09224301899664056, 0.16641461952245118, 0.15650793039593713, 0.07672062081053188, 0.20127204443465507, 0.05942783444607358, 0.23849396286603297, 0.20690240810985439, 0.2159091509553105, 0.21926909749453471, 0.23103321916350184, 0.2221148295433517, 0.18813886207206365, 0.2511465556446324, 0.20897024021189203, 0.18283454746921357, 0.17731941368953463, 0.18026831599834148, 0.18282842417638445, 0.1737796064935726, 0.18899914568140896, 0.1829016835955869, 0.1925425654269658, 0.15802563252147317, 0.10460223462947871, 0.1272137170349248, 0.18725155409983107, 0.6806590532902639, 0.20060697464448318, 0.7040731069654385, 0.09969256424054418, 0.16924077287854966, 0.17684514412586982, 0.08200690111300923, 0.20129900779503407, 0.4407453156749839, 0.10413915007353536, 0.14346671885917872, 0.4959982744980923, 0.10393316798089669, 0.39978183919913957, 0.2510741437371936, 0.18688507452137704, 0.18267716698077052, 0.18248363843680004, 0.18947207069807048, 0.200464587464384, 0.18403826193628925, 0.1815765009583532, 0.18416803721591501, 0.19617167147204384, 0.09799484385000556, 0.06825070517894982, 0.06252084095050736, 0.0645386670272281, 0.0867369766111118, 0.06106086566692537, 0.06137643051111441, 0.06477232289828294, 0.07037337556719281]}, "mutation_prompt": null}
{"id": "b47e9bf1-5c7e-43d6-95bd-69d7ae02f46f", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "110cbea0-278f-43c0-bd8b-721ea1fb1a53", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "d8a0c38b-500e-4305-a9a9-3804f32f1a2f", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "98f5a0dd-1186-4800-9014-2355fab91fce", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "2c0307af-f8b6-463f-9537-84e203ad36ab", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "c164b902-7500-450e-bea3-1debac933fda", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "fb2cea62-6dad-4115-9f3b-d47b7d527cef", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "99337ac0-a924-4aea-95cb-b6b07b7b48c4", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "3f2ab248-228d-4cbe-a514-623b3cd60146", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "b6f157a0-cc31-4222-99dc-f9a1026afdf0", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "b6df622d-d3dc-4ce9-8c58-a2b9133d8674", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "f85d97cd-8172-4dde-a56c-843e8f7704f5", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "a4bfc7b5-b537-44ea-941e-7cbc81ad031e", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "cc7e4033-b8e1-4819-abb8-c0fb39191724", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "59ac3f6a-5f49-430d-a475-84455e4a202a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "bf1dbb37-a052-4791-a41f-e33b4d46d237", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "600c2307-2bc2-4273-ba39-e5f0169bd8dd", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "4d03f6a2-0782-4f84-8cc5-42636406c069", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "24109944-9c93-4e4e-b116-c76f622159bb", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "d43921ea-f5c2-4212-bb14-76502fec44ae", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.success_memory = np.zeros(self.strategy_count)\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        feedback = self.success_memory / np.sum(self.success_memory + 1e-12)\n        adjusted_weights = 0.9 * self.strategy_weights + 0.1 * feedback\n        return np.random.choice(self.strategy_count, p=adjusted_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.14, size=self.dim)\n        elif strategy == 1:\n            return x + np.random.uniform(-0.14, 0.14, size=self.dim)\n        else:\n            scale = np.random.uniform(0.65, 1.25)\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.77 * (success_counts / total) + 0.23 * self.strategy_weights\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            self.success_memory = 0.9 * self.success_memory + 0.1 * success_counts\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Adaptive mutation with feedback loop for enhanced exploration and convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities do not sum to 1').", "error": "ValueError('probabilities do not sum to 1')", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {}, "mutation_prompt": null}
{"id": "7a3c340f-f8cd-4745-b42c-563b3f9b7daf", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "ebfdc5bf-877b-4df5-bc50-b49f6459c000", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "06df2e7a-7ea9-42de-bee8-346e09034056", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "d7bb5dcb-09a5-4e03-b4aa-5d9ea0bfa5e1", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "eda46b2d-ad73-4c10-9f76-74a986dd7317", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.14, size=self.dim)  # Slightly refined mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.14, 0.14, size=self.dim)  # Slightly refined mutation range\n        else:\n            scale = np.random.uniform(0.65, 1.25)  # Refined scaling range for enhanced exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.85 * (success_counts / total) + 0.15 * self.strategy_weights  # Tweaked smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Improved multi-strategy EA with enhanced mutation and dynamic adaptation for better exploration and convergence.", "configspace": "", "generation": 96, "fitness": 0.1821654288216825, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4418838972878415, 0.45264722573779737, 0.47516759980903667, 0.4611491372996239, 0.4295186628017962, 0.4566605428248477, 0.46149022711400534, 0.4402913917884721, 0.4104647172507696, 0.07509251870569567, 0.02135620860405596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039300359928646555, 0.043034416926071906, 0.07329751615177416, 0.052568731941028846, 0.05855011174252156, 0.06747840820776596, 0.061959513271143796, 0.03950686510587109, 0.11385822139537671, 0.06118266327983768, 0.04015522860400089, 0.03328679146957203, 0.0935039333694393, 0.07806108238856191, 0.03010152270700106, 0.06799353006227704, 0.03231193880502137, 0.021715905951429137, 0.7804161016425172, 0.49529158581470034, 0.9157006123299029, 0.10129326566526942, 0.7966996794919301, 0.3181754866718184, 0.8678929744303528, 0.6111804786302981, 0.7839999510593172, 0.2853283946412425, 0.2799301999837702, 0.28590920512556695, 0.30983090604227004, 0.28987102397386466, 0.28097683957378017, 0.2949176786744182, 0.25653856312859047, 0.23149542130816436, 0.5888030418875181, 0.13585231455874325, 0.16766113581969289, 0.31532100840070765, 0.30947303032463547, 0.19620492568567405, 0.17734229458344986, 0.14948624718505943, 0.23658041348646197, 0.1539499514227478, 0.07789579047171702, 0.08734400413849364, 0.14091897228972505, 0.15226230589670653, 0.07751934222075763, 0.15111573132656853, 0.13269262266823056, 0.1424404284479982, 0.14139068990175097, 0.17523555272345925, 0.14924281873629663, 0.20619562134335634, 0.14446769362019696, 0.14402908687658034, 0.18771711623365916, 0.13927310320470554, 0.15264022391065535, 9.999999999998899e-05, 9.999999999998899e-05, 0.006100998662496027, 0.006360961306318469, 0.0496751172113723, 0.003169230491689601, 0.00010063380831848434, 9.999999999998899e-05, 0.014839003182860355, 0.08308478872914604, 0.05101706696410857, 0.09464039614497, 0.025191005494314078, 0.01232356360597664, 0.022608693989975448, 0.1704507783307606, 0.06377466442588853, 0.04096159688484935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015898943435188606, 9.999999999998899e-05, 9.999999999998899e-05, 0.09701199835996954, 0.0854469471493341, 0.11716373297692717, 0.07253385548133517, 0.059769384866351305, 0.03294918005237235, 0.12811326556869607, 0.07282989461031919, 0.0889255649423798, 0.4449449193355476, 0.4048726796701674, 0.4327581308695936, 0.42128517531793575, 0.4162001659603407, 0.402285267479095, 0.43123690160864314, 0.4218927543257055, 0.4267220673539709, 0.031022657212873672, 0.033059029224149716, 0.033580313257126515, 0.05401051186339667, 0.043169172592251615, 0.08531431685534685, 0.08273567348693633, 0.044365287150659016, 0.07004362450834667, 0.18768810273511694, 0.17607455004957706, 0.2948052000531882, 0.29811961824853805, 0.29368247766323197, 0.23283491643439946, 0.27964577251953593, 0.1726768991959028, 0.26538755857324303, 0.16091179070042438, 0.13464967293007213, 0.19294236218297578, 0.18772708476113154, 0.19651211910679023, 0.18579175386034064, 0.14299420786932404, 0.2962547248427603, 0.1339596987053041, 0.08197800242011888, 0.07975621201232874, 0.15246215902338078, 0.1619941331071355, 0.16206510854241019, 0.16058921460332476, 0.08716837158336144, 0.25665596690895764, 0.09439666804687263, 0.21231389833579617, 0.20941305549009792, 0.21713006968612591, 0.24009407551916828, 0.23482787128826588, 0.19512057564188945, 0.20025261867107935, 0.2268862324457711, 0.20011313186473612, 0.17007499012687344, 0.17710776534398232, 0.1933518094462946, 0.1882104239460417, 0.18276070072148676, 0.186129184731897, 0.18441435190944644, 0.1904921810560929, 0.15724176487486696, 0.12608489107972987, 0.12731815933886115, 0.18734578483027065, 0.654696337513126, 0.2015684630297475, 0.6651592737407268, 0.09984842298396912, 0.16944861666334832, 0.17623850715058265, 0.08182797550229404, 0.20442556929123423, 0.4440073837969979, 0.10401992208242739, 0.16684198558264618, 0.20451548212916282, 0.10455302120398136, 0.42190081456769757, 0.30864039185332826, 0.20394213499787917, 0.18248281757373075, 0.18583847502073858, 0.1951395592594427, 0.1891721659497021, 0.1945307402569938, 0.1918669899473564, 0.20499536516491712, 0.18117984521145003, 0.10051245985361568, 0.07355390703531162, 0.07684228692428041, 0.07330336211012511, 0.0957779373998805, 0.07742610878411038, 0.07018589348996229, 0.058622876461022266, 0.07566698309133613]}, "mutation_prompt": null}
{"id": "5d7ab4cf-568c-4e42-b572-07a90c211ee9", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.14, size=self.dim)  # Adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.14, 0.14, size=self.dim)  # Adjusted mutation range\n        else:\n            scale = np.random.uniform(0.65, 1.25)  # Adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.82 * (success_counts / total) + 0.18 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Refined strategy blending with adaptive mutation scaling to enhance convergence.", "configspace": "", "generation": 97, "fitness": 0.18323679447295033, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4762463188845051, 0.49844869576197137, 0.44623441663692687, 0.4836131596144335, 0.4364930470784244, 0.450988508124614, 0.4414321317956136, 0.4450422696333669, 0.44228141436302715, 0.07942718515512548, 0.04597305357272785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041208640627169224, 0.05010288365775073, 0.07374238855172865, 0.08887810740771906, 0.0745508640863487, 0.06904200962020224, 0.04015631072003778, 0.0398115335275504, 0.11101402291236118, 0.04232768271427978, 0.004630090871723169, 0.02859588283714598, 0.08318705030384899, 0.05021084529947639, 0.02915161300795366, 0.08215945251898371, 0.01973346738385917, 0.01301908438511823, 0.8860424770800897, 0.6186307100719752, 0.8920300878087267, 0.10798006617429601, 0.766733829444234, 0.10149374265816369, 0.7955321024338793, 0.5648335495716706, 0.7758667109959598, 0.28878424044090856, 0.26979012966655747, 0.2868483517433542, 0.32160210447707605, 0.2980307920827543, 0.3119138596479448, 0.2862924115548926, 0.28906844853196245, 0.2067041153035486, 0.22657045289002287, 0.2256421380447141, 0.13167996792863956, 0.20312017561508033, 0.16117372742648928, 0.2365530502360096, 0.17690250956418108, 0.16138904444311353, 0.23587771539763724, 0.15308783977553553, 0.17448880519957688, 0.13650428801694647, 0.12598078714549554, 0.1532819867574311, 0.08211764538950661, 0.14696094023756978, 0.13406887367551934, 0.1500706197988666, 0.14689861910124347, 0.18414935236986374, 0.15073159705370964, 0.22086892243600398, 0.1361215346576231, 0.1420171259525601, 0.21153156670472073, 0.14216856383281828, 0.1483238628826653, 9.999999999998899e-05, 9.999999999998899e-05, 0.016940303134389212, 0.0146412585158463, 0.04631493853970847, 0.003457708666403825, 9.999999999998899e-05, 9.999999999998899e-05, 0.011674453653158001, 0.07810974905954682, 0.05271094998079717, 0.09671363225431706, 0.06749143501594279, 0.017105654675886428, 0.026269935157644086, 0.14301778241520702, 0.05582370504332845, 0.0418240398646369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10908571849220916, 0.12145979678358398, 0.13081555477037132, 0.07711008731828084, 0.05109401640467204, 0.029121394340365758, 0.11258473033826322, 0.10252228358778415, 0.0867760043494985, 0.4263018846609218, 0.40745306450339036, 0.42016736436091906, 0.4431187749415699, 0.3946341122034539, 0.4003757090421962, 0.4290103664553251, 0.46696041726590864, 0.42451412825567425, 0.0335117287663963, 0.038863110804076895, 0.02453585542903025, 0.052256296507705136, 0.06027869203887781, 0.07242497254698133, 0.083335257862314, 0.04859576479469563, 0.07368835502454951, 0.1979500140131909, 0.17893764472830354, 0.17638448119026584, 0.32790604912362364, 0.38756521309163805, 0.1888871337512903, 0.30911450858112044, 0.1914520393706406, 0.265139818531563, 0.15936478732234116, 0.24646033790202082, 0.1985989048388893, 0.18783624973477198, 0.19622507771834952, 0.18661693003579893, 0.1416978635812839, 0.2248040162333237, 0.13200732809210802, 0.0808293513655417, 0.21234809644943153, 0.15733666028580606, 0.1545504947268289, 0.16737357990133317, 0.15392216024985028, 0.07684572506588261, 0.2103485647818365, 0.09013091926520678, 0.21427825139787682, 0.21584488615604192, 0.21441729547281496, 0.2790376100937051, 0.2306291623423432, 0.2059886123203286, 0.2061805958621089, 0.20354719063981697, 0.19050028914606743, 0.18165058552936608, 0.19858973974374516, 0.19377591329427446, 0.17918058834514072, 0.17609828366875813, 0.18464453833554484, 0.18242024001513168, 0.16603477247376852, 0.15953907855831062, 0.12603454561973382, 0.12730470550132666, 0.18738300573903743, 0.7123379991767933, 0.20128613199125645, 0.6603757460372788, 0.09980788765035176, 0.169438597075677, 0.17624041479835528, 0.08182145569102561, 0.20441517135228415, 0.5243387937433797, 0.4851689956913996, 0.1666461830487449, 0.20444989866859142, 0.10454622532980518, 0.3809678828608385, 0.2734231436460892, 0.19284232343458108, 0.17940039328907464, 0.19150742471446325, 0.18229008791229107, 0.17428341166744554, 0.19059512447412885, 0.18251574419717187, 0.1990781575416456, 0.1816788451490453, 0.08621626144107031, 0.07369969385022146, 0.06560992518081454, 0.07353770048293173, 0.09052534725373573, 0.07691887410763953, 0.0772637708429027, 0.06112597674242792, 0.08222761582496929]}, "mutation_prompt": null}
{"id": "5b6b11cb-87ab-4e1c-846d-f102c292457e", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 20\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        return np.random.choice(self.strategy_count, p=self.strategy_weights)\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.15, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.15, 0.15, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.60, 1.30)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.80 * (success_counts / total) + 0.20 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced hybrid strategy blending and dynamic scaling for improved convergence rates.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4366238624053893, 0.46055972426149905, 0.4524907347833308, 0.46668408294797414, 0.4275737089567919, 0.4961127461703926, 0.4425006577174251, 0.4245489299220543, 0.46409673168613186, 0.10132542298913394, 0.01640354876131711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641548847156626, 9.999999999998899e-05, 0.03911682768688973, 0.04797752779150466, 0.07406273738911673, 0.0908653952706513, 0.05960293275231621, 0.06809640881516366, 0.054702138308508674, 0.060973039138213614, 0.12367009148586416, 0.06581096672614473, 0.03166202886214364, 0.028131736042410704, 0.09569155832521847, 0.06837357270825484, 0.021575918973044117, 0.09488819506816648, 0.05325468090546037, 0.024944432725050314, 0.8836796636319169, 0.6952157200962187, 0.9151689776980237, 0.2999507083272104, 0.673819043640232, 0.6108949733701706, 0.8183658886110193, 0.5735901606314501, 0.6183051034044036, 0.2901352770941181, 0.24263242713447053, 0.26275040253449056, 0.30830221542181513, 0.29419054133447564, 0.29125048990894553, 0.30399584499519605, 0.26373981867259255, 0.25947497456920077, 0.7576121193278842, 0.2957384367966477, 0.14380258281877212, 0.2021752918445695, 0.31527224552825306, 0.18727578828262792, 0.1274029104255302, 0.13013194226931424, 0.5059926608826928, 0.1659730804632814, 0.17841940029831327, 0.11274940536604283, 0.15049519899331376, 0.15745898149029158, 0.09273227658024097, 0.15662238719571453, 0.14488407191199515, 0.15534368809803234, 0.13075377046286885, 0.1582292806026615, 0.15380666676451182, 0.20205566454794444, 0.14784477137311536, 0.18620649533280853, 0.20547507635183615, 0.17810520443593392, 0.14801343387540378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024844353448468803, 0.00018272569673061234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01854836000485427, 0.07201646789762384, 0.0493316313054214, 0.09576691544664406, 0.07265847691584715, 0.05771368230470364, 0.016684807614482433, 0.07264782815801318, 0.059646767089756914, 0.040338716056681156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08499152512558572, 0.09732198177836038, 0.1359185811416913, 0.08312037310942288, 0.04074425268843351, 0.032860773631115836, 0.12594547976288106, 0.10435961710323449, 0.08739352823330282, 0.4284570615005898, 0.4061449900310814, 0.4142120709923638, 0.40847954939957776, 0.42061563935086055, 0.4012985935598845, 0.4230044947531525, 0.415688597494383, 0.4177222575335079, 0.033220553957638566, 0.051353655148793975, 0.042737374969741504, 0.0639702648507291, 0.05445727709091275, 0.08356724642538516, 0.08067698234609055, 0.05073012253334275, 0.07126288305823358, 0.22663733047473844, 0.32956444618765623, 0.17769484731938212, 0.28330491022690085, 0.26965733581267537, 0.17745147423684304, 0.2973752133428593, 0.15714968655285033, 0.15441885699286517, 0.15841780260988725, 0.2791025148539239, 0.19437088169448102, 0.1620819812287564, 0.19495405269101806, 0.18690548940896745, 0.14662422779625717, 0.30206972146248934, 0.11226748992655267, 0.08202321019704528, 0.08384944410294415, 0.15302149903919904, 0.13248052555747603, 0.15670364846586848, 0.09011464067600095, 0.09204802642131749, 0.24015105137792714, 0.0837958958361269, 0.20232242851286142, 0.24595185460108115, 0.22005941418247144, 0.23886596440436647, 0.2880396758023308, 0.24466754639174393, 0.21080112697920894, 0.1921758057556363, 0.22724029765497222, 0.1772280488876974, 0.20583127773677679, 0.2036610001122, 0.19817113072128034, 0.17658007064363324, 0.17754921154616587, 0.18515175064055056, 0.1727894894572879, 0.17165346229010447, 0.10501947563479608, 0.12723140362444485, 0.1870320192745607, 0.7957603441505625, 0.20085599813202526, 0.7263016990981628, 0.14846568875112465, 0.16932664179788315, 0.17621320317341738, 0.08243855050905713, 0.4535951561105428, 0.44053747862028625, 0.10373180038430307, 0.16639787787635274, 0.484388094517747, 0.10469868817647299, 0.4093409161829683, 0.26040074173857686, 0.17536039834740424, 0.18301825103155422, 0.18540597130865522, 0.18152798036137818, 0.19687623914407215, 0.20772606177580588, 0.1844754313857695, 0.17465446868684997, 0.1893614792116105, 0.0987405873962629, 0.07680272583384773, 0.07291415100950416, 0.07122968817721098, 0.09484900091958226, 0.07275946065748595, 0.06778498585356629, 0.06618558125078267, 0.07007451070413573]}, "mutation_prompt": null}
{"id": "5455ff1b-b7ee-42c9-9c50-e2932ced8105", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.strategy_count = 3\n        self.population_size = 22  # Increased population size by 2\n        self.init_strategy_weights()\n\n    def init_strategy_weights(self):\n        self.strategy_weights = np.full(self.strategy_count, 1.0 / self.strategy_count)\n\n    def select_strategy(self):\n        selected_strategy = np.random.choice(self.strategy_count, p=self.strategy_weights)\n        for _ in range(self.strategy_count):  # Added variance reduction in strategy selection\n            candidate = np.random.choice(self.strategy_count, p=self.strategy_weights)\n            if self.strategy_weights[candidate] > self.strategy_weights[selected_strategy]:\n                selected_strategy = candidate\n        return selected_strategy\n\n    def mutate(self, x, strategy):\n        if strategy == 0:\n            return x + np.random.normal(0, 0.14, size=self.dim)  # Slightly adjusted mutation variance\n        elif strategy == 1:\n            return x + np.random.uniform(-0.16, 0.16, size=self.dim)  # Slightly adjusted mutation range\n        else:\n            scale = np.random.uniform(0.62, 1.28)  # Slightly adjusted scaling range for better exploration\n            return x * scale\n\n    def boundary_check(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def adapt_strategy_weights(self, success_counts):\n        total = np.sum(success_counts)\n        if total > 0:\n            self.strategy_weights = 0.78 * (success_counts / total) + 0.22 * self.strategy_weights  # Modified smoothing\n        else:\n            self.init_strategy_weights()\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        success_counts = np.zeros(self.strategy_count)\n\n        while evaluations < self.budget:\n            offspring = []\n            offspring_fitness = []\n            for _ in range(self.population_size):\n                parent_index = np.random.choice(self.population_size)\n                parent = population[parent_index]\n                strategy = self.select_strategy()\n                child = self.mutate(parent, strategy)\n                child = self.boundary_check(child)\n                child_fitness = func(child)\n                evaluations += 1\n                if child_fitness < fitness[parent_index]:\n                    offspring.append(child)\n                    offspring_fitness.append(child_fitness)\n                    success_counts[strategy] += 1\n                if evaluations >= self.budget:\n                    break\n\n            if offspring:\n                population = np.concatenate((population, np.array(offspring)), axis=0)\n                fitness = np.concatenate((fitness, np.array(offspring_fitness)), axis=0)\n                best_indices = fitness.argsort()[:self.population_size]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n\n            self.adapt_strategy_weights(success_counts)\n            success_counts.fill(0)", "name": "EnhancedDynamicMultiStrategyEA", "description": "Enhanced strategy selection with variance reduction for improved efficiency.", "configspace": "", "generation": 99, "fitness": 0.17728355120309328, "feedback": "The algorithm EnhancedDynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "40e39759-8c67-4cf3-a4a5-747262dfbc91", "metadata": {"aucs": [0.4409365237519055, 0.39836278341907794, 0.43111925095590187, 0.41834113890309454, 0.42559575983544784, 0.44867501346814687, 0.4342952082725503, 0.42641897534642204, 0.41542992543235546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020594006820050526, 9.999999999998899e-05, 0.036905097521299335, 0.07155550917798281, 0.0771854227942862, 0.08200970826410592, 0.052443032201885065, 0.06667174043808333, 0.06193524359661984, 0.06529086120106897, 0.15381705386881894, 0.0383565064067759, 0.030027947306307423, 0.02576015662738118, 0.07792159420363076, 0.06271327246311298, 0.025992378754522316, 0.00645050069285813, 0.014006070398357773, 0.03687372222059382, 0.6303920731125703, 0.6816250350370872, 0.6414754769445021, 0.1052745511902764, 0.6092604447120059, 0.9530650247592459, 0.7907893813549909, 0.7637716433441839, 0.6901513577377386, 0.2540763556659439, 0.274568847376386, 0.27282055010357364, 0.2982037441807447, 0.26264077515895534, 0.2858079098178834, 0.27103870866935953, 0.2693668113570653, 0.2410814839622687, 0.22835004393799063, 0.2197282600167345, 0.13229815514528853, 0.19831647259482077, 0.23389805214872006, 0.19083379308372694, 0.16984732467217456, 0.12833496568700264, 0.179692799993599, 0.1520313861102346, 0.1113219474651036, 0.235675412987562, 0.14233647003795236, 0.15688341885862356, 0.1069716925613502, 0.1452129701555196, 0.10838153303939235, 0.14118159205133218, 0.1826739122449923, 0.030631886060668134, 0.145609013418458, 0.15097977301992105, 0.08790616084771719, 0.1357166605861132, 0.1880543350247441, 0.007683142306910695, 0.14840431524798836, 0.010645997721345335, 9.999999999998899e-05, 0.044680519958195886, 0.017860890698715215, 0.031175409186232517, 0.0009370345477592856, 0.020625728760565454, 9.999999999998899e-05, 0.0391304283990499, 0.07502449960831603, 0.05196739422756913, 0.0900271320624928, 0.060752092535167, 9.999999999998899e-05, 9.999999999998899e-05, 0.18183837832959426, 0.060014277104592506, 0.039649501070708526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00043705420950224116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06555063144551809, 0.06373697456349092, 0.11780299701367802, 0.06780512203372491, 0.031092964851854976, 0.03057579467217253, 0.09920658769511337, 0.12063860107941726, 0.08933469705734698, 0.4011713235188258, 0.42985310965762, 0.4110765955090203, 0.4138816774361208, 0.40910553081254, 0.40663636806213554, 0.41050231198254805, 0.3702671744711482, 0.40880320089331323, 0.036358004433113655, 0.04510045654460515, 0.0302476735988213, 0.05198269077869777, 0.05665429898535079, 0.062419878173124776, 0.0770052560470682, 0.03287755031258288, 0.07649830154744941, 0.1652524493025559, 0.1807748152167904, 0.1931777242408429, 0.2921957549164296, 0.2624937804852815, 0.19110549730961202, 0.29838609581108144, 0.18641089273524358, 0.15687226414468514, 0.15764773537822163, 0.12687248816534025, 0.17603074663769513, 0.20674569668796816, 0.2552976386731215, 0.18816794616673482, 0.14774763875412322, 0.29568839817801296, 0.14360256564774232, 0.08009817611058512, 0.21039919508846805, 0.17523643968769287, 0.16833392485419885, 0.2240083356438024, 0.15749355609330362, 0.07665353887408599, 0.22562119840120998, 0.08195574275376838, 0.2562984077876955, 0.18701959213890273, 0.2237755369689154, 0.22116381608649216, 0.2051348442541826, 0.2339226161058795, 0.2121135823129603, 0.19251698875153533, 0.21718464893012257, 0.17808120081256862, 0.19615609180804106, 0.1841960448282457, 0.18184301699736538, 0.1934707091519139, 0.1864708752090246, 0.18130827396780047, 0.1912020914635496, 0.1746505604171562, 0.12500861762380922, 0.12714107591859902, 0.1858593158307027, 0.6997271319946479, 0.2009033691997023, 0.613425983513408, 0.10272681905054415, 0.169111498712035, 0.17483813868108466, 0.08130767780776937, 0.37788156675255, 0.4620654875182759, 0.10271033765019488, 0.16581434666788586, 0.20341362758457038, 0.10323546356900826, 0.3823196884957172, 0.26934575155754215, 0.18480124651626983, 0.19455307991969917, 0.18235325158435012, 0.1700356528077538, 0.19283539585900333, 0.19580077925087658, 0.19095006817011595, 0.17577037487424985, 0.18445331724937386, 0.10552920808924005, 0.07202365503025399, 0.07159516771490126, 0.06968312735024573, 0.0890421978739585, 0.08341115497263085, 0.08193379577306348, 0.06271127047517344, 0.07368171068776641]}, "mutation_prompt": null}
