{"id": "4dcb6c7d-e6b8-4087-a719-ede99e91d476", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.5:\n                self.inertia_weight = 0.9\n                self.cognitive_coeff = 2.0\n                self.social_coeff = 1.0\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.0\n                self.social_coeff = 2.0\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A swarm-inspired adaptive hill climbing algorithm that dynamically adjusts step sizes based on the swarm's exploration and exploitation phases.", "configspace": "", "generation": 0, "fitness": 0.2524307345451512, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9488152220742405, 0.9607241768517194, 0.9436014070355832, 0.9574977662766069, 0.19156454579575444, 0.13485480169208808, 0.9527233242861166, 0.1832587404589323, 0.9218871548701876, 0.8892466607680414, 9.999999999998899e-05, 0.8827246900317972, 0.8940358576714184, 0.892985988158401, 0.8722762159813737, 0.006821681384483913, 0.06267449336086972, 9.999999999998899e-05, 0.8067920290545548, 0.11907048567165968, 0.16305583631056086, 0.19466523842710715, 0.12568150202849138, 0.1456709721439462, 0.15949015632574448, 0.07366934204437803, 0.8434980472306273, 0.10691601092182701, 0.051851836325348066, 0.11382281645041459, 0.1138089545867651, 0.12444860903016941, 0.1238804905420462, 0.11966925987030097, 0.011643968601588672, 0.09082339949460894, 0.9963595535987426, 0.994540037318203, 0.9954256960418556, 0.9951951844125967, 0.9925152040049998, 0.9952178197215973, 0.9882819745216952, 0.9911308639228983, 0.9889955034964778, 0.8139881696262738, 0.06038001671129789, 0.059809124738614106, 0.15453953963685618, 0.1549750530124715, 0.1555594720491441, 0.08936945444062061, 0.08982150726618054, 9.999999999998899e-05, 0.16788449337817057, 0.15452959528431942, 0.23128983105126, 0.3945491350728746, 0.2832168620832023, 0.11433525506908282, 0.12641618167046564, 0.11767803524481257, 0.3253602972023387, 0.20995799260980097, 0.23314739733575018, 0.1138640196717774, 0.25001474069628316, 0.23540620518465472, 0.10318840291943632, 0.13674590465027414, 0.2299601105191087, 0.22886668038824698, 0.24554930354759463, 9.999999999998899e-05, 0.23885247628244577, 0.2654329245543585, 0.13664898010906779, 0.24296702186895147, 0.2750543075854234, 9.999999999998899e-05, 0.2512285372505282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038622627106589924, 9.999999999998899e-05, 0.022143162615857692, 0.028727352186238897, 0.059620981754645586, 0.004300575003312934, 0.0745968459088393, 0.042387918682698866, 0.04640063215162171, 0.10988227578668197, 0.0018921068464993196, 0.03368617430960508, 0.1070330720963808, 0.015249930629615993, 0.06206821620590275, 0.13883977761722577, 0.04708818693979355, 9.999999999998899e-05, 0.13850915556537036, 9.999999999998899e-05, 0.08534832138975657, 9.999999999998899e-05, 0.1895381594662091, 0.07759407338518609, 9.999999999998899e-05, 9.999999999998899e-05, 0.11369656347697588, 9.999999999998899e-05, 9.999999999998899e-05, 0.04008744650351692, 0.08592724543712515, 0.050495626621520406, 0.08285119399402907, 0.5279118699798725, 0.5548250093263928, 0.5664986095384048, 0.570080167659154, 0.583823992557722, 0.20935044539565828, 0.6216015643061354, 0.5845546079801633, 0.5936306743235382, 0.10424211478633605, 0.017797317408324798, 0.037433732986520196, 0.08302721375124744, 0.07868183436485321, 0.13603236640641592, 0.07561099843161012, 0.1143244171462211, 0.10150926081917189, 0.2665022259131288, 0.1960689223281965, 0.18376167506817842, 0.23076983407998597, 0.1542930254389483, 0.1606490057541241, 0.28982947801787584, 0.15440838853307837, 0.2172476846977487, 0.19493785927576934, 0.3382811677286389, 0.2403478381480536, 0.30446751406183625, 0.12458277464843182, 0.28494798275416, 0.237241761044788, 0.5557304894345676, 0.14213952474086744, 0.15907809971700804, 0.3012697213311244, 0.21546900104790678, 0.2226070568288674, 0.2288909376556194, 0.2562511939717458, 0.17714407343035132, 0.135024725764745, 0.1504787696179195, 0.19305874219811026, 0.2395764450618315, 0.22684506320727815, 0.2006930140281422, 0.17465135594328363, 0.22218669024415172, 0.1993060474164403, 0.2027531696028818, 0.21905812317319628, 0.2018239784846111, 0.25912619826241967, 0.20061922156357648, 0.2159349750133901, 0.20094293665615182, 0.2109689126587908, 0.21144345910481754, 0.20470397798597373, 0.19351242553904335, 0.18926344938453332, 0.1668023885011809, 0.1366116696098556, 0.1300003171074008, 0.20235981796474078, 0.14958375396414303, 0.1510051603803979, 0.12098257871756835, 0.1546981273661977, 0.07931556368261539, 0.10895491786286671, 0.8144923299255127, 0.8080769952798861, 0.15664392255750426, 0.2143185134623009, 0.16922411305583918, 0.13077386749598174, 0.7994204055467892, 0.19085099933426652, 0.20434681072210692, 0.21623720988237638, 0.19719192143118391, 0.19220736681779937, 0.20362514919508945, 0.1872621385809613, 0.20570455252446995, 0.23202426570429469, 0.04786025400081084, 0.059505961501236215, 0.11089049090352143, 0.12134766147578524, 0.08528090710457958, 0.12269460388391729, 0.11646791661462375, 0.09796653301234692, 0.07989619366276601]}, "mutation_prompt": null}
{"id": "ddcc8361-712b-49f9-a718-42fca112e6fa", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.5:\n                self.inertia_weight = 0.9\n                self.cognitive_coeff = 2.0\n                self.social_coeff = 1.0\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.0\n                self.social_coeff = 2.0\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A swarm-inspired adaptive hill climbing algorithm that dynamically adjusts step sizes based on the swarm's exploration and exploitation phases.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb6c7d-e6b8-4087-a719-ede99e91d476", "metadata": {"aucs": [0.9488152220742405, 0.9607241768517194, 0.9436014070355832, 0.9574977662766069, 0.19156454579575444, 0.13485480169208808, 0.9527233242861166, 0.1832587404589323, 0.9218871548701876, 0.8892466607680414, 9.999999999998899e-05, 0.8827246900317972, 0.8940358576714184, 0.892985988158401, 0.8722762159813737, 0.006821681384483913, 0.06267449336086972, 9.999999999998899e-05, 0.8067920290545548, 0.11907048567165968, 0.16305583631056086, 0.19466523842710715, 0.12568150202849138, 0.1456709721439462, 0.15949015632574448, 0.07366934204437803, 0.8434980472306273, 0.10691601092182701, 0.051851836325348066, 0.11382281645041459, 0.1138089545867651, 0.12444860903016941, 0.1238804905420462, 0.11966925987030097, 0.011643968601588672, 0.09082339949460894, 0.9963595535987426, 0.994540037318203, 0.9954256960418556, 0.9951951844125967, 0.9925152040049998, 0.9952178197215973, 0.9882819745216952, 0.9911308639228983, 0.9889955034964778, 0.8139881696262738, 0.06038001671129789, 0.059809124738614106, 0.15453953963685618, 0.1549750530124715, 0.1555594720491441, 0.08936945444062061, 0.08982150726618054, 9.999999999998899e-05, 0.16788449337817057, 0.15452959528431942, 0.23128983105126, 0.3945491350728746, 0.2832168620832023, 0.11433525506908282, 0.12641618167046564, 0.11767803524481257, 0.3253602972023387, 0.20995799260980097, 0.23314739733575018, 0.1138640196717774, 0.25001474069628316, 0.23540620518465472, 0.10318840291943632, 0.13674590465027414, 0.2299601105191087, 0.22886668038824698, 0.24554930354759463, 9.999999999998899e-05, 0.23885247628244577, 0.2654329245543585, 0.13664898010906779, 0.24296702186895147, 0.2750543075854234, 9.999999999998899e-05, 0.2512285372505282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038622627106589924, 9.999999999998899e-05, 0.022143162615857692, 0.028727352186238897, 0.059620981754645586, 0.004300575003312934, 0.0745968459088393, 0.042387918682698866, 0.04640063215162171, 0.10988227578668197, 0.0018921068464993196, 0.03368617430960508, 0.1070330720963808, 0.015249930629615993, 0.06206821620590275, 0.13883977761722577, 0.04708818693979355, 9.999999999998899e-05, 0.13850915556537036, 9.999999999998899e-05, 0.08534832138975657, 9.999999999998899e-05, 0.1895381594662091, 0.07759407338518609, 9.999999999998899e-05, 9.999999999998899e-05, 0.11369656347697588, 9.999999999998899e-05, 9.999999999998899e-05, 0.04008744650351692, 0.08592724543712515, 0.050495626621520406, 0.08285119399402907, 0.5279118699798725, 0.5548250093263928, 0.5664986095384048, 0.570080167659154, 0.583823992557722, 0.20935044539565828, 0.6216015643061354, 0.5845546079801633, 0.5936306743235382, 0.10424211478633605, 0.017797317408324798, 0.037433732986520196, 0.08302721375124744, 0.07868183436485321, 0.13603236640641592, 0.07561099843161012, 0.1143244171462211, 0.10150926081917189, 0.2665022259131288, 0.1960689223281965, 0.18376167506817842, 0.23076983407998597, 0.1542930254389483, 0.1606490057541241, 0.28982947801787584, 0.15440838853307837, 0.2172476846977487, 0.19493785927576934, 0.3382811677286389, 0.2403478381480536, 0.30446751406183625, 0.12458277464843182, 0.28494798275416, 0.237241761044788, 0.5557304894345676, 0.14213952474086744, 0.15907809971700804, 0.3012697213311244, 0.21546900104790678, 0.2226070568288674, 0.2288909376556194, 0.2562511939717458, 0.17714407343035132, 0.135024725764745, 0.1504787696179195, 0.19305874219811026, 0.2395764450618315, 0.22684506320727815, 0.2006930140281422, 0.17465135594328363, 0.22218669024415172, 0.1993060474164403, 0.2027531696028818, 0.21905812317319628, 0.2018239784846111, 0.25912619826241967, 0.20061922156357648, 0.2159349750133901, 0.20094293665615182, 0.2109689126587908, 0.21144345910481754, 0.20470397798597373, 0.19351242553904335, 0.18926344938453332, 0.1668023885011809, 0.1366116696098556, 0.1300003171074008, 0.20235981796474078, 0.14958375396414303, 0.1510051603803979, 0.12098257871756835, 0.1546981273661977, 0.07931556368261539, 0.10895491786286671, 0.8144923299255127, 0.8080769952798861, 0.15664392255750426, 0.2143185134623009, 0.16922411305583918, 0.13077386749598174, 0.7994204055467892, 0.19085099933426652, 0.20434681072210692, 0.21623720988237638, 0.19719192143118391, 0.19220736681779937, 0.20362514919508945, 0.1872621385809613, 0.20570455252446995, 0.23202426570429469, 0.04786025400081084, 0.059505961501236215, 0.11089049090352143, 0.12134766147578524, 0.08528090710457958, 0.12269460388391729, 0.11646791661462375, 0.09796653301234692, 0.07989619366276601]}, "mutation_prompt": null}
{"id": "30374682-a351-42bc-930b-e66e81d91cae", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.5:\n                self.inertia_weight = 0.9\n                self.cognitive_coeff = 2.0\n                self.social_coeff = 1.0\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.0\n                self.social_coeff = 2.0\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A swarm-inspired adaptive hill climbing algorithm that dynamically adjusts step sizes based on the swarm's exploration and exploitation phases.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb6c7d-e6b8-4087-a719-ede99e91d476", "metadata": {"aucs": [0.9488152220742405, 0.9607241768517194, 0.9436014070355832, 0.9574977662766069, 0.19156454579575444, 0.13485480169208808, 0.9527233242861166, 0.1832587404589323, 0.9218871548701876, 0.8892466607680414, 9.999999999998899e-05, 0.8827246900317972, 0.8940358576714184, 0.892985988158401, 0.8722762159813737, 0.006821681384483913, 0.06267449336086972, 9.999999999998899e-05, 0.8067920290545548, 0.11907048567165968, 0.16305583631056086, 0.19466523842710715, 0.12568150202849138, 0.1456709721439462, 0.15949015632574448, 0.07366934204437803, 0.8434980472306273, 0.10691601092182701, 0.051851836325348066, 0.11382281645041459, 0.1138089545867651, 0.12444860903016941, 0.1238804905420462, 0.11966925987030097, 0.011643968601588672, 0.09082339949460894, 0.9963595535987426, 0.994540037318203, 0.9954256960418556, 0.9951951844125967, 0.9925152040049998, 0.9952178197215973, 0.9882819745216952, 0.9911308639228983, 0.9889955034964778, 0.8139881696262738, 0.06038001671129789, 0.059809124738614106, 0.15453953963685618, 0.1549750530124715, 0.1555594720491441, 0.08936945444062061, 0.08982150726618054, 9.999999999998899e-05, 0.16788449337817057, 0.15452959528431942, 0.23128983105126, 0.3945491350728746, 0.2832168620832023, 0.11433525506908282, 0.12641618167046564, 0.11767803524481257, 0.3253602972023387, 0.20995799260980097, 0.23314739733575018, 0.1138640196717774, 0.25001474069628316, 0.23540620518465472, 0.10318840291943632, 0.13674590465027414, 0.2299601105191087, 0.22886668038824698, 0.24554930354759463, 9.999999999998899e-05, 0.23885247628244577, 0.2654329245543585, 0.13664898010906779, 0.24296702186895147, 0.2750543075854234, 9.999999999998899e-05, 0.2512285372505282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038622627106589924, 9.999999999998899e-05, 0.022143162615857692, 0.028727352186238897, 0.059620981754645586, 0.004300575003312934, 0.0745968459088393, 0.042387918682698866, 0.04640063215162171, 0.10988227578668197, 0.0018921068464993196, 0.03368617430960508, 0.1070330720963808, 0.015249930629615993, 0.06206821620590275, 0.13883977761722577, 0.04708818693979355, 9.999999999998899e-05, 0.13850915556537036, 9.999999999998899e-05, 0.08534832138975657, 9.999999999998899e-05, 0.1895381594662091, 0.07759407338518609, 9.999999999998899e-05, 9.999999999998899e-05, 0.11369656347697588, 9.999999999998899e-05, 9.999999999998899e-05, 0.04008744650351692, 0.08592724543712515, 0.050495626621520406, 0.08285119399402907, 0.5279118699798725, 0.5548250093263928, 0.5664986095384048, 0.570080167659154, 0.583823992557722, 0.20935044539565828, 0.6216015643061354, 0.5845546079801633, 0.5936306743235382, 0.10424211478633605, 0.017797317408324798, 0.037433732986520196, 0.08302721375124744, 0.07868183436485321, 0.13603236640641592, 0.07561099843161012, 0.1143244171462211, 0.10150926081917189, 0.2665022259131288, 0.1960689223281965, 0.18376167506817842, 0.23076983407998597, 0.1542930254389483, 0.1606490057541241, 0.28982947801787584, 0.15440838853307837, 0.2172476846977487, 0.19493785927576934, 0.3382811677286389, 0.2403478381480536, 0.30446751406183625, 0.12458277464843182, 0.28494798275416, 0.237241761044788, 0.5557304894345676, 0.14213952474086744, 0.15907809971700804, 0.3012697213311244, 0.21546900104790678, 0.2226070568288674, 0.2288909376556194, 0.2562511939717458, 0.17714407343035132, 0.135024725764745, 0.1504787696179195, 0.19305874219811026, 0.2395764450618315, 0.22684506320727815, 0.2006930140281422, 0.17465135594328363, 0.22218669024415172, 0.1993060474164403, 0.2027531696028818, 0.21905812317319628, 0.2018239784846111, 0.25912619826241967, 0.20061922156357648, 0.2159349750133901, 0.20094293665615182, 0.2109689126587908, 0.21144345910481754, 0.20470397798597373, 0.19351242553904335, 0.18926344938453332, 0.1668023885011809, 0.1366116696098556, 0.1300003171074008, 0.20235981796474078, 0.14958375396414303, 0.1510051603803979, 0.12098257871756835, 0.1546981273661977, 0.07931556368261539, 0.10895491786286671, 0.8144923299255127, 0.8080769952798861, 0.15664392255750426, 0.2143185134623009, 0.16922411305583918, 0.13077386749598174, 0.7994204055467892, 0.19085099933426652, 0.20434681072210692, 0.21623720988237638, 0.19719192143118391, 0.19220736681779937, 0.20362514919508945, 0.1872621385809613, 0.20570455252446995, 0.23202426570429469, 0.04786025400081084, 0.059505961501236215, 0.11089049090352143, 0.12134766147578524, 0.08528090710457958, 0.12269460388391729, 0.11646791661462375, 0.09796653301234692, 0.07989619366276601]}, "mutation_prompt": null}
{"id": "0aaf1ccc-2486-4d9a-9cc6-36b2e6e93934", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.5:\n                self.inertia_weight = 0.9\n                self.cognitive_coeff = 2.0\n                self.social_coeff = 1.0\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.0\n                self.social_coeff = 2.0\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A swarm-inspired adaptive hill climbing algorithm that dynamically adjusts step sizes based on the swarm's exploration and exploitation phases.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb6c7d-e6b8-4087-a719-ede99e91d476", "metadata": {"aucs": [0.9488152220742405, 0.9607241768517194, 0.9436014070355832, 0.9574977662766069, 0.19156454579575444, 0.13485480169208808, 0.9527233242861166, 0.1832587404589323, 0.9218871548701876, 0.8892466607680414, 9.999999999998899e-05, 0.8827246900317972, 0.8940358576714184, 0.892985988158401, 0.8722762159813737, 0.006821681384483913, 0.06267449336086972, 9.999999999998899e-05, 0.8067920290545548, 0.11907048567165968, 0.16305583631056086, 0.19466523842710715, 0.12568150202849138, 0.1456709721439462, 0.15949015632574448, 0.07366934204437803, 0.8434980472306273, 0.10691601092182701, 0.051851836325348066, 0.11382281645041459, 0.1138089545867651, 0.12444860903016941, 0.1238804905420462, 0.11966925987030097, 0.011643968601588672, 0.09082339949460894, 0.9963595535987426, 0.994540037318203, 0.9954256960418556, 0.9951951844125967, 0.9925152040049998, 0.9952178197215973, 0.9882819745216952, 0.9911308639228983, 0.9889955034964778, 0.8139881696262738, 0.06038001671129789, 0.059809124738614106, 0.15453953963685618, 0.1549750530124715, 0.1555594720491441, 0.08936945444062061, 0.08982150726618054, 9.999999999998899e-05, 0.16788449337817057, 0.15452959528431942, 0.23128983105126, 0.3945491350728746, 0.2832168620832023, 0.11433525506908282, 0.12641618167046564, 0.11767803524481257, 0.3253602972023387, 0.20995799260980097, 0.23314739733575018, 0.1138640196717774, 0.25001474069628316, 0.23540620518465472, 0.10318840291943632, 0.13674590465027414, 0.2299601105191087, 0.22886668038824698, 0.24554930354759463, 9.999999999998899e-05, 0.23885247628244577, 0.2654329245543585, 0.13664898010906779, 0.24296702186895147, 0.2750543075854234, 9.999999999998899e-05, 0.2512285372505282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038622627106589924, 9.999999999998899e-05, 0.022143162615857692, 0.028727352186238897, 0.059620981754645586, 0.004300575003312934, 0.0745968459088393, 0.042387918682698866, 0.04640063215162171, 0.10988227578668197, 0.0018921068464993196, 0.03368617430960508, 0.1070330720963808, 0.015249930629615993, 0.06206821620590275, 0.13883977761722577, 0.04708818693979355, 9.999999999998899e-05, 0.13850915556537036, 9.999999999998899e-05, 0.08534832138975657, 9.999999999998899e-05, 0.1895381594662091, 0.07759407338518609, 9.999999999998899e-05, 9.999999999998899e-05, 0.11369656347697588, 9.999999999998899e-05, 9.999999999998899e-05, 0.04008744650351692, 0.08592724543712515, 0.050495626621520406, 0.08285119399402907, 0.5279118699798725, 0.5548250093263928, 0.5664986095384048, 0.570080167659154, 0.583823992557722, 0.20935044539565828, 0.6216015643061354, 0.5845546079801633, 0.5936306743235382, 0.10424211478633605, 0.017797317408324798, 0.037433732986520196, 0.08302721375124744, 0.07868183436485321, 0.13603236640641592, 0.07561099843161012, 0.1143244171462211, 0.10150926081917189, 0.2665022259131288, 0.1960689223281965, 0.18376167506817842, 0.23076983407998597, 0.1542930254389483, 0.1606490057541241, 0.28982947801787584, 0.15440838853307837, 0.2172476846977487, 0.19493785927576934, 0.3382811677286389, 0.2403478381480536, 0.30446751406183625, 0.12458277464843182, 0.28494798275416, 0.237241761044788, 0.5557304894345676, 0.14213952474086744, 0.15907809971700804, 0.3012697213311244, 0.21546900104790678, 0.2226070568288674, 0.2288909376556194, 0.2562511939717458, 0.17714407343035132, 0.135024725764745, 0.1504787696179195, 0.19305874219811026, 0.2395764450618315, 0.22684506320727815, 0.2006930140281422, 0.17465135594328363, 0.22218669024415172, 0.1993060474164403, 0.2027531696028818, 0.21905812317319628, 0.2018239784846111, 0.25912619826241967, 0.20061922156357648, 0.2159349750133901, 0.20094293665615182, 0.2109689126587908, 0.21144345910481754, 0.20470397798597373, 0.19351242553904335, 0.18926344938453332, 0.1668023885011809, 0.1366116696098556, 0.1300003171074008, 0.20235981796474078, 0.14958375396414303, 0.1510051603803979, 0.12098257871756835, 0.1546981273661977, 0.07931556368261539, 0.10895491786286671, 0.8144923299255127, 0.8080769952798861, 0.15664392255750426, 0.2143185134623009, 0.16922411305583918, 0.13077386749598174, 0.7994204055467892, 0.19085099933426652, 0.20434681072210692, 0.21623720988237638, 0.19719192143118391, 0.19220736681779937, 0.20362514919508945, 0.1872621385809613, 0.20570455252446995, 0.23202426570429469, 0.04786025400081084, 0.059505961501236215, 0.11089049090352143, 0.12134766147578524, 0.08528090710457958, 0.12269460388391729, 0.11646791661462375, 0.09796653301234692, 0.07989619366276601]}, "mutation_prompt": null}
{"id": "2ef6649e-bb8c-47bc-90f8-cbdf51b1b1de", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.5:\n                self.inertia_weight = 0.9\n                self.cognitive_coeff = 2.0\n                self.social_coeff = 1.0\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.0\n                self.social_coeff = 2.0\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A swarm-inspired adaptive hill climbing algorithm that dynamically adjusts step sizes based on the swarm's exploration and exploitation phases.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb6c7d-e6b8-4087-a719-ede99e91d476", "metadata": {"aucs": [0.9488152220742405, 0.9607241768517194, 0.9436014070355832, 0.9574977662766069, 0.19156454579575444, 0.13485480169208808, 0.9527233242861166, 0.1832587404589323, 0.9218871548701876, 0.8892466607680414, 9.999999999998899e-05, 0.8827246900317972, 0.8940358576714184, 0.892985988158401, 0.8722762159813737, 0.006821681384483913, 0.06267449336086972, 9.999999999998899e-05, 0.8067920290545548, 0.11907048567165968, 0.16305583631056086, 0.19466523842710715, 0.12568150202849138, 0.1456709721439462, 0.15949015632574448, 0.07366934204437803, 0.8434980472306273, 0.10691601092182701, 0.051851836325348066, 0.11382281645041459, 0.1138089545867651, 0.12444860903016941, 0.1238804905420462, 0.11966925987030097, 0.011643968601588672, 0.09082339949460894, 0.9963595535987426, 0.994540037318203, 0.9954256960418556, 0.9951951844125967, 0.9925152040049998, 0.9952178197215973, 0.9882819745216952, 0.9911308639228983, 0.9889955034964778, 0.8139881696262738, 0.06038001671129789, 0.059809124738614106, 0.15453953963685618, 0.1549750530124715, 0.1555594720491441, 0.08936945444062061, 0.08982150726618054, 9.999999999998899e-05, 0.16788449337817057, 0.15452959528431942, 0.23128983105126, 0.3945491350728746, 0.2832168620832023, 0.11433525506908282, 0.12641618167046564, 0.11767803524481257, 0.3253602972023387, 0.20995799260980097, 0.23314739733575018, 0.1138640196717774, 0.25001474069628316, 0.23540620518465472, 0.10318840291943632, 0.13674590465027414, 0.2299601105191087, 0.22886668038824698, 0.24554930354759463, 9.999999999998899e-05, 0.23885247628244577, 0.2654329245543585, 0.13664898010906779, 0.24296702186895147, 0.2750543075854234, 9.999999999998899e-05, 0.2512285372505282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038622627106589924, 9.999999999998899e-05, 0.022143162615857692, 0.028727352186238897, 0.059620981754645586, 0.004300575003312934, 0.0745968459088393, 0.042387918682698866, 0.04640063215162171, 0.10988227578668197, 0.0018921068464993196, 0.03368617430960508, 0.1070330720963808, 0.015249930629615993, 0.06206821620590275, 0.13883977761722577, 0.04708818693979355, 9.999999999998899e-05, 0.13850915556537036, 9.999999999998899e-05, 0.08534832138975657, 9.999999999998899e-05, 0.1895381594662091, 0.07759407338518609, 9.999999999998899e-05, 9.999999999998899e-05, 0.11369656347697588, 9.999999999998899e-05, 9.999999999998899e-05, 0.04008744650351692, 0.08592724543712515, 0.050495626621520406, 0.08285119399402907, 0.5279118699798725, 0.5548250093263928, 0.5664986095384048, 0.570080167659154, 0.583823992557722, 0.20935044539565828, 0.6216015643061354, 0.5845546079801633, 0.5936306743235382, 0.10424211478633605, 0.017797317408324798, 0.037433732986520196, 0.08302721375124744, 0.07868183436485321, 0.13603236640641592, 0.07561099843161012, 0.1143244171462211, 0.10150926081917189, 0.2665022259131288, 0.1960689223281965, 0.18376167506817842, 0.23076983407998597, 0.1542930254389483, 0.1606490057541241, 0.28982947801787584, 0.15440838853307837, 0.2172476846977487, 0.19493785927576934, 0.3382811677286389, 0.2403478381480536, 0.30446751406183625, 0.12458277464843182, 0.28494798275416, 0.237241761044788, 0.5557304894345676, 0.14213952474086744, 0.15907809971700804, 0.3012697213311244, 0.21546900104790678, 0.2226070568288674, 0.2288909376556194, 0.2562511939717458, 0.17714407343035132, 0.135024725764745, 0.1504787696179195, 0.19305874219811026, 0.2395764450618315, 0.22684506320727815, 0.2006930140281422, 0.17465135594328363, 0.22218669024415172, 0.1993060474164403, 0.2027531696028818, 0.21905812317319628, 0.2018239784846111, 0.25912619826241967, 0.20061922156357648, 0.2159349750133901, 0.20094293665615182, 0.2109689126587908, 0.21144345910481754, 0.20470397798597373, 0.19351242553904335, 0.18926344938453332, 0.1668023885011809, 0.1366116696098556, 0.1300003171074008, 0.20235981796474078, 0.14958375396414303, 0.1510051603803979, 0.12098257871756835, 0.1546981273661977, 0.07931556368261539, 0.10895491786286671, 0.8144923299255127, 0.8080769952798861, 0.15664392255750426, 0.2143185134623009, 0.16922411305583918, 0.13077386749598174, 0.7994204055467892, 0.19085099933426652, 0.20434681072210692, 0.21623720988237638, 0.19719192143118391, 0.19220736681779937, 0.20362514919508945, 0.1872621385809613, 0.20570455252446995, 0.23202426570429469, 0.04786025400081084, 0.059505961501236215, 0.11089049090352143, 0.12134766147578524, 0.08528090710457958, 0.12269460388391729, 0.11646791661462375, 0.09796653301234692, 0.07989619366276601]}, "mutation_prompt": null}
{"id": "bd085e74-6030-4519-bfe4-aace16f7f3a1", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.5:\n                self.inertia_weight = 0.9\n                self.cognitive_coeff = 2.0\n                self.social_coeff = 1.0\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.0\n                self.social_coeff = 2.0\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A swarm-inspired adaptive hill climbing algorithm that dynamically adjusts step sizes based on the swarm's exploration and exploitation phases.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb6c7d-e6b8-4087-a719-ede99e91d476", "metadata": {"aucs": [0.9488152220742405, 0.9607241768517194, 0.9436014070355832, 0.9574977662766069, 0.19156454579575444, 0.13485480169208808, 0.9527233242861166, 0.1832587404589323, 0.9218871548701876, 0.8892466607680414, 9.999999999998899e-05, 0.8827246900317972, 0.8940358576714184, 0.892985988158401, 0.8722762159813737, 0.006821681384483913, 0.06267449336086972, 9.999999999998899e-05, 0.8067920290545548, 0.11907048567165968, 0.16305583631056086, 0.19466523842710715, 0.12568150202849138, 0.1456709721439462, 0.15949015632574448, 0.07366934204437803, 0.8434980472306273, 0.10691601092182701, 0.051851836325348066, 0.11382281645041459, 0.1138089545867651, 0.12444860903016941, 0.1238804905420462, 0.11966925987030097, 0.011643968601588672, 0.09082339949460894, 0.9963595535987426, 0.994540037318203, 0.9954256960418556, 0.9951951844125967, 0.9925152040049998, 0.9952178197215973, 0.9882819745216952, 0.9911308639228983, 0.9889955034964778, 0.8139881696262738, 0.06038001671129789, 0.059809124738614106, 0.15453953963685618, 0.1549750530124715, 0.1555594720491441, 0.08936945444062061, 0.08982150726618054, 9.999999999998899e-05, 0.16788449337817057, 0.15452959528431942, 0.23128983105126, 0.3945491350728746, 0.2832168620832023, 0.11433525506908282, 0.12641618167046564, 0.11767803524481257, 0.3253602972023387, 0.20995799260980097, 0.23314739733575018, 0.1138640196717774, 0.25001474069628316, 0.23540620518465472, 0.10318840291943632, 0.13674590465027414, 0.2299601105191087, 0.22886668038824698, 0.24554930354759463, 9.999999999998899e-05, 0.23885247628244577, 0.2654329245543585, 0.13664898010906779, 0.24296702186895147, 0.2750543075854234, 9.999999999998899e-05, 0.2512285372505282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038622627106589924, 9.999999999998899e-05, 0.022143162615857692, 0.028727352186238897, 0.059620981754645586, 0.004300575003312934, 0.0745968459088393, 0.042387918682698866, 0.04640063215162171, 0.10988227578668197, 0.0018921068464993196, 0.03368617430960508, 0.1070330720963808, 0.015249930629615993, 0.06206821620590275, 0.13883977761722577, 0.04708818693979355, 9.999999999998899e-05, 0.13850915556537036, 9.999999999998899e-05, 0.08534832138975657, 9.999999999998899e-05, 0.1895381594662091, 0.07759407338518609, 9.999999999998899e-05, 9.999999999998899e-05, 0.11369656347697588, 9.999999999998899e-05, 9.999999999998899e-05, 0.04008744650351692, 0.08592724543712515, 0.050495626621520406, 0.08285119399402907, 0.5279118699798725, 0.5548250093263928, 0.5664986095384048, 0.570080167659154, 0.583823992557722, 0.20935044539565828, 0.6216015643061354, 0.5845546079801633, 0.5936306743235382, 0.10424211478633605, 0.017797317408324798, 0.037433732986520196, 0.08302721375124744, 0.07868183436485321, 0.13603236640641592, 0.07561099843161012, 0.1143244171462211, 0.10150926081917189, 0.2665022259131288, 0.1960689223281965, 0.18376167506817842, 0.23076983407998597, 0.1542930254389483, 0.1606490057541241, 0.28982947801787584, 0.15440838853307837, 0.2172476846977487, 0.19493785927576934, 0.3382811677286389, 0.2403478381480536, 0.30446751406183625, 0.12458277464843182, 0.28494798275416, 0.237241761044788, 0.5557304894345676, 0.14213952474086744, 0.15907809971700804, 0.3012697213311244, 0.21546900104790678, 0.2226070568288674, 0.2288909376556194, 0.2562511939717458, 0.17714407343035132, 0.135024725764745, 0.1504787696179195, 0.19305874219811026, 0.2395764450618315, 0.22684506320727815, 0.2006930140281422, 0.17465135594328363, 0.22218669024415172, 0.1993060474164403, 0.2027531696028818, 0.21905812317319628, 0.2018239784846111, 0.25912619826241967, 0.20061922156357648, 0.2159349750133901, 0.20094293665615182, 0.2109689126587908, 0.21144345910481754, 0.20470397798597373, 0.19351242553904335, 0.18926344938453332, 0.1668023885011809, 0.1366116696098556, 0.1300003171074008, 0.20235981796474078, 0.14958375396414303, 0.1510051603803979, 0.12098257871756835, 0.1546981273661977, 0.07931556368261539, 0.10895491786286671, 0.8144923299255127, 0.8080769952798861, 0.15664392255750426, 0.2143185134623009, 0.16922411305583918, 0.13077386749598174, 0.7994204055467892, 0.19085099933426652, 0.20434681072210692, 0.21623720988237638, 0.19719192143118391, 0.19220736681779937, 0.20362514919508945, 0.1872621385809613, 0.20570455252446995, 0.23202426570429469, 0.04786025400081084, 0.059505961501236215, 0.11089049090352143, 0.12134766147578524, 0.08528090710457958, 0.12269460388391729, 0.11646791661462375, 0.09796653301234692, 0.07989619366276601]}, "mutation_prompt": null}
{"id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72  # Slightly increased initial inertia\n        self.cognitive_coeff = 1.55  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.45  # Slightly adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.48:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.88  # Slightly adjusted for more exploration\n                self.cognitive_coeff = 1.9\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.42  # Slightly adjusted for more exploitation\n                self.cognitive_coeff = 1.1\n                self.social_coeff = 1.9\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-inspired optimizer enhancing exploration-exploitation balance with adjusted inertia and coefficients.", "configspace": "", "generation": 6, "fitness": 0.253611046035294, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.28.", "error": "", "parent_id": "4dcb6c7d-e6b8-4087-a719-ede99e91d476", "metadata": {"aucs": [0.948630429840365, 0.9580852801413423, 0.9563371610204382, 0.9534497044480413, 0.19087216686319208, 0.1349542067626187, 0.9535801784604102, 0.18338513290090608, 0.17630385216587618, 0.8787183087076351, 9.999999999998899e-05, 0.8809139629845094, 0.8772472916609193, 0.913832488707269, 0.8476680363292399, 0.006896939139050429, 0.9294779962982085, 0.8961313052526428, 0.09412662843360176, 0.11777477457634233, 0.11870688808544805, 0.0738190493479729, 0.11396129626644835, 0.18880547753257537, 0.13677545769743138, 0.04555405870249829, 0.16383823309883772, 0.12678942780566071, 0.051536418680923846, 0.10772619193523114, 0.12535778638939976, 0.05001569009311457, 0.07328615380305836, 0.09326486782736543, 0.050204471670984074, 0.11980052133757924, 0.9963551486015065, 0.9941726715773003, 0.993785469417838, 0.9944811477284607, 0.9925486473264801, 0.9953134265154231, 0.9880621716089145, 0.9902596103567317, 0.9882899527284759, 0.8492707322849411, 0.7671131289869887, 0.06019045575118653, 0.15170478419551237, 0.15558915932667683, 0.15501842399283472, 0.08948276932366694, 0.0898789462645978, 9.999999999998899e-05, 0.1674605592375843, 0.0807986391127744, 0.11729945609578352, 0.21528432660536723, 0.16111931413863245, 0.11427965630031323, 0.1038694470975452, 0.10774318576813147, 0.1879328296600291, 0.13133034899235463, 0.24194743062745216, 0.21564644890215467, 0.2077858266174366, 0.2868456384213587, 0.1346867083936657, 9.999999999998899e-05, 0.22676312886169303, 0.24320801343693188, 0.25301375613994126, 9.999999999998899e-05, 0.13289111569767809, 0.27011245937510686, 0.2702193785844331, 0.27312822726522146, 0.27177342238910285, 9.999999999998899e-05, 0.24362822006933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09705338685917064, 0.008827908667721984, 9.999999999998899e-05, 0.05707177163930932, 0.00031771921545842297, 9.999999999998899e-05, 0.044370453058858006, 0.038616294789665884, 0.09731465075411416, 0.07957118815395081, 0.001045914354251054, 0.022767917702820495, 0.1782021025570455, 0.012550814020675038, 0.016917946343163903, 0.514103241319698, 0.05774172479340689, 9.999999999998899e-05, 0.1034515224588658, 0.08553772794893921, 0.08578829673907784, 9.999999999998899e-05, 0.15588919349253372, 0.08078665670853657, 0.11273683973317239, 9.999999999998899e-05, 0.044877334946706315, 0.039850497818306074, 0.006937519178276119, 0.04011591471323206, 0.08664192292153616, 0.05052063971080756, 0.08668836816660619, 0.5794960283470599, 0.5522910265303644, 0.5571597787655198, 0.6054952566425713, 0.5738039056640682, 0.2096299891171467, 0.61956972277235, 0.6057560299238678, 0.5857286399015034, 0.1019664172349658, 0.06995974834317387, 0.09450370473893888, 0.11519260745575499, 0.1201015615497647, 0.1358778845506362, 0.08358858219327281, 0.08714763695278926, 0.08800482364745277, 0.2558725983314647, 0.200436006380608, 0.1786111601731598, 0.42891909043856535, 0.13458423726060342, 0.15387107762321417, 0.2265905836436023, 0.16654482106861612, 0.19945668626588853, 0.2302843659560666, 0.30168036084695915, 0.24224890880155914, 0.20561035087753265, 0.16956292230511083, 0.3024920138835647, 0.2667649089184533, 0.18950600129456263, 0.16983582475949566, 0.2404030861706602, 0.27081415328002245, 0.14077703619087956, 0.28559011424146363, 0.11558986265800086, 0.19783725534045982, 0.17728056108694656, 0.1330520502557072, 0.22239477923552364, 0.22745719956404098, 0.18103933091487978, 0.21629176688033247, 0.23179479056245567, 0.17897257647202136, 0.22306836690337528, 0.22690945028738052, 0.1925497259588932, 0.2534918518459761, 0.20125255015919086, 0.18246454184661676, 0.18875025220775776, 0.1996426749862863, 0.22884414659575492, 0.18848300451680766, 0.20131407264224477, 0.19411995760226308, 0.192380628917303, 0.1895596215958537, 0.15615598795564145, 0.20167383648931014, 0.9617814388317999, 0.20254485534334055, 0.14920493875984353, 0.16696151206962062, 0.12074575104100771, 0.16389485945418658, 0.08323672193703169, 0.1132910268373355, 0.8707191421865444, 0.2892839502144703, 0.14105552900773544, 0.21462112063642358, 0.15665641008706155, 0.13081607267551643, 0.7762781562566855, 0.22340701966480425, 0.20697753143257236, 0.20169737738455396, 0.18484038570053452, 0.2246527188243852, 0.18666973087732908, 0.2176150398150979, 0.19711588495533683, 0.20179031144277104, 0.07715398381282268, 0.08961941413398655, 0.07865793197793369, 0.1938700472813253, 0.06294328650205916, 0.14704066715975805, 0.08049851018992737, 0.08714077742188331, 0.07339585567294327]}, "mutation_prompt": null}
{"id": "2d4ca59f-1cba-4989-bef9-9e59beabb422", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72  # Slightly increased initial inertia\n        self.cognitive_coeff = 1.55  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.45  # Slightly adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.48:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.88  # Slightly adjusted for more exploration\n                self.cognitive_coeff = 1.9\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.42  # Slightly adjusted for more exploitation\n                self.cognitive_coeff = 1.1\n                self.social_coeff = 1.9\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-inspired optimizer enhancing exploration-exploitation balance with adjusted inertia and coefficients.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.948630429840365, 0.9580852801413423, 0.9563371610204382, 0.9534497044480413, 0.19087216686319208, 0.1349542067626187, 0.9535801784604102, 0.18338513290090608, 0.17630385216587618, 0.8787183087076351, 9.999999999998899e-05, 0.8809139629845094, 0.8772472916609193, 0.913832488707269, 0.8476680363292399, 0.006896939139050429, 0.9294779962982085, 0.8961313052526428, 0.09412662843360176, 0.11777477457634233, 0.11870688808544805, 0.0738190493479729, 0.11396129626644835, 0.18880547753257537, 0.13677545769743138, 0.04555405870249829, 0.16383823309883772, 0.12678942780566071, 0.051536418680923846, 0.10772619193523114, 0.12535778638939976, 0.05001569009311457, 0.07328615380305836, 0.09326486782736543, 0.050204471670984074, 0.11980052133757924, 0.9963551486015065, 0.9941726715773003, 0.993785469417838, 0.9944811477284607, 0.9925486473264801, 0.9953134265154231, 0.9880621716089145, 0.9902596103567317, 0.9882899527284759, 0.8492707322849411, 0.7671131289869887, 0.06019045575118653, 0.15170478419551237, 0.15558915932667683, 0.15501842399283472, 0.08948276932366694, 0.0898789462645978, 9.999999999998899e-05, 0.1674605592375843, 0.0807986391127744, 0.11729945609578352, 0.21528432660536723, 0.16111931413863245, 0.11427965630031323, 0.1038694470975452, 0.10774318576813147, 0.1879328296600291, 0.13133034899235463, 0.24194743062745216, 0.21564644890215467, 0.2077858266174366, 0.2868456384213587, 0.1346867083936657, 9.999999999998899e-05, 0.22676312886169303, 0.24320801343693188, 0.25301375613994126, 9.999999999998899e-05, 0.13289111569767809, 0.27011245937510686, 0.2702193785844331, 0.27312822726522146, 0.27177342238910285, 9.999999999998899e-05, 0.24362822006933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09705338685917064, 0.008827908667721984, 9.999999999998899e-05, 0.05707177163930932, 0.00031771921545842297, 9.999999999998899e-05, 0.044370453058858006, 0.038616294789665884, 0.09731465075411416, 0.07957118815395081, 0.001045914354251054, 0.022767917702820495, 0.1782021025570455, 0.012550814020675038, 0.016917946343163903, 0.514103241319698, 0.05774172479340689, 9.999999999998899e-05, 0.1034515224588658, 0.08553772794893921, 0.08578829673907784, 9.999999999998899e-05, 0.15588919349253372, 0.08078665670853657, 0.11273683973317239, 9.999999999998899e-05, 0.044877334946706315, 0.039850497818306074, 0.006937519178276119, 0.04011591471323206, 0.08664192292153616, 0.05052063971080756, 0.08668836816660619, 0.5794960283470599, 0.5522910265303644, 0.5571597787655198, 0.6054952566425713, 0.5738039056640682, 0.2096299891171467, 0.61956972277235, 0.6057560299238678, 0.5857286399015034, 0.1019664172349658, 0.06995974834317387, 0.09450370473893888, 0.11519260745575499, 0.1201015615497647, 0.1358778845506362, 0.08358858219327281, 0.08714763695278926, 0.08800482364745277, 0.2558725983314647, 0.200436006380608, 0.1786111601731598, 0.42891909043856535, 0.13458423726060342, 0.15387107762321417, 0.2265905836436023, 0.16654482106861612, 0.19945668626588853, 0.2302843659560666, 0.30168036084695915, 0.24224890880155914, 0.20561035087753265, 0.16956292230511083, 0.3024920138835647, 0.2667649089184533, 0.18950600129456263, 0.16983582475949566, 0.2404030861706602, 0.27081415328002245, 0.14077703619087956, 0.28559011424146363, 0.11558986265800086, 0.19783725534045982, 0.17728056108694656, 0.1330520502557072, 0.22239477923552364, 0.22745719956404098, 0.18103933091487978, 0.21629176688033247, 0.23179479056245567, 0.17897257647202136, 0.22306836690337528, 0.22690945028738052, 0.1925497259588932, 0.2534918518459761, 0.20125255015919086, 0.18246454184661676, 0.18875025220775776, 0.1996426749862863, 0.22884414659575492, 0.18848300451680766, 0.20131407264224477, 0.19411995760226308, 0.192380628917303, 0.1895596215958537, 0.15615598795564145, 0.20167383648931014, 0.9617814388317999, 0.20254485534334055, 0.14920493875984353, 0.16696151206962062, 0.12074575104100771, 0.16389485945418658, 0.08323672193703169, 0.1132910268373355, 0.8707191421865444, 0.2892839502144703, 0.14105552900773544, 0.21462112063642358, 0.15665641008706155, 0.13081607267551643, 0.7762781562566855, 0.22340701966480425, 0.20697753143257236, 0.20169737738455396, 0.18484038570053452, 0.2246527188243852, 0.18666973087732908, 0.2176150398150979, 0.19711588495533683, 0.20179031144277104, 0.07715398381282268, 0.08961941413398655, 0.07865793197793369, 0.1938700472813253, 0.06294328650205916, 0.14704066715975805, 0.08049851018992737, 0.08714077742188331, 0.07339585567294327]}, "mutation_prompt": null}
{"id": "cfff0062-ce72-4ffd-af9a-061385df445b", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Adjusted inertia weight for dynamic scaling\n        self.cognitive_coeff = 1.5  # Fine-tuned cognitive coefficient\n        self.social_coeff = 1.5  # Fine-tuned social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Slightly adjusted phase threshold\n                self.inertia_weight = 0.85  # Modified for better exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4  # Modified for better exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced adaptive swarm optimizer with refined parameter adjustments and dynamic velocity scaling for improved performance.", "configspace": "", "generation": 8, "fitness": 0.24499619723959418, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.27.", "error": "", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.9583772394952951, 0.9670517258701189, 0.963371649666261, 0.9568461799575595, 0.9638348638999495, 0.959948306755909, 0.954413598628685, 0.9613749334110006, 0.960464273725257, 0.04353346953364179, 0.8942101729945781, 0.8136951411631043, 0.9256328806989426, 0.8941162727386454, 0.06959028309641724, 0.019216930012916467, 0.9231035588582939, 9.999999999998899e-05, 0.08725227381148848, 0.1281884528962084, 0.13586511054002404, 0.11309283493117195, 0.06921419819702113, 0.124169462944971, 0.113006348028589, 0.047882104265346226, 0.12351971650305404, 0.08157332397356365, 0.02264905847616061, 0.08435442731443688, 0.11906008178054273, 0.027472542148822332, 0.08714493097455056, 0.08716330262766392, 0.07339985238072844, 0.16514164972069734, 0.996342626917031, 0.9892338163268027, 0.9962641664249203, 0.9943055246147978, 0.9919665279623529, 0.995207906292051, 0.0998630053850127, 0.9884048945074118, 0.983626454490336, 0.5235510187203443, 0.11698076785358624, 0.06030115908639799, 0.1547645702086755, 0.15520012755988155, 0.15450904290874912, 0.08947422736303323, 0.08987277490406742, 9.999999999998899e-05, 0.2183669034012673, 0.045691489777312966, 0.17060748458508734, 0.2855482684997588, 0.22312533510572552, 0.11753016497659663, 0.06856969146237912, 0.1058662552528804, 0.187993603481434, 0.16417626701954247, 0.17884307788100573, 0.13367369600159673, 0.12178274992848714, 0.18351862547709774, 0.13369016145610635, 9.999999999998899e-05, 0.17945040695885184, 0.2041042718304168, 0.23360891799862848, 9.999999999998899e-05, 0.22383973298121962, 0.2008221419720163, 0.15585174228674148, 0.2191539824735943, 0.25032648284430503, 0.03555843320032859, 0.25133984462572057, 0.048705148148852295, 9.999999999998899e-05, 9.999999999998899e-05, 0.011314680767532947, 0.03825725090936671, 9.999999999998899e-05, 0.0006047083549542975, 9.999999999998899e-05, 9.999999999998899e-05, 0.04113386076586434, 0.03457448800607488, 0.06049916497743291, 0.08625435853566654, 0.0004091740881820849, 0.04366411184669383, 0.11918204703583435, 0.06986499115872358, 0.1171840503806747, 0.054222393876426356, 0.04429654163095087, 0.0749826626940785, 0.17369879953103495, 0.28110478078170587, 0.08703758823590502, 0.22558860454351148, 0.13541556722524106, 0.08070743304722072, 0.05530859749443895, 9.999999999998899e-05, 0.04541649192837771, 9.999999999998899e-05, 0.036357498251515796, 0.0593165081789635, 0.11071288551242398, 0.05085920952260936, 0.08612613120696133, 0.5312458849288112, 0.536683916865264, 0.5673566915168284, 0.559137490810115, 0.20970485183432852, 0.2097214739354758, 0.6273146622114653, 0.5832303508355792, 0.5956849889310685, 0.06315839815473212, 0.11311819867306638, 0.028192894595264417, 0.1360069838283745, 0.05352343880860522, 0.14797569412202372, 0.08040340353072528, 0.10860988742366573, 0.07309398656799859, 0.25290208824170035, 0.2436061255695534, 0.23603676188746348, 0.31616881684796017, 0.1801745488978722, 0.1969907860729252, 0.19895642318909879, 0.16062564778358324, 0.2406645681252949, 0.17630547637513805, 0.28562118618458376, 0.25146419844238355, 0.3418363671954495, 0.22255488087821262, 0.23660606152231423, 0.21655445786817795, 0.24163077318981863, 0.15757461277769402, 0.1568776846748009, 0.2983930192043821, 0.08345160814263397, 0.21752061473858708, 0.12967470004901693, 0.16178443091843075, 0.21807309135570263, 0.15204567489789367, 0.2751717665389586, 0.27048314076928526, 0.24083654045037706, 0.23140768665185174, 0.21798983076462541, 0.1884431152060786, 0.26484147297460636, 0.2473298059772283, 0.260749255121247, 0.2944105999308537, 0.2125901527115417, 0.1998250740675076, 0.19882374141997916, 0.19372383975540064, 0.18018106379283305, 0.18348637442454574, 0.17624561366862013, 0.21546344506509207, 0.18791341651617877, 0.18978386211899845, 0.18863419776685308, 0.13621844906340264, 0.1737714332798065, 0.20241975897291997, 0.14903101520185247, 0.15425852494469494, 0.11423091521481143, 0.15473426049990668, 0.07927594686130957, 0.11347300692344275, 0.5273132023347963, 0.7173428949792537, 0.05755317005488836, 0.2138336867147992, 0.15693714772618372, 0.15809051585523726, 0.7393467335081143, 0.1908570442663874, 0.1837005155512409, 0.2088906615551659, 0.1864167532555454, 0.2272220744029041, 0.23113287973763552, 0.23269938229538112, 0.2258137638291401, 0.22669819159821558, 0.052428169909140565, 0.10281089317558345, 0.10167249971817949, 0.12443748913373764, 0.09549782715658928, 0.09820948690047748, 0.13814755398180278, 0.0863936626561379, 0.07598807053454237]}, "mutation_prompt": null}
{"id": "489f7647-32de-4e66-99d6-adba591faac0", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Adjusted initial inertia\n        self.cognitive_coeff = 1.5  # Adjusted cognitive coefficient\n        self.social_coeff = 1.5  # Adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Dynamic inertia adjustment\n            self.inertia_weight = 0.9 - (0.5 * np.random.rand())  # More dynamic range\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A slightly refined swarm optimizer with dynamically adjusting inertia for enhanced convergence efficiency.", "configspace": "", "generation": 9, "fitness": 0.2526804524448395, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.9564312812164489, 0.9555758167666016, 0.9551627200063562, 0.9614683967138713, 0.19112252963393328, 0.12448152662432099, 0.959244008867574, 0.9499913630804708, 0.18343780204973748, 0.9030927643611931, 0.8697195379634116, 0.8992038856891962, 0.8987276809679052, 0.8903250959629041, 0.06742394914134453, 0.006485955880414784, 0.9090201979847582, 0.01958188100851599, 0.12813191130332002, 0.08155774297255647, 0.12703768743052246, 0.07611645809296974, 0.0656173512160787, 0.8518564832243286, 0.08920874470079143, 0.08121679002491422, 0.12562139088453517, 0.13612640082504823, 0.0843829761145265, 0.09744790138774406, 0.1025828890288214, 0.10235526688595475, 0.06725750799409069, 0.11317232677589673, 0.08455247193184401, 0.1279343531360677, 0.995114177576408, 0.9926515569708563, 0.9962942226363812, 0.9942316998820092, 0.993391904691935, 0.9952306976820419, 0.0998312045825891, 0.994897967796286, 0.9683726484760843, 0.36341173264566373, 0.5504807355648482, 0.0458885735676704, 0.8990243582921116, 0.15415598286406962, 0.23739547048130794, 0.0839405626836578, 0.08958232310086589, 9.999999999998899e-05, 0.17306388303346432, 0.15669351436272572, 0.1359895047284343, 0.1970672109264594, 0.28441992638513536, 0.11793371367710448, 0.15205243386366907, 0.21266611828048387, 0.3795892644873827, 0.1708208401691016, 0.17202531380125552, 0.18688059332841134, 0.13369187640752478, 0.13780036120525907, 9.999999999998899e-05, 0.20979667971586946, 0.22271075925284556, 0.1913740514231822, 0.13708314246886855, 9.999999999998899e-05, 0.23206101964535775, 0.17373176113438693, 0.2576566642032845, 0.19386385778900816, 0.16207542690411103, 9.999999999998899e-05, 0.13315325354556484, 9.999999999998899e-05, 9.999999999998899e-05, 0.03761294916131408, 0.008984301863131483, 0.06839889781046826, 0.05392698450814948, 0.007368087316846683, 0.023693978354449752, 9.999999999998899e-05, 0.060766145382301295, 0.04537419798342801, 0.06312840125287966, 0.06952504416983685, 0.000842540801167746, 0.020893638652623836, 0.10444233938357905, 0.019294736766200415, 0.025139562242669444, 0.054976139818887715, 9.999999999998899e-05, 0.3166652973790509, 0.19946453274596343, 0.17515448809217193, 0.08721232586540095, 0.2106766303850096, 0.34338019174862033, 0.08081042003553773, 0.04454807201313726, 9.999999999998899e-05, 0.08182827142638593, 0.04012070592088035, 0.006946577805477694, 0.04072696594202718, 0.2095536448746127, 0.08635267408640845, 0.0867510949436362, 0.5503887588858132, 0.49187289623402397, 0.5621874591679161, 0.606194402230507, 0.6303427859051385, 0.2099118504315557, 0.6061480059585291, 0.6164252446816021, 0.6267883164094455, 0.08456639668292887, 0.07228376840155637, 0.08381716022824548, 0.08996531316892964, 0.10725054419947577, 0.15009450352608744, 0.09782237318080822, 0.12036002820918779, 0.06943741969597972, 0.2627624298146646, 0.2047326287855743, 0.1938670459582631, 0.27647727169481984, 0.27575000056670274, 0.1693818086574771, 0.19604589819095186, 0.1999397317377769, 0.4361385456237298, 0.1649626838399767, 0.33467879985485793, 0.3252361878333805, 0.27848594651222525, 0.22345031007333116, 0.16065192218597202, 0.1759811643520265, 0.26348024451722707, 0.1528527684752251, 0.3106951318284987, 0.11357833761845926, 0.0876614503861407, 0.17877752519408985, 0.18606744923041962, 0.20213938147790678, 0.2212186152607334, 0.14166332401214043, 0.08577289668498744, 0.24249852577963726, 0.2628136777501653, 0.2379213483214957, 0.21384654351425336, 0.15647968776172416, 0.24892976165518443, 0.21660705401196967, 0.20643417636922556, 0.212926329797275, 0.1943157633652517, 0.1934244649039324, 0.258411364999399, 0.21105475991486577, 0.1793916915528685, 0.21472816668243622, 0.1812324414582014, 0.22915675398530533, 0.23041768180837785, 0.1896762562588188, 0.16517560658738895, 0.13688110608005333, 0.17296691249202156, 0.20222671905586354, 0.16788697872650626, 0.1595853853588447, 0.11532169693042071, 0.15479579692033463, 0.0793549820445758, 0.10912004443847123, 0.5758089875246899, 0.3585919790557529, 0.21460519467281025, 0.2141640417608529, 0.16902455092884883, 0.1580233433584557, 0.8319344935303394, 0.21354759526563216, 0.22839917747099037, 0.2665128631894119, 0.2578377850917064, 0.19381956711740655, 0.24091218726579966, 0.22728479657160006, 0.19458138836644512, 0.24198258443292797, 0.08335056071226021, 0.10274658150877769, 0.07809325500459452, 0.0935914797586207, 0.18690528296398357, 0.11773535477068586, 0.10731748496918048, 0.05345931989757846, 0.13062958999093122]}, "mutation_prompt": null}
{"id": "d9d20800-56d9-4aba-92c0-4dd3c2c3711d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72  # Slightly increased initial inertia\n        self.cognitive_coeff = 1.55  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.45  # Slightly adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.48:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.88  # Slightly adjusted for more exploration\n                self.cognitive_coeff = 1.9\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.42  # Slightly adjusted for more exploitation\n                self.cognitive_coeff = 1.1\n                self.social_coeff = 1.9\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-inspired optimizer enhancing exploration-exploitation balance with adjusted inertia and coefficients.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.948630429840365, 0.9580852801413423, 0.9563371610204382, 0.9534497044480413, 0.19087216686319208, 0.1349542067626187, 0.9535801784604102, 0.18338513290090608, 0.17630385216587618, 0.8787183087076351, 9.999999999998899e-05, 0.8809139629845094, 0.8772472916609193, 0.913832488707269, 0.8476680363292399, 0.006896939139050429, 0.9294779962982085, 0.8961313052526428, 0.09412662843360176, 0.11777477457634233, 0.11870688808544805, 0.0738190493479729, 0.11396129626644835, 0.18880547753257537, 0.13677545769743138, 0.04555405870249829, 0.16383823309883772, 0.12678942780566071, 0.051536418680923846, 0.10772619193523114, 0.12535778638939976, 0.05001569009311457, 0.07328615380305836, 0.09326486782736543, 0.050204471670984074, 0.11980052133757924, 0.9963551486015065, 0.9941726715773003, 0.993785469417838, 0.9944811477284607, 0.9925486473264801, 0.9953134265154231, 0.9880621716089145, 0.9902596103567317, 0.9882899527284759, 0.8492707322849411, 0.7671131289869887, 0.06019045575118653, 0.15170478419551237, 0.15558915932667683, 0.15501842399283472, 0.08948276932366694, 0.0898789462645978, 9.999999999998899e-05, 0.1674605592375843, 0.0807986391127744, 0.11729945609578352, 0.21528432660536723, 0.16111931413863245, 0.11427965630031323, 0.1038694470975452, 0.10774318576813147, 0.1879328296600291, 0.13133034899235463, 0.24194743062745216, 0.21564644890215467, 0.2077858266174366, 0.2868456384213587, 0.1346867083936657, 9.999999999998899e-05, 0.22676312886169303, 0.24320801343693188, 0.25301375613994126, 9.999999999998899e-05, 0.13289111569767809, 0.27011245937510686, 0.2702193785844331, 0.27312822726522146, 0.27177342238910285, 9.999999999998899e-05, 0.24362822006933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09705338685917064, 0.008827908667721984, 9.999999999998899e-05, 0.05707177163930932, 0.00031771921545842297, 9.999999999998899e-05, 0.044370453058858006, 0.038616294789665884, 0.09731465075411416, 0.07957118815395081, 0.001045914354251054, 0.022767917702820495, 0.1782021025570455, 0.012550814020675038, 0.016917946343163903, 0.514103241319698, 0.05774172479340689, 9.999999999998899e-05, 0.1034515224588658, 0.08553772794893921, 0.08578829673907784, 9.999999999998899e-05, 0.15588919349253372, 0.08078665670853657, 0.11273683973317239, 9.999999999998899e-05, 0.044877334946706315, 0.039850497818306074, 0.006937519178276119, 0.04011591471323206, 0.08664192292153616, 0.05052063971080756, 0.08668836816660619, 0.5794960283470599, 0.5522910265303644, 0.5571597787655198, 0.6054952566425713, 0.5738039056640682, 0.2096299891171467, 0.61956972277235, 0.6057560299238678, 0.5857286399015034, 0.1019664172349658, 0.06995974834317387, 0.09450370473893888, 0.11519260745575499, 0.1201015615497647, 0.1358778845506362, 0.08358858219327281, 0.08714763695278926, 0.08800482364745277, 0.2558725983314647, 0.200436006380608, 0.1786111601731598, 0.42891909043856535, 0.13458423726060342, 0.15387107762321417, 0.2265905836436023, 0.16654482106861612, 0.19945668626588853, 0.2302843659560666, 0.30168036084695915, 0.24224890880155914, 0.20561035087753265, 0.16956292230511083, 0.3024920138835647, 0.2667649089184533, 0.18950600129456263, 0.16983582475949566, 0.2404030861706602, 0.27081415328002245, 0.14077703619087956, 0.28559011424146363, 0.11558986265800086, 0.19783725534045982, 0.17728056108694656, 0.1330520502557072, 0.22239477923552364, 0.22745719956404098, 0.18103933091487978, 0.21629176688033247, 0.23179479056245567, 0.17897257647202136, 0.22306836690337528, 0.22690945028738052, 0.1925497259588932, 0.2534918518459761, 0.20125255015919086, 0.18246454184661676, 0.18875025220775776, 0.1996426749862863, 0.22884414659575492, 0.18848300451680766, 0.20131407264224477, 0.19411995760226308, 0.192380628917303, 0.1895596215958537, 0.15615598795564145, 0.20167383648931014, 0.9617814388317999, 0.20254485534334055, 0.14920493875984353, 0.16696151206962062, 0.12074575104100771, 0.16389485945418658, 0.08323672193703169, 0.1132910268373355, 0.8707191421865444, 0.2892839502144703, 0.14105552900773544, 0.21462112063642358, 0.15665641008706155, 0.13081607267551643, 0.7762781562566855, 0.22340701966480425, 0.20697753143257236, 0.20169737738455396, 0.18484038570053452, 0.2246527188243852, 0.18666973087732908, 0.2176150398150979, 0.19711588495533683, 0.20179031144277104, 0.07715398381282268, 0.08961941413398655, 0.07865793197793369, 0.1938700472813253, 0.06294328650205916, 0.14704066715975805, 0.08049851018992737, 0.08714077742188331, 0.07339585567294327]}, "mutation_prompt": null}
{"id": "a3d873b3-7fb7-406f-bcc0-9b658cda99c3", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72  # Slightly increased initial inertia\n        self.cognitive_coeff = 1.55  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.45  # Slightly adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.48:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.88  # Slightly adjusted for more exploration\n                self.cognitive_coeff = 1.9\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.42  # Slightly adjusted for more exploitation\n                self.cognitive_coeff = 1.1\n                self.social_coeff = 1.9\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-inspired optimizer enhancing exploration-exploitation balance with adjusted inertia and coefficients.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.948630429840365, 0.9580852801413423, 0.9563371610204382, 0.9534497044480413, 0.19087216686319208, 0.1349542067626187, 0.9535801784604102, 0.18338513290090608, 0.17630385216587618, 0.8787183087076351, 9.999999999998899e-05, 0.8809139629845094, 0.8772472916609193, 0.913832488707269, 0.8476680363292399, 0.006896939139050429, 0.9294779962982085, 0.8961313052526428, 0.09412662843360176, 0.11777477457634233, 0.11870688808544805, 0.0738190493479729, 0.11396129626644835, 0.18880547753257537, 0.13677545769743138, 0.04555405870249829, 0.16383823309883772, 0.12678942780566071, 0.051536418680923846, 0.10772619193523114, 0.12535778638939976, 0.05001569009311457, 0.07328615380305836, 0.09326486782736543, 0.050204471670984074, 0.11980052133757924, 0.9963551486015065, 0.9941726715773003, 0.993785469417838, 0.9944811477284607, 0.9925486473264801, 0.9953134265154231, 0.9880621716089145, 0.9902596103567317, 0.9882899527284759, 0.8492707322849411, 0.7671131289869887, 0.06019045575118653, 0.15170478419551237, 0.15558915932667683, 0.15501842399283472, 0.08948276932366694, 0.0898789462645978, 9.999999999998899e-05, 0.1674605592375843, 0.0807986391127744, 0.11729945609578352, 0.21528432660536723, 0.16111931413863245, 0.11427965630031323, 0.1038694470975452, 0.10774318576813147, 0.1879328296600291, 0.13133034899235463, 0.24194743062745216, 0.21564644890215467, 0.2077858266174366, 0.2868456384213587, 0.1346867083936657, 9.999999999998899e-05, 0.22676312886169303, 0.24320801343693188, 0.25301375613994126, 9.999999999998899e-05, 0.13289111569767809, 0.27011245937510686, 0.2702193785844331, 0.27312822726522146, 0.27177342238910285, 9.999999999998899e-05, 0.24362822006933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09705338685917064, 0.008827908667721984, 9.999999999998899e-05, 0.05707177163930932, 0.00031771921545842297, 9.999999999998899e-05, 0.044370453058858006, 0.038616294789665884, 0.09731465075411416, 0.07957118815395081, 0.001045914354251054, 0.022767917702820495, 0.1782021025570455, 0.012550814020675038, 0.016917946343163903, 0.514103241319698, 0.05774172479340689, 9.999999999998899e-05, 0.1034515224588658, 0.08553772794893921, 0.08578829673907784, 9.999999999998899e-05, 0.15588919349253372, 0.08078665670853657, 0.11273683973317239, 9.999999999998899e-05, 0.044877334946706315, 0.039850497818306074, 0.006937519178276119, 0.04011591471323206, 0.08664192292153616, 0.05052063971080756, 0.08668836816660619, 0.5794960283470599, 0.5522910265303644, 0.5571597787655198, 0.6054952566425713, 0.5738039056640682, 0.2096299891171467, 0.61956972277235, 0.6057560299238678, 0.5857286399015034, 0.1019664172349658, 0.06995974834317387, 0.09450370473893888, 0.11519260745575499, 0.1201015615497647, 0.1358778845506362, 0.08358858219327281, 0.08714763695278926, 0.08800482364745277, 0.2558725983314647, 0.200436006380608, 0.1786111601731598, 0.42891909043856535, 0.13458423726060342, 0.15387107762321417, 0.2265905836436023, 0.16654482106861612, 0.19945668626588853, 0.2302843659560666, 0.30168036084695915, 0.24224890880155914, 0.20561035087753265, 0.16956292230511083, 0.3024920138835647, 0.2667649089184533, 0.18950600129456263, 0.16983582475949566, 0.2404030861706602, 0.27081415328002245, 0.14077703619087956, 0.28559011424146363, 0.11558986265800086, 0.19783725534045982, 0.17728056108694656, 0.1330520502557072, 0.22239477923552364, 0.22745719956404098, 0.18103933091487978, 0.21629176688033247, 0.23179479056245567, 0.17897257647202136, 0.22306836690337528, 0.22690945028738052, 0.1925497259588932, 0.2534918518459761, 0.20125255015919086, 0.18246454184661676, 0.18875025220775776, 0.1996426749862863, 0.22884414659575492, 0.18848300451680766, 0.20131407264224477, 0.19411995760226308, 0.192380628917303, 0.1895596215958537, 0.15615598795564145, 0.20167383648931014, 0.9617814388317999, 0.20254485534334055, 0.14920493875984353, 0.16696151206962062, 0.12074575104100771, 0.16389485945418658, 0.08323672193703169, 0.1132910268373355, 0.8707191421865444, 0.2892839502144703, 0.14105552900773544, 0.21462112063642358, 0.15665641008706155, 0.13081607267551643, 0.7762781562566855, 0.22340701966480425, 0.20697753143257236, 0.20169737738455396, 0.18484038570053452, 0.2246527188243852, 0.18666973087732908, 0.2176150398150979, 0.19711588495533683, 0.20179031144277104, 0.07715398381282268, 0.08961941413398655, 0.07865793197793369, 0.1938700472813253, 0.06294328650205916, 0.14704066715975805, 0.08049851018992737, 0.08714077742188331, 0.07339585567294327]}, "mutation_prompt": null}
{"id": "1d8918dd-160f-4856-9bad-4267ab6101e1", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72\n        self.cognitive_coeff = 1.55\n        self.social_coeff = 1.45\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Improved dynamic phase adaptation\n            if np.random.rand() < 0.5:\n                self.inertia_weight = 0.86\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.44\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "Refined swarm optimizer with enhanced dynamic parameter adjustment for improved exploration-exploitation efficiency.", "configspace": "", "generation": 12, "fitness": 0.24810895968753519, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.28.", "error": "", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.9596160913597223, 0.9623140260875624, 0.9466559630999135, 0.9562143818084081, 0.19088774402697184, 0.9484166323254486, 0.9568560804467826, 0.9615194128300775, 0.9506502935162282, 0.044441678039324195, 0.8837300482133148, 9.999999999998899e-05, 0.9147288730641574, 0.7093694254009885, 0.8819471428615986, 0.006846006119551218, 0.9116108718179743, 0.8900213775693464, 0.12683065128659599, 0.13620191036326146, 0.14670399489214592, 0.11841331984917491, 0.0989045859744867, 0.08453369639522224, 0.1491542700435008, 0.06521548454072834, 0.1071604867731536, 0.13251377901430916, 0.0846530991817297, 0.08837312366329375, 0.16578801966824797, 0.040256543098969644, 0.11913262365428912, 0.09049531917181353, 0.06847045401292684, 0.06886671333529337, 0.9963435001128234, 0.9901469738361991, 0.9947095915889037, 0.9944848192046981, 0.992526145011012, 0.9952161960848205, 0.09986867106483555, 0.991777372746582, 0.9845211172224759, 0.890495496916964, 0.11664241240827722, 0.059985369072617645, 0.15438433340759183, 0.15479464944783017, 0.15504053620984415, 0.08954590105486981, 0.0898598877805713, 9.999999999998899e-05, 0.1681138248282834, 0.08500919305890131, 0.17154167505015827, 0.2842198305787893, 0.21594437014485957, 0.11428095957822293, 0.07005677617079908, 0.11764327083799708, 0.22734294263265553, 0.14772844849892663, 0.21320433614538092, 0.12434347448946736, 0.13200134817468312, 0.19714804567547395, 0.1354202496746426, 9.999999999998899e-05, 0.13318914285350403, 0.23671178322210873, 0.1616429083289178, 0.052907437291173864, 0.22547141189778963, 0.25200053846475756, 0.17733591147860084, 0.2546140489474259, 0.13218718048473654, 9.999999999998899e-05, 0.2552661369431196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0656416090150782, 0.05258580833264792, 9.999999999998899e-05, 0.007892075878033533, 9.999999999998899e-05, 0.00022212205131144636, 0.03581598904367567, 0.05223481142737996, 0.03461644743279668, 0.06797881684576679, 0.0034242627493735744, 0.019354742585775075, 0.09176024000007632, 0.0501765069055331, 0.015731940497322516, 0.054662793454241965, 0.039289237569876456, 9.999999999998899e-05, 0.10383094172028251, 9.999999999998899e-05, 0.08628117958735981, 9.999999999998899e-05, 0.13348311411007685, 0.08116042167887061, 0.04477356595501003, 0.04275527650729094, 0.045337977564357756, 9.999999999998899e-05, 0.006956061084803733, 0.04045986962420289, 0.1365005309635552, 0.1920043878681459, 0.08638344533165676, 0.5620481181513604, 0.5723252280226436, 0.5639822857931885, 0.5633256260810307, 0.5570878152584067, 0.20973866704035782, 0.5890184335022157, 0.5782977541160581, 0.6222858973001477, 0.06547106637339661, 0.09926480427830175, 0.05259046317490779, 0.1421529454253112, 0.08747492595484296, 0.086895339267817, 0.09764978377949607, 0.0736432659978613, 0.085551465930503, 0.2817634592934525, 0.2878817727135231, 0.15978351167292626, 0.2354196520287376, 0.20073750171274374, 0.15718385575923055, 0.2274418526208405, 0.17828264890562273, 0.28018717215605593, 0.14563390433175138, 0.296203928357452, 0.18510372880554138, 0.3594263836271955, 0.21707800029465374, 0.18573086497298052, 0.2196239184381128, 0.2326151564410115, 0.17887262157324235, 0.19668699134998935, 0.3721239595302359, 0.1556627262342326, 0.19083550508653457, 0.15223991533033565, 0.2276724078433372, 0.1873375311628691, 0.13844986668591186, 0.14279223101870653, 0.2044101699803651, 0.20404512222763482, 0.2403485158663321, 0.23640151396949527, 0.20284034245580018, 0.30244854946479105, 0.2126274285588241, 0.22121478145318163, 0.24188725942726486, 0.21978803257794655, 0.18651935256399566, 0.23290983748701843, 0.22737813568047271, 0.1832337973199547, 0.1719257987796251, 0.1938642582116895, 0.18868255150440527, 0.17938433011372013, 0.18963294762458793, 0.0822550556327567, 0.9571735398969756, 0.17376579872714826, 0.20222064100846937, 0.1490044650709691, 0.16701601513526165, 0.11530568231932503, 0.1548004460484812, 0.079264842817516, 0.11292952169222847, 0.8034424698730052, 0.28741631418991687, 0.059346327421197054, 0.21419686350941847, 0.15708098381986402, 0.15803005024469607, 0.8518446864911298, 0.1937222700359087, 0.2037384400219442, 0.23380678248487197, 0.24526526442272512, 0.24247012137653223, 0.1948848611786449, 0.24110742727892054, 0.20706975018935447, 0.20156075922697747, 0.0632307816422959, 0.05579146076326236, 0.088674067976512, 0.16050875727260883, 0.09784535748047185, 0.1238544565616414, 0.09608612741370604, 0.10378190584024871, 0.0761488008671326]}, "mutation_prompt": null}
{"id": "f53f5870-f4f6-45f2-b44d-9564e3e73a42", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72  # Slightly increased initial inertia\n        self.cognitive_coeff = 1.55  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.45  # Slightly adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.48:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.88  # Slightly adjusted for more exploration\n                self.cognitive_coeff = 1.9\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.42  # Slightly adjusted for more exploitation\n                self.cognitive_coeff = 1.1\n                self.social_coeff = 1.9\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-inspired optimizer enhancing exploration-exploitation balance with adjusted inertia and coefficients.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.948630429840365, 0.9580852801413423, 0.9563371610204382, 0.9534497044480413, 0.19087216686319208, 0.1349542067626187, 0.9535801784604102, 0.18338513290090608, 0.17630385216587618, 0.8787183087076351, 9.999999999998899e-05, 0.8809139629845094, 0.8772472916609193, 0.913832488707269, 0.8476680363292399, 0.006896939139050429, 0.9294779962982085, 0.8961313052526428, 0.09412662843360176, 0.11777477457634233, 0.11870688808544805, 0.0738190493479729, 0.11396129626644835, 0.18880547753257537, 0.13677545769743138, 0.04555405870249829, 0.16383823309883772, 0.12678942780566071, 0.051536418680923846, 0.10772619193523114, 0.12535778638939976, 0.05001569009311457, 0.07328615380305836, 0.09326486782736543, 0.050204471670984074, 0.11980052133757924, 0.9963551486015065, 0.9941726715773003, 0.993785469417838, 0.9944811477284607, 0.9925486473264801, 0.9953134265154231, 0.9880621716089145, 0.9902596103567317, 0.9882899527284759, 0.8492707322849411, 0.7671131289869887, 0.06019045575118653, 0.15170478419551237, 0.15558915932667683, 0.15501842399283472, 0.08948276932366694, 0.0898789462645978, 9.999999999998899e-05, 0.1674605592375843, 0.0807986391127744, 0.11729945609578352, 0.21528432660536723, 0.16111931413863245, 0.11427965630031323, 0.1038694470975452, 0.10774318576813147, 0.1879328296600291, 0.13133034899235463, 0.24194743062745216, 0.21564644890215467, 0.2077858266174366, 0.2868456384213587, 0.1346867083936657, 9.999999999998899e-05, 0.22676312886169303, 0.24320801343693188, 0.25301375613994126, 9.999999999998899e-05, 0.13289111569767809, 0.27011245937510686, 0.2702193785844331, 0.27312822726522146, 0.27177342238910285, 9.999999999998899e-05, 0.24362822006933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09705338685917064, 0.008827908667721984, 9.999999999998899e-05, 0.05707177163930932, 0.00031771921545842297, 9.999999999998899e-05, 0.044370453058858006, 0.038616294789665884, 0.09731465075411416, 0.07957118815395081, 0.001045914354251054, 0.022767917702820495, 0.1782021025570455, 0.012550814020675038, 0.016917946343163903, 0.514103241319698, 0.05774172479340689, 9.999999999998899e-05, 0.1034515224588658, 0.08553772794893921, 0.08578829673907784, 9.999999999998899e-05, 0.15588919349253372, 0.08078665670853657, 0.11273683973317239, 9.999999999998899e-05, 0.044877334946706315, 0.039850497818306074, 0.006937519178276119, 0.04011591471323206, 0.08664192292153616, 0.05052063971080756, 0.08668836816660619, 0.5794960283470599, 0.5522910265303644, 0.5571597787655198, 0.6054952566425713, 0.5738039056640682, 0.2096299891171467, 0.61956972277235, 0.6057560299238678, 0.5857286399015034, 0.1019664172349658, 0.06995974834317387, 0.09450370473893888, 0.11519260745575499, 0.1201015615497647, 0.1358778845506362, 0.08358858219327281, 0.08714763695278926, 0.08800482364745277, 0.2558725983314647, 0.200436006380608, 0.1786111601731598, 0.42891909043856535, 0.13458423726060342, 0.15387107762321417, 0.2265905836436023, 0.16654482106861612, 0.19945668626588853, 0.2302843659560666, 0.30168036084695915, 0.24224890880155914, 0.20561035087753265, 0.16956292230511083, 0.3024920138835647, 0.2667649089184533, 0.18950600129456263, 0.16983582475949566, 0.2404030861706602, 0.27081415328002245, 0.14077703619087956, 0.28559011424146363, 0.11558986265800086, 0.19783725534045982, 0.17728056108694656, 0.1330520502557072, 0.22239477923552364, 0.22745719956404098, 0.18103933091487978, 0.21629176688033247, 0.23179479056245567, 0.17897257647202136, 0.22306836690337528, 0.22690945028738052, 0.1925497259588932, 0.2534918518459761, 0.20125255015919086, 0.18246454184661676, 0.18875025220775776, 0.1996426749862863, 0.22884414659575492, 0.18848300451680766, 0.20131407264224477, 0.19411995760226308, 0.192380628917303, 0.1895596215958537, 0.15615598795564145, 0.20167383648931014, 0.9617814388317999, 0.20254485534334055, 0.14920493875984353, 0.16696151206962062, 0.12074575104100771, 0.16389485945418658, 0.08323672193703169, 0.1132910268373355, 0.8707191421865444, 0.2892839502144703, 0.14105552900773544, 0.21462112063642358, 0.15665641008706155, 0.13081607267551643, 0.7762781562566855, 0.22340701966480425, 0.20697753143257236, 0.20169737738455396, 0.18484038570053452, 0.2246527188243852, 0.18666973087732908, 0.2176150398150979, 0.19711588495533683, 0.20179031144277104, 0.07715398381282268, 0.08961941413398655, 0.07865793197793369, 0.1938700472813253, 0.06294328650205916, 0.14704066715975805, 0.08049851018992737, 0.08714077742188331, 0.07339585567294327]}, "mutation_prompt": null}
{"id": "f808762a-9ed4-4170-ad07-a9497f332db6", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72  # Slightly increased initial inertia\n        self.cognitive_coeff = 1.55  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.45  # Slightly adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.48:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.88  # Slightly adjusted for more exploration\n                self.cognitive_coeff = 1.9\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.42  # Slightly adjusted for more exploitation\n                self.cognitive_coeff = 1.1\n                self.social_coeff = 1.9\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-inspired optimizer enhancing exploration-exploitation balance with adjusted inertia and coefficients.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.948630429840365, 0.9580852801413423, 0.9563371610204382, 0.9534497044480413, 0.19087216686319208, 0.1349542067626187, 0.9535801784604102, 0.18338513290090608, 0.17630385216587618, 0.8787183087076351, 9.999999999998899e-05, 0.8809139629845094, 0.8772472916609193, 0.913832488707269, 0.8476680363292399, 0.006896939139050429, 0.9294779962982085, 0.8961313052526428, 0.09412662843360176, 0.11777477457634233, 0.11870688808544805, 0.0738190493479729, 0.11396129626644835, 0.18880547753257537, 0.13677545769743138, 0.04555405870249829, 0.16383823309883772, 0.12678942780566071, 0.051536418680923846, 0.10772619193523114, 0.12535778638939976, 0.05001569009311457, 0.07328615380305836, 0.09326486782736543, 0.050204471670984074, 0.11980052133757924, 0.9963551486015065, 0.9941726715773003, 0.993785469417838, 0.9944811477284607, 0.9925486473264801, 0.9953134265154231, 0.9880621716089145, 0.9902596103567317, 0.9882899527284759, 0.8492707322849411, 0.7671131289869887, 0.06019045575118653, 0.15170478419551237, 0.15558915932667683, 0.15501842399283472, 0.08948276932366694, 0.0898789462645978, 9.999999999998899e-05, 0.1674605592375843, 0.0807986391127744, 0.11729945609578352, 0.21528432660536723, 0.16111931413863245, 0.11427965630031323, 0.1038694470975452, 0.10774318576813147, 0.1879328296600291, 0.13133034899235463, 0.24194743062745216, 0.21564644890215467, 0.2077858266174366, 0.2868456384213587, 0.1346867083936657, 9.999999999998899e-05, 0.22676312886169303, 0.24320801343693188, 0.25301375613994126, 9.999999999998899e-05, 0.13289111569767809, 0.27011245937510686, 0.2702193785844331, 0.27312822726522146, 0.27177342238910285, 9.999999999998899e-05, 0.24362822006933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09705338685917064, 0.008827908667721984, 9.999999999998899e-05, 0.05707177163930932, 0.00031771921545842297, 9.999999999998899e-05, 0.044370453058858006, 0.038616294789665884, 0.09731465075411416, 0.07957118815395081, 0.001045914354251054, 0.022767917702820495, 0.1782021025570455, 0.012550814020675038, 0.016917946343163903, 0.514103241319698, 0.05774172479340689, 9.999999999998899e-05, 0.1034515224588658, 0.08553772794893921, 0.08578829673907784, 9.999999999998899e-05, 0.15588919349253372, 0.08078665670853657, 0.11273683973317239, 9.999999999998899e-05, 0.044877334946706315, 0.039850497818306074, 0.006937519178276119, 0.04011591471323206, 0.08664192292153616, 0.05052063971080756, 0.08668836816660619, 0.5794960283470599, 0.5522910265303644, 0.5571597787655198, 0.6054952566425713, 0.5738039056640682, 0.2096299891171467, 0.61956972277235, 0.6057560299238678, 0.5857286399015034, 0.1019664172349658, 0.06995974834317387, 0.09450370473893888, 0.11519260745575499, 0.1201015615497647, 0.1358778845506362, 0.08358858219327281, 0.08714763695278926, 0.08800482364745277, 0.2558725983314647, 0.200436006380608, 0.1786111601731598, 0.42891909043856535, 0.13458423726060342, 0.15387107762321417, 0.2265905836436023, 0.16654482106861612, 0.19945668626588853, 0.2302843659560666, 0.30168036084695915, 0.24224890880155914, 0.20561035087753265, 0.16956292230511083, 0.3024920138835647, 0.2667649089184533, 0.18950600129456263, 0.16983582475949566, 0.2404030861706602, 0.27081415328002245, 0.14077703619087956, 0.28559011424146363, 0.11558986265800086, 0.19783725534045982, 0.17728056108694656, 0.1330520502557072, 0.22239477923552364, 0.22745719956404098, 0.18103933091487978, 0.21629176688033247, 0.23179479056245567, 0.17897257647202136, 0.22306836690337528, 0.22690945028738052, 0.1925497259588932, 0.2534918518459761, 0.20125255015919086, 0.18246454184661676, 0.18875025220775776, 0.1996426749862863, 0.22884414659575492, 0.18848300451680766, 0.20131407264224477, 0.19411995760226308, 0.192380628917303, 0.1895596215958537, 0.15615598795564145, 0.20167383648931014, 0.9617814388317999, 0.20254485534334055, 0.14920493875984353, 0.16696151206962062, 0.12074575104100771, 0.16389485945418658, 0.08323672193703169, 0.1132910268373355, 0.8707191421865444, 0.2892839502144703, 0.14105552900773544, 0.21462112063642358, 0.15665641008706155, 0.13081607267551643, 0.7762781562566855, 0.22340701966480425, 0.20697753143257236, 0.20169737738455396, 0.18484038570053452, 0.2246527188243852, 0.18666973087732908, 0.2176150398150979, 0.19711588495533683, 0.20179031144277104, 0.07715398381282268, 0.08961941413398655, 0.07865793197793369, 0.1938700472813253, 0.06294328650205916, 0.14704066715975805, 0.08049851018992737, 0.08714077742188331, 0.07339585567294327]}, "mutation_prompt": null}
{"id": "e8f903ff-9266-4127-a11d-9295ad12518f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.72  # Slightly increased initial inertia\n        self.cognitive_coeff = 1.55  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.45  # Slightly adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                # Update global best\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            # Adaptive parameters based on a random phase selector\n            if np.random.rand() < 0.48:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.88  # Slightly adjusted for more exploration\n                self.cognitive_coeff = 1.9\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.42  # Slightly adjusted for more exploitation\n                self.cognitive_coeff = 1.1\n                self.social_coeff = 1.9\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n\n                # Ensure position is within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-inspired optimizer enhancing exploration-exploitation balance with adjusted inertia and coefficients.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.948630429840365, 0.9580852801413423, 0.9563371610204382, 0.9534497044480413, 0.19087216686319208, 0.1349542067626187, 0.9535801784604102, 0.18338513290090608, 0.17630385216587618, 0.8787183087076351, 9.999999999998899e-05, 0.8809139629845094, 0.8772472916609193, 0.913832488707269, 0.8476680363292399, 0.006896939139050429, 0.9294779962982085, 0.8961313052526428, 0.09412662843360176, 0.11777477457634233, 0.11870688808544805, 0.0738190493479729, 0.11396129626644835, 0.18880547753257537, 0.13677545769743138, 0.04555405870249829, 0.16383823309883772, 0.12678942780566071, 0.051536418680923846, 0.10772619193523114, 0.12535778638939976, 0.05001569009311457, 0.07328615380305836, 0.09326486782736543, 0.050204471670984074, 0.11980052133757924, 0.9963551486015065, 0.9941726715773003, 0.993785469417838, 0.9944811477284607, 0.9925486473264801, 0.9953134265154231, 0.9880621716089145, 0.9902596103567317, 0.9882899527284759, 0.8492707322849411, 0.7671131289869887, 0.06019045575118653, 0.15170478419551237, 0.15558915932667683, 0.15501842399283472, 0.08948276932366694, 0.0898789462645978, 9.999999999998899e-05, 0.1674605592375843, 0.0807986391127744, 0.11729945609578352, 0.21528432660536723, 0.16111931413863245, 0.11427965630031323, 0.1038694470975452, 0.10774318576813147, 0.1879328296600291, 0.13133034899235463, 0.24194743062745216, 0.21564644890215467, 0.2077858266174366, 0.2868456384213587, 0.1346867083936657, 9.999999999998899e-05, 0.22676312886169303, 0.24320801343693188, 0.25301375613994126, 9.999999999998899e-05, 0.13289111569767809, 0.27011245937510686, 0.2702193785844331, 0.27312822726522146, 0.27177342238910285, 9.999999999998899e-05, 0.24362822006933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09705338685917064, 0.008827908667721984, 9.999999999998899e-05, 0.05707177163930932, 0.00031771921545842297, 9.999999999998899e-05, 0.044370453058858006, 0.038616294789665884, 0.09731465075411416, 0.07957118815395081, 0.001045914354251054, 0.022767917702820495, 0.1782021025570455, 0.012550814020675038, 0.016917946343163903, 0.514103241319698, 0.05774172479340689, 9.999999999998899e-05, 0.1034515224588658, 0.08553772794893921, 0.08578829673907784, 9.999999999998899e-05, 0.15588919349253372, 0.08078665670853657, 0.11273683973317239, 9.999999999998899e-05, 0.044877334946706315, 0.039850497818306074, 0.006937519178276119, 0.04011591471323206, 0.08664192292153616, 0.05052063971080756, 0.08668836816660619, 0.5794960283470599, 0.5522910265303644, 0.5571597787655198, 0.6054952566425713, 0.5738039056640682, 0.2096299891171467, 0.61956972277235, 0.6057560299238678, 0.5857286399015034, 0.1019664172349658, 0.06995974834317387, 0.09450370473893888, 0.11519260745575499, 0.1201015615497647, 0.1358778845506362, 0.08358858219327281, 0.08714763695278926, 0.08800482364745277, 0.2558725983314647, 0.200436006380608, 0.1786111601731598, 0.42891909043856535, 0.13458423726060342, 0.15387107762321417, 0.2265905836436023, 0.16654482106861612, 0.19945668626588853, 0.2302843659560666, 0.30168036084695915, 0.24224890880155914, 0.20561035087753265, 0.16956292230511083, 0.3024920138835647, 0.2667649089184533, 0.18950600129456263, 0.16983582475949566, 0.2404030861706602, 0.27081415328002245, 0.14077703619087956, 0.28559011424146363, 0.11558986265800086, 0.19783725534045982, 0.17728056108694656, 0.1330520502557072, 0.22239477923552364, 0.22745719956404098, 0.18103933091487978, 0.21629176688033247, 0.23179479056245567, 0.17897257647202136, 0.22306836690337528, 0.22690945028738052, 0.1925497259588932, 0.2534918518459761, 0.20125255015919086, 0.18246454184661676, 0.18875025220775776, 0.1996426749862863, 0.22884414659575492, 0.18848300451680766, 0.20131407264224477, 0.19411995760226308, 0.192380628917303, 0.1895596215958537, 0.15615598795564145, 0.20167383648931014, 0.9617814388317999, 0.20254485534334055, 0.14920493875984353, 0.16696151206962062, 0.12074575104100771, 0.16389485945418658, 0.08323672193703169, 0.1132910268373355, 0.8707191421865444, 0.2892839502144703, 0.14105552900773544, 0.21462112063642358, 0.15665641008706155, 0.13081607267551643, 0.7762781562566855, 0.22340701966480425, 0.20697753143257236, 0.20169737738455396, 0.18484038570053452, 0.2246527188243852, 0.18666973087732908, 0.2176150398150979, 0.19711588495533683, 0.20179031144277104, 0.07715398381282268, 0.08961941413398655, 0.07865793197793369, 0.1938700472813253, 0.06294328650205916, 0.14704066715975805, 0.08049851018992737, 0.08714077742188331, 0.07339585567294327]}, "mutation_prompt": null}
{"id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 16, "fitness": 0.26093156421075075, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.27.", "error": "", "parent_id": "15324b19-812c-4ff4-aab8-ace4c2cc8d22", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "56d8d23f-4fac-47ef-9542-be259f4c5c61", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "265c61c5-5e39-4c40-aed8-b12cacb5790d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "c153966c-4261-47af-a168-8fde5f6d0e8f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "13a6ea2f-d3d2-46c2-9172-40ab12caff73", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "88263ba5-77ce-4a0f-b044-e7fa31fb5451", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "fce29071-95db-47ca-9f7c-45ddb55574ef", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "adfbbc07-0fc0-4eae-a5ab-83de57b4b275", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "10c6569c-4cac-4575-8a80-4e7a2161e88e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "c748b5b2-278d-4080-b876-24e795b8dba6", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "02d6a101-594b-4b31-8a94-7abc6fb07417", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "4f194c3b-4254-44e1-bcda-747005beb940", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "296f1a84-9a0f-42ce-8cb2-1a789709e5b1", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "528f79c3-ddfa-40fb-b637-d2c3aa7970fc", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "14ceab0a-1e66-428c-a8dc-e8187f910774", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "18023677-a276-4c20-8214-85d6d1a39f67", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "2007621d-0571-4811-b251-3cd7370c601d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "a0cf9b3d-68ce-481f-8c6f-0cc5d83564a2", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "3c004c90-c7c8-4226-a6fb-388e6448a958", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "60a44a30-05fe-40b6-88a2-e3b43c3bd772", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "93a32072-411a-4c34-a686-32e1f95043e9", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "a2300b29-5e9c-41c2-bfc7-0657e7c10264", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12  # Adjusted population size for better diversity\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7  # Fine-tuned inertia weight\n        self.cognitive_coeff = 1.6  # Adjusted cognitive coefficient for balance\n        self.social_coeff = 1.4  # Adjusted social coefficient for balance\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted threshold for phase selection\n                self.inertia_weight = 0.85  # Fine-tuned for exploration\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.1\n            else:\n                self.inertia_weight = 0.45  # Fine-tuned for exploitation\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An optimized swarm algorithm with fine-tuned parameters and logic for improved convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.8955596019838509, 0.9474943115780164, 0.9336433792975803, 0.16110672415208915, 0.9428555364629584, 0.19114956654710635, 0.18327523108636212, 0.9552248545099055, 0.940424474777682, 0.8892275145814219, 9.999999999998899e-05, 0.837895397647477, 0.8868440523293484, 0.8369491233227242, 0.8735385325210374, 0.8663547868537105, 0.8801782697159225, 9.999999999998899e-05, 0.0991104544696676, 0.08702928991959324, 0.09420090837125861, 0.16210930625045183, 0.0723170914416511, 0.12321898697600697, 0.12659730028563432, 0.18551716351845615, 0.15767907083013455, 0.10783223966437272, 0.1606783851671818, 0.1478785992701518, 0.1200580317499651, 0.14659938749007828, 0.12719974241765053, 0.1025574471923244, 0.038904005524381446, 0.051221096123232, 0.9945910543985017, 0.9930360896045548, 0.9956639304370054, 0.9941890120029566, 0.9923159953703551, 0.07496164886090684, 0.9921908209506533, 0.9930359105113808, 0.07493853822490959, 0.8616309691195272, 0.06025553239080694, 0.05961334469289248, 0.1547517942629545, 0.1547119067031203, 0.8274470943625049, 0.12515231777731972, 0.08964766738684515, 0.08874154724391081, 0.1661711667250867, 0.13985949623140714, 0.22935626307971468, 0.33851554764083924, 0.19542962771390304, 0.11439475385307019, 0.06869967380697506, 0.23537516729878483, 0.22212210274699862, 0.2278249657580511, 0.2383934320452623, 0.23646854166340092, 9.999999999998899e-05, 0.10491133925349005, 0.1079912927338339, 0.13733497118584748, 0.2257149405373523, 0.2529584788371908, 0.25731350824413635, 0.2338235608277387, 0.35439662026380425, 0.2531398802654061, 0.25255836270834353, 0.2712150927580551, 0.2965997026311834, 0.21175791919125997, 0.1343113300283043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07291616364053699, 0.03513953151420868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06807227474274447, 0.031161282558026304, 0.09467333632199715, 0.06466462301150844, 0.006960678891449801, 0.023185427675817105, 0.14036633737768334, 0.06694466833289547, 0.021367821617357174, 0.22615344842512786, 0.038927864158530556, 0.19880606856084382, 0.25520903541065065, 0.10409905520538254, 0.08419896327116316, 9.999999999998899e-05, 0.07990330808050239, 0.07919741912232126, 0.044916284485236435, 0.09638149413095454, 0.04475150551739204, 0.04034599594662669, 0.06089051709870241, 0.04043670988944015, 0.0865620661459856, 0.2308421191511275, 0.08593354715894641, 0.5618344672614288, 0.7439215266736396, 0.5521779424026785, 0.5781444100558122, 0.5650388436529175, 0.5612544470287093, 0.6155687783117123, 0.5702308027495093, 0.5801446423199903, 0.05580721736332395, 0.10981093532704633, 0.10832440572729751, 0.14698037019320653, 0.09407277896281463, 0.11736074838804311, 0.10641884992249129, 0.14578487450840805, 0.09106224121266226, 0.30516766751703794, 0.30612413226861224, 0.36929293519370254, 0.27325206575930927, 0.34611856564217336, 0.17770508210657265, 0.17243521285076224, 0.19320292847467213, 0.35860897681779125, 0.22007056279311632, 0.26905870254636877, 0.2173540963729511, 0.22425598320270468, 0.17835907178202814, 0.3039035783835625, 0.19959252343200917, 0.28439260242087494, 0.19704532776803496, 0.1202587712775881, 0.2538012031567386, 0.1333041106363031, 0.3140741275766574, 0.1483738256562196, 0.18490003411570755, 0.1582325850601306, 0.1929328287324289, 0.08290689054529288, 0.20749041008328073, 0.2102214987844454, 0.2130695072919403, 0.22616544002008854, 0.14974013176975842, 0.2724347502449933, 0.2075239844643948, 0.19761233862658611, 0.24771119221300886, 0.19246800417934062, 0.21197668109277923, 0.19496569740988923, 0.2308014270269474, 0.21890487067583353, 0.20189772797205607, 0.17590378445022603, 0.20044191627757624, 0.18975381083109155, 0.18954426742565533, 0.1666843165097993, 0.15491847279361826, 0.1731979209544139, 0.20248756347800523, 0.9440885645438127, 0.154524574234015, 0.1141232286894992, 0.16098043092419323, 0.6764007866930248, 0.21397514359139325, 0.8981003538606662, 0.11160092698082102, 0.15645519129490437, 0.21230443264871046, 0.10553964396328464, 0.1689921525459357, 0.8091772705515933, 0.2010325950494295, 0.19263809963169787, 0.2097665749464267, 0.2171935683008842, 0.21750838956056895, 0.20789735552795818, 0.239544161434035, 0.20692410732369215, 0.19762412558926423, 0.0991244196284562, 0.05305810764171415, 0.0815782625935515, 0.14730260267354767, 0.10869017131794989, 0.10026795498529195, 0.10740759391703447, 0.05075196596046461, 0.08201640038847513]}, "mutation_prompt": null}
{"id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 38, "fitness": 0.26678521596067445, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "58586ed0-77eb-46c4-a3a7-9bbf8655763b", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "4abcc6ed-f3e1-4ca0-9c6d-a14314bd343f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "438797d0-511f-468e-bd79-5f474ba93993", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "d2ebe6bc-50fd-434e-8d2f-b50f518d9152", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "4f3089da-2c42-4c0b-8aeb-0e780f445364", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "6d8e3262-e155-483c-8cbf-3ec592e58b0d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "e382282a-fa94-4028-8c3b-54d3e57141d4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "3d793bf5-6e2d-46a5-9077-e09680d23748", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "3429bedf-9c15-4db2-a080-db4c233d3347", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.4\n        self.iteration = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            adapt_factor = np.sin(self.iteration * np.pi / self.budget) * 0.1 + 0.45\n            if np.random.rand() < adapt_factor: \n                self.inertia_weight = 0.82\n                self.cognitive_coeff = 1.65\n                self.social_coeff = 1.22\n            else:\n                self.inertia_weight = 0.42\n                self.cognitive_coeff = 1.35\n                self.social_coeff = 1.92\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            self.iteration += 1\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A fine-tuned swarm optimizer with enhanced dynamic coefficients for better convergence.", "configspace": "", "generation": 46, "fitness": 0.26205374431822054, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.27.", "error": "", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.955903648278879, 0.9493640373037501, 0.9408663902628643, 0.9514011690660441, 0.9505151925134383, 0.16154429545190907, 0.18334323032484767, 0.17617482902087778, 0.9463862958179784, 0.8688939552671914, 0.876320603378716, 0.885922785192576, 0.05026131587444527, 0.8207880436805073, 0.8662549629001344, 0.8965342213562416, 0.9007831814639262, 9.999999999998899e-05, 0.07327818009250098, 0.044215415583716666, 0.1182116560808365, 0.07869001755419391, 0.06505817744142472, 0.15393990967357718, 0.10102806991426405, 0.1573839995505597, 0.1709924577484373, 0.12034214217872141, 0.1337250486570667, 0.11891367400154174, 0.11998029843540103, 0.1338020179689583, 0.11804036609641821, 0.09842579217457892, 0.12232441749522571, 0.1460250126472491, 0.9946094670707404, 0.9920103776121498, 0.9956115427359651, 0.994339977885051, 0.9921760316908756, 0.9898938946061824, 0.9921812090298866, 0.9934116643497827, 0.07494571599145783, 0.8861480305071444, 0.05579511492342115, 0.05992313638422564, 0.8028552039988723, 0.15417653388858654, 0.8460108755044197, 0.127415343918731, 0.08960369505347099, 0.088622413472496, 0.21839498774738908, 0.13744442911079058, 0.3270526588117123, 0.2146205092235971, 0.19515904570668507, 0.11776645772145622, 0.06866549294836, 0.23192138385478245, 0.16807017433610183, 0.21153716581900306, 0.24554516416568095, 0.23493472296279416, 0.1312025474870423, 0.13052794495590425, 0.231066629730868, 0.2392962598898296, 0.24908493289661127, 0.25062836622237383, 0.26168971346640246, 0.20503516169720426, 0.24018415256949988, 0.24845839212467025, 0.286906785025694, 0.25344819083577763, 0.2831822699870956, 0.10764611388884004, 0.23771746550078088, 9.999999999998899e-05, 0.0036161824297389344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01575197341927903, 0.0032038596402493846, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753737729564491, 0.06484493066293417, 0.0725578140694142, 0.07508265967794137, 0.00536187433251889, 0.022389779938170595, 0.04726420566065914, 0.016816835141861497, 0.019029977674528298, 0.10145975361240256, 0.03923389127509913, 9.999999999998899e-05, 0.15678653983355884, 0.10518376594852874, 0.10045203735147501, 9.999999999998899e-05, 0.23831063727124968, 0.07917525461082298, 0.044756407735595194, 0.04854351615855523, 0.043336736785948404, 9.999999999998899e-05, 0.0348117120701158, 0.17539873803901296, 0.08647207569805793, 0.05045037843532829, 0.08578223446385069, 0.5603030256726862, 0.6240425755960052, 0.5692303490791014, 0.6021627196180146, 0.5544000473430369, 0.20969052754820883, 0.6130846449745038, 0.5807668904798181, 0.5997590671679871, 0.08430484191764231, 0.09566258887259682, 0.05756299406514176, 0.11844691096292137, 0.10241556118475126, 0.10519693715315492, 0.06672235990097763, 0.16460695808999937, 0.09439480165600656, 0.16623467935487202, 0.15746653584092996, 0.16618745158210713, 0.18702980669937896, 0.2478094778465847, 0.34687994075640705, 0.12737490347284453, 0.2037675621734808, 0.25713692032581037, 0.4499527500178421, 0.23461429172865977, 0.2889529258288053, 0.1999801164864876, 0.2226427777198191, 0.4316856163622146, 0.29447695118621475, 0.3707794813777957, 0.26615563095904005, 0.11497044872917872, 0.23643903547602418, 0.20990024463232626, 0.3417311758925141, 0.14860185560018724, 0.10393927476050036, 0.1725182869837456, 0.21105705714875622, 0.06852490052816085, 0.21822780024074984, 0.22108401434259017, 0.1843259018805251, 0.21809023216492962, 0.26807234541765046, 0.21089888708291915, 0.22174914814199043, 0.2070850590159916, 0.2200163108015828, 0.18346303984045098, 0.19312861677275017, 0.18319868272377726, 0.23175724966884015, 0.2044126994765043, 0.18558017750125655, 0.21624243511993724, 0.21240191174313638, 0.2505116137420037, 0.18951550242848747, 0.15620500048096453, 0.15474640108037074, 0.17306048346253633, 0.20245018889756805, 0.10912148585499504, 0.1544402238958661, 0.11419538138166208, 0.16326408520497204, 0.7694676565535151, 0.21339675401812808, 0.9209798801703454, 0.11003582785439026, 0.14082233450918125, 0.21292685926029487, 0.10442766684308258, 0.16953564439544677, 0.843073454177898, 0.20820882327654733, 0.21013552252688028, 0.24133979159288277, 0.21266789967483313, 0.19165471593420802, 0.20350910805587386, 0.19766446204042354, 0.22037423109628684, 0.2125272919247172, 0.09082786071490678, 0.06505348335446137, 0.10068963538582798, 0.11733175010948094, 0.09890184720157391, 0.09374128673054016, 0.07758558212017319, 0.08502863279343487, 0.09772868431010229]}, "mutation_prompt": null}
{"id": "7016cb15-5d16-43e6-85de-b3abc61253c6", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "c2f6c306-6811-464b-bc21-018c7ac5d16e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "945a9ba7-e181-40f0-89d1-d3dde82bfa73", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            exploration_threshold = 0.53\n            if np.random.rand() < exploration_threshold:\n                self.inertia_weight = 0.78\n                self.cognitive_coeff = 1.6\n                self.social_coeff = 1.25\n            else:\n                self.inertia_weight = 0.42\n                self.cognitive_coeff = 1.35\n                self.social_coeff = 1.88\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved dynamic parameter adaptation for enhanced convergence.", "configspace": "", "generation": 49, "fitness": 0.24927089227176838, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9607599410776442, 0.9503690896729304, 0.9403182054558807, 0.9476785544458278, 0.9457459359003823, 0.16156520556885456, 0.18339180996877136, 0.17617883447266902, 0.9481832777771423, 0.8902580697058726, 9.999999999998899e-05, 0.8669853236654292, 9.999999999998899e-05, 0.9018101021932943, 0.046670864104492615, 0.8609942344293097, 0.8795110343119737, 9.999999999998899e-05, 0.13414230450564735, 0.08406128028178683, 0.0932332856274597, 0.19343450833963138, 0.07354748951153633, 0.07601292732527232, 0.08704386333250114, 0.0669391065196816, 0.16046591583526737, 0.11284738505225633, 0.02798036107628743, 0.11891900301646474, 0.09083599230978834, 0.09568827012303738, 0.10747152555475914, 0.06600379514022658, 0.14255473673295804, 0.06993482714537513, 0.9937465080305092, 0.9919191508523298, 0.9956005300898932, 0.9935097072196865, 0.991800215946572, 0.9908340990700419, 0.991281849929275, 0.9930387148612109, 0.0749429487812937, 0.8514954281460553, 0.06008532964849378, 0.05955348894485801, 0.15506170082958648, 0.15514285701185437, 0.15539409412324223, 0.12738082926681127, 0.08962403529859309, 0.0886987488419636, 0.1728088254054546, 0.1187641022854734, 0.17730361939591444, 0.1985723133613474, 0.20514833538610877, 0.11413286980887827, 0.12606989632871168, 0.1678030422207092, 0.17567720942667597, 0.23420012432655135, 0.20917761344856722, 0.21870724946839137, 0.24430173905003993, 0.13182023920630503, 0.2331122172106952, 0.23005020735469384, 0.2081305923188076, 0.21478656617927583, 0.2580342267097925, 0.13105841554199482, 0.13447004412181474, 0.19754103391599198, 0.1645849458072114, 0.2484616212429045, 0.274072041614405, 0.10747030234182964, 0.13341321944315954, 0.0007667267144266798, 9.999999999998899e-05, 0.0021978160565661042, 9.999999999998899e-05, 9.999999999998899e-05, 0.052888292930077685, 0.0033684065304194766, 0.0032265910358486583, 0.054879501385354135, 0.04759747741608211, 0.03670133523001473, 0.11926536811191146, 0.06739474785929123, 9.999999999998899e-05, 0.0011168188970727133, 0.03867529235352518, 0.03640877780792817, 0.0035544600864517717, 0.09476430254377122, 0.038802582658034934, 0.06700975897352512, 0.123487910754557, 0.10414826905616759, 0.10823429540903329, 9.999999999998899e-05, 0.1890002167746594, 0.0782478853668317, 0.04487579812064324, 0.04530542844553642, 0.04733995107885258, 0.03375856575162928, 0.00699643160011143, 0.10056683251653542, 0.08610996328430265, 0.08405673866202357, 0.08699225342229622, 0.6006617882065506, 0.5455563711443256, 0.5642272327215304, 0.1815144876564455, 0.5968739134407348, 0.2097970198838317, 0.6388228199041319, 0.6056554865739824, 0.6109660102234433, 0.05972490543212572, 0.11200918857029207, 0.04521947212931443, 0.08709698638320262, 0.06264981996252139, 0.164167015932277, 0.07050122970645156, 0.09438617587837672, 0.15814769080954505, 0.20739895347058424, 0.18068163000676518, 0.2886121498566435, 0.19200213253829013, 0.3381910557208172, 0.12852273997478747, 0.16981327100904586, 0.15883593106466887, 0.18942947841059332, 0.17054203366483567, 0.2637885868881328, 0.5395359498886767, 0.2714751041971204, 0.1805969901364688, 0.33823692571144737, 0.20694515957411597, 0.24831115669366, 0.30397709250339067, 0.20339888657289995, 0.29571384579581006, 0.14367729390934203, 0.20849209948967562, 0.11827763151549775, 0.14758808142659252, 0.27509456140262323, 0.26823983973070753, 0.18417496938696065, 0.249952018316688, 0.19259748393977516, 0.19640627511076425, 0.21945102587458332, 0.1979404814956639, 0.25330085562093463, 0.22994389422930317, 0.20486880250837214, 0.21269940336259452, 0.19925016366609793, 0.2562253708693474, 0.18987505068250243, 0.2123385648956233, 0.917748467990317, 0.21289963455843786, 0.18764349194033914, 0.21207902652754385, 0.2055198708261441, 0.1896366303921695, 0.1666376410048579, 0.15502150769783252, 0.9548190766863289, 0.20234144218691152, 0.16287196936925974, 0.15367745611052286, 0.1142242542740256, 0.16329483053124272, 0.792287575391026, 0.21332356609147762, 0.9347959222197917, 0.21206882492772716, 0.15672337983135365, 0.2124242610761684, 0.10437055246814309, 0.1698085516022284, 0.8028441080790583, 0.22540882087413028, 0.2375754763118112, 0.19616106482159856, 0.22409905845438916, 0.21093212554277074, 0.222318501090349, 0.2303966232241964, 0.21935494851697768, 0.2420907449959654, 0.08648752341997856, 0.04438647525730577, 0.08598005238547668, 0.08653280899180205, 0.08755483676863318, 0.10212659537411162, 0.08145321212698198, 0.0941225930152213, 0.06522996524800362]}, "mutation_prompt": null}
{"id": "cc2db9fd-54b5-4622-b3e3-c595f3d00871", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "575a7384-ef61-4145-8131-2073d860e387", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "74f3f5ae-f375-4e5a-850d-05b7f48e2b67", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "b91766c0-fadb-4b97-b5f4-d7dea69a1988", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "098b84b7-b44d-4037-8f60-69142fcaad4d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.8, 0.8, (self.population_size, dim))  # Slightly tuned initial velocity\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.6  # Adjusted inertia weight for better convergence\n        self.cognitive_coeff = 1.6  # Tweaked cognitive coefficient\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.5:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.7\n                self.cognitive_coeff = 1.8\n                self.social_coeff = 1.3\n            else:\n                self.inertia_weight = 0.5\n                self.cognitive_coeff = 1.4\n                self.social_coeff = 1.8\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced Adaptive Swarm with dynamic velocity adaptation for improved optimization efficiency.", "configspace": "", "generation": 54, "fitness": 0.25240775723053194, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9580255098689635, 0.9530589146898194, 0.9482556891598439, 0.1912637179947373, 0.19110165342902785, 0.161577311241487, 0.9544640311054816, 0.95707396193649, 0.183688207756451, 0.917682572824167, 0.8975395696816816, 0.04418457914365448, 0.8761925279966405, 0.902410200395009, 0.8740517961874431, 0.8798524371495408, 0.9111647368372708, 9.999999999998899e-05, 0.11970485939454079, 0.13332765589599826, 0.11882285637474144, 0.06929502295536727, 0.16575898303194814, 0.07584316675294356, 0.11339208108919496, 0.12195393091912343, 0.0936484280390254, 0.11389550978302176, 0.12401446593624865, 0.11304835904393806, 0.8208511489201097, 0.11799564733540358, 0.11975426332322225, 0.14867383107966803, 0.11804786251567112, 0.02627355862144265, 0.9941269043848702, 0.991253849191029, 0.995597578844272, 0.9941755558424575, 0.9918042798027255, 0.07496159953349923, 0.9909132900226081, 0.989863908032829, 0.07493629064836149, 0.8930670621371622, 0.06008108555166414, 0.059820599391909646, 0.155507105249027, 0.15520456242781988, 0.15476632233090526, 0.8769275429974315, 0.08944401738645169, 0.08886979380081594, 0.21744586020513534, 0.14174158215562072, 0.23078975198544693, 0.20682553518087443, 0.20534007066599436, 0.11777206237590876, 0.0681794754180386, 0.07226983208255788, 0.22243934214063998, 0.23301651832862758, 0.2310455964206536, 0.21950698677829517, 0.20214604173919126, 0.10253014264996474, 0.18581484842196527, 0.2258882333650285, 0.20671807932657527, 0.13442725702646963, 0.250212373553688, 0.16468348459401683, 0.12366043690672124, 0.18758449601350646, 0.24653201794178226, 0.22500121133233952, 0.24759796488155794, 0.10567827307295208, 0.13258712270032325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0463669189931154, 9.999999999998899e-05, 0.004280843429781411, 0.010685036740949339, 0.04996852675958985, 0.06823508639395004, 0.11021402064954933, 0.07255482659719037, 9.999999999998899e-05, 0.011909996805672063, 0.04522642757971862, 0.08443324532472485, 0.0188394621747906, 0.07650343560035944, 9.999999999998899e-05, 0.12493835955236077, 0.10466318851828005, 0.10517770894922074, 9.999999999998899e-05, 9.999999999998899e-05, 0.203472059982987, 0.07920053865942334, 0.045119336937524124, 0.04551419788537947, 0.13500567345561376, 0.04070656073782952, 0.11820247181742671, 0.10947804671578565, 0.08687334564130578, 0.08582065359982027, 0.08604995422292416, 0.5444727976254291, 0.5566961994686304, 0.5784444684168364, 0.13832256233350237, 0.5806778872249952, 0.647912896730747, 0.592350266101038, 0.5924170075760201, 0.5896840957089242, 0.08379091798573168, 0.07370021993233045, 0.06392751106489958, 0.11556009719704052, 0.05534444982683706, 0.13086600764550982, 0.08149782567763086, 0.11371177404850563, 0.10279392243804375, 0.2897537665985629, 0.23088412083634158, 0.2579387719683829, 0.206597383728937, 0.27297139065138165, 0.16234735019333368, 0.2012394572470897, 0.20683598101582434, 0.20417180847162586, 0.3595740996858001, 0.26704217887999604, 0.39175952358620303, 0.25373484852868977, 0.14544275257492367, 0.19767812589623357, 0.365702295733797, 0.2958863006382856, 0.2201426764267057, 0.10633442679646665, 0.21839880765401776, 0.14666469628408707, 0.23297733525554132, 0.11989267584378416, 0.29076529002184726, 0.15251781099111628, 0.28019284745534, 0.08344196080114819, 0.2313724084673131, 0.21555849151195372, 0.221045444905841, 0.2334315153399088, 0.22233121487599172, 0.1895970994333105, 0.20154701385706808, 0.21587950127854683, 0.24934621009389046, 0.18635294516876644, 0.18266496264252863, 0.19796407111277559, 0.2115644589949378, 0.21562616846860183, 0.19731927943154293, 0.18131898812787883, 0.21031726129429162, 0.23217950492617223, 0.18979030871116398, 0.1667469391665889, 0.11314252725587792, 0.9675674061729402, 0.20232452436811066, 0.1677579992330469, 0.16777391870410652, 0.11422823298133755, 0.15461326605888426, 0.7884323154167189, 0.21295103941285576, 0.21186042411189843, 0.21334500627607655, 0.15712396785259297, 0.21335771653802327, 0.10439329694924293, 0.1698756072908003, 0.8547190886136606, 0.20579348600731695, 0.21378104037887036, 0.25100914070851965, 0.23330806520252667, 0.22731522977039154, 0.1957771632937596, 0.19266756827687292, 0.20991177736482047, 0.231557896325026, 0.09630168175969289, 0.08995481731185051, 0.09816962476065905, 0.10173724018441699, 0.08594046234610686, 0.08596811869836507, 0.06965700774546146, 0.058953705832959336, 0.07860690303961837]}, "mutation_prompt": null}
{"id": "7ce0cfbf-66d4-4e85-b165-48860a2183ce", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "214416c0-5469-49d0-b105-d3aedc8cb9e1", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "75df18eb-aef9-45b5-9b55-69625575124f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "a61d3431-bd2c-479e-b842-fb40afe7f6cd", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "700569c9-b0d6-4085-a862-1abea97f26b7", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.51:  # Slightly adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.81\n                self.cognitive_coeff = 1.69\n                self.social_coeff = 1.21\n            else:\n                self.inertia_weight = 0.41\n                self.cognitive_coeff = 1.31\n                self.social_coeff = 1.91\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance and adaptive parameters for enhanced convergence.", "configspace": "", "generation": 59, "fitness": 0.2664054754417653, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9468073411070932, 0.9538692234399876, 0.9482400197403511, 0.9568715225897788, 0.9516748413774362, 0.16155765088595908, 0.18332557175165431, 0.9438963305305239, 0.9448487293180884, 0.8869762177058776, 9.999999999998899e-05, 0.044555371532859156, 0.04907564670936282, 0.8778729624535659, 0.8897449972226658, 0.8910728929939509, 0.8958109801360993, 9.999999999998899e-05, 0.1199398219780754, 0.09788571452643724, 0.15989826570054833, 0.07573881451261355, 0.1450252325424417, 0.06905969252866107, 0.048801744654807244, 0.05001927855578958, 0.15705710885524582, 0.10334311197919799, 0.14892116296930857, 0.1372690705637717, 0.10285719824681983, 0.10326569120046969, 0.10156443267209891, 0.14549964978573804, 0.14771309890800144, 0.07472844928667488, 0.9945905520099063, 0.9928066631698078, 0.9956055967932139, 0.9941847974181813, 0.9918105686711217, 0.9898923361214147, 0.992187539919121, 0.9930644725513686, 0.07494526601543516, 0.8769243743851131, 0.060218367410985185, 0.05979699173743902, 0.15510490326165005, 0.15486461893783032, 0.8481547166359158, 0.1284320961827018, 0.08959654456462429, 0.7266640828111597, 0.17305681503596515, 0.14121776708258837, 0.18459928529166214, 0.21508195113763873, 0.20498120854145085, 0.11787511653588667, 0.1509573868558196, 0.23121808813317746, 0.2205446140825259, 0.16723730923685876, 0.23986141544264017, 0.23006147998944249, 0.2290166511599503, 9.999999999998899e-05, 0.23629538339375789, 0.2449445283987569, 0.23099641093057455, 0.23087124750117838, 0.26950741171183323, 0.19995207163863415, 0.2905059767431061, 0.24561234000058052, 0.26090436431728514, 0.19799892510916706, 0.27647097646219465, 0.14445060653461916, 0.25355305680957785, 9.999999999998899e-05, 9.999999999998899e-05, 0.07003441835380597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646146326941963, 0.001431033587711461, 0.0035939708915270208, 0.05184833281915091, 0.05030505018114506, 0.04283094169224022, 0.06857559342001185, 0.07530239364182256, 9.999999999998899e-05, 0.019918811836611372, 0.16651558847604397, 0.039808065000412673, 0.0052341643818344386, 0.055595967390704604, 0.03899151267755263, 0.2683529066821876, 0.19371602576908842, 0.1035199568007169, 9.999999999998899e-05, 9.999999999998899e-05, 0.12630063563754268, 0.07904118445350017, 0.04453367170328515, 0.04504236200529399, 9.999999999998899e-05, 9.999999999998899e-05, 0.07112694562025113, 0.34952754650839, 0.08643396117094493, 0.058790102231312646, 0.08620556809877489, 0.5755857008058621, 0.5939362661664814, 0.5753329536550094, 0.5661883159772021, 0.6105457929941217, 0.20970749763265772, 0.5883673610059532, 0.5800764267021052, 0.5772415387719652, 0.11844344172209731, 0.06763615577064919, 0.02111568041264289, 0.09412243958564792, 0.10517638183669187, 0.10224491379705103, 0.06316211271973493, 0.0988471255170893, 0.12050779302391879, 0.27417527962061383, 0.17144937279367511, 0.1532772256040713, 0.28971903383475517, 0.2785901786645384, 0.1948479195445112, 0.17923621350022656, 0.2967506548515261, 0.19668622690212967, 0.42621307176727674, 0.37047756859272973, 0.262043198992271, 0.3460783535892219, 0.17695191611599237, 0.296819697685322, 0.3084929303195827, 0.28028217590466775, 0.16370124148881826, 0.12230371541556329, 0.28608924357348864, 0.1409383931360808, 0.28978467188828183, 0.15245287078679648, 0.22824047092437294, 0.21988958472468323, 0.20058501200308854, 0.0744494423608203, 0.2103297794331136, 0.21179639359692348, 0.20522176221844834, 0.2039808187222305, 0.14973167617774819, 0.23114245064730188, 0.23391561610946665, 0.20143173377994983, 0.21882736090122046, 0.21839271532629623, 0.25389970801606987, 0.20590187911098323, 0.19440748972241007, 0.2338558142286411, 0.22978295625193224, 0.20314716958231438, 0.18211890944053577, 0.22823425990868407, 0.18946384131146055, 0.15621918205005136, 0.15495350769370086, 0.9563432353708885, 0.20233577427611427, 0.909046596816255, 0.15929897396730353, 0.11418354529161245, 0.16332438872415955, 0.6839772447100596, 0.21342149313417091, 0.8890608932527403, 0.21314459526462293, 0.15639343021809748, 0.21279076750151193, 0.10432032731906127, 0.16996582789254333, 0.7772268612645463, 0.19747173777309435, 0.21612386935846895, 0.2007113531951097, 0.1823682196734775, 0.2025426194776071, 0.22546355846025812, 0.22463421030778863, 0.2718124390648413, 0.2009189818828374, 0.08661743337241645, 0.09264468325499142, 0.10123239971280129, 0.15295721943439222, 0.09946373024602695, 0.0820243911855919, 0.09701277135617858, 0.08787580992905664, 0.10260868452084593]}, "mutation_prompt": null}
{"id": "2106553a-11c5-46b8-a45e-7c21b23480ab", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "fb9dc135-994c-4783-a9b9-9b238fe72152", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "0ca3fec4-4dea-4f68-a2fb-e3b7dd4cf3f2", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.9, 0.9, (self.population_size, dim))  # Reduced initial velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5  # Slightly tweaked cognitive coefficient\n        self.social_coeff = 1.4\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.52:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.8\n                self.cognitive_coeff = 1.7\n                self.social_coeff = 1.2\n            else:\n                self.inertia_weight = 0.4\n                self.cognitive_coeff = 1.3\n                self.social_coeff = 1.9\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm optimization algorithm with improved exploration-exploitation balance for enhanced convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9525536081741937, 0.953330657697307, 0.9343726436025255, 0.9558142119770459, 0.9566282226777165, 0.16156183069980556, 0.18338270483805297, 0.9451996232219397, 0.9406151324280363, 0.8726204269175862, 9.999999999998899e-05, 0.8686532720745394, 9.999999999998899e-05, 0.8975614887836966, 0.8659650052502937, 0.8896060823586116, 0.882254883537624, 9.999999999998899e-05, 0.13641783461143275, 0.7073469120420921, 0.1632912789336015, 0.14576462357336173, 0.15604387210178683, 0.11848965083663265, 0.0609665761532584, 0.05202791432693754, 0.11789099727527141, 0.1274418936041145, 0.03921823790434342, 0.16425621960550596, 0.12306523810164705, 0.14520549025060558, 0.12269667605054402, 0.06686027887344936, 0.1269037846609946, 0.04000357742889593, 0.9942191310364605, 0.9928053210504502, 0.9956003207379357, 0.9941769104841472, 0.9917947923492035, 0.9898934767869971, 0.9921883930006774, 0.9930103265218646, 0.07494455219407758, 0.858139610568109, 0.060104645352034636, 0.05972469051588036, 0.1554734032072982, 0.15466864527577362, 0.1545446907959458, 0.12876500070685615, 0.08960241983683559, 0.8260495156168737, 0.17304477360665949, 0.11195758558484614, 0.37901432625679654, 0.15706078023676984, 0.1786288175171996, 0.11790973044853359, 0.1084810298493517, 0.24061551708395745, 0.11655493270449502, 0.10163500472612652, 0.2799705389839193, 0.23275828112579378, 0.23861641889347507, 9.999999999998899e-05, 0.2016133177167092, 0.1338252817803366, 0.17649478234886606, 0.2291520769875196, 0.25357178557444926, 0.2001274989707027, 0.20040208709414487, 0.22163227548333142, 0.2529263116067867, 0.24704800239302627, 0.28599105563149296, 0.10685943088679706, 0.264776531521685, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030903547174843116, 0.022290594141323172, 9.999999999998899e-05, 0.04619054595371164, 0.0007383745710048961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918412329813452, 0.03479794450976603, 0.11505420152958268, 0.07339319791647758, 9.999999999998899e-05, 0.03763086129657911, 0.13395976795332665, 0.0759958968615485, 0.007429878185966632, 0.054881431249800494, 0.03868053937242166, 0.23304879692129632, 0.14490016051777288, 0.10488342253341065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0794945005154093, 0.04503098707436948, 0.04510256177048255, 0.04284319596057662, 0.040405719652837124, 0.08146774870153917, 0.17141403414424605, 0.08619739890377387, 0.09655869481101875, 0.08637174682543136, 0.5628874523365026, 0.5543574912086466, 0.5364951584992661, 0.5789883264841664, 0.5601092218274872, 0.535766291613101, 0.579364798124138, 0.5894043297146345, 0.5804937330950812, 0.05687522524929123, 0.11643815215648845, 0.04015608021773165, 0.12612074311602595, 0.08442452980295945, 0.10301117209803201, 0.052732967603799086, 0.10245389204156075, 0.07900619870027636, 0.170407997692967, 0.20563988866485683, 0.51925192255819, 0.34502808314471545, 0.2501355984613307, 0.31860825191516795, 0.16674968444356442, 0.2346072444566657, 0.19158324777788927, 0.24803239955356216, 0.31760133942607705, 0.20680917648574382, 0.21970275640111436, 0.18203500017018137, 0.330950884006428, 0.23206387481928326, 0.4012937560265787, 0.1638836087769474, 0.11220880352970397, 0.21092591669164829, 0.16961160863155933, 0.22845193644849215, 0.13918281450191605, 0.12244002900841222, 0.17912174628594058, 0.2671620095885914, 0.06963091801368393, 0.29768428578199513, 0.2399045739079072, 0.19430041786398855, 0.2130800950952776, 0.15854418526157732, 0.21626455857349958, 0.23772276531784742, 0.17048130732872557, 0.22750965390096756, 0.20571080115316276, 0.22515141370397473, 0.8741180367675093, 0.1998701608555309, 0.19627783470637983, 0.23046171480030375, 0.19481283754753043, 0.1961790512642212, 0.21251780529880593, 0.18958233793649426, 0.16654522383366677, 0.15509691531902225, 0.9492189939936593, 0.20239038838657086, 0.9148621663070595, 0.1519445646387274, 0.11417058068024633, 0.1567416282546077, 0.7669088227804648, 0.1671798324508561, 0.8835326834245917, 0.21301105320125457, 0.15624841243333665, 0.21337735767252441, 0.10431486568934856, 0.1694969791318499, 0.18939775765969935, 0.19896295023247468, 0.19828317425620134, 0.1831977561495831, 0.20128106813485636, 0.20177419933941376, 0.22129316715588143, 0.22457616175541217, 0.2371190850166519, 0.20808248916410188, 0.09806013650806256, 0.09876690623343443, 0.0774683552823251, 0.08561276836277176, 0.09822273690925798, 0.054721987044547005, 0.09248409328443319, 0.0678351376785502, 0.10110591843594396]}, "mutation_prompt": null}
{"id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 63, "fitness": 0.2832603784581752, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.29.", "error": "", "parent_id": "21176775-d12c-47b1-b7f4-b70b74ef920f", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "b22b82a0-b1c0-4c12-951d-eea7045493c2", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "da2e018c-9347-4303-9be4-9bb3cb3811c3", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "b428fbd9-8ef7-4515-bfd0-bf69bc0f1e6f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "308e3664-f889-4ce9-b5db-940a186dd773", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.68  # Slight adjustment for enhanced exploration\n        self.cognitive_coeff = 1.57  # Refined cognitive coefficient\n        self.social_coeff = 1.42  # Refined social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.54:  # Adjusted threshold for better balance\n                self.inertia_weight = 0.76  # Fine-tuning\n                self.cognitive_coeff = 1.69  # Fine-tuning\n                self.social_coeff = 1.25  # Fine-tuning\n            else:\n                self.inertia_weight = 0.44  # Fine-tuning\n                self.cognitive_coeff = 1.38  # Fine-tuning\n                self.social_coeff = 1.85  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "A fine-tuned adaptive swarm optimization algorithm with improved parameter adjustments for enhanced convergence speed.", "configspace": "", "generation": 67, "fitness": 0.2711883140895298, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9428400968935566, 0.944758405914122, 0.9483566778953681, 0.9445130348787936, 0.9454698189575107, 0.1615513152985264, 0.9542606095015344, 0.9448554335674841, 0.9495651963578233, 0.874703220741742, 9.999999999998899e-05, 9.999999999998899e-05, 0.8890114796633531, 0.0511914944730999, 0.8712698658587257, 0.8933029996347646, 0.8959398801398977, 0.8662143355410438, 0.16316672327072224, 0.19339376722470591, 0.17140930336706484, 0.1939061172165626, 0.07480887528368163, 0.0673150541994928, 0.057903423330567194, 0.13344713919773754, 0.16096664222067214, 0.11382292398262017, 0.029020530654094934, 0.11883891234755828, 0.10872371249046175, 0.028860021043267126, 0.1139112617452025, 0.14769631036276865, 0.0967885626394056, 0.07460679406490967, 0.9941579492522564, 0.9919842030048567, 0.9955989620047414, 0.9934768122983403, 0.9918019959931251, 0.9908456706521669, 0.9921864464264675, 0.9930373356376024, 0.07494078768846435, 0.9068752635971451, 0.060198598195562614, 0.05982664023568651, 0.15482062287385656, 0.1545729945384865, 0.8379949953890828, 0.089359360258768, 0.08962015053461403, 0.088328745217088, 0.21825446876008925, 0.13674976580661746, 0.210571855068721, 0.17917948449921772, 0.19893644742614214, 0.11787039027139634, 0.13063954417291168, 0.23468035079134453, 0.3099147346306439, 0.19314556803429772, 0.22652677104111407, 0.2237180990479848, 0.20058492664418104, 0.2064375200157833, 0.24304629076819817, 0.13810297259545623, 0.2246129928009135, 0.20687784645658858, 0.2579064074057653, 0.23939670792838053, 0.25096145548585214, 0.1347171480903402, 0.29562839700076293, 0.26247290566316694, 0.2665892960037609, 0.035687161348193386, 0.13469969000107207, 9.999999999998899e-05, 9.999999999998899e-05, 0.032921726427288744, 9.999999999998899e-05, 9.999999999998899e-05, 0.009332476744556728, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027682221366114312, 0.05790373996332432, 0.034015110734049614, 0.1268478184432259, 0.09462171486075188, 9.999999999998899e-05, 0.008726170773351583, 0.03898028551978583, 0.06341862162976142, 0.07492437882132275, 0.10503535633703853, 9.999999999998899e-05, 0.14263321960937936, 0.16893279006346706, 0.1075431869359581, 0.09777603501687371, 9.999999999998899e-05, 0.18005038177309818, 0.07958173356748866, 0.045156832577905925, 0.04275779098348598, 0.04486055195015437, 0.04009661483370308, 0.03184919143752252, 0.09809357437594424, 0.08640351612255603, 0.18294370802530635, 0.08567201742159103, 0.5709034147420089, 0.6077119429797694, 0.6221254896864079, 0.182689641292629, 0.568630811746724, 0.5930184326691788, 0.5906872098107594, 0.5819060066158135, 0.5874930189520746, 0.0731031511117719, 0.0979688648118261, 0.08500585171057229, 0.0725497518454653, 0.08694926240145762, 0.13758463290979928, 0.08747871210418035, 0.13575415774466926, 0.07615342133894543, 0.15978704720896453, 0.19572993037573416, 0.2787846031371102, 0.2139606147242623, 0.35639973110319567, 0.26473079593645943, 0.18387149733244834, 0.3648185915123211, 0.20445408347573313, 0.18679619323957575, 0.29618036487684385, 0.22323483262539368, 0.4792246675127563, 0.19719283416020195, 0.4415067816274424, 0.27077426743040556, 0.32541183162824516, 0.2959737421140225, 0.11962924470588765, 0.19277224950772753, 0.12056149977372443, 0.20432268791269825, 0.13942539342268423, 0.19377000094560848, 0.2326454024840967, 0.41432652058898856, 0.08225626438200995, 0.2600844799199211, 0.2341372980955414, 0.22387279110889646, 0.24252729068348522, 0.15736632048720478, 0.20467976130605647, 0.2043690882671243, 0.22564748744077345, 0.24511143227763066, 0.1990167588336087, 0.2020721428492267, 0.18415928306560125, 0.20285610009690813, 0.18882420010627354, 0.25814769792246206, 0.19553801308650132, 0.18528307064079297, 0.2206561024698498, 0.1895367367231655, 0.16677626348325536, 0.11501185911640877, 0.9537972293949478, 0.2022004881933579, 0.14752528434317524, 0.16852525684223818, 0.11421954880464069, 0.1633630258121901, 0.8726068827780065, 0.2122647521840647, 0.8002494274061118, 0.668566276644693, 0.15607470375098598, 0.21306953284641827, 0.10436219056200857, 0.16979782959740064, 0.8286754220930143, 0.18455433614115402, 0.24626773894586618, 0.23251374483779697, 0.2762637972894688, 0.20069231751398087, 0.2084041627105222, 0.2310178665627134, 0.234703488354714, 0.2782296233166831, 0.0932123597932355, 0.07991738872137433, 0.0982629759517496, 0.09596598818408597, 0.08356463047650975, 0.13300644807364992, 0.09301457717356532, 0.08182800167375115, 0.09915548156353793]}, "mutation_prompt": null}
{"id": "66cbcf96-12a4-444e-9b81-0f3e3197d538", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "6e0846a1-873e-4a63-8eb5-974b8cb6f61b", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "245732b7-b5df-4540-910f-4a37d63d13e0", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "667aee6a-7f9a-4998-a393-f435a067f510", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "db248c3a-1a35-4885-bc05-8acdb7735014", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "e2aabe64-2c11-4c1f-ac76-1a5ce4a208a7", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "efcfd2b9-376d-4269-921b-c75cc39c4560", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "3209f040-b10a-461d-b83a-1fdddf390b2e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "20bb686d-e88f-46d0-97cd-0f0c569c9e49", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "7d5ee804-5a87-424f-957a-f0a634b92b84", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "4d0f9af1-85e4-4766-b1c7-1cf7bbd171fc", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "5b81fb71-55f3-441f-9a47-5a37d60063c1", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "a52fe8b4-b31b-4a2b-a652-978ec9119cb4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "a3fd8dae-e17c-42b8-815c-b5ee3edd9d87", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "74a6544b-5950-4236-894b-c6634c04ca4e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "ad392376-432b-4ecc-9705-4136c2f0d8c1", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "a586fb41-8d75-4f1f-b367-c20f25df5452", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "1a4ac211-0e22-4ab3-8393-2a257b330114", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "1678c2ec-d197-428d-abe6-cb29fc095083", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.68  # Adjusted inertia weight\n        self.cognitive_coeff = 1.48  # Adjusted cognitive coefficient\n        self.social_coeff = 1.52  # Adjusted social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.55:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.75  # Fine-tuning\n                self.cognitive_coeff = 1.69  # Fine-tuning\n                self.social_coeff = 1.19  # Fine-tuning\n            else:\n                self.inertia_weight = 0.45  # Fine-tuning\n                self.cognitive_coeff = 1.32  # Fine-tuning\n                self.social_coeff = 1.85  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "Refined adaptive swarm optimization with enhanced parameter tuning for improved performance.", "configspace": "", "generation": 86, "fitness": 0.26281041568249436, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.29.", "error": "", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9520511706503586, 0.9532800130540469, 0.9502928424581367, 0.19133723047360185, 0.9519820932575738, 0.1918441399680293, 0.9610518448310377, 0.9467715470280437, 0.9531100569911395, 0.08163575712668658, 9.999999999998899e-05, 0.8850328180900358, 0.861841415734764, 0.9012841118118159, 0.8901993342793674, 0.8951649192469442, 0.9103364462006249, 0.8657753732588668, 0.09414314578058547, 0.19558933743289164, 0.11878211177408116, 0.06349687143058813, 0.07593227232927235, 0.12817734970737404, 0.12499977968433851, 0.05045756020754466, 0.19201319853459442, 0.11360446369855903, 0.028243247625371448, 0.11246479559032518, 0.16320470349117933, 0.16026879952494966, 0.11165242546253162, 0.09074966150552322, 0.13886369664812426, 0.13555155872053182, 0.994152149072105, 0.9928244070896541, 0.9953928192667589, 0.9933688568189816, 0.9918088562837002, 0.07493673254452549, 0.9889060806838298, 0.9930141278734174, 0.988907590348606, 0.8866030905565803, 0.06021876639052992, 0.05951332567378598, 0.15375026910119105, 0.15421513065194126, 0.15434237488413405, 0.128034518501285, 0.08964759467391581, 9.999999999998899e-05, 0.1599645173083536, 0.14294375204365517, 0.21735060815407703, 0.3457572374077731, 0.20530958089781248, 0.18915125031694602, 0.06821300373316574, 0.17989659752138976, 0.15195210110852253, 0.19982584457038266, 0.20700285013568642, 0.132943722649014, 0.13394103793430767, 0.2166965091181603, 9.999999999998899e-05, 0.1968085363760962, 0.22617501321896116, 0.19277911524114755, 0.25952728516517265, 9.999999999998899e-05, 0.1363695403411621, 0.2100015982302631, 0.16205158861174862, 0.2294703735328606, 0.2851831662431257, 0.03571193520110505, 0.13546810740615078, 0.0005395351324450903, 9.999999999998899e-05, 0.010437675524259782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003545496148910754, 0.0036076993713312078, 9.999999999998899e-05, 0.06005261559575503, 0.02977855470203883, 0.1008774459039894, 0.07575188449589498, 0.0022563911297005523, 0.033826824605109995, 0.09512340753167048, 0.06216458926391755, 0.007394752358589218, 9.999999999998899e-05, 0.03915093296424388, 9.999999999998899e-05, 0.08656635707539206, 0.10439908174857959, 0.10500912083113167, 9.999999999998899e-05, 0.0859953660046302, 0.07937437794548152, 0.04506744396375684, 9.999999999998899e-05, 0.0553885674131549, 0.10998762653869576, 0.0258001497264011, 0.006935794328104428, 0.08583301323959203, 0.05034058006932263, 0.08652140988136359, 0.5863141193521432, 0.5902053872383888, 0.5726234119531444, 0.5653739713986348, 0.6060590690242736, 0.20991408992610783, 0.605764854718377, 0.5982625462314985, 0.6092586206461823, 0.05940858921564851, 0.034094039250394226, 0.06147950740593133, 0.12795825759885116, 0.12437072086380818, 0.14488881770719741, 0.07618036033847386, 0.13389453124727368, 0.08170654178464487, 0.2432542988404176, 0.19462722596283744, 0.1313236400437623, 0.2162447895634526, 0.42750193184452157, 0.19607531558051616, 0.2189137436346752, 0.18231616499659764, 0.19704573687674898, 0.2019839754662528, 0.2625837039867953, 0.3342140473091808, 0.21172840643622837, 0.1682410078351222, 0.38589951211957685, 0.20117690694106793, 0.42093329564703996, 0.1911246540092877, 0.1477998972317841, 0.2384076576780635, 0.1431088561700602, 0.27875202623528583, 0.14984017985145526, 0.21437562574091018, 0.13499241464757905, 0.24346134956305265, 0.23048214742464657, 0.2671357104342158, 0.1998283645019976, 0.2406262373473964, 0.18860424005430132, 0.14758850876195118, 0.2121039040329724, 0.23659138241224953, 0.20201579951429083, 0.2686586318300539, 0.19726486725511216, 0.21273445229818566, 0.8989437369221345, 0.21199282672690456, 0.2303009476083021, 0.19376378915769843, 0.19413641696870887, 0.1995939891754165, 0.21379842639602997, 0.18975895128814313, 0.16687626637628183, 0.12483375217623871, 0.9642722030316205, 0.20254624879084382, 0.11519833742900132, 0.9644939687890351, 0.12658558452504298, 0.1683259128472624, 0.7250694851674446, 0.21314581348809303, 0.7305081904401893, 0.21424527640423063, 0.1571890367352078, 0.2128911915333711, 0.10436349479979978, 0.1699256525709958, 0.8144096715365077, 0.19840606636154345, 0.18813989521826024, 0.20145935735057707, 0.2069275888845341, 0.2635255256243164, 0.21464693601297735, 0.21366899785109206, 0.18465159329964131, 0.21073174646260173, 0.10510803618413977, 0.06323460564034467, 0.09982052993101354, 0.08768385607405127, 0.11429997660767766, 0.09707139773620022, 0.0775351017446192, 0.0929966109464655, 0.09831039863871116]}, "mutation_prompt": null}
{"id": "3dae8112-386c-4347-98ea-7ccdde2741b4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.67  # Enhanced inertia weight\n        self.cognitive_coeff = 1.58  # Enhanced cognitive coefficient\n        self.social_coeff = 1.44  # Refined social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.54:  # Minor adjustment\n                self.inertia_weight = 0.76  # Adjustment\n                self.cognitive_coeff = 1.70  # Adjustment\n                self.social_coeff = 1.20  # Adjustment\n            else:\n                self.inertia_weight = 0.44  # Adjustment\n                self.cognitive_coeff = 1.34  # Adjustment\n                self.social_coeff = 1.87  # Adjustment\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with precision-tuned coefficients and enhanced velocity updates for improved optimization performance.", "configspace": "", "generation": 87, "fitness": 0.2684092884183666, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9450208161295893, 0.9532792508698742, 0.9472832820923525, 0.19128713900127148, 0.9546048707130743, 0.161554862838872, 0.1833959855953129, 0.9447605693960192, 0.9519870986173445, 0.9031529638117911, 9.999999999998899e-05, 9.999999999998899e-05, 0.8213432466082357, 0.8611742734914107, 0.8967055214172148, 0.8738815652245927, 0.9107482452932953, 0.8932165102656487, 0.1924370779914657, 0.13621645523235748, 0.144697898599502, 0.07884865547631248, 0.18047068329148097, 0.06345431771934251, 0.11200828546627595, 0.899351661628298, 0.07307430055879127, 0.11981140643227262, 0.14930625360291672, 0.08663606970381243, 0.08366726045022532, 0.07286717877657523, 0.16495393556965865, 0.09842435874656252, 0.1635000903770888, 0.04096297221413747, 0.9941651284956461, 0.9928187639930818, 0.9955960853003643, 0.9934826689108476, 0.9918062860277552, 0.9899465514848058, 0.9921890802837647, 0.9930266602050839, 0.07494132595689829, 0.8733217880428435, 0.06009323814033907, 0.05980929102393817, 0.15532875613710606, 0.15420030186568257, 0.15478093365373224, 0.08443013969665136, 0.0896074167845925, 0.08863523687500385, 0.17306124684187396, 0.11837669223773684, 0.1574774244073497, 0.2810555977537166, 0.19527754615847837, 0.1143296428229934, 0.10249912223827673, 0.2209645952440763, 0.16742757537189135, 0.22147781930616162, 0.3255133810326707, 0.13416824720187037, 0.20073686525795698, 0.12988361037889495, 0.225580545602022, 0.25054618569310605, 0.21960724675484256, 0.22953353366009144, 0.2387907201103029, 0.18395163122410618, 0.20820377505116572, 0.2513651351920153, 0.2294362319371539, 0.2530105534862642, 0.28811416160890535, 0.10135686095614749, 0.27193636553218814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020412149175761396, 0.0002251283111504021, 9.999999999998899e-05, 0.04827979162347362, 0.04578875397561877, 0.13052847954691482, 0.09950455943688252, 9.999999999998899e-05, 0.04427607879408191, 0.04153860363410644, 0.0753393395413392, 0.08045492645631513, 0.06995290969934487, 0.03985992945899741, 9.999999999998899e-05, 0.1746104915977834, 0.10498223150167885, 0.08513595898388526, 9.999999999998899e-05, 0.2598427332515503, 0.07943720073865224, 0.045024959522685815, 9.999999999998899e-05, 0.04512570338149291, 0.11745369044219134, 0.0425263070223828, 0.069125010766521, 0.08676025526762987, 0.05910611936293786, 0.08634694490278993, 0.5476979197169296, 0.5555216553948183, 0.5769165447062838, 0.1819901573312206, 0.688603424046824, 0.20983808334367227, 0.601956748795491, 0.6084142335430878, 0.577519594462673, 0.12407184587598263, 0.081981554246907, 0.11261553086042808, 0.12020147741259535, 0.1186097994984, 0.11633842387087212, 0.06742180215874338, 0.16626931201300377, 0.08453763389764646, 0.2435014598408306, 0.19997440414018852, 0.21827134947325533, 0.21032062442880628, 0.1857373770907953, 0.11641486986804861, 0.17984352085816102, 0.18949892474829033, 0.3226147530435973, 0.41809235888843577, 0.39130985353327585, 0.20526357698922404, 0.26577912695838546, 0.19113603385464106, 0.20817112435319995, 0.17609450058239295, 0.3037729241785956, 0.19721567146105823, 0.20523432649992723, 0.25662175557205713, 0.15912773718268158, 0.2706771387956023, 0.14238126611082713, 0.33165051638015275, 0.16485878805492704, 0.3604302465253102, 0.0834732263523269, 0.2079353252965167, 0.24027050693823016, 0.23841586554935146, 0.21403248374792416, 0.15688201581531225, 0.21944156289626948, 0.23119656635642405, 0.22324035464442438, 0.26735780140606435, 0.19065939964389222, 0.2067844023173182, 0.8447965897021064, 0.2577645591682036, 0.21422680928460136, 0.22847281028452227, 0.21474929995323078, 0.19595327902796955, 0.18723422540126622, 0.18955309288858424, 0.2532754265869136, 0.15481980810707396, 0.9660005411233109, 0.20262742955574065, 0.9313220239773381, 0.20732896234433507, 0.11417009351271024, 0.16351842401290428, 0.6679578406126948, 0.2135637003486528, 0.938771749785022, 0.10531755514050678, 0.15647702791206197, 0.2121889547167185, 0.10440324421718217, 0.16991719992015564, 0.8184623960851104, 0.23414278170320635, 0.20723613614929404, 0.2050655162129108, 0.21901655744039006, 0.22460622690461518, 0.22086590118566096, 0.2240622135910979, 0.19245912922061137, 0.23113036611017157, 0.09222951676256741, 0.06178850982690287, 0.09986580646875076, 0.08484986437790698, 0.10267498239067996, 0.07626532462229751, 0.06989468019581369, 0.07983992492020664, 0.08283598378153378]}, "mutation_prompt": null}
{"id": "5d9898d7-0266-403c-91cb-889a905ab280", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "adafd999-d3d7-400e-975a-405e78bfa6ed", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "1259de3e-9a50-4de8-90cc-c9234054ab2b", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "e63845fd-c952-4f3d-8d15-a87575010391", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "b56aa73c-a11b-4ab4-9136-60e40914d32c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "1e3dcb50-dafe-4bf7-b5b7-dc011000fbe3", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "c155ff66-f591-4610-af61-5bc1601436d8", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "fe4b2c81-88e8-45d0-b046-29e5c4662983", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "6ec84eca-ce55-4095-9cb2-df338f058a61", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "be7a2a27-46cc-4f3c-b2ee-3632afb489e2", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "454b5935-7dbc-42e7-a91a-1d8bb06b5480", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
{"id": "a0e5be96-b4cb-401c-ab09-57f8bb237c16", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-0.85, 0.85, (self.population_size, dim))  # Adjusted velocity magnitude\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.65  # Slightly tweaked inertia weight\n        self.cognitive_coeff = 1.55  # Tweaked cognitive coefficient\n        self.social_coeff = 1.45  # Tweaked social coefficient\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i].copy()\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i].copy()\n\n            if np.random.rand() < 0.53:  # Adjusted exploration-exploitation threshold\n                self.inertia_weight = 0.78  # Fine-tuning\n                self.cognitive_coeff = 1.72  # Fine-tuning\n                self.social_coeff = 1.22  # Fine-tuning\n            else:\n                self.inertia_weight = 0.42  # Fine-tuning\n                self.cognitive_coeff = 1.35  # Fine-tuning\n                self.social_coeff = 1.88  # Fine-tuning\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm optimization with fine-tuned parameter adjustments for increased efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e951ac54-33b2-4e47-95ff-04c3687c2ef2", "metadata": {"aucs": [0.9476563042323219, 0.9516871925140196, 0.9347957996940668, 0.9487555380767306, 0.9537676832700454, 0.16156197836786246, 0.1834016230220602, 0.9370794978809804, 0.9503472332003186, 0.8733400420663945, 9.999999999998899e-05, 0.8791109778933123, 9.999999999998899e-05, 0.04920928973933347, 0.8742189076350251, 0.9031002087846004, 0.8949875323950297, 0.88290118944959, 0.13537826666777142, 0.19063078568622394, 0.7380608484798565, 0.07791858027341592, 0.7393980579169047, 0.0761338188562879, 0.0781733701238374, 0.05692842703320644, 0.09404679202894517, 0.12736259032877584, 0.12609667304578775, 0.15893469978846353, 0.12052494421795634, 0.11886421672477698, 0.10756860288772185, 0.06496686753757364, 0.1217699916530448, 0.07064623401689929, 0.9941775140628316, 0.9928020517072753, 0.9955980168326894, 0.9935497558544651, 0.9917973089012501, 0.9899442805723789, 0.9921934053128727, 0.9930201533915536, 0.0749429318140048, 0.8670053423552129, 0.7029873913496636, 0.05983408674935031, 0.15557172626905535, 0.7618047531313175, 0.15475706454490734, 0.08917291887868273, 0.08959496799088174, 0.08893168964054898, 0.21806311888793772, 0.15593635712942322, 0.2506970577850286, 0.19502251574122598, 0.19681445692199173, 0.11790270364824229, 0.17857551559701423, 0.40037037352204574, 0.32305795204754983, 0.17387793970033782, 0.2364433691671528, 0.24426941058174934, 0.23264906784929051, 0.15235108007361742, 0.22490064663634957, 0.2452577925666134, 0.24440642839773585, 0.21918426596807272, 0.1385422734312628, 0.20890584010188018, 0.24245442031363817, 0.24121878268867658, 0.24657154465972575, 0.27720436234547674, 0.26392750113541874, 0.1434139814143378, 0.2723187455088605, 0.027490307981297923, 9.999999999998899e-05, 0.10650804468369846, 0.019481495037997454, 9.999999999998899e-05, 0.05872042223558471, 0.0006985746395684611, 0.0004141804280032302, 0.04101151355809485, 0.038778871937011905, 0.055681436614630764, 0.12096871634004913, 0.11129505343398483, 9.999999999998899e-05, 0.009651601485575534, 0.04182882548827038, 0.07269351852646466, 0.026973786802102273, 0.07916258838466184, 0.039338125090424225, 0.09937758293612076, 0.1469242474789022, 0.10510950287349352, 0.10288676768746641, 9.999999999998899e-05, 0.10774123223497323, 0.07923878838675336, 0.04489788920737936, 0.04501231709938769, 0.04478341749328374, 0.04024448608126674, 0.06800413063195831, 0.24696745170691015, 0.086786506871812, 0.13398850871807788, 0.086064223554574, 0.561154790192679, 0.6072135609151825, 0.6322264581041344, 0.6126869340049862, 0.5970077878802278, 0.5605146655845807, 0.6483944413916114, 0.597164190880844, 0.6261082619797707, 0.029550600162735474, 0.0874739620035292, 0.07744948286896902, 0.10631111676538274, 0.12481620024337992, 0.12674106798777318, 0.06401733528540177, 0.11278147446937381, 0.07116983687031775, 0.2365236696300791, 0.1743519080671314, 0.13125583431559174, 0.19708299952896013, 0.22176112675804083, 0.11705642628161417, 0.19944250214179637, 0.2882865849497518, 0.201362938039235, 0.2006295039132594, 0.18031070808962468, 0.2140210595358345, 0.2251279445599106, 0.1719916498222236, 0.27101113767344964, 0.29065717853995765, 0.52104560299099, 0.1749219496914236, 0.19121185110391792, 0.29611131549677394, 0.12858237976933684, 0.25029053429497794, 0.14461488045530346, 0.13359890086907888, 0.19097768035312468, 0.2736284743525236, 0.09141643334885752, 0.22715534400638082, 0.2626806203420379, 0.21555692437190455, 0.2524666469872967, 0.18452308951425334, 0.22507465969501939, 0.24330088710412667, 0.2250079815256768, 0.17868510713545915, 0.1935769057308555, 0.227189027674636, 0.2020282339004974, 0.24078545938838858, 0.23252197217802884, 0.22604524990348307, 0.19300775522261793, 0.18737346833978585, 0.19954220758664765, 0.18947867371239013, 0.9346573688562037, 0.15494196176191688, 0.9571325061096602, 0.20255572263467114, 0.9049915011328118, 0.21329088942803187, 0.1141865441706641, 0.16333060038493719, 0.8170239223006985, 0.21370157131427103, 0.743583776823574, 0.7388580515126653, 0.15602518788691455, 0.21268770256707137, 0.10437351118701155, 0.16950401255860192, 0.7751792239227147, 0.20252065326604474, 0.21161065625273845, 0.20952401278194244, 0.21021294450184003, 0.21266926681957687, 0.21097520872827347, 0.19497412867117747, 0.19306507318738675, 0.1952109652474081, 0.11102168604302476, 0.08952305201462463, 0.08256221311664336, 0.136944643897561, 0.08575697582101216, 0.07820311784141554, 0.09744699006666979, 0.07158491897713415, 0.0976838843972977]}, "mutation_prompt": null}
