{"id": "ea9d4cc4-7b45-4aad-9bf2-7cfdf97b273d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4, 10 * dim)  # Ensure at least 4 individuals for DE\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover rate\n        self.temperature = 100  # Initial temperature for Simulated Annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Simulated Annealing step\n            for i in range(self.population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            # Cooling schedule for Simulated Annealing\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.17945070092817583, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": null, "metadata": {"aucs": [0.30093368859097513, 0.319417510406349, 0.35476901808997763, 0.34487738062599516, 0.3512890750381631, 0.3219309790841879, 0.34517924431644986, 0.3323780370392717, 0.32781368154295176, 0.16096301661966494, 0.17342798980748209, 0.16364191151564667, 0.16779548965199176, 0.1534986212398991, 0.17745512581183465, 0.17536883142790627, 0.16308768776102445, 0.16088840499104806, 0.08780352842425831, 0.08092527852531928, 0.09693434523683864, 0.08822740834081921, 0.08146124558099455, 0.08709911611364496, 0.10367769074067235, 0.0884305683890052, 0.09147450217619768, 0.07208273111167496, 0.08066297026816083, 0.07303795278236125, 0.08156408513968239, 0.06964054805020825, 0.07704773504902551, 0.0739793799172912, 0.0766605156896849, 0.07781147901897656, 0.8959384107138105, 0.7047404856966282, 0.8494906910863557, 0.7572855595996216, 0.8295676000173624, 0.7795516743019055, 0.8259283100312378, 0.7733053998482904, 0.9153661185068563, 0.16127361727014666, 0.15185064527719827, 0.13875966216122848, 0.18060100937772494, 0.1649244677767414, 0.16400903875220885, 0.16464659637250423, 0.1708942047697043, 0.17131423743642993, 0.21514510366359796, 0.22338900960041497, 0.21898495828200593, 0.2770068842437716, 0.2490635685886513, 0.23144189356062772, 0.2111569948639893, 0.19995119316144616, 0.21652023722775282, 0.14000300422988532, 0.09910751724635225, 0.08979911322743117, 0.11012660757546278, 0.1198728859277517, 0.11972060040283306, 0.11411730822268495, 0.12045812820102242, 0.11013129334214788, 0.11684636346033817, 0.1072802427042483, 0.11053693181489621, 0.11630164066648907, 0.10013719941901233, 0.08436305093935514, 0.09412637099563326, 0.11172558125964693, 0.10069779468350681, 0.07077210501023223, 0.05273363478233606, 0.04979479210256321, 0.03554110600436544, 0.06107824670306761, 0.06614825669836633, 0.03950712674651946, 0.047455161974860105, 0.0452687615858125, 0.14067336347295278, 0.14425500554218784, 0.1547046039949228, 0.15452847884086152, 0.12794368294015768, 0.16155118748303865, 0.1560336242062833, 0.16572928828722, 0.18895749971575115, 0.021778712564789582, 9.999999999998899e-05, 0.014558122375366467, 0.004576645002004276, 0.011565551579104438, 0.003165079278612759, 9.999999999998899e-05, 0.005109736238907536, 0.0015828571961086224, 0.05915417881938301, 0.06981505004570154, 0.07365546873199313, 0.06811859518356045, 0.05442025236303838, 0.05914901702933839, 0.06302914162982365, 0.0617782551513697, 0.07399343977366357, 0.300318023671721, 0.3096533414359799, 0.3099039877521893, 0.31818981877507235, 0.3107399515731125, 0.31461966659446194, 0.3182642817639577, 0.3083395700773597, 0.3130090776627319, 0.09014081403023444, 0.08362300647905319, 0.09927492089772494, 0.08758265013467914, 0.073567096684798, 0.09369055449975694, 0.0912460258148089, 0.08450857932064859, 0.08281407091615689, 0.17499427480877516, 0.1672510723987114, 0.1540987932157334, 0.17069521962659895, 0.16662312956644532, 0.17788036538693397, 0.1679390598168864, 0.153882140892443, 0.16836403699158276, 0.2073634690155749, 0.22044639882030792, 0.21736849162759198, 0.19919728072369491, 0.2086696801995599, 0.21596365254664884, 0.23090323236818344, 0.22804767580468233, 0.22364771785619297, 0.15558442631001146, 0.15949538170260835, 0.15624690123235108, 0.15559874049131872, 0.17085685346612067, 0.14973788759362383, 0.16116393450078392, 0.16120299823296114, 0.1519646980612679, 0.17460921900185167, 0.17214547244542677, 0.18752424511962063, 0.19452575691058704, 0.16257544463650175, 0.17478010462492743, 0.20020140390381347, 0.20039268292385404, 0.18533265775468788, 0.16193556442969093, 0.16822406193543937, 0.18580525628678912, 0.1680144650816474, 0.1748500047359457, 0.18012492281200432, 0.16956241165341546, 0.17446222202159423, 0.17856771943511718, 0.1707617478597524, 0.25764874119047176, 0.1516514884262149, 0.17062626639555345, 0.1755396072002573, 0.23065556882376537, 0.15287369700751874, 0.15502147269510747, 0.2125464894107355, 0.18819193625946984, 0.18947395764670316, 0.25109965389310596, 0.1493604871150528, 0.24310578451703624, 0.16230745074071817, 0.19818919298078141, 0.22092225155827405, 0.1975181988276602, 0.17656229838283, 0.19828643862576434, 0.17924489973855384, 0.17929477995386822, 0.18971532661110102, 0.1997007414244818, 0.18120220197669368, 0.18975872585643927, 0.18853020981226787, 0.07355714280923509, 0.07398747666455874, 0.06647295855468838, 0.06418414675712825, 0.06912901528029725, 0.06459385571011134, 0.07748282244515103, 0.07089903315150659, 0.06392675745135568]}, "mutation_prompt": null}
{"id": "08cbe98e-1015-41c5-83d2-02877a34e54a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4, 10 * dim)  # Ensure at least 4 individuals for DE\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover rate\n        self.temperature = 100  # Initial temperature for Simulated Annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Simulated Annealing step\n            for i in range(self.population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            # Cooling schedule for Simulated Annealing\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea9d4cc4-7b45-4aad-9bf2-7cfdf97b273d", "metadata": {"aucs": [0.30093368859097513, 0.319417510406349, 0.35476901808997763, 0.34487738062599516, 0.3512890750381631, 0.3219309790841879, 0.34517924431644986, 0.3323780370392717, 0.32781368154295176, 0.16096301661966494, 0.17342798980748209, 0.16364191151564667, 0.16779548965199176, 0.1534986212398991, 0.17745512581183465, 0.17536883142790627, 0.16308768776102445, 0.16088840499104806, 0.08780352842425831, 0.08092527852531928, 0.09693434523683864, 0.08822740834081921, 0.08146124558099455, 0.08709911611364496, 0.10367769074067235, 0.0884305683890052, 0.09147450217619768, 0.07208273111167496, 0.08066297026816083, 0.07303795278236125, 0.08156408513968239, 0.06964054805020825, 0.07704773504902551, 0.0739793799172912, 0.0766605156896849, 0.07781147901897656, 0.8959384107138105, 0.7047404856966282, 0.8494906910863557, 0.7572855595996216, 0.8295676000173624, 0.7795516743019055, 0.8259283100312378, 0.7733053998482904, 0.9153661185068563, 0.16127361727014666, 0.15185064527719827, 0.13875966216122848, 0.18060100937772494, 0.1649244677767414, 0.16400903875220885, 0.16464659637250423, 0.1708942047697043, 0.17131423743642993, 0.21514510366359796, 0.22338900960041497, 0.21898495828200593, 0.2770068842437716, 0.2490635685886513, 0.23144189356062772, 0.2111569948639893, 0.19995119316144616, 0.21652023722775282, 0.14000300422988532, 0.09910751724635225, 0.08979911322743117, 0.11012660757546278, 0.1198728859277517, 0.11972060040283306, 0.11411730822268495, 0.12045812820102242, 0.11013129334214788, 0.11684636346033817, 0.1072802427042483, 0.11053693181489621, 0.11630164066648907, 0.10013719941901233, 0.08436305093935514, 0.09412637099563326, 0.11172558125964693, 0.10069779468350681, 0.07077210501023223, 0.05273363478233606, 0.04979479210256321, 0.03554110600436544, 0.06107824670306761, 0.06614825669836633, 0.03950712674651946, 0.047455161974860105, 0.0452687615858125, 0.14067336347295278, 0.14425500554218784, 0.1547046039949228, 0.15452847884086152, 0.12794368294015768, 0.16155118748303865, 0.1560336242062833, 0.16572928828722, 0.18895749971575115, 0.021778712564789582, 9.999999999998899e-05, 0.014558122375366467, 0.004576645002004276, 0.011565551579104438, 0.003165079278612759, 9.999999999998899e-05, 0.005109736238907536, 0.0015828571961086224, 0.05915417881938301, 0.06981505004570154, 0.07365546873199313, 0.06811859518356045, 0.05442025236303838, 0.05914901702933839, 0.06302914162982365, 0.0617782551513697, 0.07399343977366357, 0.300318023671721, 0.3096533414359799, 0.3099039877521893, 0.31818981877507235, 0.3107399515731125, 0.31461966659446194, 0.3182642817639577, 0.3083395700773597, 0.3130090776627319, 0.09014081403023444, 0.08362300647905319, 0.09927492089772494, 0.08758265013467914, 0.073567096684798, 0.09369055449975694, 0.0912460258148089, 0.08450857932064859, 0.08281407091615689, 0.17499427480877516, 0.1672510723987114, 0.1540987932157334, 0.17069521962659895, 0.16662312956644532, 0.17788036538693397, 0.1679390598168864, 0.153882140892443, 0.16836403699158276, 0.2073634690155749, 0.22044639882030792, 0.21736849162759198, 0.19919728072369491, 0.2086696801995599, 0.21596365254664884, 0.23090323236818344, 0.22804767580468233, 0.22364771785619297, 0.15558442631001146, 0.15949538170260835, 0.15624690123235108, 0.15559874049131872, 0.17085685346612067, 0.14973788759362383, 0.16116393450078392, 0.16120299823296114, 0.1519646980612679, 0.17460921900185167, 0.17214547244542677, 0.18752424511962063, 0.19452575691058704, 0.16257544463650175, 0.17478010462492743, 0.20020140390381347, 0.20039268292385404, 0.18533265775468788, 0.16193556442969093, 0.16822406193543937, 0.18580525628678912, 0.1680144650816474, 0.1748500047359457, 0.18012492281200432, 0.16956241165341546, 0.17446222202159423, 0.17856771943511718, 0.1707617478597524, 0.25764874119047176, 0.1516514884262149, 0.17062626639555345, 0.1755396072002573, 0.23065556882376537, 0.15287369700751874, 0.15502147269510747, 0.2125464894107355, 0.18819193625946984, 0.18947395764670316, 0.25109965389310596, 0.1493604871150528, 0.24310578451703624, 0.16230745074071817, 0.19818919298078141, 0.22092225155827405, 0.1975181988276602, 0.17656229838283, 0.19828643862576434, 0.17924489973855384, 0.17929477995386822, 0.18971532661110102, 0.1997007414244818, 0.18120220197669368, 0.18975872585643927, 0.18853020981226787, 0.07355714280923509, 0.07398747666455874, 0.06647295855468838, 0.06418414675712825, 0.06912901528029725, 0.06459385571011134, 0.07748282244515103, 0.07089903315150659, 0.06392675745135568]}, "mutation_prompt": null}
{"id": "e8d6cb97-d8d7-4dd8-8da6-3c4cc2db5968", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4, 10 * dim)  # Ensure at least 4 individuals for DE\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover rate\n        self.temperature = 100  # Initial temperature for Simulated Annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Simulated Annealing step\n            for i in range(self.population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            # Cooling schedule for Simulated Annealing\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea9d4cc4-7b45-4aad-9bf2-7cfdf97b273d", "metadata": {"aucs": [0.30093368859097513, 0.319417510406349, 0.35476901808997763, 0.34487738062599516, 0.3512890750381631, 0.3219309790841879, 0.34517924431644986, 0.3323780370392717, 0.32781368154295176, 0.16096301661966494, 0.17342798980748209, 0.16364191151564667, 0.16779548965199176, 0.1534986212398991, 0.17745512581183465, 0.17536883142790627, 0.16308768776102445, 0.16088840499104806, 0.08780352842425831, 0.08092527852531928, 0.09693434523683864, 0.08822740834081921, 0.08146124558099455, 0.08709911611364496, 0.10367769074067235, 0.0884305683890052, 0.09147450217619768, 0.07208273111167496, 0.08066297026816083, 0.07303795278236125, 0.08156408513968239, 0.06964054805020825, 0.07704773504902551, 0.0739793799172912, 0.0766605156896849, 0.07781147901897656, 0.8959384107138105, 0.7047404856966282, 0.8494906910863557, 0.7572855595996216, 0.8295676000173624, 0.7795516743019055, 0.8259283100312378, 0.7733053998482904, 0.9153661185068563, 0.16127361727014666, 0.15185064527719827, 0.13875966216122848, 0.18060100937772494, 0.1649244677767414, 0.16400903875220885, 0.16464659637250423, 0.1708942047697043, 0.17131423743642993, 0.21514510366359796, 0.22338900960041497, 0.21898495828200593, 0.2770068842437716, 0.2490635685886513, 0.23144189356062772, 0.2111569948639893, 0.19995119316144616, 0.21652023722775282, 0.14000300422988532, 0.09910751724635225, 0.08979911322743117, 0.11012660757546278, 0.1198728859277517, 0.11972060040283306, 0.11411730822268495, 0.12045812820102242, 0.11013129334214788, 0.11684636346033817, 0.1072802427042483, 0.11053693181489621, 0.11630164066648907, 0.10013719941901233, 0.08436305093935514, 0.09412637099563326, 0.11172558125964693, 0.10069779468350681, 0.07077210501023223, 0.05273363478233606, 0.04979479210256321, 0.03554110600436544, 0.06107824670306761, 0.06614825669836633, 0.03950712674651946, 0.047455161974860105, 0.0452687615858125, 0.14067336347295278, 0.14425500554218784, 0.1547046039949228, 0.15452847884086152, 0.12794368294015768, 0.16155118748303865, 0.1560336242062833, 0.16572928828722, 0.18895749971575115, 0.021778712564789582, 9.999999999998899e-05, 0.014558122375366467, 0.004576645002004276, 0.011565551579104438, 0.003165079278612759, 9.999999999998899e-05, 0.005109736238907536, 0.0015828571961086224, 0.05915417881938301, 0.06981505004570154, 0.07365546873199313, 0.06811859518356045, 0.05442025236303838, 0.05914901702933839, 0.06302914162982365, 0.0617782551513697, 0.07399343977366357, 0.300318023671721, 0.3096533414359799, 0.3099039877521893, 0.31818981877507235, 0.3107399515731125, 0.31461966659446194, 0.3182642817639577, 0.3083395700773597, 0.3130090776627319, 0.09014081403023444, 0.08362300647905319, 0.09927492089772494, 0.08758265013467914, 0.073567096684798, 0.09369055449975694, 0.0912460258148089, 0.08450857932064859, 0.08281407091615689, 0.17499427480877516, 0.1672510723987114, 0.1540987932157334, 0.17069521962659895, 0.16662312956644532, 0.17788036538693397, 0.1679390598168864, 0.153882140892443, 0.16836403699158276, 0.2073634690155749, 0.22044639882030792, 0.21736849162759198, 0.19919728072369491, 0.2086696801995599, 0.21596365254664884, 0.23090323236818344, 0.22804767580468233, 0.22364771785619297, 0.15558442631001146, 0.15949538170260835, 0.15624690123235108, 0.15559874049131872, 0.17085685346612067, 0.14973788759362383, 0.16116393450078392, 0.16120299823296114, 0.1519646980612679, 0.17460921900185167, 0.17214547244542677, 0.18752424511962063, 0.19452575691058704, 0.16257544463650175, 0.17478010462492743, 0.20020140390381347, 0.20039268292385404, 0.18533265775468788, 0.16193556442969093, 0.16822406193543937, 0.18580525628678912, 0.1680144650816474, 0.1748500047359457, 0.18012492281200432, 0.16956241165341546, 0.17446222202159423, 0.17856771943511718, 0.1707617478597524, 0.25764874119047176, 0.1516514884262149, 0.17062626639555345, 0.1755396072002573, 0.23065556882376537, 0.15287369700751874, 0.15502147269510747, 0.2125464894107355, 0.18819193625946984, 0.18947395764670316, 0.25109965389310596, 0.1493604871150528, 0.24310578451703624, 0.16230745074071817, 0.19818919298078141, 0.22092225155827405, 0.1975181988276602, 0.17656229838283, 0.19828643862576434, 0.17924489973855384, 0.17929477995386822, 0.18971532661110102, 0.1997007414244818, 0.18120220197669368, 0.18975872585643927, 0.18853020981226787, 0.07355714280923509, 0.07398747666455874, 0.06647295855468838, 0.06418414675712825, 0.06912901528029725, 0.06459385571011134, 0.07748282244515103, 0.07089903315150659, 0.06392675745135568]}, "mutation_prompt": null}
{"id": "d550be98-07e2-4068-acbc-9f4d511893e4", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            for i in range(self.population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "A hybrid algorithm enhancing exploration through adaptive mutation strategies in Differential Evolution for improved convergence.", "configspace": "", "generation": 3, "fitness": 0.21066210329187834, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "ea9d4cc4-7b45-4aad-9bf2-7cfdf97b273d", "metadata": {"aucs": [0.3597936579743748, 0.3648286927372095, 0.3724122631126411, 0.38799802670336747, 0.370772485230463, 0.4038667314266804, 0.39407924118580095, 0.35483926936071364, 0.38573961941925394, 0.16468549481017802, 0.13646750437094102, 0.1529491883787174, 0.15201203615739378, 0.15628938693154537, 0.14981110356247263, 0.15837159554377045, 0.1903189051175942, 0.1532742642180892, 0.09801072284207935, 0.08997191350013622, 0.10645403350125549, 0.08676080340964654, 0.09113864861524523, 0.08688615102418151, 0.09678466584796985, 0.11506118929216358, 0.09337865110788479, 0.09523525219477469, 0.08093189486325358, 0.10232551425241532, 0.08275287779355744, 0.09010444865144496, 0.087576226700673, 0.09058349127584131, 0.09870001561049935, 0.10033826496382459, 0.9496388681537008, 0.9069863500657196, 0.9664227574659991, 0.9330467801491424, 0.941100229467277, 0.9760797304873329, 0.9598665374780407, 0.9503411327022688, 0.9771586780094831, 0.2215862635034368, 0.20225078233213745, 0.1841000812458362, 0.2217750499332768, 0.18902768462108333, 0.20745575609052513, 0.20864463848511683, 0.20275394500065258, 0.2140109870067417, 0.2717297644816926, 0.26181220464280064, 0.30268640973949246, 0.26184293899544187, 0.2648218296074587, 0.2565577696328265, 0.26848955144243547, 0.2273465911763617, 0.269867106887413, 0.1566660899460619, 0.14130199904192053, 0.14474747761793283, 0.141216985819149, 0.16118914800486128, 0.16883328736191194, 0.1377879592987119, 0.13100404427082302, 0.14786496705492314, 0.13867487004111767, 0.11322027882829167, 0.12372743704628375, 0.13527237077335608, 0.14262664467380637, 0.14375985439675243, 0.12253850605201644, 0.1358624914732629, 0.13718912877219758, 0.06464597719603826, 0.06675742635586157, 0.07517850380795377, 0.06845683549712445, 0.05174176979897471, 0.059886198970349525, 0.0771550582318219, 0.06098803748749437, 0.06750291746158998, 0.15819342412870574, 0.16919601761433767, 0.1767368477729473, 0.15116721683906764, 0.16316239759697948, 0.13397828633095976, 0.22874154154884097, 0.16625308064692013, 0.17849153513569505, 0.0017483605711142713, 0.0037774522401102795, 0.025793575210590225, 0.022510624178178062, 0.04036188209098823, 0.012387310411265395, 0.0008771737716483097, 0.01042212853358937, 0.007525180869689896, 0.0778757779427589, 0.06739890099703572, 0.07294028009100562, 0.07805126070626045, 0.08812515391975706, 0.07464997191152711, 0.0720748338868118, 0.07327552353460998, 0.07786860943513496, 0.35685405217505395, 0.36284630573380305, 0.34528446220475484, 0.34972210804076087, 0.3434291933285357, 0.3833880808357407, 0.38113791056263824, 0.3314725252152363, 0.3628025149470745, 0.09691222325396442, 0.0942427374878052, 0.10091773896719203, 0.09877769719294316, 0.08903851111092753, 0.10112742822499021, 0.09818008940856648, 0.12150034516295216, 0.08876639529729091, 0.2108733268759807, 0.19866616023697747, 0.1709517408337391, 0.20900849005850863, 0.20260861497517213, 0.22240756915843007, 0.20895229064405363, 0.22012160194463093, 0.27854057468598614, 0.263465843622122, 0.23975216942803723, 0.2648647982687513, 0.25353939680363813, 0.24803579089163608, 0.24068237863529596, 0.24901428501501555, 0.25221374045881817, 0.2527283424939798, 0.17897656618072455, 0.1762830092623573, 0.19711812620644764, 0.18396328566203246, 0.1832889947727605, 0.1969510487594659, 0.20094065831538077, 0.19508609542540922, 0.19546271751779942, 0.20442986675979435, 0.18289495835437064, 0.2004975524768855, 0.21150931159352548, 0.18490548443698318, 0.19481323950364882, 0.1967367637406252, 0.17700368416192136, 0.2122234230338904, 0.18038336849376668, 0.18141011469852597, 0.19382090785445494, 0.18686273482722282, 0.19412601243709116, 0.1957873324906827, 0.20381396803764218, 0.19488319313833968, 0.18120482638789703, 0.4706274222768534, 0.5468884455917332, 0.1540766785596539, 0.49664222012331394, 0.19976176575342763, 0.1967569277983624, 0.18645678984286362, 0.1613843339322475, 0.16680089846169155, 0.3876156443069081, 0.206098738202397, 0.15391241200970562, 0.19919893942184852, 0.11052648543214294, 0.41533378809789556, 0.3647949839336184, 0.20894170080685215, 0.21227608587167002, 0.19312438792099196, 0.18339077236208567, 0.1800869135300871, 0.190493704619772, 0.18496948555257542, 0.18247882067155108, 0.19342005242095894, 0.19940905330265057, 0.20414702621094327, 0.08382263172877014, 0.08081703630171744, 0.08734938574306761, 0.07676229719766703, 0.07419892676752748, 0.08168127680700032, 0.07606065733863265, 0.07278395133957205, 0.09343372840745157]}, "mutation_prompt": null}
{"id": "1a42424c-0809-4e7c-9850-7460bf18e34a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            for i in range(self.population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "A hybrid algorithm enhancing exploration through adaptive mutation strategies in Differential Evolution for improved convergence.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d550be98-07e2-4068-acbc-9f4d511893e4", "metadata": {"aucs": [0.3597936579743748, 0.3648286927372095, 0.3724122631126411, 0.38799802670336747, 0.370772485230463, 0.4038667314266804, 0.39407924118580095, 0.35483926936071364, 0.38573961941925394, 0.16468549481017802, 0.13646750437094102, 0.1529491883787174, 0.15201203615739378, 0.15628938693154537, 0.14981110356247263, 0.15837159554377045, 0.1903189051175942, 0.1532742642180892, 0.09801072284207935, 0.08997191350013622, 0.10645403350125549, 0.08676080340964654, 0.09113864861524523, 0.08688615102418151, 0.09678466584796985, 0.11506118929216358, 0.09337865110788479, 0.09523525219477469, 0.08093189486325358, 0.10232551425241532, 0.08275287779355744, 0.09010444865144496, 0.087576226700673, 0.09058349127584131, 0.09870001561049935, 0.10033826496382459, 0.9496388681537008, 0.9069863500657196, 0.9664227574659991, 0.9330467801491424, 0.941100229467277, 0.9760797304873329, 0.9598665374780407, 0.9503411327022688, 0.9771586780094831, 0.2215862635034368, 0.20225078233213745, 0.1841000812458362, 0.2217750499332768, 0.18902768462108333, 0.20745575609052513, 0.20864463848511683, 0.20275394500065258, 0.2140109870067417, 0.2717297644816926, 0.26181220464280064, 0.30268640973949246, 0.26184293899544187, 0.2648218296074587, 0.2565577696328265, 0.26848955144243547, 0.2273465911763617, 0.269867106887413, 0.1566660899460619, 0.14130199904192053, 0.14474747761793283, 0.141216985819149, 0.16118914800486128, 0.16883328736191194, 0.1377879592987119, 0.13100404427082302, 0.14786496705492314, 0.13867487004111767, 0.11322027882829167, 0.12372743704628375, 0.13527237077335608, 0.14262664467380637, 0.14375985439675243, 0.12253850605201644, 0.1358624914732629, 0.13718912877219758, 0.06464597719603826, 0.06675742635586157, 0.07517850380795377, 0.06845683549712445, 0.05174176979897471, 0.059886198970349525, 0.0771550582318219, 0.06098803748749437, 0.06750291746158998, 0.15819342412870574, 0.16919601761433767, 0.1767368477729473, 0.15116721683906764, 0.16316239759697948, 0.13397828633095976, 0.22874154154884097, 0.16625308064692013, 0.17849153513569505, 0.0017483605711142713, 0.0037774522401102795, 0.025793575210590225, 0.022510624178178062, 0.04036188209098823, 0.012387310411265395, 0.0008771737716483097, 0.01042212853358937, 0.007525180869689896, 0.0778757779427589, 0.06739890099703572, 0.07294028009100562, 0.07805126070626045, 0.08812515391975706, 0.07464997191152711, 0.0720748338868118, 0.07327552353460998, 0.07786860943513496, 0.35685405217505395, 0.36284630573380305, 0.34528446220475484, 0.34972210804076087, 0.3434291933285357, 0.3833880808357407, 0.38113791056263824, 0.3314725252152363, 0.3628025149470745, 0.09691222325396442, 0.0942427374878052, 0.10091773896719203, 0.09877769719294316, 0.08903851111092753, 0.10112742822499021, 0.09818008940856648, 0.12150034516295216, 0.08876639529729091, 0.2108733268759807, 0.19866616023697747, 0.1709517408337391, 0.20900849005850863, 0.20260861497517213, 0.22240756915843007, 0.20895229064405363, 0.22012160194463093, 0.27854057468598614, 0.263465843622122, 0.23975216942803723, 0.2648647982687513, 0.25353939680363813, 0.24803579089163608, 0.24068237863529596, 0.24901428501501555, 0.25221374045881817, 0.2527283424939798, 0.17897656618072455, 0.1762830092623573, 0.19711812620644764, 0.18396328566203246, 0.1832889947727605, 0.1969510487594659, 0.20094065831538077, 0.19508609542540922, 0.19546271751779942, 0.20442986675979435, 0.18289495835437064, 0.2004975524768855, 0.21150931159352548, 0.18490548443698318, 0.19481323950364882, 0.1967367637406252, 0.17700368416192136, 0.2122234230338904, 0.18038336849376668, 0.18141011469852597, 0.19382090785445494, 0.18686273482722282, 0.19412601243709116, 0.1957873324906827, 0.20381396803764218, 0.19488319313833968, 0.18120482638789703, 0.4706274222768534, 0.5468884455917332, 0.1540766785596539, 0.49664222012331394, 0.19976176575342763, 0.1967569277983624, 0.18645678984286362, 0.1613843339322475, 0.16680089846169155, 0.3876156443069081, 0.206098738202397, 0.15391241200970562, 0.19919893942184852, 0.11052648543214294, 0.41533378809789556, 0.3647949839336184, 0.20894170080685215, 0.21227608587167002, 0.19312438792099196, 0.18339077236208567, 0.1800869135300871, 0.190493704619772, 0.18496948555257542, 0.18247882067155108, 0.19342005242095894, 0.19940905330265057, 0.20414702621094327, 0.08382263172877014, 0.08081703630171744, 0.08734938574306761, 0.07676229719766703, 0.07419892676752748, 0.08168127680700032, 0.07606065733863265, 0.07278395133957205, 0.09343372840745157]}, "mutation_prompt": null}
{"id": "60e78602-5e99-4b34-901c-0762a1314661", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            for i in range(self.population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "A hybrid algorithm enhancing exploration through adaptive mutation strategies in Differential Evolution for improved convergence.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d550be98-07e2-4068-acbc-9f4d511893e4", "metadata": {"aucs": [0.3597936579743748, 0.3648286927372095, 0.3724122631126411, 0.38799802670336747, 0.370772485230463, 0.4038667314266804, 0.39407924118580095, 0.35483926936071364, 0.38573961941925394, 0.16468549481017802, 0.13646750437094102, 0.1529491883787174, 0.15201203615739378, 0.15628938693154537, 0.14981110356247263, 0.15837159554377045, 0.1903189051175942, 0.1532742642180892, 0.09801072284207935, 0.08997191350013622, 0.10645403350125549, 0.08676080340964654, 0.09113864861524523, 0.08688615102418151, 0.09678466584796985, 0.11506118929216358, 0.09337865110788479, 0.09523525219477469, 0.08093189486325358, 0.10232551425241532, 0.08275287779355744, 0.09010444865144496, 0.087576226700673, 0.09058349127584131, 0.09870001561049935, 0.10033826496382459, 0.9496388681537008, 0.9069863500657196, 0.9664227574659991, 0.9330467801491424, 0.941100229467277, 0.9760797304873329, 0.9598665374780407, 0.9503411327022688, 0.9771586780094831, 0.2215862635034368, 0.20225078233213745, 0.1841000812458362, 0.2217750499332768, 0.18902768462108333, 0.20745575609052513, 0.20864463848511683, 0.20275394500065258, 0.2140109870067417, 0.2717297644816926, 0.26181220464280064, 0.30268640973949246, 0.26184293899544187, 0.2648218296074587, 0.2565577696328265, 0.26848955144243547, 0.2273465911763617, 0.269867106887413, 0.1566660899460619, 0.14130199904192053, 0.14474747761793283, 0.141216985819149, 0.16118914800486128, 0.16883328736191194, 0.1377879592987119, 0.13100404427082302, 0.14786496705492314, 0.13867487004111767, 0.11322027882829167, 0.12372743704628375, 0.13527237077335608, 0.14262664467380637, 0.14375985439675243, 0.12253850605201644, 0.1358624914732629, 0.13718912877219758, 0.06464597719603826, 0.06675742635586157, 0.07517850380795377, 0.06845683549712445, 0.05174176979897471, 0.059886198970349525, 0.0771550582318219, 0.06098803748749437, 0.06750291746158998, 0.15819342412870574, 0.16919601761433767, 0.1767368477729473, 0.15116721683906764, 0.16316239759697948, 0.13397828633095976, 0.22874154154884097, 0.16625308064692013, 0.17849153513569505, 0.0017483605711142713, 0.0037774522401102795, 0.025793575210590225, 0.022510624178178062, 0.04036188209098823, 0.012387310411265395, 0.0008771737716483097, 0.01042212853358937, 0.007525180869689896, 0.0778757779427589, 0.06739890099703572, 0.07294028009100562, 0.07805126070626045, 0.08812515391975706, 0.07464997191152711, 0.0720748338868118, 0.07327552353460998, 0.07786860943513496, 0.35685405217505395, 0.36284630573380305, 0.34528446220475484, 0.34972210804076087, 0.3434291933285357, 0.3833880808357407, 0.38113791056263824, 0.3314725252152363, 0.3628025149470745, 0.09691222325396442, 0.0942427374878052, 0.10091773896719203, 0.09877769719294316, 0.08903851111092753, 0.10112742822499021, 0.09818008940856648, 0.12150034516295216, 0.08876639529729091, 0.2108733268759807, 0.19866616023697747, 0.1709517408337391, 0.20900849005850863, 0.20260861497517213, 0.22240756915843007, 0.20895229064405363, 0.22012160194463093, 0.27854057468598614, 0.263465843622122, 0.23975216942803723, 0.2648647982687513, 0.25353939680363813, 0.24803579089163608, 0.24068237863529596, 0.24901428501501555, 0.25221374045881817, 0.2527283424939798, 0.17897656618072455, 0.1762830092623573, 0.19711812620644764, 0.18396328566203246, 0.1832889947727605, 0.1969510487594659, 0.20094065831538077, 0.19508609542540922, 0.19546271751779942, 0.20442986675979435, 0.18289495835437064, 0.2004975524768855, 0.21150931159352548, 0.18490548443698318, 0.19481323950364882, 0.1967367637406252, 0.17700368416192136, 0.2122234230338904, 0.18038336849376668, 0.18141011469852597, 0.19382090785445494, 0.18686273482722282, 0.19412601243709116, 0.1957873324906827, 0.20381396803764218, 0.19488319313833968, 0.18120482638789703, 0.4706274222768534, 0.5468884455917332, 0.1540766785596539, 0.49664222012331394, 0.19976176575342763, 0.1967569277983624, 0.18645678984286362, 0.1613843339322475, 0.16680089846169155, 0.3876156443069081, 0.206098738202397, 0.15391241200970562, 0.19919893942184852, 0.11052648543214294, 0.41533378809789556, 0.3647949839336184, 0.20894170080685215, 0.21227608587167002, 0.19312438792099196, 0.18339077236208567, 0.1800869135300871, 0.190493704619772, 0.18496948555257542, 0.18247882067155108, 0.19342005242095894, 0.19940905330265057, 0.20414702621094327, 0.08382263172877014, 0.08081703630171744, 0.08734938574306761, 0.07676229719766703, 0.07419892676752748, 0.08168127680700032, 0.07606065733863265, 0.07278395133957205, 0.09343372840745157]}, "mutation_prompt": null}
{"id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 6, "fitness": 0.22382501957463338, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.17.", "error": "", "parent_id": "d550be98-07e2-4068-acbc-9f4d511893e4", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "ead32216-3ac4-4fe2-a125-c0fe7b3b55f7", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "dc01b111-4bb2-42ee-884c-eea7f2d846b9", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "eeae885a-438b-490a-a133-06080ef2c0a8", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "3bc6dc72-d177-41c3-85ab-2b6a1f4cf3f2", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                dynamic_CR = self.CR * (1.0 - evaluations / self.budget)  # Dynamic crossover probability\n                for j in range(self.dim):\n                    if np.random.rand() < dynamic_CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhanced mutation strategy using a dynamic crossover probability for improved convergence.", "configspace": "", "generation": 10, "fitness": 0.21039016531309992, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.34696867029543754, 0.3492591881400493, 0.362932977999486, 0.3720591622281785, 0.3734974981232335, 0.3865532713565074, 0.3709344619118342, 0.3778092975772456, 0.38696769090052674, 0.31331524646894493, 0.29636039679484716, 0.32370831800045863, 0.2892385017304482, 0.333375099103457, 0.3328664932685582, 0.33084864175959705, 0.32684269793332055, 0.3112846374984549, 0.11175759306639665, 0.10816653850539515, 0.09675904500083565, 0.10857524460712631, 0.10126881346842331, 0.1012032830542785, 0.12121861576926274, 0.09629234960828381, 0.10521882732477372, 0.08903492969647686, 0.0966660222692306, 0.1018048834360139, 0.09437446198787547, 0.08972541537883738, 0.0906959141691277, 0.08843812852618504, 0.10270459858210101, 0.09772440116434011, 0.9213257090806973, 0.902447537929048, 0.7829876483074693, 0.9301560187230591, 0.9182010386319505, 0.9651147323332917, 0.9593286618582475, 0.9208917940595891, 0.9850603173384925, 0.19584483732245928, 0.19304850118623995, 0.187038877749918, 0.21141143140707708, 0.2387906700850032, 0.18684051386061595, 0.1807444290884006, 0.20663055423650134, 0.1991359934097603, 0.21916969829986144, 0.2715201145534569, 0.2559895908079909, 0.3817813795029531, 0.3101137736177414, 0.26080175883904944, 0.2621562016963308, 0.25837509895077937, 0.2524870310700785, 0.13168098155004304, 0.1470793500183345, 0.1377116071080865, 0.1315472981632798, 0.13054822964156776, 0.1434439708234122, 0.139423515919601, 0.14012334790484693, 0.1503335142038792, 0.13523267364974034, 0.11848197285655293, 0.13129580684039543, 0.1318125419776992, 0.1352468314300722, 0.13375637530108508, 0.13734967797610875, 0.14717939097337407, 0.16110799795343866, 0.008945307667580726, 0.020414313453239297, 0.007157626548064733, 9.999999999998899e-05, 0.03507224688850419, 0.01887673736223583, 0.017800511630071014, 0.0012961273729628076, 0.005905935695953657, 0.10444582651082368, 0.10269936457460971, 0.12103759526831404, 0.15758430180915295, 0.09511190354261889, 0.06379198300506417, 0.10850333244402843, 0.11640609781502209, 0.10431221336383989, 0.011722265240251217, 9.999999999998899e-05, 0.004896722057751712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02060299952501321, 9.999999999998899e-05, 9.999999999998899e-05, 0.07321550440321112, 0.0679093162211355, 0.08778393260719353, 0.06358958822513561, 0.06551496783670574, 0.07060697491709911, 0.07292603744415282, 0.0649702396813111, 0.07187066999090563, 0.3283397729671633, 0.33775073547993884, 0.35214772194874744, 0.33005850522019, 0.38692666949956034, 0.3520987178405923, 0.36881234726126166, 0.3610672900986276, 0.37142662894725265, 0.0895385942372241, 0.09367324229927532, 0.09820169475712759, 0.1005386976245205, 0.0862881101646017, 0.09100592799684604, 0.10399748632400552, 0.10834810141086149, 0.09851828935538398, 0.2132478447285956, 0.1554381146320415, 0.1564302168764512, 0.18848972466710723, 0.2669571064214328, 0.1877034639950933, 0.20261422603262724, 0.15822650939541494, 0.16198573436449792, 0.24607213750170953, 0.23941035238413344, 0.25488507827114937, 0.251178899242266, 0.24090526628472964, 0.25774553037864634, 0.2387970919566259, 0.268723806997786, 0.2555151059509053, 0.2071878934791126, 0.18429124280667353, 0.194458201047644, 0.18368448531482695, 0.1779052039878397, 0.1943887881212386, 0.18563658507950964, 0.18449090179408145, 0.20047732350817637, 0.1854699207622904, 0.17958552633308955, 0.18710812618136474, 0.1921774716804494, 0.17938961749100546, 0.184613453116108, 0.17900968872121992, 0.1815684201406017, 0.21672010851461931, 0.19099304689957586, 0.18914549995903085, 0.18129651254990964, 0.17587305282579724, 0.18084456146002403, 0.18144033339472676, 0.18320825307792965, 0.17864795796144484, 0.187525123287702, 0.17105278933348478, 0.5141604805629503, 0.15314993578989466, 0.17246246128751386, 0.19899425435973794, 0.43753426511759497, 0.1859114763863139, 0.5387861540683953, 0.45453340048827173, 0.3675205330399035, 0.20264014815133946, 0.20386412680405397, 0.4358643726410464, 0.19890536761754707, 0.35963188206285124, 0.20933876614619196, 0.20921397630499905, 0.210972056561871, 0.18389811911921117, 0.1799777607889651, 0.17872962654905444, 0.19799301911325617, 0.17959716836818929, 0.18780683522107744, 0.17977375382802818, 0.18000186740536805, 0.18944400235895287, 0.07368626445271587, 0.07850048378948504, 0.08423666372611882, 0.08351201164978916, 0.07742242319464732, 0.08303259224585868, 0.08203414123884745, 0.07154931989925972, 0.08547020690132723]}, "mutation_prompt": null}
{"id": "e9325ce1-81f1-46e8-a05c-5b699239bee9", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "10f9f353-ea7c-40aa-9ad8-a9336e710267", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "a765d04d-3c32-4fb3-a4a8-4fafe759f24e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "d0c5f4a4-7dfa-42ca-a89b-7fb69160383b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "81363819-bd2d-4e5b-ac9f-b61675488f68", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "2d75b514-2c3e-4ec5-bad2-f3ee7e346c2f", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Mutation Strategy\n                if np.random.rand() < 0.1:\n                    mutant = best + np.random.uniform(-0.5, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improved exploration and exploitation balance through dynamic population size adjustment and adaptive mutation scaling.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.339342073245835, 0.35669971798277744, 0.39331639543899233, 0.3982526625350101, 0.3726291466483448, 0.3498894523631758, 0.36793963723232104, 0.37605938444554454, 0.36978005640098754, 0.3440586839487685, 0.34127733547169636, 0.37994760084128953, 0.32962356449765273, 0.32335669065406014, 0.36500172460429203, 0.363138275732242, 0.3299205685331871, 0.3445984983164111, 0.09489678313767036, 0.10392144383920765, 0.10831307456213668, 0.0970828983280182, 0.1062097524156268, 0.10605170883781778, 0.11547655600451412, 0.10930495515181571, 0.10520058209911698, 0.10689896949780653, 0.09312797145193363, 0.09558577594287543, 0.08896390167757506, 0.11106203837539819, 0.10512768392519778, 0.08772063664282903, 0.08618904972723307, 0.0938518591128723, 0.9219563164572416, 0.8714952991796335, 0.8590982112400622, 0.9240014646844686, 0.8893253699832315, 0.942474654878928, 0.9506127610178761, 0.9234543473027421, 0.9655723149617367, 0.20488372174154545, 0.2146273879736501, 0.21527259691463974, 0.21254818301159972, 0.2223169174551909, 0.21063887981983864, 0.20067998801516418, 0.24058520103462022, 0.20225698333741082, 0.26450785804418697, 0.28291681536704305, 0.24216333616208752, 0.280121312222557, 0.28114651147269787, 0.28675456252527676, 0.2457155889902144, 0.25853389874466615, 0.27055179078797265, 0.1357353302667993, 0.1335315745765483, 0.13896398137130161, 0.11030541511910708, 0.14442504967583847, 0.13558267675948588, 0.14978754812336992, 0.1190437922828842, 0.14695767861828368, 0.14310773008892486, 0.12230712987798109, 0.13183400156402603, 0.14050712552678157, 0.1489274365607003, 0.1447477200544447, 0.1421633080553777, 0.11858803248895633, 0.12499105173268288, 0.15881506700491776, 0.1695332900216059, 0.18222522915430384, 0.16130557208066854, 0.15567627785364602, 0.1626752465492156, 0.13570876958345146, 0.14002366653146547, 0.13502924497755853, 0.19389112481001647, 0.2204712651931836, 0.23646477650846476, 0.1997203788071451, 0.182150766553141, 0.21752038978807942, 0.20297745292984315, 0.1885873111014732, 0.2198799075718333, 0.046807660912261184, 0.04315976088999085, 0.07151984913533416, 0.06342939510883372, 0.053032725230767186, 0.059250714209882926, 0.05594316435968116, 0.06612310578722247, 0.07425933387246386, 0.08815217653777563, 0.08483492822872463, 0.09000526810696485, 0.0890809856302418, 0.09315700635609558, 0.08713278286448345, 0.0870396768839461, 0.08590794182814498, 0.09753883828371945, 0.35469942788771525, 0.36601551351079165, 0.36404628210358025, 0.3311695417060391, 0.33144104117045003, 0.36575555488338884, 0.36308154455660746, 0.3248268985699696, 0.34308166263809514, 0.10672013446470796, 0.1085799457139961, 0.1004157624793961, 0.10497502667477188, 0.10110331807526307, 0.09497506145722368, 0.10011483818822342, 0.11927259554673242, 0.12099878184700696, 0.22859084370692395, 0.19648077925878782, 0.15201710800660095, 0.19625085637680018, 0.1899635158379417, 0.22818727803259653, 0.18113944912720803, 0.18784965804704712, 0.18972506235776898, 0.2663570938651878, 0.2326242807308999, 0.245051303901192, 0.24763729801770273, 0.22960434948828157, 0.27328755246286807, 0.25091228099294627, 0.2558694525252466, 0.2574149661662204, 0.20324552756711134, 0.18704901592123324, 0.216100833145909, 0.21790738091205974, 0.1909818905051558, 0.1989128593378393, 0.19637140238087258, 0.19722934277283088, 0.18149774131407748, 0.19677774682731963, 0.18298379968444878, 0.21345535449588482, 0.21255722759859885, 0.2173289374807006, 0.20522327784236827, 0.19763870760177094, 0.1846277297018284, 0.2313374301549287, 0.19653240429454888, 0.1945085146697867, 0.17907265924815619, 0.19159749749265131, 0.19147617199984845, 0.1953475945453993, 0.18231437107984616, 0.1836771217367218, 0.1815703040413713, 0.20234876392083023, 0.4807936212712004, 0.15249625951515222, 0.17208601602751727, 0.5048793990869368, 0.1742871865780451, 0.1865671727552103, 0.1809219848833995, 0.17081029272558668, 0.4602627620443597, 0.20606538385114181, 0.15433654657492224, 0.1967222912856671, 0.2013203513698798, 0.48958452520035456, 0.2081022726675389, 0.2103425944283429, 0.2115133615251985, 0.18922856934337573, 0.2001219120839407, 0.1810621300961287, 0.1963351376357555, 0.196912474497832, 0.1795206560795386, 0.18552611598238833, 0.1830447064726759, 0.1866380085889453, 0.08344367148805654, 0.08638038502630241, 0.12778607164992295, 0.07967407413719318, 0.07964980389191201, 0.07878937530699348, 0.08170578720438193, 0.07610268659663055, 0.07871595465955195]}, "mutation_prompt": null}
{"id": "a647a844-8f34-47fc-9783-3d11dd208c5a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.15:  # Adjusted mutation probability\n                    mutant = best + np.random.uniform(-0.4, 0.4, self.dim)  # Narrower distribution\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            # Elitism: Keep the best solution in the population\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance convergence speed by introducing elitism and refining adaptive mutation probabilities.", "configspace": "", "generation": 17, "fitness": 0.25065490638972177, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.18.", "error": "", "parent_id": "23b395fd-bce2-4c28-b164-4cbb4946cfba", "metadata": {"aucs": [0.4031639659951981, 0.43211702439600697, 0.41016086013451336, 0.4410484967701592, 0.3973410608151612, 0.39077522001413534, 0.4298426642643356, 0.4160405886943852, 0.3985282513074685, 0.3544286765039196, 0.39985777898951336, 0.3952883408529778, 0.4203518447985952, 0.3935043348033761, 0.4108526698380527, 0.39874117830164324, 0.42649100527359074, 0.4169244061256274, 0.14116963042496578, 0.13486119647899597, 0.1105289984047707, 0.10508708735921024, 0.12963680266519872, 0.1185207415665891, 0.11943357116386832, 0.11968973634601388, 0.11478172714870871, 0.13046696797466717, 0.10895794827498961, 0.11551000912510756, 0.116191843761967, 0.11588085170843843, 0.1089813989373728, 0.12288968671791722, 0.11028063222985507, 0.11407065436597408, 0.9734142481808761, 0.9319075672001802, 0.8687243182607538, 0.952183997807275, 0.9612641225533998, 0.9674714273751832, 0.9431708465189598, 0.9654758536344914, 0.9605769871091696, 0.279085952307524, 0.2861113756216448, 0.291708303592235, 0.2789047696436242, 0.26831044468754084, 0.2560218728252249, 0.2571371009848732, 0.2959739964821543, 0.2885865630240002, 0.33663385948893854, 0.34534327884739946, 0.3340329991454297, 0.3187301691503789, 0.3537783611574198, 0.3245097252105136, 0.28375615133502985, 0.37098812156493655, 0.28497744032652794, 0.2175789609010942, 0.16858473503013227, 0.16313499282869304, 0.12187972207429898, 0.17097011342144597, 0.18732318483285015, 0.18900319405188826, 0.18406409959177905, 0.152931314334405, 0.13080073524129454, 0.11015749929919916, 0.1844176872098353, 0.17394128055330005, 0.1875340111139172, 0.1570395501132511, 0.14616004445028297, 0.15632485428471554, 0.1681113069429102, 0.1652250503988767, 0.21866582481940344, 0.16964808803682463, 0.09426330283252204, 0.175863140742042, 0.1837792438127851, 0.1910370977756004, 0.17884553574625894, 0.19113475671670144, 0.2353138057895403, 0.25249200462349153, 0.30019778563608845, 0.28203962434555285, 0.22091359681077116, 0.26487156493410835, 0.31130455880737407, 0.399566844174963, 0.2800980232147423, 0.08457605373215082, 0.051740834754353426, 0.17557393822144618, 0.09323766933469813, 0.10207582170734075, 0.177906606518887, 0.22548772693774788, 0.010711864948497851, 0.1472957341291622, 0.13192904760247914, 0.08984669724029903, 0.11016612623197419, 0.11356257647178702, 0.09231981679887125, 0.10322906664539078, 0.09894714555172812, 0.08521194050823111, 0.10903791804437102, 0.3932718446195106, 0.39037517812290545, 0.40856797878151185, 0.3785574373047933, 0.3878529937370746, 0.37556533187741004, 0.3804772757586309, 0.39399176113868184, 0.37734562301454344, 0.12186882260372289, 0.11856780539034628, 0.11073116522529836, 0.1162440561832836, 0.10515905268048809, 0.12004893106016157, 0.12906252635392734, 0.11430689623655088, 0.13039491105208112, 0.24988042741527938, 0.20271961111511239, 0.1739319559520116, 0.25191238355768664, 0.22389038708259912, 0.23954978961993745, 0.26090071068449505, 0.21140861087645613, 0.1901074825410507, 0.27542185960711885, 0.2745938913292787, 0.27205773764480734, 0.2618171789013307, 0.2744926554095486, 0.2724478388874251, 0.2776893118713022, 0.2773943472196675, 0.293515732112937, 0.22537583414588025, 0.20666046201541077, 0.21099125016287557, 0.1983416936957274, 0.16284545052206234, 0.20973393212587443, 0.23114004142744649, 0.22129464426583567, 0.1982908314608275, 0.21064087491613914, 0.20717356080216798, 0.19393835434295248, 0.20361528421604524, 0.19695745597651793, 0.21986468439269824, 0.21296496273951904, 0.2020100305567638, 0.21535793229211164, 0.20103036330715063, 0.18503650291986895, 0.21665009974148974, 0.2226928574159649, 0.1970051370977891, 0.20536377333521016, 0.2185924778385725, 0.21468277944786418, 0.2074843594757595, 0.1672232177729699, 0.16740968851777738, 0.1541746439881423, 0.17254851228655566, 0.20092726472434863, 0.19813589438219015, 0.18814803528016666, 0.5879879006430577, 0.2116752074601821, 0.5249381926420398, 0.21078862830489042, 0.5881704383231834, 0.16065424343364842, 0.20615808472407893, 0.162309268076272, 0.2097989015716395, 0.21101549472800019, 0.20847293945544365, 0.18359365047223097, 0.19090874289867865, 0.18187108945514263, 0.18010824927384073, 0.17909534846078567, 0.1855526891681114, 0.18526572717513834, 0.19357675200183344, 0.180350079405173, 0.09981462136614405, 0.07479670845796005, 0.08408882235467552, 0.08763251376993575, 0.08476198282125513, 0.08087501969306143, 0.09462079843977012, 0.09047371323896547, 0.08242815436581241]}, "mutation_prompt": null}
{"id": "6bbbcaef-9528-43a1-9e7d-d3bb271da8d3", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            fitness_var = np.var(fitness)\n            self.F = 0.5 + 0.3 * np.random.rand() * np.log1p(fitness_var)\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.15:  # Adjusted mutation probability\n                    mutant = best + np.random.uniform(-0.4, 0.4, self.dim)  # Narrower distribution\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            # Reduce the population size adaptively\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            # Elitism: Keep the best solution in the population\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= (0.99 + 0.01 * fitness_var)\n\n        return best", "name": "HybridDE_SA", "description": "Improve convergence by introducing adaptive scaling factor and temperature decay based on fitness variance.", "configspace": "", "generation": 18, "fitness": 0.21669691690259238, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "a647a844-8f34-47fc-9783-3d11dd208c5a", "metadata": {"aucs": [0.4152416567221079, 0.4208953332707278, 0.41620142444749897, 0.42504884816772814, 0.4157230140813003, 0.4271443453568491, 0.42040279468639996, 0.4288639982853589, 0.4359611937518695, 0.00010193531308100301, 0.011789411229253921, 0.0036986992518750483, 9.999999999998899e-05, 9.999999999998899e-05, 0.05285951732402705, 0.006807628722565129, 0.004534965009893477, 0.013814442163325835, 0.09413475083764555, 0.10926283373971457, 0.10549520187408978, 0.10023645086059119, 0.11508641626181138, 0.09338998431238144, 0.1012363337038672, 0.12566228453792372, 0.10467246670026797, 0.0968293754399483, 0.08908352149149235, 0.10010436378521903, 0.10683019546801042, 0.10230674545385132, 0.10267872849711313, 0.10155226825910557, 0.10147991590824712, 0.09479757490235441, 0.9690704762804798, 0.9579376377061556, 0.9865233019863072, 0.9522589132065585, 0.975935067626751, 0.9761224764987546, 0.9688211851770469, 0.9825874892492605, 0.9755627811842489, 0.23725024074918988, 0.2583086214121153, 0.2599350344378616, 0.24970395708224324, 0.2604676141748282, 0.23349657441573513, 0.22447857635917812, 0.2251129642261276, 0.25637783628653965, 0.360481894415395, 0.32066819220992016, 0.3042580312741836, 0.3067594908571899, 0.7025889814585462, 0.3159312784984759, 0.2984260803374966, 0.3444602930340498, 0.2616032259321811, 0.13673399394655628, 0.16704060043548674, 0.12011784411340554, 0.09910831482011706, 0.15576698370256203, 0.15842017810570486, 0.1699842973226643, 0.16864159263933853, 0.14382243242527237, 0.18012872194221308, 0.10306086861165153, 0.1400855923183566, 0.15074079432818654, 0.10600027699948766, 0.16706220285816675, 0.15415968719938133, 0.1883050808033666, 0.11146335897722726, 9.999999999998899e-05, 0.016415969334317215, 9.999999999998899e-05, 0.011407556501366378, 0.00020931141236069095, 0.019502779534509185, 0.012554360338101644, 0.04096839780413741, 0.01565862913427596, 0.07104793605478876, 0.050142387403824484, 0.12483613427755014, 0.07255029134406688, 0.10545884136655836, 0.060076669196660215, 0.11027340894891569, 0.07699944966134975, 0.09113816737808955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08985072498140123, 0.07625214512358103, 0.08871443285817382, 0.11282855769480427, 0.0819797729435291, 0.08241926214065076, 0.09962611280908806, 0.08083979056761603, 0.07272017283570786, 0.4181721068165659, 0.39026899201416265, 0.4169959406579796, 0.3774018624106664, 0.38639544600223974, 0.3932530561344084, 0.3984503363349333, 0.3720318839988176, 0.3797661609855887, 0.09640636179058837, 0.09197272302340986, 0.1041986385537581, 0.10064889177483893, 0.11669197022879685, 0.1029542870270499, 0.09967709886446119, 0.09692312650541868, 0.10768039770473037, 0.25866060212232245, 0.22822513221332497, 0.22809402055618455, 0.22881401236900778, 0.23776388009522087, 0.22921420159701011, 0.2697360994371204, 0.2626276820807817, 0.19993007361491877, 0.26802090323495875, 0.2923341615780528, 0.2853246234573211, 0.2802279119951012, 0.269279360748374, 0.26827106188456196, 0.28034862479894684, 0.29350900961525916, 0.25699610638716097, 0.19989988900267752, 0.19721412455703202, 0.21863487414786864, 0.1974702594802228, 0.20609925911630367, 0.21933852054915393, 0.22384647405465385, 0.21969539838025465, 0.21453683844581695, 0.2338326574758267, 0.21518864158400086, 0.1957779612941909, 0.1887118598571248, 0.2123779516223867, 0.2021049343656075, 0.24993832953269135, 0.2228324020236151, 0.2275175892142529, 0.2033518830612253, 0.22042664135440293, 0.17988340537118597, 0.18623135275573555, 0.18632133113584082, 0.19557843484341397, 0.19048883977983, 0.20708585473590513, 0.21560126270573465, 0.1725735497552876, 0.6094303145680235, 0.15333962095459486, 0.6270124013141627, 0.20080724439860786, 0.19790576592200027, 0.18305227660673673, 0.16230369208604023, 0.6230188824984935, 0.5000211442280069, 0.20950108753882524, 0.4993167168744099, 0.12399910152446358, 0.15374099282016795, 0.14895053310168294, 0.21125241990635946, 0.21009479690859778, 0.4700906099882689, 0.19411577471556507, 0.1760432440273184, 0.18053122006354483, 0.18065006054217725, 0.1986691158641528, 0.19228517790110355, 0.18306565215946224, 0.1936040738411885, 0.1854269426721542, 0.07052480507260428, 0.09300286491979914, 0.09118217899887915, 0.0913307900104251, 0.083488110897878, 0.08108273171459113, 0.09186200629284447, 0.07371855594605836, 0.07681495617559941]}, "mutation_prompt": null}
{"id": "0a9b10bf-0e94-4bf2-9751-8c626da72894", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improve convergence by refining mutation strategy and increasing exploration with adaptive scaling.", "configspace": "", "generation": 19, "fitness": 0.2532514452014536, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "a647a844-8f34-47fc-9783-3d11dd208c5a", "metadata": {"aucs": [0.41707946239465343, 0.41900609227011487, 0.4467283973902514, 0.41664202732584077, 0.4199305720494607, 0.3708975087558627, 0.3916628065004335, 0.39619893023733355, 0.37125394861320815, 0.37131305537270687, 0.4042668567155694, 0.4221266080788132, 0.40490424961338745, 0.39118281903777186, 0.4041648411072474, 0.39236380907585755, 0.44410021758121876, 0.42774844116480004, 0.11617479032658884, 0.11266924450395577, 0.13719918870925596, 0.13025412794043656, 0.11056811231699937, 0.12437753832923049, 0.11808510888629775, 0.12426963660699508, 0.10229579674566702, 0.10865645169345572, 0.0897191636220428, 0.10927225676924046, 0.11358124651440626, 0.10999553847937893, 0.0959303147610655, 0.09473694824456447, 0.09377072954538268, 0.0970381216128624, 0.9675899622117232, 0.9851907944558344, 0.975907110766895, 0.9569403753085092, 0.9564888819857934, 0.9401197276855187, 0.9679300109150107, 0.9358620228979078, 0.9761358261253728, 0.3305746488683088, 0.2713651397713711, 0.26002975953292007, 0.29019205658459524, 0.2865130204787091, 0.2928191619720034, 0.2499762751024044, 0.27215519489007034, 0.27530220567064523, 0.32268062346044146, 0.30551041035256243, 0.32909075772543117, 0.3005845325348364, 0.3105371300901646, 0.32207229322773956, 0.32321831095300735, 0.3380927217862262, 0.3020142206232951, 0.165418450057902, 0.14187438083336712, 0.12281411469128056, 0.11942502881272232, 0.16240723767035303, 0.15261148021387594, 0.14573228829280038, 0.18038132982006538, 0.16430579133103074, 0.1991092630192306, 0.14812123788961473, 0.1569333574509414, 0.22377917573260064, 0.11040124944714969, 0.14669898153781757, 0.17031155909106876, 0.18547721591304278, 0.18636345688696276, 0.1335661245984595, 0.18618223175510407, 0.18073909293098278, 0.14107174023389468, 0.2436286673935516, 0.13374936378404767, 0.21603765662762142, 0.23086222687257119, 0.21312636156538878, 0.27581748842636467, 0.2582721235672497, 0.28646927570378544, 0.2781804403309752, 0.20494864444899719, 0.21854141874427002, 0.34917917973705104, 0.27881032261424654, 0.3006514832861137, 0.07809309589170876, 0.06146453877385061, 0.03535000640813091, 0.14017117533603374, 0.1024842410641359, 0.13842203163139566, 0.08882730263321192, 0.12342404301191112, 0.10363458970804018, 0.08846956358289026, 0.11129061381268834, 0.11113518254831434, 0.1002855767148374, 0.10117104105629093, 0.10655909714829881, 0.10715603740163948, 0.11004875165153061, 0.10859655718176675, 0.4031370527790976, 0.36727538062431, 0.3627112703913026, 0.37577611663631083, 0.3834476500314582, 0.36949473287414214, 0.3727569257261222, 0.37760347055774857, 0.3891598017980664, 0.11528484328409616, 0.11110606452239702, 0.10178479129448881, 0.11750466884762278, 0.12498751656529561, 0.13400259069727705, 0.10898304896094502, 0.12606672679557285, 0.11332892725195454, 0.16626436191115557, 0.22651005359665222, 0.21522442492793137, 0.23015316125252994, 0.23194846075701447, 0.22143103361288674, 0.25552638833569397, 0.24257210500987192, 0.20607937859023273, 0.26419229715066217, 0.2697232296999169, 0.2725100108841728, 0.2799253075202308, 0.26298331054850355, 0.27064457585387525, 0.2705843086602644, 0.2677133671923265, 0.2757353520553587, 0.22723611801695753, 0.1978371554540217, 0.20394671485756077, 0.21141580244051528, 0.16729961542964888, 0.23255274329146824, 0.21532402316551413, 0.21757509242108686, 0.21525276799815352, 0.21031580397865057, 0.20668157918277152, 0.19053473784962183, 0.2154180704767663, 0.1989081809179868, 0.18474978346138582, 0.19522130071980115, 0.2046488376011667, 0.21874794188682978, 0.21309332575197526, 0.20766389839259347, 0.18818433624604736, 0.24991560579608674, 0.20851541395648698, 0.19325466590277596, 0.25542151404845037, 0.19275489539866153, 0.21270222442959186, 0.1966297255402477, 0.5371258962459704, 0.15079012018165305, 0.1708982295272775, 0.19736919573591027, 0.5452571517068592, 0.1863160128482999, 0.1673616041338991, 0.6539800179985672, 0.5391853546861818, 0.2071073563635406, 0.16167347260568588, 0.19984304437556488, 0.520551358715613, 0.4997031587255737, 0.10407056335628495, 0.10480515680885216, 0.41964929207392454, 0.19293448454677664, 0.18021903048121768, 0.17263597884119086, 0.18837795388258172, 0.18769950780029354, 0.180981421325349, 0.18796834762716208, 0.1894865472700955, 0.2058481031141316, 0.0786331910753808, 0.08219395271813246, 0.09025620289362779, 0.07939693055602526, 0.0875457468707096, 0.08119692225673769, 0.08822097862125267, 0.08308854428243828, 0.09036572971206625]}, "mutation_prompt": null}
{"id": "9d5d8fa9-8c77-4030-9e39-2383e7a2a5a9", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improve convergence by refining mutation strategy and increasing exploration with adaptive scaling.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0a9b10bf-0e94-4bf2-9751-8c626da72894", "metadata": {"aucs": [0.41707946239465343, 0.41900609227011487, 0.4467283973902514, 0.41664202732584077, 0.4199305720494607, 0.3708975087558627, 0.3916628065004335, 0.39619893023733355, 0.37125394861320815, 0.37131305537270687, 0.4042668567155694, 0.4221266080788132, 0.40490424961338745, 0.39118281903777186, 0.4041648411072474, 0.39236380907585755, 0.44410021758121876, 0.42774844116480004, 0.11617479032658884, 0.11266924450395577, 0.13719918870925596, 0.13025412794043656, 0.11056811231699937, 0.12437753832923049, 0.11808510888629775, 0.12426963660699508, 0.10229579674566702, 0.10865645169345572, 0.0897191636220428, 0.10927225676924046, 0.11358124651440626, 0.10999553847937893, 0.0959303147610655, 0.09473694824456447, 0.09377072954538268, 0.0970381216128624, 0.9675899622117232, 0.9851907944558344, 0.975907110766895, 0.9569403753085092, 0.9564888819857934, 0.9401197276855187, 0.9679300109150107, 0.9358620228979078, 0.9761358261253728, 0.3305746488683088, 0.2713651397713711, 0.26002975953292007, 0.29019205658459524, 0.2865130204787091, 0.2928191619720034, 0.2499762751024044, 0.27215519489007034, 0.27530220567064523, 0.32268062346044146, 0.30551041035256243, 0.32909075772543117, 0.3005845325348364, 0.3105371300901646, 0.32207229322773956, 0.32321831095300735, 0.3380927217862262, 0.3020142206232951, 0.165418450057902, 0.14187438083336712, 0.12281411469128056, 0.11942502881272232, 0.16240723767035303, 0.15261148021387594, 0.14573228829280038, 0.18038132982006538, 0.16430579133103074, 0.1991092630192306, 0.14812123788961473, 0.1569333574509414, 0.22377917573260064, 0.11040124944714969, 0.14669898153781757, 0.17031155909106876, 0.18547721591304278, 0.18636345688696276, 0.1335661245984595, 0.18618223175510407, 0.18073909293098278, 0.14107174023389468, 0.2436286673935516, 0.13374936378404767, 0.21603765662762142, 0.23086222687257119, 0.21312636156538878, 0.27581748842636467, 0.2582721235672497, 0.28646927570378544, 0.2781804403309752, 0.20494864444899719, 0.21854141874427002, 0.34917917973705104, 0.27881032261424654, 0.3006514832861137, 0.07809309589170876, 0.06146453877385061, 0.03535000640813091, 0.14017117533603374, 0.1024842410641359, 0.13842203163139566, 0.08882730263321192, 0.12342404301191112, 0.10363458970804018, 0.08846956358289026, 0.11129061381268834, 0.11113518254831434, 0.1002855767148374, 0.10117104105629093, 0.10655909714829881, 0.10715603740163948, 0.11004875165153061, 0.10859655718176675, 0.4031370527790976, 0.36727538062431, 0.3627112703913026, 0.37577611663631083, 0.3834476500314582, 0.36949473287414214, 0.3727569257261222, 0.37760347055774857, 0.3891598017980664, 0.11528484328409616, 0.11110606452239702, 0.10178479129448881, 0.11750466884762278, 0.12498751656529561, 0.13400259069727705, 0.10898304896094502, 0.12606672679557285, 0.11332892725195454, 0.16626436191115557, 0.22651005359665222, 0.21522442492793137, 0.23015316125252994, 0.23194846075701447, 0.22143103361288674, 0.25552638833569397, 0.24257210500987192, 0.20607937859023273, 0.26419229715066217, 0.2697232296999169, 0.2725100108841728, 0.2799253075202308, 0.26298331054850355, 0.27064457585387525, 0.2705843086602644, 0.2677133671923265, 0.2757353520553587, 0.22723611801695753, 0.1978371554540217, 0.20394671485756077, 0.21141580244051528, 0.16729961542964888, 0.23255274329146824, 0.21532402316551413, 0.21757509242108686, 0.21525276799815352, 0.21031580397865057, 0.20668157918277152, 0.19053473784962183, 0.2154180704767663, 0.1989081809179868, 0.18474978346138582, 0.19522130071980115, 0.2046488376011667, 0.21874794188682978, 0.21309332575197526, 0.20766389839259347, 0.18818433624604736, 0.24991560579608674, 0.20851541395648698, 0.19325466590277596, 0.25542151404845037, 0.19275489539866153, 0.21270222442959186, 0.1966297255402477, 0.5371258962459704, 0.15079012018165305, 0.1708982295272775, 0.19736919573591027, 0.5452571517068592, 0.1863160128482999, 0.1673616041338991, 0.6539800179985672, 0.5391853546861818, 0.2071073563635406, 0.16167347260568588, 0.19984304437556488, 0.520551358715613, 0.4997031587255737, 0.10407056335628495, 0.10480515680885216, 0.41964929207392454, 0.19293448454677664, 0.18021903048121768, 0.17263597884119086, 0.18837795388258172, 0.18769950780029354, 0.180981421325349, 0.18796834762716208, 0.1894865472700955, 0.2058481031141316, 0.0786331910753808, 0.08219395271813246, 0.09025620289362779, 0.07939693055602526, 0.0875457468707096, 0.08119692225673769, 0.08822097862125267, 0.08308854428243828, 0.09036572971206625]}, "mutation_prompt": null}
{"id": "f1d7e5af-369f-40e2-8de8-9c1784585820", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.85  # Slightly increased scaling factor\n        self.CR = 0.85  # Slightly decreased crossover rate\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - (0.9 * evaluations / self.budget))))  # Adaptive scaling\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Utilize adaptive population scaling and simulated annealing for improved convergence in black-box optimization. ", "configspace": "", "generation": 21, "fitness": 0.24487927552884473, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "0a9b10bf-0e94-4bf2-9751-8c626da72894", "metadata": {"aucs": [0.40988465491650494, 0.39236777662561817, 0.38298853403500266, 0.3830228409869938, 0.39666877103945986, 0.42446190503586534, 0.38084322906155343, 0.3990250656404717, 0.3719548917033916, 0.32125663697227524, 0.3633118412227957, 0.3594775869699206, 0.3012281683465833, 0.353619368048285, 0.3051815667822467, 0.322301789855586, 0.35601317419800493, 0.3245023773742116, 0.11310945621757984, 0.13504746538717916, 0.11954887433117689, 0.1298558755721695, 0.12929572887947072, 0.11191492120141944, 0.12640926331306857, 0.10335065850759817, 0.11543607845804349, 0.09200056571622883, 0.10120363620505013, 0.09558646456377629, 0.10371458044500192, 0.09772148719875096, 0.0932017346363122, 0.09914658239117069, 0.11171790455434094, 0.0948976619854478, 0.9617588918135774, 0.9413083654632468, 0.9755132831177344, 0.9371144574725808, 0.9372277759994919, 0.9551456653239775, 0.9587289244715265, 0.9568204342329698, 0.9649084104342548, 0.24702337509444205, 0.25748762628276267, 0.25096198451833596, 0.2985663404154303, 0.2605817259952974, 0.2581433981490926, 0.30414301401503385, 0.2619981713961146, 0.27332308089532986, 0.2878047367154415, 0.2610276980115338, 0.27616455017998975, 0.31033327613817707, 0.25462573772327124, 0.30549064986757535, 0.289152793557127, 0.31355689237590867, 0.29076692508315083, 0.1783080197274376, 0.1496390644868616, 0.16150001342682663, 0.18057250668600122, 0.14367028147227612, 0.12704912374792643, 0.17048791714652767, 0.15199913296101275, 0.19205431269035111, 0.15603421071706158, 0.14406371324670653, 0.14113585792829253, 0.15635972487776673, 0.1319757949688346, 0.1539234509440366, 0.17928720101041784, 0.11163753276562127, 0.14772588575829226, 0.1364998060066157, 0.1411639108070365, 0.08406580801395669, 0.12464328920867196, 0.15256500688656727, 0.05702753431113994, 0.15389582510939237, 0.1281650036182207, 0.1187149259056125, 0.258076171500371, 0.18466064720529218, 0.24853541638414234, 0.25939737882559866, 0.21216819969412892, 0.26467060045333046, 0.2523644531268583, 0.21555224844453802, 0.31539287561852425, 0.03163385785738371, 0.050699767077399205, 0.10537659870203753, 0.050280929951134534, 0.11987821744531069, 0.057496512749388606, 0.11401844349584334, 0.061364121577595854, 0.09759850415262317, 0.10745100378214678, 0.10652509960580792, 0.0787487497622873, 0.08794334058182107, 0.08574114029774882, 0.09343602882613666, 0.09235866325948427, 0.08844712164426671, 0.09170950407724576, 0.3828969321252029, 0.3624350088276155, 0.3679685120028787, 0.36716707871430854, 0.38237947422559415, 0.3608631789034692, 0.37307100307485985, 0.3611380725979245, 0.37192120637764214, 0.11254776995797533, 0.10791146097377802, 0.10766424244851491, 0.11570248412492123, 0.11299080527703786, 0.10777568691878237, 0.10501116545443934, 0.1224001335028041, 0.11365789265347048, 0.2003631209544604, 0.19413443784179996, 0.16507480670155805, 0.22518271958074532, 0.24567895331383705, 0.18117708299207047, 0.2261421546978386, 0.19043085238844415, 0.20866484635522775, 0.26554547685812435, 0.25937162656722035, 0.2715998940035108, 0.267513118941214, 0.2671681696104785, 0.2606869570696233, 0.2812016681212913, 0.2768416806359173, 0.2747493311614513, 0.20190447024038083, 0.1723539319131061, 0.20935266679147557, 0.176754307773214, 0.2120034966481945, 0.20344314641396788, 0.21263252246033482, 0.20419580336119203, 0.19971096955150902, 0.19426428614765578, 0.2016372200849581, 0.21556671097468239, 0.21895941942647046, 0.20540516592795544, 0.2110732813713707, 0.21384474368307904, 0.2279511206517022, 0.20405532030718088, 0.19574615429150188, 0.18879580109751137, 0.19568029525816744, 0.19744031283087504, 0.20597308266937076, 0.1907253783821361, 0.20650363947374695, 0.18934399369648158, 0.19894829856915086, 0.5105842318251763, 0.12559186620900076, 0.1791934824242679, 0.5409015288960917, 0.1971763370033205, 0.1713917728518778, 0.1857867941346898, 0.1719528571076766, 0.5783144218948331, 0.5016748001747378, 0.43968550441368826, 0.5387167955829879, 0.5096775915096065, 0.5215555686195359, 0.4892935448027991, 0.41699715982359586, 0.20754375011688242, 0.4801104660173441, 0.19750162484546374, 0.19302764141769635, 0.18816582959731865, 0.1812025073402791, 0.1662292454325407, 0.17142278391652543, 0.18309995064702833, 0.18056463152977054, 0.18179755370638562, 0.07552793981774086, 0.07998919169358665, 0.07924926537348509, 0.079845651831702, 0.07388909453340253, 0.07959744400550894, 0.08563818762601894, 0.08811187798875086, 0.07498231991589455]}, "mutation_prompt": null}
{"id": "b3aa71bc-5f31-4560-b59d-86515ec7390a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improve convergence by refining mutation strategy and increasing exploration with adaptive scaling.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0a9b10bf-0e94-4bf2-9751-8c626da72894", "metadata": {"aucs": [0.41707946239465343, 0.41900609227011487, 0.4467283973902514, 0.41664202732584077, 0.4199305720494607, 0.3708975087558627, 0.3916628065004335, 0.39619893023733355, 0.37125394861320815, 0.37131305537270687, 0.4042668567155694, 0.4221266080788132, 0.40490424961338745, 0.39118281903777186, 0.4041648411072474, 0.39236380907585755, 0.44410021758121876, 0.42774844116480004, 0.11617479032658884, 0.11266924450395577, 0.13719918870925596, 0.13025412794043656, 0.11056811231699937, 0.12437753832923049, 0.11808510888629775, 0.12426963660699508, 0.10229579674566702, 0.10865645169345572, 0.0897191636220428, 0.10927225676924046, 0.11358124651440626, 0.10999553847937893, 0.0959303147610655, 0.09473694824456447, 0.09377072954538268, 0.0970381216128624, 0.9675899622117232, 0.9851907944558344, 0.975907110766895, 0.9569403753085092, 0.9564888819857934, 0.9401197276855187, 0.9679300109150107, 0.9358620228979078, 0.9761358261253728, 0.3305746488683088, 0.2713651397713711, 0.26002975953292007, 0.29019205658459524, 0.2865130204787091, 0.2928191619720034, 0.2499762751024044, 0.27215519489007034, 0.27530220567064523, 0.32268062346044146, 0.30551041035256243, 0.32909075772543117, 0.3005845325348364, 0.3105371300901646, 0.32207229322773956, 0.32321831095300735, 0.3380927217862262, 0.3020142206232951, 0.165418450057902, 0.14187438083336712, 0.12281411469128056, 0.11942502881272232, 0.16240723767035303, 0.15261148021387594, 0.14573228829280038, 0.18038132982006538, 0.16430579133103074, 0.1991092630192306, 0.14812123788961473, 0.1569333574509414, 0.22377917573260064, 0.11040124944714969, 0.14669898153781757, 0.17031155909106876, 0.18547721591304278, 0.18636345688696276, 0.1335661245984595, 0.18618223175510407, 0.18073909293098278, 0.14107174023389468, 0.2436286673935516, 0.13374936378404767, 0.21603765662762142, 0.23086222687257119, 0.21312636156538878, 0.27581748842636467, 0.2582721235672497, 0.28646927570378544, 0.2781804403309752, 0.20494864444899719, 0.21854141874427002, 0.34917917973705104, 0.27881032261424654, 0.3006514832861137, 0.07809309589170876, 0.06146453877385061, 0.03535000640813091, 0.14017117533603374, 0.1024842410641359, 0.13842203163139566, 0.08882730263321192, 0.12342404301191112, 0.10363458970804018, 0.08846956358289026, 0.11129061381268834, 0.11113518254831434, 0.1002855767148374, 0.10117104105629093, 0.10655909714829881, 0.10715603740163948, 0.11004875165153061, 0.10859655718176675, 0.4031370527790976, 0.36727538062431, 0.3627112703913026, 0.37577611663631083, 0.3834476500314582, 0.36949473287414214, 0.3727569257261222, 0.37760347055774857, 0.3891598017980664, 0.11528484328409616, 0.11110606452239702, 0.10178479129448881, 0.11750466884762278, 0.12498751656529561, 0.13400259069727705, 0.10898304896094502, 0.12606672679557285, 0.11332892725195454, 0.16626436191115557, 0.22651005359665222, 0.21522442492793137, 0.23015316125252994, 0.23194846075701447, 0.22143103361288674, 0.25552638833569397, 0.24257210500987192, 0.20607937859023273, 0.26419229715066217, 0.2697232296999169, 0.2725100108841728, 0.2799253075202308, 0.26298331054850355, 0.27064457585387525, 0.2705843086602644, 0.2677133671923265, 0.2757353520553587, 0.22723611801695753, 0.1978371554540217, 0.20394671485756077, 0.21141580244051528, 0.16729961542964888, 0.23255274329146824, 0.21532402316551413, 0.21757509242108686, 0.21525276799815352, 0.21031580397865057, 0.20668157918277152, 0.19053473784962183, 0.2154180704767663, 0.1989081809179868, 0.18474978346138582, 0.19522130071980115, 0.2046488376011667, 0.21874794188682978, 0.21309332575197526, 0.20766389839259347, 0.18818433624604736, 0.24991560579608674, 0.20851541395648698, 0.19325466590277596, 0.25542151404845037, 0.19275489539866153, 0.21270222442959186, 0.1966297255402477, 0.5371258962459704, 0.15079012018165305, 0.1708982295272775, 0.19736919573591027, 0.5452571517068592, 0.1863160128482999, 0.1673616041338991, 0.6539800179985672, 0.5391853546861818, 0.2071073563635406, 0.16167347260568588, 0.19984304437556488, 0.520551358715613, 0.4997031587255737, 0.10407056335628495, 0.10480515680885216, 0.41964929207392454, 0.19293448454677664, 0.18021903048121768, 0.17263597884119086, 0.18837795388258172, 0.18769950780029354, 0.180981421325349, 0.18796834762716208, 0.1894865472700955, 0.2058481031141316, 0.0786331910753808, 0.08219395271813246, 0.09025620289362779, 0.07939693055602526, 0.0875457468707096, 0.08119692225673769, 0.08822097862125267, 0.08308854428243828, 0.09036572971206625]}, "mutation_prompt": null}
{"id": "7c5876a5-3106-43af-b390-bc32b6cb609e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.85  # Slightly increased mutation factor\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            self.CR = 0.9 * (1 - evaluations / self.budget) + 0.1  # Adaptive crossover probability\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance convergence by introducing adaptive crossover probability and slight adjustment to the mutation factor.", "configspace": "", "generation": 23, "fitness": 0.24139327431438015, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "0a9b10bf-0e94-4bf2-9751-8c626da72894", "metadata": {"aucs": [0.44684972415434854, 0.41940523518482864, 0.40819815023912986, 0.4161777315012789, 0.4053992340758007, 0.4165347580358947, 0.3889364605206711, 0.4334505738955925, 0.42173233869171556, 0.40044868665126054, 0.3858673064460505, 0.36678272284825997, 0.40062012279657455, 0.3977340760059659, 0.3681578771301983, 0.38580377818528455, 0.41337675187228784, 0.34823631502547747, 0.13591622454128482, 0.13110935002942625, 0.13337508781420604, 0.15188608197934572, 0.10083826017170161, 0.12162247022788886, 0.15691052163588715, 0.12485307294780501, 0.15824437699493155, 0.11934624298604901, 0.1003530949135164, 0.12673432878953972, 0.10706301636398552, 0.10786691982203234, 0.10126728665009743, 0.11502272956477644, 0.11158654099575871, 0.136254589536297, 0.9754916067296425, 0.9852742894624231, 0.9539159044214067, 0.9680694196024856, 0.9507937086912233, 0.9662853165634094, 0.9593464806854316, 0.9558136523719625, 0.9919125753434286, 0.24699884525144633, 0.2640887161464863, 0.2841361435512093, 0.2653087859439339, 0.26903851917273025, 0.2659715032347181, 0.2548358082261427, 0.264691651464914, 0.27197478561469624, 0.32536957673098965, 0.31160110007040487, 0.3159677770253916, 0.30073333342534647, 0.2743020254639773, 0.3497836028357403, 0.3060003538062456, 0.2917922008069429, 0.2926144158276467, 0.21303270287581588, 0.14240921011447027, 0.1230552320574867, 0.16418796780879452, 0.16963722234942435, 0.2192250455523841, 0.18152254111650368, 0.15015769634522003, 0.17185312710083311, 0.17237887844182875, 0.22766923634762914, 0.15525580803559913, 0.1710712612777735, 0.18774637221881962, 0.1514203606297535, 0.1529852028727835, 0.18831259946653212, 0.15033318794296813, 0.04898422239726774, 0.0654126132896714, 0.05197154543817373, 0.11174000448517474, 0.04004511649912912, 0.06699427932786761, 0.06958202002469482, 0.028371840494241574, 0.10419069969339356, 0.13719507695864797, 0.16790262849225657, 0.14530429797240685, 0.17074384767738904, 0.1642827295593302, 0.18822494231816944, 0.23834447059184016, 0.22674277895039607, 0.14071689571430834, 0.031212181244633208, 0.023377992975107786, 0.05941257920977727, 0.04792060256513797, 0.02469055600181458, 0.06404419708233489, 0.017844501960927128, 9.999999999998899e-05, 0.03924826799724357, 0.10863150977189473, 0.0930421807927434, 0.09975906099932874, 0.08781030736736006, 0.09487124216502585, 0.12410122350186725, 0.08741003506832057, 0.11637198999353515, 0.1134838642435061, 0.3707952391273174, 0.38652374043809756, 0.39490973239137317, 0.38072862037166244, 0.37836618161154734, 0.3846060112172549, 0.39968576835968983, 0.395732836973537, 0.37517378705952487, 0.11249855610362791, 0.12240473334819713, 0.1202646811708018, 0.12117071420977155, 0.11762852438129234, 0.11512333777759542, 0.10094009528288739, 0.10937977626212791, 0.10482749734656005, 0.17631443480040399, 0.2579270846980892, 0.17256402706204443, 0.2513278083741568, 0.2597681904926704, 0.2427571301060798, 0.2702878319737956, 0.27506332184290894, 0.19549827855633173, 0.2543958558015633, 0.27252428123984895, 0.28475692834643074, 0.25766117747073525, 0.27830791235928565, 0.259277176628805, 0.26330514961176765, 0.2882751937824479, 0.28261890182896565, 0.24106884544779317, 0.19978877027676178, 0.2265930716637241, 0.1929544279527834, 0.2088902454464424, 0.20579881998646055, 0.22188310749499274, 0.2237513873113166, 0.23185375104546324, 0.20202179894044614, 0.19371804380648927, 0.19179153883987887, 0.22215877221526825, 0.18091100590404985, 0.1946178122715586, 0.20104715516247962, 0.20238956818891785, 0.2173266414188464, 0.2234126209131968, 0.18548354662804345, 0.19762783661779437, 0.21669375796211643, 0.23975626351236634, 0.20769334973611353, 0.21347047414880693, 0.24747627732881172, 0.21567164864531974, 0.6187334818431321, 0.12600915634208598, 0.15107655248085938, 0.5508630594309738, 0.19740825146234087, 0.1994837692209862, 0.18519090558456597, 0.16202329765942391, 0.6819409357878347, 0.5410439454167955, 0.20812801613166043, 0.19958880042936633, 0.5095821180134261, 0.16867970780218888, 0.15118881468801226, 0.09282097423410418, 0.2066311827664956, 0.16228842763934537, 0.18022237298427768, 0.21121342261210585, 0.20250279872984145, 0.18492258527423788, 0.18258139198604095, 0.18789081424789889, 0.18143666937457315, 0.1865670984502481, 0.19444807923845897, 0.0812512869905091, 0.0845789891612645, 0.07524208294853396, 0.08733004449857396, 0.08888924258577224, 0.09037233647830778, 0.09170656640500563, 0.07293117650351832, 0.08652774615284453]}, "mutation_prompt": null}
{"id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 24, "fitness": 0.27951658588619616, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.19.", "error": "", "parent_id": "0a9b10bf-0e94-4bf2-9751-8c626da72894", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "bae779e7-bbb3-413d-9ef6-9bd5f1134e3f", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "052242d7-c73b-440a-b7ca-e201edcc17d6", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "dd15e091-16aa-4f73-ab4d-4bcbe450deea", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                adaptive_CR = self.CR * (self.temperature / 100)  # Adaptive crossover rate\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a temperature-based adaptive crossover rate to improve exploration and convergence balance.", "configspace": "", "generation": 27, "fitness": 0.25032819822400715, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.42334383568514855, 0.43834483826188375, 0.4211925437342625, 0.42651897759599355, 0.4353726565157261, 0.4142892454485254, 0.4317717812442686, 0.4125126671902034, 0.39752633763162626, 0.5338056597080874, 0.5153991768720938, 0.5097745568361078, 0.48565758294815375, 0.5064355081740889, 0.5312667901830677, 0.47774778260459194, 0.48289745606985546, 0.46332780976676535, 0.12590651706049916, 0.13377547501552745, 0.11756986547468717, 0.13293823387964598, 0.15370251163252646, 0.12701100285907474, 0.1557712047660058, 0.15311695578877316, 0.14176795725846192, 0.11914685520731327, 0.12254602257490987, 0.11808251151076476, 0.16532537304443973, 0.1677486276590393, 0.12365648675351293, 0.11667823473144201, 0.11275889958047025, 0.12620592929777263, 0.9595960511777079, 0.985187936444825, 0.9409837225744805, 0.9511441802039756, 0.9361341141379402, 0.9483233667819831, 0.9464099070858438, 0.9569873894092568, 0.9761240619559206, 0.2760104982043363, 0.27323242735122055, 0.29386565199335013, 0.2790589480694875, 0.2953413150765626, 0.31799571426528583, 0.2960047614200092, 0.30408094997465773, 0.28063520656250796, 0.2940664304902365, 0.29988327342530574, 0.30504338252156393, 0.3094972738840849, 0.2620665533272196, 0.546476984437975, 0.5062038181843989, 0.32019190187630076, 0.30891750846747523, 0.14448802432506325, 0.18133184904023103, 0.16358584633686057, 0.14629476569873345, 0.15588775623914974, 0.17450381590437447, 0.17985503132397496, 0.19825585673274726, 0.1592678960593925, 0.17097886476112967, 0.1619253312102894, 0.1571453658928691, 0.16860140163602588, 0.1752731022228834, 0.15685630270576345, 0.1760005386747956, 0.1996739958889744, 0.1446138014302889, 0.03465972788055516, 0.04044625187039386, 0.07507154940152905, 0.05124940437348546, 0.0643692189892423, 0.022598904661478847, 0.07925209310978076, 0.018774443043484412, 0.07301961116278577, 0.1627685595964824, 0.1373152268241714, 0.16611935490325358, 0.1310592255632722, 0.18802237329638738, 0.07642310998786905, 0.213393094345393, 0.1723017648605224, 0.1753392522675571, 0.10434595570578387, 0.03270217822962973, 0.1022693644534658, 0.07806778882854215, 0.05151027025470467, 0.062088875334064486, 0.08822905389077862, 0.09399545347036475, 0.08420175817961606, 0.13332937865572714, 0.11311868018064541, 0.11234629562038101, 0.1168025168572302, 0.12211777644099042, 0.1285950659921673, 0.13224556099768758, 0.12550146668605033, 0.10463126144130652, 0.40086488117261887, 0.3780262583777777, 0.4115056400412679, 0.3715682041620719, 0.4081507882646468, 0.40664852523118145, 0.37262807163393197, 0.40346383513880524, 0.3940154853061296, 0.12717510319512926, 0.11721862124399318, 0.11493986326336958, 0.11535228231377337, 0.10752287702634278, 0.1216994036485799, 0.17299663828714928, 0.1519710815611468, 0.0988851390900296, 0.21249012922807053, 0.16469757323117096, 0.18990386669883597, 0.20819535032038616, 0.21570767573992544, 0.24414239761315626, 0.24843566076985157, 0.17321197604773464, 0.27485455626940825, 0.2571252109868809, 0.2635315577303634, 0.2842473126238917, 0.2825473600465165, 0.2618541268448059, 0.2730660022802024, 0.2828515213920135, 0.28777952836309995, 0.26700816198774235, 0.22442895496052506, 0.19476263007609917, 0.22823559719839337, 0.2098712030335126, 0.23258260797515118, 0.18121819981542198, 0.2224735438720573, 0.20949030532492707, 0.23467955619452463, 0.2337902654251669, 0.23325564354270412, 0.21518059471926998, 0.22534040672417144, 0.21654051686572606, 0.23945718008925299, 0.2025554987116338, 0.20444333823445382, 0.2172760966655043, 0.21536459124495977, 0.19933891158692874, 0.19501821144966403, 0.26713378083300976, 0.20913787481470314, 0.20445258597662364, 0.21526499583262027, 0.25094120768305683, 0.20603453968279561, 0.19724680045052, 0.13540885527568647, 0.15059234374646602, 0.17107022498537716, 0.1980555536306654, 0.5608337700107973, 0.1871226979720464, 0.16584162018148108, 0.6371022769008492, 0.5059727559303859, 0.20852431623015288, 0.19487538169811924, 0.10409783092978431, 0.5077241034875359, 0.145881537122301, 0.10412591026913975, 0.10496132095767186, 0.5511614936318564, 0.19230580790359508, 0.1855359616521257, 0.19033384559017952, 0.17594057621797532, 0.21014655599551801, 0.1771059816805648, 0.20311284033958654, 0.19237521260339796, 0.18982119867449987, 0.0824056744679792, 0.09019262212788048, 0.09826410812073849, 0.08457534569967917, 0.07645988184817876, 0.08659902111204154, 0.09441644677333916, 0.09415648383140929, 0.08881433936160288]}, "mutation_prompt": null}
{"id": "03301fe5-c53e-48af-aa49-fdfb897447a8", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "9382ab65-e4f8-4035-99b9-33d876532bce", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                # Adjust crossover rate dynamically\n                adaptive_CR = self.CR * (0.5 + 0.5 * (evaluations / self.budget))\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate adjustment for enhanced solution diversity and adaptability.", "configspace": "", "generation": 29, "fitness": 0.259041589608972, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.42316785018451586, 0.41000759925988317, 0.44093063867847526, 0.4420971264996586, 0.4220777845777709, 0.43563324113314605, 0.4124845460017105, 0.42927871789532923, 0.4143033755497175, 0.5132903149433352, 0.4850923738575882, 0.5141790126550404, 0.47214908943412526, 0.5132667559734481, 0.5277832696869287, 0.4742120870821307, 0.5057193059599843, 0.5224124575794458, 0.1295755028079808, 0.1383380497794151, 0.12750089334372527, 0.1471203960041988, 0.13130492856904608, 0.1208055582257499, 0.12147844206240466, 0.1443790707372551, 0.1890442736936968, 0.09947392763220819, 0.10659558463918672, 0.10562533300591037, 0.1402406451344963, 0.11237853587437219, 0.1297417909944023, 0.11882046006065705, 0.12101008128973423, 0.09946265682365207, 0.9581619416003896, 0.9102362988977493, 0.9018248089197848, 0.9242775953211774, 0.9347183047983316, 0.9132051537083972, 0.9511719837289823, 0.88750672619201, 0.8415181905299044, 0.3016407611885442, 0.2682562985230593, 0.301608688675428, 0.2886974263255605, 0.28344210450545415, 0.2876872946772865, 0.2844860331507205, 0.28526907867523355, 0.3184478475935688, 0.32126078113700063, 0.4223005441341757, 0.26805758113427924, 0.31400139459889664, 0.3015817386540053, 0.31930273175533286, 0.26794322509929, 0.30172179302483104, 0.31539722558534633, 0.1809925698474788, 0.13965103400615264, 0.1655555690438023, 0.14882314677050257, 0.19917031354051729, 0.17112621934046368, 0.16383182417378117, 0.16365291531485604, 0.16682872374523305, 0.14930383811901615, 0.12925062337959747, 0.1215516997518371, 0.17059784746389994, 0.16904275536051538, 0.1727355514789558, 0.18407804381426762, 0.16497810776826605, 0.14933740735167778, 0.05032260135635569, 9.999999999998899e-05, 0.029523916909934833, 0.05551962252077469, 0.04378040320869059, 0.03932113524105263, 0.027385243846164253, 0.03379544054931227, 0.15749287653507982, 0.1993091725246814, 0.16278906663093207, 0.14234175923353665, 0.10430995840101076, 0.13111365260596763, 0.12334458781897029, 0.1837221852732499, 0.19573148783266192, 0.10414715744380132, 0.17183646471097558, 0.03864147445159272, 0.09470734203336562, 0.05592502182424908, 0.04801207596815349, 0.10814624358328184, 0.15185624119144725, 0.06543732326357099, 0.06061276000331095, 0.09732581332203749, 0.08303926808018935, 0.1306485704138708, 0.08621314493587595, 0.12118475383037153, 0.12173270183956797, 0.10772868843834604, 0.09673034518234414, 0.11044438871877793, 0.3814073219604942, 0.37129414893480894, 0.3841983973149792, 0.3956773714774334, 0.3598922913021825, 0.38369672107571584, 0.3799007763938441, 0.39120368133603867, 0.3838330385635017, 0.10984545590436978, 0.10015582144386048, 0.1191417875306886, 0.11510844612467319, 0.12472620737539364, 0.1231330910323506, 0.10715520125670008, 0.11908017137282789, 0.17862201023195867, 0.25664551791063095, 0.25791003367061593, 0.24168351894969198, 0.2788143316806895, 0.26309976594418905, 0.2503996021036121, 0.24917782915814246, 0.2043076608163643, 0.2163269795529824, 0.27173716820278637, 0.2729873185315912, 0.2758544133570119, 0.2657662769167196, 0.2617985931588285, 0.2722371584282146, 0.27102993202950487, 0.2717006837479501, 0.2813675843082639, 0.20021930028786006, 0.20486938446493375, 0.22297801507893023, 0.21472672237823032, 0.18751665352115732, 0.22343372303435038, 0.20933240930201102, 0.22183020442210344, 0.21826773503670427, 0.20680146613088235, 0.19609746165681652, 0.23825662883201237, 0.19695928722158174, 0.21501318453967344, 0.20480615309759476, 0.24036945625893658, 0.2207638646385781, 0.23090660179563005, 0.1920065395208247, 0.21060371994643434, 0.19011901739496684, 0.2811424132284287, 0.18883140511281382, 0.2703263539606724, 0.2111682821986417, 0.22264841632857224, 0.1970644961407213, 0.15085067647193096, 0.19786762717166917, 0.1578287078701911, 0.5793518517285963, 0.19562380751409159, 0.5632090119807186, 0.14066508749300943, 0.5824703553473296, 0.6654262244444701, 0.5438902119961193, 0.4996886527358132, 0.5184343232649771, 0.5504466917886053, 0.47707141364079264, 0.4967753616015903, 0.5206910126494164, 0.5260527597466687, 0.3380207084415521, 0.18866575576893352, 0.19078922428737954, 0.17964642769121497, 0.19186757853397463, 0.17755330403998038, 0.2057581423851561, 0.18847955965366936, 0.1968525579359045, 0.18829373001246164, 0.08461583050955557, 0.09595053194094894, 0.08145365226705303, 0.08998766476889342, 0.07660397272665975, 0.08374811269045435, 0.08569811439261699, 0.08982307114717536, 0.08537012450931236]}, "mutation_prompt": null}
{"id": "fa6be680-5d2b-4c5f-ab15-6cbca21b3bb3", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                \n                if np.random.rand() < 0.15:  # Reduced mutation probability for balancing\n                    mutant = population[a] + adaptive_F * (population[b] - population[i])  # Controlled mutation direction\n                else:\n                    mutant = population[a] + adaptive_F * (population[b] - population[c])\n\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce strategic diversity in exploration by adapting mutation direction and trial vector selection in a more controlled manner.", "configspace": "", "generation": 30, "fitness": 0.26473706799728, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.18.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4082284158759487, 0.41020645166162717, 0.41176986132779647, 0.4126856149661797, 0.40846322491773934, 0.42863226631359674, 0.44012443521655287, 0.4216315602264009, 0.4213904962158759, 0.5005110907846796, 0.5171694997854333, 0.5165628764202519, 0.5152224153411339, 0.5079978957032922, 0.5488797866031749, 0.5060214439322768, 0.47133092651732966, 0.5281158807827877, 0.11513445876476414, 0.11713886834657938, 0.10731797343312444, 0.11477552137210656, 0.1064117922576403, 0.13036710822899145, 0.11190403489999567, 0.1249597972043639, 0.1262137497063195, 0.10440705874418776, 0.09716679237593961, 0.12442778091122642, 0.11399927496475648, 0.10680655851027421, 0.1306935614314947, 0.10627800448352087, 0.10234671323306099, 0.11093997951148982, 0.8703447504344852, 0.8646530384227767, 0.8790305556941872, 0.8479063968772842, 0.7826740738642414, 0.899450499288673, 0.9066952303635738, 0.959551380861404, 0.8577946243756636, 0.3226286603644496, 0.29174518433562757, 0.29188983260252044, 0.29456663989480647, 0.29396037511617257, 0.3140973769382732, 0.2884226548729645, 0.3491773378761034, 0.2962751537826729, 0.33512712646418186, 0.3131563460138391, 0.2969824901341539, 0.3101687927751541, 0.373783606439411, 0.2953153773896656, 0.30413363678839045, 0.30786524217668854, 0.4757612151913536, 0.15379839587434108, 0.152481897296058, 0.15010583425384016, 0.17168592344406042, 0.14903015313797918, 0.17180161251323056, 0.1730961299807966, 0.1604500772792007, 0.18180784632831293, 0.10949429912580977, 0.1702893846449166, 0.1816456661320841, 0.15254089554891392, 0.17796854892433023, 0.19198725757152957, 0.1683610319260762, 0.19427049477776093, 0.16969710719694509, 0.24977750288278688, 0.10253788326693136, 0.1786020962122269, 0.2213662073974606, 0.2569282837413389, 0.2173626328724949, 0.23942185139292338, 0.27598901983825563, 0.07649947652713285, 0.33178381259821854, 0.35643372629960945, 0.2943360793957397, 0.35574567301662297, 0.3851952665358549, 0.3839163766716892, 0.3523013062419905, 0.3565343551879139, 0.5190428151342372, 0.09196149275745757, 0.13471687739126514, 0.03777163946002149, 0.12597062725546548, 0.20870446156828315, 0.12476162663167745, 0.18209972282019804, 0.1030323158875035, 0.07556214218328094, 0.11958231538675246, 0.12134798601918007, 0.11787686139642517, 0.1263076758590178, 0.11556734964806215, 0.12815951878627652, 0.11907858580638442, 0.11864358871029801, 0.12144706219716905, 0.3818257398144982, 0.387914253336067, 0.3907467087296722, 0.411378470918927, 0.3617654675083962, 0.38546803613289815, 0.39484783027690673, 0.38331781147898614, 0.3824508141050387, 0.11773394121539582, 0.10883501162416265, 0.12072182616905736, 0.11401253719472715, 0.10214780620908459, 0.10305439156820662, 0.1298801273287652, 0.13498302338400814, 0.1067337029247698, 0.25112708594086175, 0.21006984069579449, 0.2478701241785407, 0.27327773848445713, 0.28848209797938174, 0.26871176505017025, 0.2796875235491296, 0.21818094162976776, 0.18869418280382577, 0.2808044307764953, 0.26741687367904043, 0.2770247747091267, 0.2789164414646138, 0.2806687225434401, 0.27145140937639056, 0.28536575989373436, 0.275343445333742, 0.27882835181102517, 0.22322347517695473, 0.21506053434063188, 0.24132478692840298, 0.21293550192290633, 0.22400652290535317, 0.2167903712456074, 0.21294406794948528, 0.22795043302578955, 0.21913431178308584, 0.23831765417323947, 0.2196496834742181, 0.22154192982323817, 0.23656059795651307, 0.2206740476796787, 0.21017341869618222, 0.19958143063209755, 0.2099996845586498, 0.2103171136352563, 0.25243249336495344, 0.1833275374855985, 0.1795878568236281, 0.2087003420536344, 0.20843845013598994, 0.18720367613530453, 0.2683732711592892, 0.21562097080829457, 0.1769558277132055, 0.16954274437389483, 0.5768823585863996, 0.14921226114637898, 0.15976791399197043, 0.5633872679519736, 0.5907855368669351, 0.18527730716822066, 0.17141040954302156, 0.17452659450449226, 0.5267388887007316, 0.20025885027133705, 0.39700120438889286, 0.16006783848182005, 0.18940977538478831, 0.4466325251231328, 0.20486815933596658, 0.20582085728648125, 0.204347149240108, 0.18381776665106386, 0.18933957120149314, 0.18938661830918868, 0.1887666093287227, 0.18709078148255076, 0.19632780801802197, 0.20006167280966725, 0.18790503466468522, 0.19348841764675362, 0.07792849485463904, 0.0794376878249341, 0.08198210624499391, 0.08272757120566654, 0.08251527274282966, 0.07772253996187539, 0.077462998284204, 0.09597511059922292, 0.09849844058415891]}, "mutation_prompt": null}
{"id": "bc8caf9e-41e0-4e37-b643-22172292d7de", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                # Dynamic crossover rate\n                dynamic_CR = self.CR * (1 - evaluations / (2 * self.budget))\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Integrate a dynamic crossover rate to balance exploration and exploitation for improved convergence.", "configspace": "", "generation": 31, "fitness": 0.25941709424557235, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4350644399267437, 0.4348889532664666, 0.41333588021335355, 0.42618744160877087, 0.43010876855544655, 0.4151197314202659, 0.3979852876363408, 0.41831446833885033, 0.430591780605004, 0.5132536071092336, 0.5477809368067237, 0.5169054625894853, 0.5216347438609383, 0.5342849265898937, 0.5097758428988062, 0.510976996444928, 0.44644281622566273, 0.4760583264793907, 0.12310771410565557, 0.12068895788042533, 0.13654324107952764, 0.13711479370526847, 0.1325383822670192, 0.13565336675081074, 0.14091989755047452, 0.13505971517735993, 0.12251294658736533, 0.10466510899055226, 0.11538050995724392, 0.10923589530158928, 0.12393133015171132, 0.12693594431356614, 0.1263190472724982, 0.11007493514625799, 0.09958380569503333, 0.11265961181460205, 0.9613523212353057, 0.985187936444825, 0.9507108093276999, 0.9512616907755199, 0.9522788591370543, 0.9513147945478623, 0.9670527949167396, 0.9286719157741941, 0.969497243259901, 0.328483931056888, 0.31038484971215585, 0.2699134277419514, 0.27542064893541596, 0.30555610652358745, 0.287349777480959, 0.2934173625852339, 0.2927995171817088, 0.28106911246880195, 0.30609170009019804, 0.36516366101192577, 0.31745230121373436, 0.33621313091625615, 0.3493913733941729, 0.30693377461848226, 0.47905214891325454, 0.3131639376313504, 0.39607840459394794, 0.20121511853715324, 0.13492579215768952, 0.15422606549665774, 0.1934942649907414, 0.17696218154080712, 0.17400195613546787, 0.15410999964012373, 0.1831737714585837, 0.14818674980728175, 0.2182052274120525, 0.1693971687391882, 0.1582554326701766, 0.19864953966287813, 0.17439115033402663, 0.16386537759213915, 0.17449069011474772, 0.09487913974884488, 0.14700533403066962, 0.14352303934636335, 0.17289143676075125, 0.11098772333462625, 0.13817111156203754, 0.048436540587201704, 0.048901343976700984, 0.0764649684516655, 0.057438684137085194, 0.19029605702592467, 0.19177565816025333, 0.2301175873909378, 0.2321978873309688, 0.2229744496063376, 0.14224178100670382, 0.16119259506355976, 0.28103457040509716, 0.27627619412398996, 0.22184351306994354, 0.06901335537495579, 0.0360778604396752, 0.04882369611110715, 0.20691215488443748, 0.07316247417557498, 0.006208972831226678, 0.08821484449713823, 0.13720228691263092, 0.12457466555978991, 0.13840238316308207, 0.11361406935939411, 0.1214868679165334, 0.11296663876063162, 0.1164058119482585, 0.1182317986387037, 0.11359812675606995, 0.12094062926328353, 0.12096086016628393, 0.393958666118993, 0.38018392823153757, 0.4175787118396026, 0.3964832330099558, 0.3814369096179634, 0.38166589780049187, 0.37630916676228066, 0.3837225930517454, 0.3724564720716349, 0.14029290059988542, 0.13006848846942598, 0.11845368568362113, 0.11592271622805272, 0.11345797239144106, 0.12228939962517449, 0.11591720618417256, 0.12342491001980394, 0.11497952859296223, 0.1834818000595907, 0.2459835287372112, 0.19631892956854624, 0.23301104922665938, 0.2106085217985415, 0.24084849737714853, 0.2938781552088565, 0.1888214806478773, 0.2545428072296272, 0.25833741281587774, 0.2718626612181383, 0.274731250093331, 0.2811055302833405, 0.205648338830154, 0.26958073841430175, 0.27695327752519094, 0.2855608475828648, 0.2834294049123198, 0.22122368551777039, 0.20907551188778584, 0.2131256395095712, 0.21486535041371768, 0.20814645157031186, 0.22472014675655827, 0.23108834279754775, 0.2145628818091886, 0.22936697309960175, 0.2122518636501619, 0.20421131168865636, 0.20063994434361143, 0.23258418201670006, 0.20877407663093694, 0.20848603563528378, 0.21264142693921673, 0.2063921427886718, 0.19833646641127156, 0.2086919668845244, 0.19526124593115923, 0.2680056066710166, 0.24118161079664902, 0.20428568725759289, 0.28189781124353297, 0.21535154274352175, 0.20581193334680248, 0.19761903115560486, 0.1979597133801908, 0.13474715515811164, 0.1511306697116579, 0.6162867335612041, 0.19803711061622675, 0.6184813918140443, 0.18621339210139476, 0.15768045131677078, 0.6308157309492248, 0.5489755509935599, 0.207569859526182, 0.12474564205297978, 0.584176013692115, 0.5559507680089883, 0.1509747594777775, 0.1041237221477943, 0.10489655348702764, 0.48197896898911097, 0.1975190515336479, 0.19527781605990435, 0.17482903424492613, 0.1897127870209674, 0.19076721643470207, 0.19761255598478167, 0.19137868509248257, 0.18210464118488434, 0.19063847773660003, 0.0845353510934328, 0.09764809564104615, 0.09295507026759531, 0.08255355823751742, 0.0988577577884, 0.08512722612553103, 0.08811977302853846, 0.08455016415720584, 0.09735867712126911]}, "mutation_prompt": null}
{"id": "47c7c70f-8d58-4462-89bc-7a986e5702e8", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            # Calculate diversity in the population\n            diversity = np.mean(np.std(population, axis=0))\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                # Adapt crossover rate based on diversity\n                adaptive_CR = self.CR * (1 + diversity)\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce dynamic crossover rate adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 32, "fitness": 0.27536784265544934, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.44037510833740967, 0.4374815823189332, 0.45991190795459813, 0.45798355436482796, 0.43999515593598704, 0.42350516193835375, 0.43759053910908385, 0.4515107663382696, 0.4454852332779995, 0.39774787252137955, 0.4057939166285133, 0.11237584670636769, 0.45000626264457033, 0.4599168298927506, 0.5039690537215522, 0.4766539830510018, 0.28749236732793626, 0.23988960014299288, 0.22238174631986862, 0.1356639901950928, 0.10513176313088302, 0.13013843622013954, 0.12397715393091402, 0.11841659899519597, 0.199275114096223, 0.12013309489123325, 0.12858016411433237, 0.10677974698490655, 0.10738433320372764, 0.114643052248244, 0.11537717307892348, 0.12021584075739067, 0.10324445684550632, 0.11114580970384835, 0.10184601722663633, 0.11409677011518216, 0.969004229478842, 0.9852644098005727, 0.9554381705404139, 0.9368901082888393, 0.9335589630899893, 0.9438165214977365, 0.9517410454761718, 0.9520101287181679, 0.9919064084324417, 0.3181788914104182, 0.3001430218948812, 0.31313531196222877, 0.33372845257494743, 0.3261451995132252, 0.3288925172830055, 0.300720711702118, 0.3000724503258101, 0.33016928168419657, 0.39445505524844937, 0.32116837269539134, 0.3407941283820092, 0.4420621428785856, 0.45229839905279945, 0.31367776690308424, 0.3589517538208329, 0.3160862533227591, 0.3363443983873532, 0.1972140246209202, 0.09638316898268817, 0.1514544552217274, 0.16501846769191908, 0.16695604003067277, 0.16750877310000745, 0.19216073422790325, 0.1990998742665524, 0.16281793483309737, 0.2607026364276728, 0.1802012412777334, 0.17930748000048047, 0.1892782095374529, 0.17123706676360906, 0.16265961359626313, 0.1874795913860997, 0.2020925002082452, 0.16651837335862762, 0.21296783143012077, 0.3305711631315298, 0.3063047934126214, 0.1706920528205741, 0.25763811493573996, 0.3146621611475462, 0.3077234140523375, 0.1339537128606395, 0.3863529681779616, 0.34465067745780087, 0.46849774919329534, 0.29407701663306074, 0.40280162823850507, 0.42703891858664755, 0.308908850607992, 0.3468117662875816, 0.3346664970412555, 0.5073731844557692, 0.13945494610699094, 0.04984712341824338, 0.19934157951505405, 0.2248489464423986, 0.20261519808038198, 0.3141490752030912, 0.2246445886674936, 0.10138647671171641, 0.19490948413187192, 0.13935297516169853, 0.11031344498124995, 0.12511216489614685, 0.13601706753379206, 0.14102180463567293, 0.14404470464572983, 0.11054747642966611, 0.1485113002519698, 0.14583026858608883, 0.40927434956009356, 0.3911066419438659, 0.39343952240634505, 0.4039189924797286, 0.40462237633954634, 0.39763837759856935, 0.4020086682130385, 0.41953889616142837, 0.39975613927450526, 0.11922113696421, 0.1260860344235618, 0.1107493673020572, 0.12300275236153213, 0.1300402986300283, 0.1095828370290477, 0.13555400433233933, 0.11356898307771701, 0.11425603250978689, 0.25460958439382797, 0.2717417629718245, 0.24488904111501097, 0.28684091023153435, 0.22512410507422786, 0.21216562469078992, 0.2725211127313609, 0.27312215022207087, 0.26722848619562733, 0.29174123421451736, 0.2895662263061498, 0.29366424252011847, 0.286703778155865, 0.29010673110489515, 0.279631957555157, 0.2915777872949812, 0.2934197754910073, 0.28834636615791687, 0.23661765661061884, 0.2231739108762919, 0.24050538075114636, 0.21802177914322096, 0.22050597574180475, 0.22556440901179808, 0.21259052736852824, 0.22036936388344808, 0.2422856554283198, 0.22226531620759915, 0.21623665913389034, 0.22194845842441147, 0.22372478899945458, 0.196866430658583, 0.18981763777531613, 0.22252526654498583, 0.21223812971497136, 0.20372119929595256, 0.190827747045078, 0.2165647464441085, 0.1923835642443269, 0.20469214880162612, 0.21263360359496242, 0.21729719846585027, 0.22682351414980473, 0.2220940871354985, 0.2633207833966299, 0.18710521366270827, 0.2081495271206707, 0.1522160502121116, 0.197239932853719, 0.6165885662592128, 0.19824054933465907, 0.18756069265749242, 0.6680408750655732, 0.6650007464465648, 0.21015304640524635, 0.21088972455051302, 0.07342622963550183, 0.5691558979376597, 0.16864074198211731, 0.5406790021246646, 0.10286536510090205, 0.10498277134300338, 0.16336819052902207, 0.17786488992695704, 0.1865369737107596, 0.17445887701631912, 0.1874895541053152, 0.18966156352838326, 0.19300964266119214, 0.21896285162475593, 0.18802221013617004, 0.19215099955634662, 0.08791213027986122, 0.08020600576962278, 0.09585634479038363, 0.0863712093665625, 0.08356587262768467, 0.08263206272349866, 0.08793757606131625, 0.0913185352673046, 0.08070995528281377]}, "mutation_prompt": null}
{"id": "dace88a3-e8a8-45ce-89c4-b9b5104e5e75", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                adaptive_CR = self.CR * (1 - evaluations / self.budget) + 0.1  # Reduced exploration over time\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n            if evaluations < self.budget - 1:  # Preserve best individual for redundancy balance\n                population[np.random.randint(0, population_size)] = best\n\n        return best", "name": "HybridDE_SA", "description": "Enhance diversity and convergence by introducing adaptive crossover probability and elite preservation.", "configspace": "", "generation": 33, "fitness": 0.2564737715036819, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.43495124508079464, 0.45103639678320573, 0.45436366199339884, 0.4566400227732238, 0.4841596273062774, 0.43088499830410987, 0.4520538581149538, 0.47363746652640426, 0.4479975718210627, 0.4904290482265621, 0.5463992784609382, 0.5520295593412683, 0.5700230613736703, 0.5428027047033566, 0.5620896869355627, 0.5095727530134866, 0.5552879478317685, 0.5426188328493136, 0.1552456175487299, 0.15155933039643676, 0.16938033502542127, 0.11907494670896324, 0.10773840692824888, 0.14077226864389392, 0.13813859953064334, 0.12925321067515883, 0.1490099121176579, 0.13803079003059515, 0.10544587532506133, 0.12331942245758032, 0.11862943630860279, 0.1227706739958645, 0.11712285972617487, 0.10337743930470755, 0.10606614607994247, 0.09408295849358961, 0.9757334305635033, 0.9780727366866876, 0.9763888916200254, 0.9393775550866572, 0.9397331117846323, 0.9787177136808869, 0.9358320256823747, 0.9529149712167602, 0.9671256497656172, 0.3341300179144048, 0.3136532382202679, 0.30518220514698857, 0.2965425138515466, 0.3231265127093992, 0.32556711264116023, 0.28263031008884765, 0.32691958912613905, 0.30155376214159646, 0.31969370915984263, 0.34310010499092936, 0.3148781454526096, 0.6143040841701999, 0.35913986828948297, 0.32839787078111116, 0.30521476548552073, 0.3117219306596233, 0.3274083601957015, 0.23459035158467179, 0.09798126992491873, 0.151989462514035, 0.123593024394129, 0.16560000881483816, 0.14691260160507313, 0.15965818356265937, 0.17387098213027508, 0.2008010890999109, 0.11441708653331484, 0.17583318173938955, 0.15915506035034432, 0.17075496733317963, 0.17568182940846744, 0.1274669529496194, 0.16928519792426489, 0.10416872268491806, 0.2088546043911247, 0.049710677077684506, 0.006160021257971882, 0.02685451792661009, 0.12711992267370498, 0.1260825093030884, 0.052182761531841426, 0.07423955072050736, 0.002192073507841119, 0.22011653226662198, 0.20708219178211462, 0.10443901044587289, 0.1651666665612933, 0.21894598822314493, 0.1072096000893702, 0.15515099815627653, 0.30641773635495817, 0.25172252585795885, 0.16974495650450006, 0.04732780349936727, 0.036288438954201196, 0.10078082126771715, 0.0770284524006396, 0.06628461309272682, 0.058548417222603844, 0.14515260206328562, 0.06601934723895408, 0.13264914572020536, 0.1362195101810516, 0.07272063813770113, 0.11808230185173652, 0.12584248176635338, 0.12314541193618356, 0.14065768097631115, 0.10903436923271126, 0.12433852098942844, 0.13936606896231574, 0.4295482088421936, 0.4155774266224336, 0.4154368647872735, 0.4165216668548536, 0.39025700432188726, 0.41210099163389713, 0.4161545771273766, 0.42318568105217236, 0.4009742551708845, 0.11043802796875224, 0.11995507373392977, 0.12484155149237319, 0.1485737323033629, 0.12100761470974597, 0.12304480037679444, 0.1289497592956952, 0.12810337471400324, 0.11593217882328277, 0.19461643889264424, 0.29036710752169415, 0.26570333720474404, 0.23655047600909063, 0.2099152804320742, 0.2722549077954012, 0.2614939502621597, 0.27837571272657313, 0.23260017242711084, 0.2891241126589993, 0.27849861670682874, 0.276675580754686, 0.2889104586716017, 0.27415369505877063, 0.28875028571922234, 0.28199397526167636, 0.2930437211382134, 0.2919431882555146, 0.23383054898721944, 0.23229919646892572, 0.23401626835796752, 0.18811503458056367, 0.17422165747127005, 0.23955479344485953, 0.2522910325554719, 0.24076832563507833, 0.2511718361570534, 0.21296440990665444, 0.18746283894740368, 0.18658214276786877, 0.2139964473871313, 0.19356164341409177, 0.21192043458195864, 0.21820331576557517, 0.19272058883590548, 0.23323315210066242, 0.1986760601692178, 0.23457696801300643, 0.1870782031702254, 0.23051158399494476, 0.2759407955540163, 0.21481935312223144, 0.20859223986923114, 0.2186471443226966, 0.21478345522677322, 0.18591742146449697, 0.16406636110356032, 0.1466562957748958, 0.17144570106891188, 0.19946363851686988, 0.19785592874284819, 0.1873384924425454, 0.20445141813216228, 0.613176252927959, 0.6040750993069453, 0.2094810752408831, 0.07345588459475494, 0.1655294387801588, 0.16868462168272402, 0.5960516537553862, 0.1264739533177366, 0.10496351167300277, 0.20988027231020578, 0.18918402110993615, 0.18951290145391475, 0.19627743630910932, 0.18922047465520453, 0.20967663448074658, 0.18582606737818352, 0.19222189572688708, 0.19473764299626262, 0.1866476299241454, 0.09456426450658695, 0.08794706179446043, 0.11457428292912519, 0.0873860260226611, 0.08805192868791167, 0.09384107336882241, 0.08415992494060898, 0.09428035681556701, 0.09144914219405476]}, "mutation_prompt": null}
{"id": "65191ce4-8647-4d98-99ac-bb794e3af3dd", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            adaptive_CR = self.CR * (1 - evaluations / self.budget)\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            if np.random.rand() < 0.05:  # Introduce global perturbation\n                global_perturb = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                population[np.random.randint(population_size)] = np.clip(best + global_perturb, self.lower_bound, self.upper_bound)\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Integrate an adaptive crossover rate and introduce occasional global perturbations to improve convergence.", "configspace": "", "generation": 34, "fitness": 0.2487287516063498, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.43024001224717945, 0.4365028636376991, 0.4162522075545707, 0.43448577939342026, 0.41665762812312634, 0.38960287390950743, 0.4240337946316781, 0.4266267715800579, 0.39631444988473696, 0.4778936443693551, 0.522082932976609, 0.4944397416500754, 0.46794764736147565, 0.5217235097991311, 0.42442998581153146, 0.4744768754700811, 0.5115153112438653, 0.5024714287016426, 0.12811295822255198, 0.1626329446445377, 0.11903577683337285, 0.15271451989681717, 0.1423080576405169, 0.11775254910167043, 0.14972623966344423, 0.1518302928894545, 0.12927535971128523, 0.12232128025686362, 0.10656717746599065, 0.14894952423383567, 0.10413171898818874, 0.11106942012939858, 0.11546914801509334, 0.1190727580435027, 0.10087868115661791, 0.13722893258067215, 0.9583738724061885, 0.985187936444825, 0.9258696367972944, 0.9567406168936597, 0.8665422383590387, 0.9301759310721124, 0.9473217609071785, 0.9728168761800157, 0.9517527125398235, 0.28986341208617405, 0.2603288700820158, 0.2491018113873793, 0.29197055716863285, 0.2678146265720479, 0.2734197876273976, 0.2675561560522618, 0.2571512742650509, 0.27800240939012855, 0.32236215068335694, 0.3178727218884011, 0.2941725051385785, 0.3774277200877234, 0.2966138411201409, 0.31735999092651124, 0.3284709192774835, 0.3028176186436352, 0.278371562693671, 0.17133970863346681, 0.15107633598026327, 0.16205572318983918, 0.0969920058100785, 0.1578109940152137, 0.1723841797885829, 0.16450375947522478, 0.16757190681382195, 0.15128467857292072, 0.18241339879840468, 0.1509829772605239, 0.16204748251171475, 0.15011183947267148, 0.1646744802471123, 0.17146206311237566, 0.19622700336895516, 0.17404639173656833, 0.17613314437496286, 0.046239023279728286, 0.09575892730389113, 0.06178408531935797, 0.04102792020631718, 0.0505411077253608, 0.04132040082358013, 0.05585267393907001, 0.04991034357596569, 0.11387148513862722, 0.1600083023224581, 0.13771420405754675, 0.1819855163678784, 0.09295114406868288, 0.15781346605026325, 0.1481398294045262, 0.10913005322157665, 0.188774245548601, 0.1716584120707788, 0.12150649511253309, 0.023966284364172363, 0.04343315507428047, 0.005457499811735378, 0.06321783575220086, 0.07868749100727435, 0.1438633442265349, 0.11910050779971249, 0.1354252456117434, 0.12316074493187446, 0.09667022391727731, 0.10234768918078951, 0.10633810646102226, 0.09414256697033252, 0.09175425519898761, 0.10689299096029714, 0.0944734512447043, 0.11271080029532354, 0.3786813192824017, 0.38264042925479425, 0.39358112226846664, 0.3941584932465725, 0.3863468732791491, 0.3930903621550458, 0.3893736402523541, 0.3797419248429489, 0.4062420552023184, 0.14823451537474575, 0.11926385917583415, 0.09989751725021412, 0.11661941301982481, 0.10349054581003381, 0.11214267618270657, 0.11140087476740668, 0.11341407991719521, 0.12052214535706784, 0.25198681481691865, 0.22966407519962917, 0.1805488304182109, 0.29416362778464056, 0.24730142326648297, 0.1805756144495032, 0.23856692405084712, 0.18114338924648932, 0.16209072144368453, 0.262208353647832, 0.27540254040268586, 0.2831741606306717, 0.2673480473615062, 0.20065117169178148, 0.2842483327449896, 0.2706614631725287, 0.2914693496537293, 0.29503603564288583, 0.22603065013453394, 0.1806922746719818, 0.23779472447776184, 0.20936933619544718, 0.198913886322582, 0.2032852531772381, 0.23777049340094936, 0.2215596166252768, 0.2268104469734461, 0.2001925896248372, 0.20362855608031782, 0.19199211919950687, 0.20075090010864904, 0.2064157652812283, 0.1802008511184271, 0.2170883117410789, 0.18689931749329403, 0.2007719363653404, 0.21917679814925373, 0.21499102789142688, 0.1836374522885118, 0.22999115228233658, 0.20636141688302767, 0.19438646756400035, 0.19393157461013188, 0.2117227123200096, 0.20735804992156004, 0.1989834253640218, 0.5707665840715463, 0.16219758066064494, 0.16691725421456416, 0.19791058721826227, 0.6017331687625553, 0.18640430930382113, 0.16245726752568046, 0.5902557032487378, 0.49455145318693805, 0.21119228922324196, 0.20200674864281154, 0.43126248824302815, 0.5537700895082731, 0.4708440842778655, 0.10407311383878914, 0.38003549981798257, 0.3162812594270966, 0.18830675367254368, 0.1752213904556129, 0.1854493860819335, 0.18183221486874968, 0.1805514550187599, 0.18983369691023455, 0.17319364207888288, 0.1901282998731042, 0.19443722319938583, 0.08046695562377393, 0.08471063066995144, 0.09549645636971749, 0.08254335721314399, 0.08888901480723799, 0.08100936201300613, 0.08944019931195557, 0.09542159432567587, 0.08704718875778672]}, "mutation_prompt": null}
{"id": "37e8f65f-53d2-4a8f-9588-119034c54c93", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                # Added dynamic CR adjustment\n                dynamic_CR = self.CR * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce dynamic crossover rate adjustment to balance exploration and exploitation for improved convergence.", "configspace": "", "generation": 35, "fitness": 0.25210968643209497, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4381871265267059, 0.4084641688826183, 0.41284859092566595, 0.4273450374875061, 0.404464023280665, 0.44649042868098043, 0.39544223581788174, 0.43723943370287865, 0.4266545801602991, 0.5111719794638341, 0.4970848195704449, 0.5017277407952141, 0.48688882876535444, 0.4886046383002426, 0.4952666741070818, 0.5066391977603732, 0.5201762477633017, 0.5126964876502973, 0.11891684510245215, 0.144067715340657, 0.13089170178044807, 0.13524353232581576, 0.12045658883440125, 0.1308467562886424, 0.11626866825743964, 0.16048017392238123, 0.17105354570803977, 0.11302058910575286, 0.12119961114890121, 0.1157414047093347, 0.1700151265074915, 0.11923200194374639, 0.10543980495323335, 0.12786241010490595, 0.17440991011028895, 0.1378599903654908, 0.9595960511777079, 0.9711008324306926, 0.9451959451642586, 0.9528116417687839, 0.9524418983952566, 0.9007888202569457, 0.945909697881637, 0.9569740212665158, 0.9671777986374052, 0.28830145236190685, 0.30142931523494687, 0.26752900348162933, 0.2706768755386897, 0.2636792858057194, 0.2862774152282338, 0.2472353876598261, 0.2592385274007941, 0.26442071498494113, 0.3094826631259442, 0.307753106915848, 0.4480601564036124, 0.32028326676039665, 0.3092376117888953, 0.33453262593488375, 0.3205976317698267, 0.32007931087943997, 0.29932889089821224, 0.18904897741247206, 0.1887736005122329, 0.16798723326683462, 0.159744487917454, 0.15418046658710516, 0.14732280287411215, 0.14290880671152206, 0.17713184842967888, 0.1576621789307332, 0.13739149196852762, 0.15507329803706593, 0.1523207748335953, 0.17690758908906867, 0.15164646322838848, 0.176463401739415, 0.1696719749150547, 0.1756630317345338, 0.157567524515144, 9.999999999998899e-05, 0.05622408866382356, 0.011011104934824156, 0.032272584944423977, 0.0630045262485126, 0.06638552372387951, 0.13796233234965238, 0.043576897933905956, 0.06204602961803263, 0.22996657720210056, 0.15647412671474958, 0.13230952743456215, 0.1870255102324524, 0.17140114722921607, 0.1402742189407974, 0.18685395346483025, 0.15060249551496396, 0.16355234798100826, 0.07046189106589029, 0.027289027311773628, 0.09323111604427703, 0.08375238194659473, 0.0417629463551501, 0.11553766886275718, 0.1418244616798665, 0.08442864496868008, 0.11843923039683835, 0.10333057961448355, 0.12379329223487079, 0.12135937216502535, 0.09378413733085422, 0.09871465052949824, 0.1201905890056485, 0.12133402584156772, 0.10905197848706916, 0.13280589569962142, 0.4017690754743618, 0.3953334448722413, 0.38465749402952376, 0.37814844731377806, 0.38272992752940804, 0.3833390778033966, 0.38485699373905013, 0.3790847592914842, 0.3839860474342469, 0.10806291745953223, 0.10659030153620519, 0.10428581070431298, 0.13018845557726633, 0.1405211354041105, 0.1145678836588131, 0.1306520443556145, 0.12788645137695875, 0.13781988949637325, 0.24518167229014243, 0.23018014574607681, 0.17665085328870123, 0.23756960816327455, 0.20890368656752534, 0.15806801766189094, 0.22357337828420487, 0.2535098644179503, 0.219630066696188, 0.2703303052281296, 0.27891238868556656, 0.2978765580098366, 0.26813572926883067, 0.2721061129562894, 0.26059779877454836, 0.28265467640879116, 0.2834419836375852, 0.2834230863559205, 0.2010152927144323, 0.21211922025000218, 0.2220269217583417, 0.21371299295396928, 0.23032666487662457, 0.21842178609952756, 0.2270338891396263, 0.24564894767879142, 0.22403094666378698, 0.20797536513550452, 0.2091159950424839, 0.2146473485519279, 0.22395187992181487, 0.21823990121968373, 0.23460064680913284, 0.25329685663844415, 0.21021698421675128, 0.21368510745073255, 0.19798968793556582, 0.24629036671878957, 0.20621142328661035, 0.21047961720533725, 0.23266690499520037, 0.20903732269744002, 0.19260544938188318, 0.1997687223495861, 0.18631389843442403, 0.5306007321562316, 0.13562607479504896, 0.1895412596633822, 0.17102555428356558, 0.1982566279975173, 0.1713130218669805, 0.1861766090744128, 0.15829114324937987, 0.6257771727031557, 0.5181877009136204, 0.2087228471840925, 0.20223526357942945, 0.49908308408928437, 0.6081234912311502, 0.5172060929821578, 0.10418863207002704, 0.10483067120269174, 0.4784967702088262, 0.1930801373917237, 0.21302049181048, 0.20593889382235864, 0.18465326226324774, 0.191413475869054, 0.18554074747145122, 0.20956400589238577, 0.182988011874205, 0.18409764370380288, 0.09295209649543101, 0.07446652568589052, 0.09293816938166799, 0.09534416453915806, 0.07903272386978111, 0.08940557779364322, 0.0882888991584534, 0.07598834375273278, 0.0925007190026923]}, "mutation_prompt": null}
{"id": "34cf5031-6867-474e-a992-4b1522bf81a6", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "75577126-f2a0-4667-8c79-e2956af40564", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < (0.18 + 0.05 * (evaluations / self.budget)):  # Dynamic mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < (self.CR - 0.1 * (evaluations / self.budget)), mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Integrate a dynamic crossover rate adjustment to balance exploration and exploitation effectively.", "configspace": "", "generation": 37, "fitness": 0.2661427721433325, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4244730765139877, 0.4214633293406296, 0.43561523449581263, 0.43975793940962926, 0.42596270451025053, 0.43516009980151704, 0.42319513008355203, 0.43045761730592447, 0.4472794727283469, 0.5049522415506491, 0.3515502784326041, 0.5590428274840493, 0.547828259139947, 0.536215609795857, 0.48507727291829505, 0.4350509142831154, 0.4262813549221972, 0.4857294871984891, 0.11067222614912953, 0.10768159365740171, 0.13886051340577832, 0.12804942948433162, 0.11312070170763022, 0.12879693544408677, 0.12186799795610026, 0.12757072174579354, 0.10178087563753124, 0.11414767087912436, 0.11500413358722072, 0.12282124642853776, 0.13813389956275057, 0.12752094289980032, 0.1222124257655618, 0.12826465350263805, 0.10812613338743171, 0.1328463188975647, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.9353374390263582, 0.9518018243845648, 0.9517462876109891, 0.967940905575421, 0.9565579581024557, 0.9761240619559206, 0.3105645060935235, 0.29283791814237226, 0.2980100909012009, 0.33217594190642286, 0.2902931628129146, 0.32416290279129056, 0.31736341195937035, 0.3618874384914721, 0.3077594163864028, 0.338219971401411, 0.3082412260739621, 0.30711684244397763, 0.2652867437120958, 0.3296854514554758, 0.383345030202331, 0.307641882595696, 0.43899365523220635, 0.3090930801705929, 0.16630973973017027, 0.15382173058637494, 0.15871678113246723, 0.18085680440971685, 0.20832564620819827, 0.20076100804223262, 0.1565852603253194, 0.19229588360866945, 0.18336460262183496, 0.16504425971436554, 0.17301573562989414, 0.16379172670022213, 0.19800749721623, 0.21014601054639948, 0.19587541377507023, 0.16282090200450927, 0.09531777105873718, 0.1750111588001193, 0.12323139693051632, 0.17840780567874115, 0.1709714835385635, 0.034905128753601855, 0.2708103609866531, 0.055639137878986555, 0.09951601101327179, 0.10684102107442484, 0.23516133986734045, 0.27071655719094234, 0.33892208345732544, 0.3810659998624605, 0.21578049211823613, 0.3057277229450357, 0.21435256010103831, 0.2682429390412866, 0.27730375913034255, 0.27986373617091553, 0.11812146911997956, 0.045843220955877784, 0.13699793404222216, 0.14026477976041318, 0.10822176248868987, 0.13304767974827247, 0.13459341668892155, 0.1057079427097507, 0.18037898563486165, 0.13469656319986079, 0.11858946261601888, 0.12766013183130798, 0.10424180982917353, 0.13541069069333067, 0.11578450805692553, 0.11562433447391973, 0.12271973330038544, 0.11247661404621101, 0.4035306507351616, 0.39836393858864605, 0.39767861178187736, 0.40436109188938196, 0.39197523705995996, 0.38524604550333863, 0.3818792773925831, 0.40201606071976137, 0.4020791812139567, 0.12023578656992595, 0.13117586386452607, 0.12495434779044767, 0.13325431425207335, 0.11578319185986896, 0.1327285385385607, 0.11755316191346987, 0.10897994797228294, 0.12923982444751947, 0.2295724214773026, 0.22937051604124836, 0.26517939758239906, 0.1683814610173625, 0.21878615964169168, 0.22702386595446356, 0.3072871884895484, 0.2543649869646416, 0.22167119518103529, 0.27335689237201555, 0.28352210509931997, 0.2826215861839483, 0.27168438722026544, 0.28049509728172395, 0.28314450031120153, 0.2662967629465054, 0.2868967215548329, 0.2918654603822117, 0.22226097499415975, 0.21385835179996027, 0.2319923313421859, 0.2311221394024301, 0.23365315543748122, 0.1869802701657728, 0.2245627974729728, 0.23119977348064624, 0.2402812660694661, 0.23651399410632856, 0.19604655576153096, 0.19635739034761424, 0.2033986842689527, 0.21932150110979354, 0.1907088155660045, 0.20872781186604072, 0.20877640309859258, 0.2091118057537913, 0.21136472028309095, 0.19266302669421576, 0.2510859957861623, 0.2814267234245724, 0.2158649781478741, 0.2006412730491286, 0.2511878942529988, 0.20385879353639247, 0.20437436047751645, 0.19764556072132122, 0.5558478809293836, 0.11306998632828014, 0.6272453373405772, 0.19690636267774675, 0.6171631940965683, 0.19635479425183888, 0.16472447870114793, 0.6578153230022445, 0.5268654298579061, 0.20735977622180035, 0.12426667641302247, 0.10420049662074671, 0.5348406681021678, 0.14650735650750357, 0.14857415537616248, 0.10478251131961702, 0.5381157306114595, 0.1980804874946568, 0.18192684686695737, 0.17683539988245334, 0.17562193038758256, 0.18267987612675096, 0.2027639129546004, 0.20030116871295267, 0.19854320887235988, 0.1863449457926778, 0.07676546135287021, 0.08256022509199978, 0.08680398304346104, 0.08781910950147287, 0.093117403231875, 0.09150468478376783, 0.08477275899781689, 0.0939658403362047, 0.08450091495909096]}, "mutation_prompt": null}
{"id": "2d15161b-5e0f-4505-9405-70d82aaa6a70", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "ecbcfa86-1e10-447a-bcab-53c6464bb80f", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "6a809b1a-021d-492b-87b0-a1d5ff720ab9", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.CR * (1 - evaluations / (2 * self.budget))  # Dynamic crossover rate\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate and improved mutation sampling for better convergence.", "configspace": "", "generation": 40, "fitness": 0.25941709424557235, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4350644399267437, 0.4348889532664666, 0.41333588021335355, 0.42618744160877087, 0.43010876855544655, 0.4151197314202659, 0.3979852876363408, 0.41831446833885033, 0.430591780605004, 0.5132536071092336, 0.5477809368067237, 0.5169054625894853, 0.5216347438609383, 0.5342849265898937, 0.5097758428988062, 0.510976996444928, 0.44644281622566273, 0.4760583264793907, 0.12310771410565557, 0.12068895788042533, 0.13654324107952764, 0.13711479370526847, 0.1325383822670192, 0.13565336675081074, 0.14091989755047452, 0.13505971517735993, 0.12251294658736533, 0.10466510899055226, 0.11538050995724392, 0.10923589530158928, 0.12393133015171132, 0.12693594431356614, 0.1263190472724982, 0.11007493514625799, 0.09958380569503333, 0.11265961181460205, 0.9613523212353057, 0.985187936444825, 0.9507108093276999, 0.9512616907755199, 0.9522788591370543, 0.9513147945478623, 0.9670527949167396, 0.9286719157741941, 0.969497243259901, 0.328483931056888, 0.31038484971215585, 0.2699134277419514, 0.27542064893541596, 0.30555610652358745, 0.287349777480959, 0.2934173625852339, 0.2927995171817088, 0.28106911246880195, 0.30609170009019804, 0.36516366101192577, 0.31745230121373436, 0.33621313091625615, 0.3493913733941729, 0.30693377461848226, 0.47905214891325454, 0.3131639376313504, 0.39607840459394794, 0.20121511853715324, 0.13492579215768952, 0.15422606549665774, 0.1934942649907414, 0.17696218154080712, 0.17400195613546787, 0.15410999964012373, 0.1831737714585837, 0.14818674980728175, 0.2182052274120525, 0.1693971687391882, 0.1582554326701766, 0.19864953966287813, 0.17439115033402663, 0.16386537759213915, 0.17449069011474772, 0.09487913974884488, 0.14700533403066962, 0.14352303934636335, 0.17289143676075125, 0.11098772333462625, 0.13817111156203754, 0.048436540587201704, 0.048901343976700984, 0.0764649684516655, 0.057438684137085194, 0.19029605702592467, 0.19177565816025333, 0.2301175873909378, 0.2321978873309688, 0.2229744496063376, 0.14224178100670382, 0.16119259506355976, 0.28103457040509716, 0.27627619412398996, 0.22184351306994354, 0.06901335537495579, 0.0360778604396752, 0.04882369611110715, 0.20691215488443748, 0.07316247417557498, 0.006208972831226678, 0.08821484449713823, 0.13720228691263092, 0.12457466555978991, 0.13840238316308207, 0.11361406935939411, 0.1214868679165334, 0.11296663876063162, 0.1164058119482585, 0.1182317986387037, 0.11359812675606995, 0.12094062926328353, 0.12096086016628393, 0.393958666118993, 0.38018392823153757, 0.4175787118396026, 0.3964832330099558, 0.3814369096179634, 0.38166589780049187, 0.37630916676228066, 0.3837225930517454, 0.3724564720716349, 0.14029290059988542, 0.13006848846942598, 0.11845368568362113, 0.11592271622805272, 0.11345797239144106, 0.12228939962517449, 0.11591720618417256, 0.12342491001980394, 0.11497952859296223, 0.1834818000595907, 0.2459835287372112, 0.19631892956854624, 0.23301104922665938, 0.2106085217985415, 0.24084849737714853, 0.2938781552088565, 0.1888214806478773, 0.2545428072296272, 0.25833741281587774, 0.2718626612181383, 0.274731250093331, 0.2811055302833405, 0.205648338830154, 0.26958073841430175, 0.27695327752519094, 0.2855608475828648, 0.2834294049123198, 0.22122368551777039, 0.20907551188778584, 0.2131256395095712, 0.21486535041371768, 0.20814645157031186, 0.22472014675655827, 0.23108834279754775, 0.2145628818091886, 0.22936697309960175, 0.2122518636501619, 0.20421131168865636, 0.20063994434361143, 0.23258418201670006, 0.20877407663093694, 0.20848603563528378, 0.21264142693921673, 0.2063921427886718, 0.19833646641127156, 0.2086919668845244, 0.19526124593115923, 0.2680056066710166, 0.24118161079664902, 0.20428568725759289, 0.28189781124353297, 0.21535154274352175, 0.20581193334680248, 0.19761903115560486, 0.1979597133801908, 0.13474715515811164, 0.1511306697116579, 0.6162867335612041, 0.19803711061622675, 0.6184813918140443, 0.18621339210139476, 0.15768045131677078, 0.6308157309492248, 0.5489755509935599, 0.207569859526182, 0.12474564205297978, 0.584176013692115, 0.5559507680089883, 0.1509747594777775, 0.1041237221477943, 0.10489655348702764, 0.48197896898911097, 0.1975190515336479, 0.19527781605990435, 0.17482903424492613, 0.1897127870209674, 0.19076721643470207, 0.19761255598478167, 0.19137868509248257, 0.18210464118488434, 0.19063847773660003, 0.0845353510934328, 0.09764809564104615, 0.09295507026759531, 0.08255355823751742, 0.0988577577884, 0.08512722612553103, 0.08811977302853846, 0.08455016415720584, 0.09735867712126911]}, "mutation_prompt": null}
{"id": "de4488a6-32bc-40ed-b8e2-6ea2c1a172b5", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                dynamic_CR = self.CR * (1 - evaluations / self.budget)  # Dynamic crossover rate\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce dynamic crossover rate adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": 0.25210968643209497, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4381871265267059, 0.4084641688826183, 0.41284859092566595, 0.4273450374875061, 0.404464023280665, 0.44649042868098043, 0.39544223581788174, 0.43723943370287865, 0.4266545801602991, 0.5111719794638341, 0.4970848195704449, 0.5017277407952141, 0.48688882876535444, 0.4886046383002426, 0.4952666741070818, 0.5066391977603732, 0.5201762477633017, 0.5126964876502973, 0.11891684510245215, 0.144067715340657, 0.13089170178044807, 0.13524353232581576, 0.12045658883440125, 0.1308467562886424, 0.11626866825743964, 0.16048017392238123, 0.17105354570803977, 0.11302058910575286, 0.12119961114890121, 0.1157414047093347, 0.1700151265074915, 0.11923200194374639, 0.10543980495323335, 0.12786241010490595, 0.17440991011028895, 0.1378599903654908, 0.9595960511777079, 0.9711008324306926, 0.9451959451642586, 0.9528116417687839, 0.9524418983952566, 0.9007888202569457, 0.945909697881637, 0.9569740212665158, 0.9671777986374052, 0.28830145236190685, 0.30142931523494687, 0.26752900348162933, 0.2706768755386897, 0.2636792858057194, 0.2862774152282338, 0.2472353876598261, 0.2592385274007941, 0.26442071498494113, 0.3094826631259442, 0.307753106915848, 0.4480601564036124, 0.32028326676039665, 0.3092376117888953, 0.33453262593488375, 0.3205976317698267, 0.32007931087943997, 0.29932889089821224, 0.18904897741247206, 0.1887736005122329, 0.16798723326683462, 0.159744487917454, 0.15418046658710516, 0.14732280287411215, 0.14290880671152206, 0.17713184842967888, 0.1576621789307332, 0.13739149196852762, 0.15507329803706593, 0.1523207748335953, 0.17690758908906867, 0.15164646322838848, 0.176463401739415, 0.1696719749150547, 0.1756630317345338, 0.157567524515144, 9.999999999998899e-05, 0.05622408866382356, 0.011011104934824156, 0.032272584944423977, 0.0630045262485126, 0.06638552372387951, 0.13796233234965238, 0.043576897933905956, 0.06204602961803263, 0.22996657720210056, 0.15647412671474958, 0.13230952743456215, 0.1870255102324524, 0.17140114722921607, 0.1402742189407974, 0.18685395346483025, 0.15060249551496396, 0.16355234798100826, 0.07046189106589029, 0.027289027311773628, 0.09323111604427703, 0.08375238194659473, 0.0417629463551501, 0.11553766886275718, 0.1418244616798665, 0.08442864496868008, 0.11843923039683835, 0.10333057961448355, 0.12379329223487079, 0.12135937216502535, 0.09378413733085422, 0.09871465052949824, 0.1201905890056485, 0.12133402584156772, 0.10905197848706916, 0.13280589569962142, 0.4017690754743618, 0.3953334448722413, 0.38465749402952376, 0.37814844731377806, 0.38272992752940804, 0.3833390778033966, 0.38485699373905013, 0.3790847592914842, 0.3839860474342469, 0.10806291745953223, 0.10659030153620519, 0.10428581070431298, 0.13018845557726633, 0.1405211354041105, 0.1145678836588131, 0.1306520443556145, 0.12788645137695875, 0.13781988949637325, 0.24518167229014243, 0.23018014574607681, 0.17665085328870123, 0.23756960816327455, 0.20890368656752534, 0.15806801766189094, 0.22357337828420487, 0.2535098644179503, 0.219630066696188, 0.2703303052281296, 0.27891238868556656, 0.2978765580098366, 0.26813572926883067, 0.2721061129562894, 0.26059779877454836, 0.28265467640879116, 0.2834419836375852, 0.2834230863559205, 0.2010152927144323, 0.21211922025000218, 0.2220269217583417, 0.21371299295396928, 0.23032666487662457, 0.21842178609952756, 0.2270338891396263, 0.24564894767879142, 0.22403094666378698, 0.20797536513550452, 0.2091159950424839, 0.2146473485519279, 0.22395187992181487, 0.21823990121968373, 0.23460064680913284, 0.25329685663844415, 0.21021698421675128, 0.21368510745073255, 0.19798968793556582, 0.24629036671878957, 0.20621142328661035, 0.21047961720533725, 0.23266690499520037, 0.20903732269744002, 0.19260544938188318, 0.1997687223495861, 0.18631389843442403, 0.5306007321562316, 0.13562607479504896, 0.1895412596633822, 0.17102555428356558, 0.1982566279975173, 0.1713130218669805, 0.1861766090744128, 0.15829114324937987, 0.6257771727031557, 0.5181877009136204, 0.2087228471840925, 0.20223526357942945, 0.49908308408928437, 0.6081234912311502, 0.5172060929821578, 0.10418863207002704, 0.10483067120269174, 0.4784967702088262, 0.1930801373917237, 0.21302049181048, 0.20593889382235864, 0.18465326226324774, 0.191413475869054, 0.18554074747145122, 0.20956400589238577, 0.182988011874205, 0.18409764370380288, 0.09295209649543101, 0.07446652568589052, 0.09293816938166799, 0.09534416453915806, 0.07903272386978111, 0.08940557779364322, 0.0882888991584534, 0.07598834375273278, 0.0925007190026923]}, "mutation_prompt": null}
{"id": "ca4235f4-598b-46f4-a92c-d93d56782dbb", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.45, self.dim)  # Slightly narrower distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR * (1 - evaluations / self.budget), mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Incremental adaptation of the mutation strategy and crossover probability to improve convergence speed.", "configspace": "", "generation": 42, "fitness": 0.24714218809608096, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.3928085309352948, 0.42719609464944186, 0.413618050068264, 0.4185056238242141, 0.4435519568513365, 0.42466789464381516, 0.4208408680179134, 0.4455546896494881, 0.4100124512901603, 0.5179123355145676, 0.49770985254501743, 0.5169495333612149, 0.5034557770321872, 0.5151031695153327, 0.5079634198920037, 0.5199636939169374, 0.486279864690507, 0.5208995619929502, 0.10898792477902375, 0.14815342659136765, 0.14473313726065296, 0.1450098458245178, 0.14512440076584476, 0.12201343043926227, 0.15356500617713575, 0.12437458918403588, 0.21224301027583248, 0.12475417409366107, 0.11692967245491037, 0.11336839997640524, 0.1177930342199397, 0.10966482107770537, 0.1197661698342114, 0.11858740037277238, 0.14335384453144528, 0.09897665485780671, 0.942149727808674, 0.9721628927905738, 0.9531999800960462, 0.9160327624707598, 0.939991790742975, 0.905005346107336, 0.9273722697796981, 0.9569513309357798, 0.9760541475738642, 0.27111980491733356, 0.2568055429480304, 0.29644157906624735, 0.2663360755829163, 0.293681245399693, 0.2752024427902171, 0.27752903599525247, 0.26493345759978737, 0.31494992298283053, 0.30868097911833314, 0.3164063632046141, 0.4227208792823566, 0.3051518098187206, 0.28795884749245704, 0.3270515063827488, 0.2997247374861257, 0.4714466477220607, 0.33990882090028407, 0.21423736772774504, 0.16990094256157862, 0.17741971311892668, 0.15705410746647808, 0.1678016364855297, 0.17241061359483023, 0.16697626167864055, 0.17938261848715487, 0.18764211495885097, 0.1555173638148264, 0.10622756630581554, 0.18628330394438708, 0.16412019432163394, 0.13433848722208763, 0.1443110223052848, 0.15701956173973775, 0.13015625182974055, 0.18842899732425877, 0.0710464640829872, 0.08859559311861753, 0.002712840324037291, 0.00011250688272979037, 0.04798171388116168, 0.05594262004038841, 0.025903965630408532, 9.999999999998899e-05, 0.09231127301934883, 0.1958384111603535, 0.14191356221533902, 0.11587323954178186, 0.21779257970739563, 0.07389884908901911, 0.1285371177684761, 0.21461095679772269, 0.1701248224279892, 0.18724476328488004, 0.16771158583852142, 0.023820802585870715, 0.060494495259322156, 0.005329803252376197, 0.0837016068247356, 0.06846790620803311, 0.14159592275399369, 0.10922552628500926, 0.09850680687864988, 0.10988639738002692, 0.13499367614579605, 0.11078362622991023, 0.0897481979030661, 0.11479888102409719, 0.1073032161006191, 0.12397333619437156, 0.12357414327989702, 0.13125802299059675, 0.37546921393738997, 0.3902592473916575, 0.4025005573708894, 0.39947075192040715, 0.3981199625435745, 0.38686389666291576, 0.38414156503178587, 0.41012910343413755, 0.407352414276547, 0.11745470939117619, 0.13005444526339927, 0.14289246414451318, 0.12603977723424975, 0.11546626605471133, 0.11705230940234213, 0.12528268098967765, 0.1272365268907828, 0.11890392786004644, 0.22831177666440927, 0.17743449363973451, 0.1963054093336437, 0.2628967429496992, 0.2143198087663647, 0.27090194291261294, 0.24975463846621593, 0.17451013681334027, 0.2190560753114087, 0.26740204213947183, 0.26858198858024085, 0.2843634131404249, 0.2692647302298413, 0.2616571247340106, 0.26841109361696314, 0.2841845908513807, 0.27428135183609037, 0.29154406939795297, 0.21910274692485332, 0.17387400848996182, 0.21784152779064592, 0.17392675562360016, 0.1695870717784057, 0.19016634573584668, 0.22434691351797642, 0.22526383322906984, 0.2252050819328978, 0.20024909644959532, 0.20500565926664283, 0.19942424996417807, 0.19935967251051034, 0.2019703078659223, 0.23857968887916892, 0.21013527035063806, 0.1989729102208483, 0.21765601203725593, 0.20736495607720062, 0.2663768931610142, 0.19219357135715232, 0.21176863591546435, 0.19130750425731335, 0.22867190907321178, 0.2245966047598127, 0.19664004673627322, 0.19002321311177361, 0.19747593272431918, 0.13583666880129353, 0.14093982064453392, 0.15775589591684924, 0.19759472334524886, 0.16660301012966305, 0.18690441492931908, 0.1573971362906188, 0.6276359236850164, 0.5101189685577805, 0.15346829403948758, 0.1252852279572253, 0.4112762410089269, 0.5711978479340607, 0.4077964867169369, 0.1042172683823186, 0.10510978086566125, 0.3929999303961268, 0.1867675532375157, 0.19417175755935634, 0.19046498856457283, 0.19350972922246734, 0.17789367324570082, 0.17554092479991412, 0.18791444957579828, 0.1952896787823748, 0.17716351003484743, 0.08644861224250366, 0.08535609168922309, 0.09437044235419256, 0.08560918154414299, 0.0865053552220505, 0.08388959849127187, 0.09522384774877612, 0.08645924165545327, 0.08273306915876422]}, "mutation_prompt": null}
{"id": "b88ccb5e-4d2e-4987-9fd5-e821e08e3453", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "8eba15c5-3d80-458a-97b8-2cd092201442", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "bce2aaa1-922c-423b-8612-f79e1165f787", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            dynamic_CR = self.CR * (1 - evaluations / self.budget)\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate to improve convergence adaptability during optimization.", "configspace": "", "generation": 45, "fitness": 0.2551192815074108, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.42245410090819435, 0.43721149385790037, 0.43118437522305897, 0.43918745625908284, 0.4342675683691596, 0.42207493974700505, 0.3976102632408012, 0.4297078458906698, 0.42347656599735384, 0.5088826965368234, 0.49361885593854216, 0.5003280157904729, 0.447561089263517, 0.49542615846624816, 0.4931440255538281, 0.5180771064463712, 0.5260981095338217, 0.5238482347630262, 0.1401623739440443, 0.15998675512728056, 0.1447459232159959, 0.14546150843163086, 0.1486909759008247, 0.1333950061499043, 0.15000914776246022, 0.15283721038660392, 0.13894626277482003, 0.11344350870382314, 0.10673074669418148, 0.13523764249539305, 0.11417440249940913, 0.11791097015764662, 0.12811509411971833, 0.1209158021490081, 0.12019454259010987, 0.12273417723293556, 0.9595960511777079, 0.985187936444825, 0.9451959451642586, 0.9528116417687839, 0.9508192352910895, 0.8871144291190408, 0.945909697881637, 0.9569873894092568, 0.9671777986374052, 0.2580974896580419, 0.2733140171562727, 0.2791627987848878, 0.2770625090941561, 0.27080075285854266, 0.31563508507844973, 0.24468018714664863, 0.28240565961466446, 0.26612950819344283, 0.4773146495953302, 0.3076233578009273, 0.34756380237220663, 0.3054254830389911, 0.40377797145806504, 0.7130712310038567, 0.29177596884050483, 0.28475147189501915, 0.2879485653253834, 0.1623293426721113, 0.1721442157112395, 0.1576928046644276, 0.16727045952865427, 0.15318933653498934, 0.17949723942382423, 0.15860482896792671, 0.20660780140203194, 0.16007437427136084, 0.18385527115704203, 0.15074969205177424, 0.1560308293387801, 0.18811185894087068, 0.1581455336661245, 0.15719551906474594, 0.16830444387533838, 0.17958617932985688, 0.149718894426784, 0.062382797699199855, 0.06343665637058071, 0.00543089367698435, 0.11767582717427216, 0.04676958363679573, 0.04556084904183877, 0.06977542390703495, 0.06080911821879653, 0.05369234032623804, 0.1415395553428772, 0.15723695122752157, 0.208826668054507, 0.16266143353148177, 0.11878904140402247, 0.1422631826023315, 0.18743993773717504, 0.21600357045047613, 0.16290834762546824, 0.07572486147615709, 0.02711702245984393, 0.07167402491653907, 0.0784747796074231, 0.04408211684731944, 0.11553766886275718, 0.13772637915238684, 0.22154912452583053, 0.10218870003335456, 0.12978681483756604, 0.1093674678027905, 0.11624501980417878, 0.08570004075099036, 0.13786140292458948, 0.11916553584881007, 0.11733796096978277, 0.08773017170240704, 0.10343836546640872, 0.4002082276612867, 0.4067982035771437, 0.37050822746879064, 0.3920145972364578, 0.387038014696096, 0.4001287025973538, 0.409852690030979, 0.3775299593211885, 0.3940084408462605, 0.11650809128134387, 0.18215207891229246, 0.1123162654175689, 0.11953204704577325, 0.11378600273865047, 0.10610333826004736, 0.1107235809623961, 0.12020224469017216, 0.1186351695906851, 0.2695966648723056, 0.2629885114492324, 0.18649978345150764, 0.24277813104338264, 0.2153324545766062, 0.22527337211151988, 0.2705099841931595, 0.1817090012638285, 0.20001377801393816, 0.26484818519620756, 0.2766367418680056, 0.2706800095265949, 0.2627699786303993, 0.2527687513181265, 0.26828906922178797, 0.2755537240881083, 0.2925732012041624, 0.2807368811000326, 0.20894389950957526, 0.2317179714219405, 0.19280541838562737, 0.2099679809308641, 0.23574749861575872, 0.214906896360757, 0.224567025299378, 0.2206429141911076, 0.23122095670901055, 0.2142137486522434, 0.20780369794166542, 0.20312771282303355, 0.2276853567365391, 0.20257828375746978, 0.20314265845023272, 0.20902412927414238, 0.21391569971711566, 0.2129078123814524, 0.20512252500073214, 0.2138157602884485, 0.20804487148542705, 0.22069163242212986, 0.20391906684853034, 0.22973444294149803, 0.19865486426269963, 0.23956019709217913, 0.1916139776931728, 0.19795410290173898, 0.13529469316265585, 0.18958883811827865, 0.17106782078008942, 0.1980608779148667, 0.5185612978728712, 0.18631798621458817, 0.18307015341697763, 0.5878764860043111, 0.47178770147738414, 0.20811675737935809, 0.2021926476608703, 0.4893049477935235, 0.48869170336392864, 0.43295189320026883, 0.40041924279192886, 0.1049519855750417, 0.42161954892970455, 0.18110838440859256, 0.18459635287841825, 0.1828118952875638, 0.1964034566312658, 0.18979200275510977, 0.1801888084483395, 0.1864449569450788, 0.18518984713205278, 0.17688346025794344, 0.09339351931421735, 0.08226204622233924, 0.08448018375017818, 0.09624401223272383, 0.11065773835694814, 0.1072384303976256, 0.09559471172454126, 0.08140820883685995, 0.10134715383074622]}, "mutation_prompt": null}
{"id": "ffc87e00-aeb3-41cb-84ca-47c9dbee8ac2", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "476002d2-d1db-4f83-802c-ae29e2f65af3", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "fe667641-1f2a-4235-baf5-53b5c96a57f0", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                adaptive_CR = self.CR * (1 - (best_fitness - fitness[i]) / abs(best_fitness))\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce adaptive crossover rate for enhanced diversity in trial vector selection based on convergence progress.", "configspace": "", "generation": 48, "fitness": 0.2789326773722897, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4351309022935531, 0.4363184221419115, 0.4275428991799569, 0.4304161409256908, 0.4470060117882939, 0.44158148440886424, 0.42254088564338843, 0.4305929549845787, 0.4400579404020757, 0.46235045561513866, 0.5365478533260071, 0.46612385189919336, 0.5609406908662303, 0.4829837754274856, 0.42171912505478537, 0.4841503834624067, 0.433704834399507, 0.537628319915652, 0.13810656634375318, 0.13346619126758796, 0.10534774980553718, 0.12154708462010055, 0.12510178581778653, 0.11839352641564727, 0.1016526131804576, 0.12107821404979535, 0.11640566589207246, 0.10147123134812464, 0.1147820028777985, 0.09791054950729616, 0.1152963350801618, 0.12040034011963274, 0.11269785620752304, 0.10180296033000757, 0.0949847985102642, 0.1140271373344034, 0.969004229478842, 0.9852644098005727, 0.9554381705404139, 0.9387072571165223, 0.9444018739895577, 0.9655906861858825, 0.9528738184165858, 0.939054009918824, 0.9919064084324417, 0.30937873462204246, 0.30858063911260747, 0.3110663892752461, 0.3067624693162263, 0.3227160449957678, 0.350987874958138, 0.27800181061726903, 0.3121077217063617, 0.30407727755351754, 0.3689834239433888, 0.401754374892088, 0.41651149452858005, 0.46188389599341384, 0.4529590465820207, 0.4113489902447375, 0.5133774220625374, 0.4118787996842741, 0.3198894554922832, 0.20865479199093195, 0.10738742300318971, 0.1659723436232311, 0.16308876625401603, 0.16316923284854168, 0.17280778941493535, 0.18484571758252188, 0.18403594017779046, 0.18283984547055132, 0.25096468019808393, 0.18982123695287167, 0.19359197856844435, 0.2088109633517028, 0.18220179561597427, 0.17593619684323514, 0.18015243175893358, 0.20381279870664126, 0.1864589843701112, 0.11277182341989245, 0.3599581005491794, 0.27297480074522285, 0.17615679288389674, 0.30709224174932737, 0.22097729598894134, 0.24219836556524943, 0.058751793631145355, 0.28375645804284444, 0.3762085904959621, 0.3001483254061438, 0.4382440121432307, 0.34033443727947466, 0.379782835121104, 0.34864620285588577, 0.3144209792526106, 0.33445519967760096, 0.4245277929849949, 0.13384786005620375, 0.05344700958219295, 0.1771241666800133, 0.1544330600188074, 0.11057282277668767, 0.15614583812231309, 0.13982085186251825, 0.09996922907205064, 0.2179833084162356, 0.12460079758462128, 0.11182818557815921, 0.13957905340802212, 0.14433517995513045, 0.14459356362345555, 0.17267102567012693, 0.13416231622723773, 0.1443448315047463, 0.1377056371489641, 0.3822237795019633, 0.411812998267721, 0.3914518573078126, 0.3884243524792944, 0.3968393922486525, 0.3891027790963639, 0.40207928989508457, 0.3949474372245796, 0.3979910363888782, 0.12049156355172164, 0.12308517365459992, 0.09842384366784951, 0.12292060323941534, 0.13616864271859852, 0.10946069978640804, 0.12527140606146936, 0.11411526946165473, 0.11428354903763427, 0.24293385722611505, 0.23402940379186987, 0.24992492968853097, 0.2529489627095647, 0.21570943583655477, 0.26036164971267506, 0.27859185671070796, 0.27144276515715426, 0.26087217039704724, 0.2849894530821321, 0.29145323619452046, 0.2855791723360773, 0.2824271499952652, 0.27964130727971803, 0.28891262120269423, 0.2845922188859856, 0.29142460698970984, 0.29542973377349924, 0.23888056776012534, 0.23354465269021008, 0.22982346641308338, 0.22611905561385826, 0.2258031431865517, 0.2296166212313242, 0.23225606237872365, 0.23638029293092144, 0.23605320326148016, 0.21089185647530562, 0.2165531502599639, 0.2109268217206992, 0.2275406418728716, 0.20938613373627724, 0.19607557226470929, 0.22457202323537084, 0.20561457260538496, 0.20392054910208135, 0.2610698944038913, 0.22400140055597695, 0.1919436458214102, 0.27487238144774084, 0.20351532606120337, 0.2064850784251725, 0.1936343337149159, 0.2194600396690246, 0.21040615533082796, 0.1858104286345218, 0.20812083504666812, 0.15210526969683813, 0.19726379990102805, 0.6004091829763938, 0.1982334590849385, 0.18628603896288698, 0.6136171940669316, 0.6708121512158172, 0.6120486608373072, 0.21003691853980622, 0.20843879649806385, 0.20650933526019122, 0.5491021565266931, 0.5362633974223168, 0.10288385746949624, 0.10500062644338382, 0.16377655983126682, 0.1779945605503115, 0.18660189956768358, 0.17372418304309356, 0.1875499034624688, 0.18859234161234506, 0.19315985399748237, 0.18564492508847708, 0.17259432315109713, 0.18259018561657692, 0.0878589255490484, 0.08829048163248521, 0.0948027902892079, 0.08684818931816085, 0.08339846019198971, 0.08784541324587203, 0.08851423209906573, 0.0962915794068313, 0.08129257773448806]}, "mutation_prompt": null}
{"id": "e3157dba-2146-4ef7-be7b-eafc22406980", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "908df41d-9b6c-448a-936e-3968db30e291", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.CR * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                if np.random.rand() < 0.05:  # Random elite replacement\n                    population[worst_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                else:\n                    population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance convergence by introducing random elite replacement and dynamic crossover rate adaptation.", "configspace": "", "generation": 50, "fitness": 0.24752385200814192, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4087535492465928, 0.42697932572315156, 0.4247975012450679, 0.4162197101614029, 0.41886243565024484, 0.4025638169731317, 0.4108248521689447, 0.44137170914619595, 0.4076891200923449, 0.5094418703099819, 0.4808450672088356, 0.4579799382580184, 0.5028102861593031, 0.4982521824249907, 0.5074293833935679, 0.5162254220718234, 0.4866834884562886, 0.5017877699122384, 0.11830745589476632, 0.13715152260893515, 0.13405638904000894, 0.12964809150027012, 0.12417839567060651, 0.14022527676353747, 0.12413900418263168, 0.15222141678804024, 0.1293229439350282, 0.10181852999131114, 0.1286520142359856, 0.12118915450935142, 0.12188230695781654, 0.12329202822943985, 0.1250446821754515, 0.1187065501705512, 0.12458042997978958, 0.1160787038559431, 0.9583692891648459, 0.9636514029863853, 0.9258696367972944, 0.9567400256345506, 0.9536986406641761, 0.9199686600677598, 0.9177404797778195, 0.9407776957596898, 0.9517527125398235, 0.26251549358398574, 0.27514243625835, 0.26612123710371005, 0.27911961969758536, 0.29290854622677986, 0.29186158086708247, 0.26808965703135446, 0.2655048214721365, 0.27441929757396644, 0.5708801738543157, 0.301268219462389, 0.29354883068159865, 0.31226924332060657, 0.2646801281335933, 0.3093660977114284, 0.30257530000316923, 0.22653475420588365, 0.31448215015719894, 0.17601871461405738, 0.17078209652070075, 0.15632744874910565, 0.10958340022186752, 0.16936588926062102, 0.1682904616710068, 0.16572928912066676, 0.15705495961523797, 0.1606299208644255, 0.1639300356240223, 0.18589016851246987, 0.14808832492729163, 0.15220155979985173, 0.15534482211926137, 0.15181913419049053, 0.17776045877457058, 0.1410547925353287, 0.14110430966489862, 0.0005452575618509758, 0.06108647763723418, 0.058111170509546506, 0.030638555900150966, 0.047808795919669356, 0.0007568229336829546, 0.0605060707389905, 0.05572689252483887, 0.11848899690213277, 0.12447230325625858, 0.16053492434913352, 0.14786908971978796, 0.15808595224856403, 0.10215920953568514, 0.12167073929028593, 0.1783769679224081, 0.14452761841723027, 0.18285850019563776, 0.056492004451873634, 0.02884066975343902, 0.13685426557392588, 0.04063338623693058, 0.11655930223392663, 0.017458053040048438, 0.06294408222132675, 0.09145283860819886, 0.08193750615671958, 0.11812488006056843, 0.09495958554842232, 0.0909733323113614, 0.10957170206721256, 0.09870654939037282, 0.09667699403917251, 0.08885241950590606, 0.10164667730930832, 0.12103114274671811, 0.38849347177644444, 0.38607606006655437, 0.38184982594696615, 0.3877419047830174, 0.39047742225494186, 0.41775542585526293, 0.41159267075867234, 0.3838246868541222, 0.41194778216001027, 0.10501607533234214, 0.1065129522142324, 0.12440941263728655, 0.10805163263550333, 0.10335712160516775, 0.12528776267126107, 0.12190381103024173, 0.10305922775268028, 0.14066915327248475, 0.2393525356365782, 0.21825853716558108, 0.17681644743693292, 0.2732907124576065, 0.21122909323959194, 0.24112668282909433, 0.23045878864993263, 0.18146916528772228, 0.14440728037312567, 0.2627242613136317, 0.2734895679421845, 0.2787071680121077, 0.25313359871789676, 0.2580737021259071, 0.2631290527497614, 0.28195634525999513, 0.2880750550450132, 0.2741016759798566, 0.23906363534368325, 0.1904268496750504, 0.21546121944964036, 0.22746730070497756, 0.22277800690606842, 0.20915601990868748, 0.2264372587976633, 0.2370187022780169, 0.2311058516105431, 0.2059110236947237, 0.2178362864886383, 0.2055911533742294, 0.19171446799439062, 0.2023028505012473, 0.22048478720286746, 0.23467509277324583, 0.1938385427192164, 0.2308240459490507, 0.21229331148489305, 0.2055799080601851, 0.2478058492375832, 0.21840980159859813, 0.20583913526339492, 0.19977125046173982, 0.20364315202057748, 0.21807351540994746, 0.20535326181404367, 0.19786006417741975, 0.28399782838913257, 0.16226967329413988, 0.1669618945339686, 0.19894865647589355, 0.16667790357458379, 0.18662777487986915, 0.15956435513653344, 0.6357812153037551, 0.5958823357111709, 0.21114426661701613, 0.20205545334546793, 0.5180797606357755, 0.5325667854352882, 0.49028445812056043, 0.10502697805199568, 0.43565712340017937, 0.43656508017159623, 0.19563201800655383, 0.17645537408831335, 0.18202357697286442, 0.18806401105100845, 0.19127444594352716, 0.1875836221250583, 0.19955619824947246, 0.2134724058508214, 0.1987823715043544, 0.09665930546491075, 0.0822354855644376, 0.08155509215478052, 0.08623348319267099, 0.0791123064754452, 0.08989821034630618, 0.08007469760649688, 0.09431392888213996, 0.08080156303906971]}, "mutation_prompt": null}
{"id": "fcccd6df-cf73-47bc-a5a3-3d2b6b1cf816", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "f13c7b77-024c-4b30-aef8-9a41a44f715b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                adaptive_CR = self.CR * (1 - evaluations / self.budget)  # Dynamic crossover rate\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate to improve exploration-exploitation balance and enhance convergence speed.", "configspace": "", "generation": 52, "fitness": 0.25210968643209497, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4381871265267059, 0.4084641688826183, 0.41284859092566595, 0.4273450374875061, 0.404464023280665, 0.44649042868098043, 0.39544223581788174, 0.43723943370287865, 0.4266545801602991, 0.5111719794638341, 0.4970848195704449, 0.5017277407952141, 0.48688882876535444, 0.4886046383002426, 0.4952666741070818, 0.5066391977603732, 0.5201762477633017, 0.5126964876502973, 0.11891684510245215, 0.144067715340657, 0.13089170178044807, 0.13524353232581576, 0.12045658883440125, 0.1308467562886424, 0.11626866825743964, 0.16048017392238123, 0.17105354570803977, 0.11302058910575286, 0.12119961114890121, 0.1157414047093347, 0.1700151265074915, 0.11923200194374639, 0.10543980495323335, 0.12786241010490595, 0.17440991011028895, 0.1378599903654908, 0.9595960511777079, 0.9711008324306926, 0.9451959451642586, 0.9528116417687839, 0.9524418983952566, 0.9007888202569457, 0.945909697881637, 0.9569740212665158, 0.9671777986374052, 0.28830145236190685, 0.30142931523494687, 0.26752900348162933, 0.2706768755386897, 0.2636792858057194, 0.2862774152282338, 0.2472353876598261, 0.2592385274007941, 0.26442071498494113, 0.3094826631259442, 0.307753106915848, 0.4480601564036124, 0.32028326676039665, 0.3092376117888953, 0.33453262593488375, 0.3205976317698267, 0.32007931087943997, 0.29932889089821224, 0.18904897741247206, 0.1887736005122329, 0.16798723326683462, 0.159744487917454, 0.15418046658710516, 0.14732280287411215, 0.14290880671152206, 0.17713184842967888, 0.1576621789307332, 0.13739149196852762, 0.15507329803706593, 0.1523207748335953, 0.17690758908906867, 0.15164646322838848, 0.176463401739415, 0.1696719749150547, 0.1756630317345338, 0.157567524515144, 9.999999999998899e-05, 0.05622408866382356, 0.011011104934824156, 0.032272584944423977, 0.0630045262485126, 0.06638552372387951, 0.13796233234965238, 0.043576897933905956, 0.06204602961803263, 0.22996657720210056, 0.15647412671474958, 0.13230952743456215, 0.1870255102324524, 0.17140114722921607, 0.1402742189407974, 0.18685395346483025, 0.15060249551496396, 0.16355234798100826, 0.07046189106589029, 0.027289027311773628, 0.09323111604427703, 0.08375238194659473, 0.0417629463551501, 0.11553766886275718, 0.1418244616798665, 0.08442864496868008, 0.11843923039683835, 0.10333057961448355, 0.12379329223487079, 0.12135937216502535, 0.09378413733085422, 0.09871465052949824, 0.1201905890056485, 0.12133402584156772, 0.10905197848706916, 0.13280589569962142, 0.4017690754743618, 0.3953334448722413, 0.38465749402952376, 0.37814844731377806, 0.38272992752940804, 0.3833390778033966, 0.38485699373905013, 0.3790847592914842, 0.3839860474342469, 0.10806291745953223, 0.10659030153620519, 0.10428581070431298, 0.13018845557726633, 0.1405211354041105, 0.1145678836588131, 0.1306520443556145, 0.12788645137695875, 0.13781988949637325, 0.24518167229014243, 0.23018014574607681, 0.17665085328870123, 0.23756960816327455, 0.20890368656752534, 0.15806801766189094, 0.22357337828420487, 0.2535098644179503, 0.219630066696188, 0.2703303052281296, 0.27891238868556656, 0.2978765580098366, 0.26813572926883067, 0.2721061129562894, 0.26059779877454836, 0.28265467640879116, 0.2834419836375852, 0.2834230863559205, 0.2010152927144323, 0.21211922025000218, 0.2220269217583417, 0.21371299295396928, 0.23032666487662457, 0.21842178609952756, 0.2270338891396263, 0.24564894767879142, 0.22403094666378698, 0.20797536513550452, 0.2091159950424839, 0.2146473485519279, 0.22395187992181487, 0.21823990121968373, 0.23460064680913284, 0.25329685663844415, 0.21021698421675128, 0.21368510745073255, 0.19798968793556582, 0.24629036671878957, 0.20621142328661035, 0.21047961720533725, 0.23266690499520037, 0.20903732269744002, 0.19260544938188318, 0.1997687223495861, 0.18631389843442403, 0.5306007321562316, 0.13562607479504896, 0.1895412596633822, 0.17102555428356558, 0.1982566279975173, 0.1713130218669805, 0.1861766090744128, 0.15829114324937987, 0.6257771727031557, 0.5181877009136204, 0.2087228471840925, 0.20223526357942945, 0.49908308408928437, 0.6081234912311502, 0.5172060929821578, 0.10418863207002704, 0.10483067120269174, 0.4784967702088262, 0.1930801373917237, 0.21302049181048, 0.20593889382235864, 0.18465326226324774, 0.191413475869054, 0.18554074747145122, 0.20956400589238577, 0.182988011874205, 0.18409764370380288, 0.09295209649543101, 0.07446652568589052, 0.09293816938166799, 0.09534416453915806, 0.07903272386978111, 0.08940557779364322, 0.0882888991584534, 0.07598834375273278, 0.0925007190026923]}, "mutation_prompt": null}
{"id": "682948a2-f860-4767-840e-7da16ffde75e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "e3c4f0bc-cd8d-476b-93aa-fa82dbd28e9b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.CR * (evaluations / self.budget)  # Dynamic CR\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce dynamic crossover rate for better exploration-exploitation balance and enhanced convergence.", "configspace": "", "generation": 54, "fitness": 0.22271149045904068, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.16.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.39487683309098065, 0.35293458624556096, 0.3900408824716788, 0.38589570704206577, 0.39846396734609457, 0.37610429141420076, 0.38454426089895244, 0.37536536114143615, 0.4068882245129414, 0.42375466606962264, 0.43449829712833876, 0.34387016887231125, 0.41036782446528686, 0.4527408984120773, 0.449631060461251, 0.46371359102898047, 0.4437984674834409, 0.4610799955503787, 0.18203943915328413, 0.1734272418200986, 0.11789028457099171, 0.13065652833154395, 0.15904980209865038, 0.1159576263962987, 0.18939232754848045, 0.13392971830792688, 0.09805811011842558, 0.09769384662557024, 0.08988442561350585, 0.09498982805730194, 0.11769432524069667, 0.11577945259987976, 0.10918845452645998, 0.11862639880216852, 0.0990694987374392, 0.10085138547397687, 0.7946826180374671, 0.793461390737192, 0.764024474954825, 0.7907479698050228, 0.7298828519999183, 0.7851178934675113, 0.7236020345078894, 0.7182661134066366, 0.8082555514984965, 0.2489625288487698, 0.2531748544337231, 0.2216128550000912, 0.27729741135453323, 0.24375616630535057, 0.24871964589369644, 0.24330463713101314, 0.23714579927728774, 0.24957242976997274, 0.2832370446785083, 0.30636510287943297, 0.22292817055897363, 0.42582699031282834, 0.265644549942888, 0.259228979855634, 0.2814041463486957, 0.33300444029654985, 0.2699268725483459, 0.216564740694551, 0.11686940817626257, 0.128019019610346, 0.13767517583459898, 0.1353715427918729, 0.1202368657304771, 0.19716406741278547, 0.16716124990857484, 0.14449315557202136, 0.13035857702757803, 0.13698099813067988, 0.14053054071340343, 0.14275304898990193, 0.12440585818445471, 0.1538579601490936, 0.1474966589716321, 0.17094480621433417, 0.15307678392209545, 9.999999999998899e-05, 0.003951796174801903, 0.027489794126048905, 0.009951402864822767, 0.010974251338251473, 0.003861626137138807, 9.999999999998899e-05, 0.005969768025337552, 9.999999999998899e-05, 0.11017821337340283, 0.08318396970254016, 0.08343437187682434, 0.090802998101422, 0.0609049776121543, 0.051324380236441924, 0.13150511878774374, 0.14356331193508975, 0.11435508464082156, 0.037552045665694145, 0.033742876517093845, 0.10304933497795488, 0.13293240515865945, 0.06493941971377515, 0.08049808253863522, 0.06430587078026906, 0.07634793785366711, 0.09813131507924122, 0.10568619936964774, 0.059475435362484896, 0.09209740627155316, 0.09024121818103337, 0.08539800697637023, 0.11120054085402808, 0.08132388949135982, 0.07631144146166446, 0.10378192854723733, 0.33716598214477733, 0.35522374843010107, 0.3933547104183728, 0.3689199609698526, 0.34474728435087887, 0.3369847399187673, 0.36053560103574833, 0.3412488456100127, 0.3617555873755508, 0.1047237627307166, 0.10880945283040888, 0.08996503085530638, 0.12893348454382392, 0.11095127824046525, 0.1208493412071675, 0.08888347779677319, 0.110803207472846, 0.09787295876427993, 0.16766033082178533, 0.24752426789001625, 0.1722608375208261, 0.26603749251664977, 0.26799363698187817, 0.23835945875773978, 0.2699764732130405, 0.22934328299742035, 0.23417912793203044, 0.267298592527923, 0.2576966568228023, 0.26559461889366787, 0.19221529577485885, 0.23948032479571013, 0.2527319121786695, 0.250976400477408, 0.2895304944502787, 0.253971723843171, 0.19004930157078725, 0.1942894457821429, 0.2051426915222605, 0.17069474726312617, 0.1530196953952031, 0.1756935826673578, 0.2022213902095349, 0.20649153379386997, 0.19186605558883774, 0.20571037508426793, 0.1891564640992397, 0.18529156275415848, 0.23423281068391333, 0.18963276736357315, 0.18258544608308935, 0.21706762628758192, 0.20833030819286047, 0.2150171823708985, 0.1986149450612794, 0.2401536403245672, 0.19862564099583524, 0.192900319377454, 0.19418921695574476, 0.16584148965368273, 0.24326880300696885, 0.2055022535246792, 0.20360723446856832, 0.18748830714496822, 0.4935330629616478, 0.40672526883435955, 0.5043126190559576, 0.19119082123391584, 0.15703464262771016, 0.5361569312154927, 0.16849504279470506, 0.2014805382494752, 0.45020960144550193, 0.19411942712504526, 0.3519499592396189, 0.3925413308167245, 0.36095180257871184, 0.1378304275443747, 0.1398332854062604, 0.11613020811116026, 0.3968608572794172, 0.17884529062666787, 0.18033714878820628, 0.17028253814784855, 0.1894013770682652, 0.19075163412279283, 0.18652524458491304, 0.19026364453872835, 0.18169062283778392, 0.19470443141151694, 0.07571685628169178, 0.07009190032173251, 0.0797420623035161, 0.06920614694946603, 0.07776741018424504, 0.08168116503662604, 0.09320756394506047, 0.08008695299658153, 0.08015172289146344]}, "mutation_prompt": null}
{"id": "7097a559-d123-469d-8b6c-5fe82bb484a9", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (0.5 + 0.5 * np.random.rand()) * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                adaptive_CR = self.CR * (0.8 + 0.2 * np.random.rand())\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce stochastic adaptation in scaling factors and refine trial selection using a dynamic crossover strategy.", "configspace": "", "generation": 55, "fitness": 0.2635605697979488, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.461150153522886, 0.4581046802638198, 0.433792337582831, 0.43544859903476374, 0.4295490170444598, 0.42935082972212213, 0.4566851735857457, 0.44903716412353323, 0.44111948123615574, 0.5114272523299231, 0.44398171313704826, 0.4881505770454234, 0.44053987052588983, 0.47190829751895735, 0.32835243303608075, 0.5244118538200282, 0.5546482917402467, 0.3708135423515424, 0.10957670435706823, 0.12340259521506647, 0.13287226502132032, 0.19629584381073795, 0.10937370705957106, 0.1539848830061863, 0.11969311162298257, 0.12019336814300874, 0.12854714772681586, 0.13193716632355923, 0.12102910376975373, 0.11380272005459469, 0.14093807256990754, 0.1211401505054377, 0.09782132817705569, 0.12005327620602912, 0.1179139137068198, 0.11692023044276956, 0.9647084134114221, 0.9579610229049076, 0.94581850783407, 0.959032372295512, 0.946753284374943, 0.965796075969436, 0.9510154308934038, 0.9847998848922738, 0.9534611366774567, 0.3182724886660443, 0.31409463062549536, 0.31659842478498235, 0.3066872746427747, 0.325916347247001, 0.32148028408899987, 0.35777061100765506, 0.32027050663931855, 0.3662175057496394, 0.34930757345760266, 0.3426174392542235, 0.22475754311644247, 0.5156827944819335, 0.4862450218610965, 0.36578519107066754, 0.27774633689265416, 0.3123696880791862, 0.3401374284430322, 0.17319320856640774, 0.12060606898019122, 0.18893815595458574, 0.1583198281898529, 0.21070369117836596, 0.16774643432193992, 0.18998285875921705, 0.17455827870125917, 0.17222896080175454, 0.162598282245898, 0.16639397042115256, 0.17928405777842749, 0.17367585492637716, 0.17187369059263202, 0.17440340603660187, 0.16289536351201017, 0.17366691738595896, 0.21410668935439336, 0.2372016007644927, 0.04314472409262582, 0.07411437106203445, 0.020720239357609582, 0.04385446762147527, 0.045188761159382196, 0.04683535526362159, 0.026235217256937893, 0.12018841074506437, 0.17680835372841708, 0.23027724374969327, 0.21881557586196632, 0.1707840576867189, 0.22844796925031918, 0.15296408068492728, 0.2849471367607579, 0.2686889515421762, 0.2649741163963363, 0.16313654119114218, 0.032914089818620096, 0.2023681357616457, 0.14912105218931082, 0.09275675481462531, 0.06205157796261196, 0.0760154137728114, 0.11816345908836867, 0.15023913325162852, 0.10957464000195904, 0.12444446555048494, 0.13548552322175167, 0.14277516318299677, 0.13627543517113194, 0.14341665859391928, 0.12795368560267484, 0.10644967363227065, 0.09587647902135399, 0.4140943875397939, 0.408991039450753, 0.390949296814464, 0.4007628285060698, 0.40823520092120114, 0.4000248117437428, 0.4209311902906281, 0.38424768982220836, 0.399448678658505, 0.13797071846481357, 0.11694455582642382, 0.10235000888977408, 0.10737484226793881, 0.20775662426052888, 0.1275733748572726, 0.12373653788632255, 0.1253885233260298, 0.11422831891530527, 0.2839060037263086, 0.2523118350378941, 0.2764960343479592, 0.2836716139378703, 0.2639123706929718, 0.2557281769236137, 0.28595555572983244, 0.2876619969128491, 0.24081210224828875, 0.2886721730781835, 0.2753763303105671, 0.3012827655042799, 0.2903557084895464, 0.299999957298522, 0.27991111959221293, 0.2920460560944964, 0.3037470234301951, 0.29128047564722503, 0.20221152991934632, 0.22488111245897136, 0.23815280368639014, 0.24391894466652764, 0.22684132138744129, 0.23025894838197314, 0.2182829883700218, 0.24031054163536003, 0.2217749863046531, 0.19836608626096763, 0.2537815414598601, 0.21305030479513143, 0.21681360859057008, 0.22465271564937483, 0.23150452282483003, 0.2121732922255648, 0.21806816097617754, 0.19684516606685287, 0.30376764123585176, 0.19763165143638783, 0.18297919746039526, 0.19687362426901944, 0.19619750699977045, 0.2833311355354453, 0.19654603235683854, 0.22040054406767529, 0.21832117283795083, 0.6124838026176148, 0.12651923749049687, 0.15245384552292995, 0.6629935296008205, 0.19968233085202958, 0.16752557050842165, 0.17457851161441162, 0.1606002298916177, 0.6331290897631108, 0.6240383486324306, 0.20792541203373904, 0.49564256566853027, 0.16583312774639347, 0.2039039440216669, 0.16623669015138354, 0.1045159796958669, 0.10490794889708499, 0.45779215035078347, 0.19187062675110578, 0.17762398555589665, 0.18279543894511097, 0.1886658964030179, 0.18579644179665789, 0.18272772182161456, 0.18125188045998997, 0.19638868155178846, 0.19533567368902227, 0.08636136797527838, 0.0988511366631939, 0.08933877125110434, 0.08714915349127028, 0.09008381534756482, 0.08761808937416937, 0.10483865903061929, 0.08929140802527924, 0.08660469663777481]}, "mutation_prompt": null}
{"id": "527d662e-41e3-4c00-a05d-f1cc0d3110cc", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "801e511a-b33f-4c95-8bd5-beb6cb70375a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "c139dc95-b229-43fb-9981-732ffee1729c", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "c8d46ef7-8e48-4b3e-91e0-a731484c6489", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18: \n                    mutant = best + np.random.normal(0, 0.5, self.dim) \n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n                # Crowding mechanism to maintain diversity\n                if np.linalg.norm(mutant - population[i]) < 1.0:\n                    population[i] = mutant\n                    fitness[i] = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a crowding mechanism to maintain diversity and avoid premature convergence.", "configspace": "", "generation": 59, "fitness": 0.23674579056498177, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.41409630857790336, 0.4227719234905357, 0.4151902309677814, 0.3816408397754393, 0.3899540412221085, 0.41285180377083674, 0.4050087831866864, 0.3720097792785314, 0.37336924040796804, 0.17011677929672153, 0.18093604619100923, 0.17996365050109675, 0.16899252274329268, 0.1718513841649021, 0.17432068825802638, 0.1787164750813508, 0.17095687386944503, 0.15936120712493163, 0.15510765133222326, 0.11369039353087917, 0.1316038469532601, 0.10171753207272827, 0.12532648766259413, 0.11963199853700623, 0.12359359729120334, 0.12176606264813095, 0.12575484695792116, 0.1041123024090913, 0.10457154373052213, 0.09278108947025443, 0.11273577815798108, 0.10470077642434206, 0.09849563074129386, 0.12461397654405959, 0.13045128881617873, 0.10815303651808605, 0.9314301623909743, 0.985187936444825, 0.966725836339395, 0.948894939091917, 0.9564084017710567, 0.9338750136557188, 0.9679502535496648, 0.9270764517126787, 0.9761221812687116, 0.2724013341107493, 0.26766701612311894, 0.24060753591286455, 0.26002924261428384, 0.2734138872114573, 0.27645580665595293, 0.24911123181564865, 0.2738653135793707, 0.23909898709784116, 0.32192280443359755, 0.3104729962486539, 0.3209975213381332, 0.4659913496491457, 0.44615802347640887, 0.33816508143977786, 0.47437972234236014, 0.2741117248855416, 0.30121209728390563, 0.1313784446630223, 0.13999563890291955, 0.15736937201464984, 0.14312379511953788, 0.16701329438498447, 0.14746725366033986, 0.15587408737404784, 0.17430749733727957, 0.17642945728726722, 0.17592202789412492, 0.1730676084384971, 0.13308296022942379, 0.16531241175835454, 0.13878140749186973, 0.15047314767248043, 0.13973151037459464, 0.09720072017416037, 0.16178764372441168, 0.11798680124141592, 0.10971999450019265, 0.11630275715475213, 0.1162614238396551, 0.1526967836019818, 0.13359023963000216, 0.12150084643613968, 0.13544810648217476, 0.13745769425389065, 0.2303423881610719, 0.2670305963581793, 0.2002841374013824, 0.21839529001038394, 0.18805584764669148, 0.23695839130682894, 0.23743761071029468, 0.22789564691223219, 0.21749803640871646, 0.08593158389809519, 0.015532195144827177, 0.03294339298220317, 0.013570649206016805, 0.008591688428940314, 0.026837860668844193, 0.016870623986787736, 0.003640127403500837, 0.009024852457051424, 0.1113116765694595, 0.09726644738277956, 0.08995149013222303, 0.09098740126724147, 0.10444996629685555, 0.10344854307268647, 0.10055955664881189, 0.09185837779880801, 0.09372018616710209, 0.35927239842933656, 0.36626339360875526, 0.3738670880274828, 0.35568785306517614, 0.3652435574732119, 0.3583644353502433, 0.35053597710310336, 0.3570237610461472, 0.3821813297593194, 0.10419232199470285, 0.09957117473033872, 0.10838712664911165, 0.11643983685304027, 0.09778843985683072, 0.12550486788733106, 0.11095278204009629, 0.13868298281282299, 0.10600483711848974, 0.21884471782531378, 0.21703414320042835, 0.18421669023691867, 0.3009892357988999, 0.20016586477223386, 0.20969723180286115, 0.27937379635360937, 0.17273260639109544, 0.22933097141740055, 0.2667067721368931, 0.26548245557717376, 0.26141053844043594, 0.2595839504233802, 0.2639084926311889, 0.2700859003153061, 0.27346981861452857, 0.29200830988815074, 0.2755982457981295, 0.195095536113012, 0.2000112684045916, 0.21169974172305717, 0.21084631162527168, 0.20998915670778506, 0.19800100129626008, 0.21301285860632957, 0.2074365859606957, 0.21707146549962486, 0.21401658574469262, 0.22462319807544207, 0.2038581894719873, 0.2163972155693611, 0.2004596866989765, 0.21276026098010548, 0.2144688046983253, 0.2296345145935521, 0.20265728123144433, 0.20577179875052265, 0.20431968064772343, 0.23229142437461292, 0.24918833899124815, 0.19206300733083348, 0.2062106174355297, 0.20584412558454435, 0.2197023949596425, 0.2017317779297898, 0.19733015463659265, 0.13438718213901757, 0.15102369052535447, 0.1708741598781982, 0.1972355158491832, 0.5732653963999788, 0.19578398996695945, 0.16042337491046943, 0.5833590629906642, 0.5266042041675943, 0.20657117666095737, 0.20096250745538247, 0.16620105481442937, 0.5014694273041025, 0.5018221389661248, 0.46709393917111897, 0.4675228879603698, 0.41862816474451703, 0.18412475519622784, 0.17861228033716492, 0.19428643131849832, 0.186333176781312, 0.1728102409487019, 0.18815737766826213, 0.19647418421630913, 0.17922488255682079, 0.18338825441848672, 0.0853933343814417, 0.08512067633189035, 0.09463570104540797, 0.10720655855669103, 0.0846467413399492, 0.0865607048299244, 0.0819905167355891, 0.08623104975130302, 0.09524237242635158]}, "mutation_prompt": null}
{"id": "03df68c4-431e-49c4-b6a1-a60e88757ecc", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    perturbation = np.random.normal(0, 0.5, self.dim) * (0.5 + 0.5 * (evaluations / self.budget))  # Dynamic scaling\n                    mutant = best + perturbation\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improve convergence by refining trial generation and stochastically enhancing search diversity.", "configspace": "", "generation": 60, "fitness": 0.2728930438882911, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4307766618420237, 0.4501843218022955, 0.44478833617637903, 0.4503178002556616, 0.4512155580027225, 0.426824361368771, 0.4353854996240365, 0.4561109134096929, 0.4274503853471182, 0.397923219092306, 0.5248254316699194, 0.40716034355216446, 0.4974233110998768, 0.4898404947094166, 0.47236074074280254, 0.47714441886773895, 0.5580730617702233, 0.4597543326380662, 0.1280058438416225, 0.11826990635361367, 0.15352890656938012, 0.14410264332360934, 0.1351825665447668, 0.12793001109871982, 0.10237840071184967, 0.12554987727290612, 0.13458293074417038, 0.09500363855847516, 0.10626645468288332, 0.08830964028575128, 0.1092822476278198, 0.12290717266378637, 0.11710301526041855, 0.11528504359822822, 0.11028385198432789, 0.13211433375926662, 0.9671400034268786, 0.9851216181977652, 0.9759948316995617, 0.9598107605894077, 0.9409793740980791, 0.9353272557750701, 0.9429487029320467, 0.9487317371415706, 0.9588456858191747, 0.3262309880257964, 0.3214965814535288, 0.2994887954597102, 0.33010279723534564, 0.3272620459203509, 0.34530940409059363, 0.3332501187452718, 0.3019205053820607, 0.32042127674789245, 0.3375024807016398, 0.5877714003944516, 0.454417444563614, 0.43965246859887386, 0.2928132724221134, 0.3398402654033672, 0.3220431481594258, 0.33259144781602734, 0.42711213369243983, 0.20416584309772656, 0.20031521002595232, 0.20426942916981883, 0.1372112314254249, 0.16924092368077526, 0.12158309887779872, 0.1735596407049026, 0.1864711952527932, 0.1770112640671052, 0.17030448466850523, 0.19547782873540331, 0.14779098752698516, 0.16508390979463872, 0.16981622386441775, 0.14787001884914008, 0.1724296942325283, 0.09620723941588694, 0.16071220265270258, 0.16136250755718173, 0.08676133894300764, 0.12473502672733938, 0.07043982987485453, 0.14768680346498153, 0.02757734572668724, 0.28438605573003883, 0.27114325712104725, 0.25379471252474506, 0.33088605053127196, 0.2204265423319589, 0.29711954312798317, 0.3590182969427965, 0.19904743232285893, 0.21147257450852686, 0.3449898746313558, 0.372201775422338, 0.371608247217347, 0.10563928411874746, 0.03410039583675639, 0.20538826854745074, 0.14596574172341292, 0.08170919134289545, 0.18115278093160814, 0.26470141274284276, 0.16739138708762402, 0.20158952250253037, 0.12856903853299373, 0.12280404220336327, 0.13569777248657333, 0.1400298556730175, 0.13093647253567975, 0.15740856734503772, 0.12414349331257801, 0.11207741062146981, 0.13227965488832216, 0.406399631484477, 0.40578628359219315, 0.3930596159376679, 0.4350721412162126, 0.3986901779971682, 0.4137672754531958, 0.41944866189887153, 0.4136264679412902, 0.4000325355213987, 0.12252983368615278, 0.11954054135962977, 0.128444139140949, 0.11799873720327592, 0.11184151521840213, 0.12835886901298688, 0.11942195615832185, 0.14075012065020986, 0.11852258145356698, 0.2449633707477188, 0.25764954197270307, 0.25374219223314476, 0.21101498075176983, 0.26665137037651476, 0.18553125186512998, 0.311304895082793, 0.20069524400475025, 0.25588642159979924, 0.2755966059258198, 0.29956802156419615, 0.2918383805114708, 0.28881312119012925, 0.27324397886827345, 0.2798538347952012, 0.280064301082089, 0.28451480439595445, 0.28494237734584127, 0.21572971930316975, 0.22095975302721427, 0.2462090836284465, 0.22402726683326157, 0.1751176025448432, 0.22995595220238652, 0.23067946770170678, 0.22460440243823543, 0.22606287292006388, 0.20351961043384326, 0.20701925700268353, 0.20786603476961063, 0.2620625799296866, 0.21518915226522106, 0.2101165806753077, 0.21322911523158528, 0.19938019311395505, 0.21236938432908314, 0.19097523812031203, 0.1833598412615619, 0.2073227151696856, 0.30286806577751346, 0.1908493529533497, 0.18391933221634282, 0.24289400590437027, 0.20389569907499672, 0.19108009248281943, 0.1979968308575598, 0.5889050448450379, 0.11324869878000832, 0.17258574244929403, 0.19896198696035194, 0.631437416251128, 0.18760746707176257, 0.1601403426335768, 0.6124510526726834, 0.5968216582835969, 0.21043091263508795, 0.1269471653776213, 0.2074511197931671, 0.5522742147792383, 0.5309442369637221, 0.11086948060145385, 0.10496611112662724, 0.5345415164689037, 0.18001974170349877, 0.20253498108834334, 0.18834405113565855, 0.18794902824038795, 0.20554054690741308, 0.1770634389277127, 0.1998522798112331, 0.22468096765653167, 0.17999800752267037, 0.0810260503258069, 0.08194852422678545, 0.09586008176079008, 0.08911067157998565, 0.08329382907457439, 0.09333150064378548, 0.10993985490147129, 0.0986589526016507, 0.08320166813463714]}, "mutation_prompt": null}
{"id": "2b074a00-a69a-47dc-838e-eb149370efa1", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "1c4ea1ed-4d38-4b68-8576-f6e091cf827f", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.15:  # Reduced mutation probability\n                    mutant = best + np.random.normal(0, 0.4, self.dim)  # Slightly narrower distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.985  # Slightly faster cooling\n\n        return best", "name": "HybridDE_SA", "description": "Enhance convergence by refining mutation probability and incorporating a more dynamic learning factor.", "configspace": "", "generation": 62, "fitness": 0.27563747015878914, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4496920548340839, 0.43214630855740355, 0.4288519439786491, 0.435650501560537, 0.45178739788021216, 0.4356675014277285, 0.44084718976867787, 0.45852210687843775, 0.4423356113705371, 0.5455282804182349, 0.476154282326712, 0.47194325704222806, 0.5562982753493093, 0.49419908892970377, 0.47238113071801946, 0.5020278724698717, 0.4233855428046024, 0.545270052827203, 0.12263922397948845, 0.14014117452161445, 0.14806879116432625, 0.11900609181913446, 0.12066118604530307, 0.14033358240094163, 0.13056507308679743, 0.13811320179572262, 0.14948133813592945, 0.11854596158593578, 0.10363740352203221, 0.12106480679076626, 0.1186039933527322, 0.0980651781495342, 0.12112056381411862, 0.14840642229548917, 0.0998108428367479, 0.10093263546340114, 0.9655260995340998, 0.9684204831822614, 0.9582237384836949, 0.9600991774385456, 0.9488337606742323, 0.9576100249206809, 0.9729462659070384, 0.9530634032184753, 0.9762050847112169, 0.3031738706637198, 0.30185134032061567, 0.3121243064652055, 0.2869016146995872, 0.31557210755963727, 0.3253166953456157, 0.3052711925447823, 0.3056401614335641, 0.31580893646672414, 0.3418090386633067, 0.548018431425598, 0.33989756715203434, 0.5493514556995251, 0.5160798128828643, 0.3170786148041881, 0.32543722116326246, 0.42222169064732284, 0.3833720873644014, 0.18345236261447473, 0.18988490467749464, 0.12356793655500165, 0.12829266493870495, 0.1722644316478933, 0.17648965977919928, 0.18687632010798372, 0.19335810836943101, 0.20801266230041526, 0.15565252616578396, 0.11427675851438657, 0.16924947761926157, 0.17518235547588734, 0.17538185065792566, 0.1817549440113917, 0.1708923431784226, 0.1704185417222448, 0.17622087210280135, 0.06731377528293647, 0.15559030335544288, 0.27972357363214273, 0.04187828571004504, 0.23787655550287012, 0.0981325717700402, 0.24027645064547798, 0.0926694784556874, 0.29187042271675046, 0.352964871102587, 0.38788732552788363, 0.37948563678539027, 0.36269915759068827, 0.2638855715018956, 0.358380196688071, 0.38399304218401065, 0.41034167709512315, 0.29117752474050396, 0.13143966100597393, 0.045178649722732334, 0.20400842505259675, 0.17754017782620035, 0.08548327504215936, 0.10810810888524625, 0.1682125598253359, 0.07609397176841648, 0.1211967723865609, 0.13554440009307478, 0.15861244018919896, 0.15087218681364034, 0.11692260582840175, 0.14963803253759345, 0.10868913922971712, 0.13860101911912714, 0.14441743220366365, 0.15273918869627634, 0.3965804518018945, 0.40233983918320415, 0.4050337406195714, 0.3950871043525507, 0.39301019993713093, 0.40087399779870614, 0.4047412569662552, 0.3908238260456951, 0.4032763024952224, 0.11979024864571874, 0.11218552316974495, 0.12003373259313088, 0.20823527229609962, 0.10251502741216167, 0.14664326204835976, 0.09706653128701093, 0.1159855343333327, 0.12442801196142206, 0.14770548303217534, 0.2444699143173238, 0.26664828286823494, 0.2572094606227412, 0.2801337567302201, 0.27439282038591084, 0.27987949464800554, 0.21539367970499002, 0.23343555048111053, 0.2671638026180375, 0.2766702484604865, 0.28283106410578074, 0.2848223868272296, 0.26939448618030426, 0.2832665675910787, 0.2756073469291812, 0.2872193610025858, 0.3033116870958463, 0.23325634801873685, 0.23137621693222654, 0.231506123538057, 0.21861990558887678, 0.2341579810859563, 0.22218801033518243, 0.20700171744702844, 0.22709053537052493, 0.21973284186782072, 0.20521953511812552, 0.20837940085075501, 0.22120293373102196, 0.22412739796671532, 0.21852767373113713, 0.2127946143839189, 0.22434793396200559, 0.19336677112997647, 0.24366521184998968, 0.19927039068195995, 0.20782352363675594, 0.2118637867037576, 0.2692306245191448, 0.26904179406873285, 0.21511247244915943, 0.20331968418750013, 0.2203376048171134, 0.20630594125251578, 0.1783298649955043, 0.2082387274537827, 0.11310723569720016, 0.17229198447629535, 0.20010300247473167, 0.19744557296236154, 0.1871678706612382, 0.185809390375681, 0.6062958026469295, 0.5955269555469108, 0.21002498207941067, 0.524078679485931, 0.12641862120143965, 0.5805985841108168, 0.5107778881050199, 0.21046191883231624, 0.2118117042911969, 0.5494618835498596, 0.1787687539003815, 0.18154524752372403, 0.19179323618200095, 0.20056657521930976, 0.182056351931571, 0.18861802746293954, 0.18805524437509413, 0.19051276298255282, 0.20710078584059466, 0.08690048641049375, 0.08899343526091574, 0.08778870647878156, 0.08600243993219925, 0.0923127783024924, 0.108999109295012, 0.0882073671882837, 0.08998690057010228, 0.08604920449568632]}, "mutation_prompt": null}
{"id": "cd0d6849-0d8f-4782-853f-188feff2fb5a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "f8b7d84f-c8ea-4fce-aa1a-a896804a37a7", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - (evaluations / self.budget)**2)  # Fine-tuned adaptive mutation scaling\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                adaptive_CR = self.CR * (1 - evaluations / self.budget)  # Dynamic crossover rate\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improve convergence by integrating a dynamic crossover rate and fine-tuning adaptive mutation scaling.", "configspace": "", "generation": 64, "fitness": 0.24303079392353502, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4091687384096979, 0.4397488624428869, 0.3982272353848836, 0.4415855923964276, 0.4309251728935799, 0.4008144844268292, 0.41284192634054884, 0.4100859975725305, 0.4257147355887446, 0.4399047900377514, 0.46371668447504233, 0.43754451526174565, 0.45073360319428823, 0.45002582156808035, 0.4676815058479693, 0.46454351110918546, 0.4615892924662147, 0.5116569913696307, 0.11535633389442101, 0.13835354426121593, 0.16852738726224292, 0.12445799127668256, 0.12694693310800753, 0.1207073460225605, 0.1275370934982335, 0.14645862080912064, 0.14068784301853743, 0.13206075255880478, 0.1219165286369207, 0.13018312183587155, 0.13810697359531354, 0.11280979890211584, 0.14926849462951564, 0.10523701777987082, 0.12805676481865758, 0.09462331695025838, 0.9585373399554827, 0.96580852940643, 0.9449809557109584, 0.9516943491935375, 0.9399802466752332, 0.9180098188693718, 0.9473838734418362, 0.9570014848686943, 0.9672081966899164, 0.28268962452950097, 0.2733151246453457, 0.29906217164194737, 0.26408123913737636, 0.28465751186683186, 0.262871116674083, 0.27399249626578526, 0.2777255985273245, 0.27072598762540534, 0.26755654049466426, 0.2913325204152879, 0.28709361786695753, 0.4333720879187538, 0.26120082391001365, 0.2649984335697879, 0.3034382772365587, 0.2277624694601229, 0.28522115985324337, 0.18281293441644864, 0.165811422078314, 0.15533872813769045, 0.17461051775818182, 0.14596789253607056, 0.17646951433738722, 0.14275858839004774, 0.1915319288476378, 0.1934420636959795, 0.16060464817086217, 0.15257141362887872, 0.12454702461198885, 0.18181607224507734, 0.16543501765381718, 0.13875435835432404, 0.15821822882897452, 0.1607721241369392, 0.12761090371103523, 0.002671801818474928, 0.08474705544646932, 0.004216981835435174, 0.005747921813646695, 0.01309097042356877, 0.01578149909541149, 0.03926816008344791, 0.023759358682838183, 0.07529424521318129, 0.14176741380593083, 0.1293208987648723, 0.16365086888305436, 0.13128679307737168, 0.10637415169828601, 0.13852880316868654, 0.20688025476273808, 0.22488915506747675, 0.20635357438572743, 0.029603045236783698, 0.024085404572727342, 0.050103974911268945, 0.08686232408518157, 0.10574333765176924, 0.008534457557908937, 0.11371753337107415, 0.1347086724865767, 0.03210264769613791, 0.11596155725816026, 0.11108919814195983, 0.115541424084462, 0.08945221025443184, 0.10146875120786647, 0.12273217153907368, 0.09989410859130654, 0.10423023066042247, 0.09770406671392562, 0.3770581512067731, 0.38682840392571893, 0.4032755392103512, 0.36347045426423696, 0.38486150766036487, 0.4066762297029741, 0.37462237576728863, 0.4026045943908626, 0.3750331391958124, 0.12077615798962138, 0.1040452698882216, 0.11111334335524004, 0.15990530654833823, 0.0933837796533149, 0.11732184078290098, 0.09426470463645054, 0.12321285153959438, 0.12320850039814901, 0.17328089433546534, 0.24572275937306043, 0.21183517236461535, 0.2426477328591452, 0.2250007686989388, 0.22536759558820918, 0.23248053000864988, 0.26731957785947913, 0.16379037673307628, 0.26036847596867774, 0.27060517612409485, 0.26503838095265353, 0.25650284177406446, 0.19598767778751802, 0.29655541834949906, 0.2716102049577864, 0.28074563498051974, 0.2777157529707429, 0.19866576930863844, 0.20031519117537167, 0.2212943952896521, 0.21571953341573868, 0.19613914080872474, 0.22573499565144717, 0.21490812502926726, 0.20617996639443192, 0.22252095563232077, 0.22608536647165367, 0.21003359515669462, 0.18317811102487358, 0.22530285254650806, 0.19791710000291018, 0.2028959837511296, 0.21370280768514172, 0.2077424910224971, 0.21388169825885095, 0.20582833420100122, 0.22299411647453438, 0.2206821323036473, 0.2463574904093141, 0.24549577229269237, 0.1945564250695706, 0.21483350928159373, 0.19150726197073353, 0.21428245753835207, 0.19740117335981167, 0.16053142657013775, 0.15742395376565632, 0.5626828712124513, 0.19854042757380164, 0.17062109096239597, 0.18684334072300113, 0.18318698756309282, 0.5937894211819208, 0.5188583133139149, 0.20784949329673952, 0.12574159479317437, 0.5194084211223204, 0.5392891429405255, 0.45832431716060706, 0.10418024657976854, 0.1048278443740337, 0.3687234992500812, 0.18488414750413196, 0.18503806787092203, 0.20300020872930846, 0.19280643095156713, 0.1860075939226422, 0.1821415027430261, 0.17913158737674317, 0.18611534505205618, 0.1983344463747212, 0.08448458022724137, 0.08654281920223761, 0.08529086728393809, 0.08641117413382249, 0.08453143854967582, 0.0831436261179409, 0.08250396267269988, 0.08269463372149943, 0.08462746365410945]}, "mutation_prompt": null}
{"id": "a4355ca8-2445-44fa-aad5-5e6d7b799fa4", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                dynamic_CR = self.CR * (1 - evaluations / self.budget)  # Dynamic crossover rate\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce dynamic crossover rate adjustment to enhance diversity and convergence adaptability.", "configspace": "", "generation": 65, "fitness": 0.25210968643209497, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4381871265267059, 0.4084641688826183, 0.41284859092566595, 0.4273450374875061, 0.404464023280665, 0.44649042868098043, 0.39544223581788174, 0.43723943370287865, 0.4266545801602991, 0.5111719794638341, 0.4970848195704449, 0.5017277407952141, 0.48688882876535444, 0.4886046383002426, 0.4952666741070818, 0.5066391977603732, 0.5201762477633017, 0.5126964876502973, 0.11891684510245215, 0.144067715340657, 0.13089170178044807, 0.13524353232581576, 0.12045658883440125, 0.1308467562886424, 0.11626866825743964, 0.16048017392238123, 0.17105354570803977, 0.11302058910575286, 0.12119961114890121, 0.1157414047093347, 0.1700151265074915, 0.11923200194374639, 0.10543980495323335, 0.12786241010490595, 0.17440991011028895, 0.1378599903654908, 0.9595960511777079, 0.9711008324306926, 0.9451959451642586, 0.9528116417687839, 0.9524418983952566, 0.9007888202569457, 0.945909697881637, 0.9569740212665158, 0.9671777986374052, 0.28830145236190685, 0.30142931523494687, 0.26752900348162933, 0.2706768755386897, 0.2636792858057194, 0.2862774152282338, 0.2472353876598261, 0.2592385274007941, 0.26442071498494113, 0.3094826631259442, 0.307753106915848, 0.4480601564036124, 0.32028326676039665, 0.3092376117888953, 0.33453262593488375, 0.3205976317698267, 0.32007931087943997, 0.29932889089821224, 0.18904897741247206, 0.1887736005122329, 0.16798723326683462, 0.159744487917454, 0.15418046658710516, 0.14732280287411215, 0.14290880671152206, 0.17713184842967888, 0.1576621789307332, 0.13739149196852762, 0.15507329803706593, 0.1523207748335953, 0.17690758908906867, 0.15164646322838848, 0.176463401739415, 0.1696719749150547, 0.1756630317345338, 0.157567524515144, 9.999999999998899e-05, 0.05622408866382356, 0.011011104934824156, 0.032272584944423977, 0.0630045262485126, 0.06638552372387951, 0.13796233234965238, 0.043576897933905956, 0.06204602961803263, 0.22996657720210056, 0.15647412671474958, 0.13230952743456215, 0.1870255102324524, 0.17140114722921607, 0.1402742189407974, 0.18685395346483025, 0.15060249551496396, 0.16355234798100826, 0.07046189106589029, 0.027289027311773628, 0.09323111604427703, 0.08375238194659473, 0.0417629463551501, 0.11553766886275718, 0.1418244616798665, 0.08442864496868008, 0.11843923039683835, 0.10333057961448355, 0.12379329223487079, 0.12135937216502535, 0.09378413733085422, 0.09871465052949824, 0.1201905890056485, 0.12133402584156772, 0.10905197848706916, 0.13280589569962142, 0.4017690754743618, 0.3953334448722413, 0.38465749402952376, 0.37814844731377806, 0.38272992752940804, 0.3833390778033966, 0.38485699373905013, 0.3790847592914842, 0.3839860474342469, 0.10806291745953223, 0.10659030153620519, 0.10428581070431298, 0.13018845557726633, 0.1405211354041105, 0.1145678836588131, 0.1306520443556145, 0.12788645137695875, 0.13781988949637325, 0.24518167229014243, 0.23018014574607681, 0.17665085328870123, 0.23756960816327455, 0.20890368656752534, 0.15806801766189094, 0.22357337828420487, 0.2535098644179503, 0.219630066696188, 0.2703303052281296, 0.27891238868556656, 0.2978765580098366, 0.26813572926883067, 0.2721061129562894, 0.26059779877454836, 0.28265467640879116, 0.2834419836375852, 0.2834230863559205, 0.2010152927144323, 0.21211922025000218, 0.2220269217583417, 0.21371299295396928, 0.23032666487662457, 0.21842178609952756, 0.2270338891396263, 0.24564894767879142, 0.22403094666378698, 0.20797536513550452, 0.2091159950424839, 0.2146473485519279, 0.22395187992181487, 0.21823990121968373, 0.23460064680913284, 0.25329685663844415, 0.21021698421675128, 0.21368510745073255, 0.19798968793556582, 0.24629036671878957, 0.20621142328661035, 0.21047961720533725, 0.23266690499520037, 0.20903732269744002, 0.19260544938188318, 0.1997687223495861, 0.18631389843442403, 0.5306007321562316, 0.13562607479504896, 0.1895412596633822, 0.17102555428356558, 0.1982566279975173, 0.1713130218669805, 0.1861766090744128, 0.15829114324937987, 0.6257771727031557, 0.5181877009136204, 0.2087228471840925, 0.20223526357942945, 0.49908308408928437, 0.6081234912311502, 0.5172060929821578, 0.10418863207002704, 0.10483067120269174, 0.4784967702088262, 0.1930801373917237, 0.21302049181048, 0.20593889382235864, 0.18465326226324774, 0.191413475869054, 0.18554074747145122, 0.20956400589238577, 0.182988011874205, 0.18409764370380288, 0.09295209649543101, 0.07446652568589052, 0.09293816938166799, 0.09534416453915806, 0.07903272386978111, 0.08940557779364322, 0.0882888991584534, 0.07598834375273278, 0.0925007190026923]}, "mutation_prompt": null}
{"id": "e7c12a78-211c-4498-8935-919cd5caa7af", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.CR * (evaluations / self.budget)  # New CR adjustment\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Improve convergence by dynamically adjusting crossover rate based on iteration progress.", "configspace": "", "generation": 66, "fitness": 0.22271149045904068, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.16.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.39487683309098065, 0.35293458624556096, 0.3900408824716788, 0.38589570704206577, 0.39846396734609457, 0.37610429141420076, 0.38454426089895244, 0.37536536114143615, 0.4068882245129414, 0.42375466606962264, 0.43449829712833876, 0.34387016887231125, 0.41036782446528686, 0.4527408984120773, 0.449631060461251, 0.46371359102898047, 0.4437984674834409, 0.4610799955503787, 0.18203943915328413, 0.1734272418200986, 0.11789028457099171, 0.13065652833154395, 0.15904980209865038, 0.1159576263962987, 0.18939232754848045, 0.13392971830792688, 0.09805811011842558, 0.09769384662557024, 0.08988442561350585, 0.09498982805730194, 0.11769432524069667, 0.11577945259987976, 0.10918845452645998, 0.11862639880216852, 0.0990694987374392, 0.10085138547397687, 0.7946826180374671, 0.793461390737192, 0.764024474954825, 0.7907479698050228, 0.7298828519999183, 0.7851178934675113, 0.7236020345078894, 0.7182661134066366, 0.8082555514984965, 0.2489625288487698, 0.2531748544337231, 0.2216128550000912, 0.27729741135453323, 0.24375616630535057, 0.24871964589369644, 0.24330463713101314, 0.23714579927728774, 0.24957242976997274, 0.2832370446785083, 0.30636510287943297, 0.22292817055897363, 0.42582699031282834, 0.265644549942888, 0.259228979855634, 0.2814041463486957, 0.33300444029654985, 0.2699268725483459, 0.216564740694551, 0.11686940817626257, 0.128019019610346, 0.13767517583459898, 0.1353715427918729, 0.1202368657304771, 0.19716406741278547, 0.16716124990857484, 0.14449315557202136, 0.13035857702757803, 0.13698099813067988, 0.14053054071340343, 0.14275304898990193, 0.12440585818445471, 0.1538579601490936, 0.1474966589716321, 0.17094480621433417, 0.15307678392209545, 9.999999999998899e-05, 0.003951796174801903, 0.027489794126048905, 0.009951402864822767, 0.010974251338251473, 0.003861626137138807, 9.999999999998899e-05, 0.005969768025337552, 9.999999999998899e-05, 0.11017821337340283, 0.08318396970254016, 0.08343437187682434, 0.090802998101422, 0.0609049776121543, 0.051324380236441924, 0.13150511878774374, 0.14356331193508975, 0.11435508464082156, 0.037552045665694145, 0.033742876517093845, 0.10304933497795488, 0.13293240515865945, 0.06493941971377515, 0.08049808253863522, 0.06430587078026906, 0.07634793785366711, 0.09813131507924122, 0.10568619936964774, 0.059475435362484896, 0.09209740627155316, 0.09024121818103337, 0.08539800697637023, 0.11120054085402808, 0.08132388949135982, 0.07631144146166446, 0.10378192854723733, 0.33716598214477733, 0.35522374843010107, 0.3933547104183728, 0.3689199609698526, 0.34474728435087887, 0.3369847399187673, 0.36053560103574833, 0.3412488456100127, 0.3617555873755508, 0.1047237627307166, 0.10880945283040888, 0.08996503085530638, 0.12893348454382392, 0.11095127824046525, 0.1208493412071675, 0.08888347779677319, 0.110803207472846, 0.09787295876427993, 0.16766033082178533, 0.24752426789001625, 0.1722608375208261, 0.26603749251664977, 0.26799363698187817, 0.23835945875773978, 0.2699764732130405, 0.22934328299742035, 0.23417912793203044, 0.267298592527923, 0.2576966568228023, 0.26559461889366787, 0.19221529577485885, 0.23948032479571013, 0.2527319121786695, 0.250976400477408, 0.2895304944502787, 0.253971723843171, 0.19004930157078725, 0.1942894457821429, 0.2051426915222605, 0.17069474726312617, 0.1530196953952031, 0.1756935826673578, 0.2022213902095349, 0.20649153379386997, 0.19186605558883774, 0.20571037508426793, 0.1891564640992397, 0.18529156275415848, 0.23423281068391333, 0.18963276736357315, 0.18258544608308935, 0.21706762628758192, 0.20833030819286047, 0.2150171823708985, 0.1986149450612794, 0.2401536403245672, 0.19862564099583524, 0.192900319377454, 0.19418921695574476, 0.16584148965368273, 0.24326880300696885, 0.2055022535246792, 0.20360723446856832, 0.18748830714496822, 0.4935330629616478, 0.40672526883435955, 0.5043126190559576, 0.19119082123391584, 0.15703464262771016, 0.5361569312154927, 0.16849504279470506, 0.2014805382494752, 0.45020960144550193, 0.19411942712504526, 0.3519499592396189, 0.3925413308167245, 0.36095180257871184, 0.1378304275443747, 0.1398332854062604, 0.11613020811116026, 0.3968608572794172, 0.17884529062666787, 0.18033714878820628, 0.17028253814784855, 0.1894013770682652, 0.19075163412279283, 0.18652524458491304, 0.19026364453872835, 0.18169062283778392, 0.19470443141151694, 0.07571685628169178, 0.07009190032173251, 0.0797420623035161, 0.06920614694946603, 0.07776741018424504, 0.08168116503662604, 0.09320756394506047, 0.08008695299658153, 0.08015172289146344]}, "mutation_prompt": null}
{"id": "60acd723-f2f3-40f1-859a-82c52b7c788a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                mutation_probability = 0.18 + 0.02 * (evaluations / self.budget)  # Dynamic mutation probability\n                if np.random.rand() < mutation_probability:\n                    noise_scale = 0.5 * (1 - evaluations / self.budget)  # Dynamic noise scale\n                    mutant = best + np.random.normal(0, noise_scale, self.dim)\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Fine-tune mutation strategy by dynamically adjusting mutation probability and Gaussian noise based on search progress.", "configspace": "", "generation": 67, "fitness": 0.27218236000833684, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.43776197444346865, 0.45345160318470634, 0.4481217120449651, 0.4598641719778239, 0.44134404795185334, 0.440365933718427, 0.433457164498939, 0.4463055388679834, 0.41332022776904964, 0.34081371374435354, 0.4741829745830244, 0.4642051776671916, 0.3827553593309636, 0.4828285153225862, 0.41065678984202025, 0.5448154814509076, 0.34322776364630003, 0.50062469223246, 0.12180660538400645, 0.13259538111308844, 0.13828055442176068, 0.10087825690611263, 0.13943983628342704, 0.1278766858490915, 0.11306218845372151, 0.14231269502713928, 0.20106332074474076, 0.11030523717944019, 0.09507714203680884, 0.11173505588423616, 0.10819650681198523, 0.1255454318272039, 0.1251373831871686, 0.11991056456012916, 0.13607860581459408, 0.11570134308978308, 0.9674810742632928, 0.9851858085752183, 0.95410576022643, 0.9204990919048545, 0.956439849216132, 0.924853545776418, 0.9679428335734565, 0.9358514256822382, 0.9761223563830627, 0.29258279846176016, 0.283502178823686, 0.2920282680319647, 0.3177829786695122, 0.33458715069037126, 0.3030240604661505, 0.31826139346884075, 0.3138064801228022, 0.30491513642780654, 0.3672840533895978, 0.46261037135248284, 0.4413477377854902, 0.2699768329548511, 0.44679930993112316, 0.3091074061366559, 0.38532776417448855, 0.3062589995712327, 0.5412435936415336, 0.1714070560003338, 0.14492098231474615, 0.16334750681125787, 0.19496932569950842, 0.17595644746438466, 0.1893861833242244, 0.17401261048060368, 0.17282500608415707, 0.21094173172150998, 0.16655068572270448, 0.1693710761863616, 0.16107425190968827, 0.18498674520500114, 0.16107743304621858, 0.17832780123001102, 0.1799084024918347, 0.11710196670879691, 0.17848625894730508, 0.1292108998134538, 0.25372755013191617, 0.09866727919498097, 0.2812228502742873, 0.23604812656261343, 0.3822373050285758, 0.24003457181900434, 0.282454439468398, 0.2312331547109161, 0.2943030799154852, 0.31871120981317613, 0.3378132372579159, 0.12389517706868769, 0.26203040507983755, 0.23340996068489173, 0.28730899317765357, 0.38353078604826185, 0.25695064264095147, 0.06718980751550951, 0.045867982649857364, 0.12067101495216015, 0.18461366334326945, 0.12228086030663776, 0.07395029705198197, 0.1671270504748984, 0.10675117616349927, 0.1249582050425494, 0.1307385860076431, 0.13971700214304295, 0.14614851264502138, 0.13733398528916718, 0.13967973709784443, 0.13556647585925208, 0.13419320111732014, 0.13856135778342482, 0.1415406433549269, 0.4015401098714939, 0.4005187683845094, 0.39450678906981285, 0.4276234638983991, 0.39640146205531934, 0.4087854401957195, 0.39292163897637666, 0.4172702606144906, 0.3996010561758715, 0.12544546710884785, 0.20543515029794124, 0.10749236185141142, 0.12589313012393033, 0.1095822731351922, 0.11428958321333516, 0.12086026248782944, 0.14254786884609771, 0.1282687648318488, 0.24876779113067482, 0.2675151299977079, 0.188908663261789, 0.2340718232136021, 0.2572597803890988, 0.21783117892358073, 0.2891745304736232, 0.1837239023546734, 0.2640482499098791, 0.2898393359811591, 0.29632572470794505, 0.2974780586949567, 0.2960608036120115, 0.2851783672810988, 0.29075615705239977, 0.28467668522196876, 0.2896526878361626, 0.2915802973789927, 0.22981592200756584, 0.19984236232335606, 0.2401005448678214, 0.21204049933081792, 0.2218932559814497, 0.2189044027239756, 0.23037222282702108, 0.23932149710041262, 0.2255741382338623, 0.21600277060045403, 0.20703398934352846, 0.20228045455986643, 0.20417801054003026, 0.19628558420712672, 0.23667244288560918, 0.21049858816686107, 0.19690991345859088, 0.21633861474430183, 0.19887764408172404, 0.20315239755164372, 0.19097359770807842, 0.21561445773127141, 0.20557135729004594, 0.20859188182609245, 0.21054572116738313, 0.191613722530812, 0.193056000842048, 0.1972436427519687, 0.13473400022860027, 0.15077273956758763, 0.15790916621366125, 0.19890242139347925, 0.646430918412472, 0.19497599354075923, 0.18276448314751736, 0.6601703172551701, 0.5876889130271792, 0.20760874182244948, 0.12602676380020583, 0.1043584451995313, 0.6052942307437672, 0.5700235621688559, 0.5327248749470892, 0.10493743068845374, 0.5615484545508773, 0.18818304020013998, 0.18677181666688414, 0.19149647514234847, 0.1975775580302872, 0.1862447675905473, 0.19587560878716825, 0.19135252935662816, 0.1937253211540546, 0.18150967261468087, 0.08675192370245421, 0.08910271391662805, 0.09280627555055143, 0.09020904362348414, 0.08792494743019519, 0.08665098184075981, 0.079161394248487, 0.08641634201003778, 0.09525464189372235]}, "mutation_prompt": null}
{"id": "7582ae91-4957-4c47-88b3-5c7db41e65a9", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "f6d1e48f-992c-4e39-9a32-f07c4947563e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "e0bf9a9e-7053-48c6-a230-7a06ea544c9e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "bd10e2e8-3024-4647-b04c-fd6fe0300a4f", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.15 + 0.03 * (evaluations / self.budget):  # Adaptive mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                adaptive_CR = self.CR * (1 - evaluations / (2 * self.budget))  # Adaptive crossover rate\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce an adaptive crossover rate and enhanced probability scaling for mutation selection.", "configspace": "", "generation": 71, "fitness": 0.2582382861742712, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.42002780380211013, 0.4364740801703417, 0.42076922984512044, 0.42591825421913676, 0.41381512329176917, 0.41615197548483307, 0.4276658928648729, 0.4257594373215605, 0.4211492017908096, 0.5360650452391218, 0.4894260447110904, 0.5112278677215092, 0.5353036727820762, 0.544400859220673, 0.5220336900657736, 0.5087627822208427, 0.5196100549398832, 0.5242324087633088, 0.1160509148304234, 0.15857097653621732, 0.134543995010184, 0.12906857060577603, 0.16845319928283553, 0.1454754236718684, 0.19287350627452804, 0.131709758300531, 0.12056558226322045, 0.13142932045218547, 0.10922157015801348, 0.12075153161128493, 0.11934584831666484, 0.09261932447508137, 0.11402118453186594, 0.11670902687647611, 0.10413618310736006, 0.12551074584754462, 0.9305994671480717, 0.9684198564663451, 0.9310410053119546, 0.9186947207084764, 0.9220919152306066, 0.9565520155043873, 0.9695041232508969, 0.9733897976563337, 0.9758822949590633, 0.2995229941699903, 0.31801879629609553, 0.2719287326025912, 0.2891261208767063, 0.28255500660181454, 0.3220502988768964, 0.282642942881316, 0.314684663878698, 0.30766705350951407, 0.36328926570362396, 0.6502700338921247, 0.3006161823346568, 0.2777073304418979, 0.31472616555402955, 0.4310288012020159, 0.30811153955823967, 0.27740546182588555, 0.28233116558090166, 0.18755589090591773, 0.16042260619392978, 0.1500495126597804, 0.12549436612032838, 0.21449952386206328, 0.16401121076486236, 0.1747990996786708, 0.17768105110541088, 0.15584710882934738, 0.21629866471391745, 0.1641221782308594, 0.15269547594548782, 0.16394735101269564, 0.17767924485317543, 0.20120344443068594, 0.16106660859207644, 0.0942483821581489, 0.16083197076848332, 0.09829771162834189, 0.07368440488314898, 0.1668868431621684, 0.07218695199147207, 0.10375845619617574, 0.08880494649261106, 0.06367194141546806, 0.12694994114656855, 0.14742988646741328, 0.26937919500894847, 0.23545979426693087, 0.20612382241636573, 0.2935228926624309, 0.18390001539181755, 0.1397769291527844, 0.18943258594247614, 0.2439444264686057, 0.28682651355840194, 0.07382591663306959, 0.04486968792591872, 0.1423810554852053, 0.05618919677328449, 0.0604165773495593, 0.09651107241092927, 0.08339171604758888, 0.10141571071503352, 0.11507526722293537, 0.11566044577658396, 0.12166614106245544, 0.1137788814900037, 0.11945152311679541, 0.11639161748657223, 0.12929781131126017, 0.10512608182811023, 0.09685256891103233, 0.09664973132027166, 0.3929600677692321, 0.3914800604027603, 0.39049941615530137, 0.3872266470848451, 0.39150687476558454, 0.3984915112884966, 0.38442138317234553, 0.3765867165755119, 0.3838165363009761, 0.12668070341180193, 0.11765902903934222, 0.10883382217098947, 0.1265956385138185, 0.08824141109178474, 0.11684663606924062, 0.1347435330416542, 0.1206933539662044, 0.12052142619344364, 0.242080101234859, 0.23025681647364415, 0.2424591420349258, 0.24608645114617844, 0.21681686088131225, 0.25487743586384193, 0.26084282942493986, 0.16996721557261552, 0.2376032431452917, 0.27305306950275976, 0.281284202135868, 0.2952840888388025, 0.2714868721889182, 0.26872142394754717, 0.27673398859066745, 0.2772934088854858, 0.28344637342042456, 0.2698141676911012, 0.21768397286138286, 0.2195282441261598, 0.2125050490292998, 0.21843653789748585, 0.17573893127684137, 0.22443207449689273, 0.2222879251702573, 0.2228071832837334, 0.21126206556321614, 0.22948783932825856, 0.19140995027020236, 0.17544748847906833, 0.2342565684049579, 0.2045723199163243, 0.23835145755657927, 0.1914633588510416, 0.2030579112901444, 0.212648647439741, 0.19589016299195083, 0.23043604549530472, 0.1924448784108882, 0.24806183134923243, 0.23938438237940707, 0.19096030144111797, 0.2100101377810767, 0.25348320672611613, 0.18730329164169202, 0.14389831750704385, 0.589167228450961, 0.11286814897547814, 0.1714872658783172, 0.19815379734385852, 0.5562154591327247, 0.18697937544170828, 0.1855580848256384, 0.5791344191765466, 0.5294106789733014, 0.2087615887482881, 0.1639011754084797, 0.43172830893503134, 0.5160261350941531, 0.14956198709435375, 0.20965138020009977, 0.21139247123863858, 0.2049964709935963, 0.19144937139194118, 0.18268713341026066, 0.18642321140677498, 0.20827442277928765, 0.2061722377951195, 0.1824586048381922, 0.18477971797796366, 0.1848683567478423, 0.17648688764851428, 0.0813739656487773, 0.08697471379290966, 0.08659591822550572, 0.09074128431710693, 0.08981629310536787, 0.07762615917635285, 0.08470550214139183, 0.09024211927223691, 0.07848760852331704]}, "mutation_prompt": null}
{"id": "5fb2178f-4e55-4a60-91bd-04d2bb2ecb89", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.CR * (0.5 + 0.5 * np.sin(np.pi * evaluations / self.budget))\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introducing a dynamic crossover rate to enhance diversity and adapt to the search process.", "configspace": "", "generation": 72, "fitness": 0.2643494715035833, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.442590212423001, 0.4182954337097683, 0.4223581251456411, 0.43821053834656387, 0.405082544497417, 0.41846711580238993, 0.42124789035798216, 0.4066533811760883, 0.3833361818170742, 0.539216746652564, 0.3862135934535338, 0.5034990286828034, 0.4130263439377917, 0.4496570395797207, 0.4962893013118054, 0.4458335382359748, 0.437161881639038, 0.38424137730478525, 0.12341118143001639, 0.12796319931078692, 0.12515133482589047, 0.11826788320497139, 0.1378701289052966, 0.1339475059125078, 0.12870714767258928, 0.13683431416063685, 0.12701426631526536, 0.1349559465707615, 0.11789050248060051, 0.1256220745024964, 0.12166090080019476, 0.10014268116385516, 0.100663684061712, 0.11876862243081143, 0.11586756301605239, 0.14492490252700918, 0.9581305061211878, 0.9109665482564592, 0.9331593764279172, 0.9259179905242428, 0.9330308789456679, 0.8886167362575349, 0.9321734576138903, 0.9260939431633084, 0.9342290736655533, 0.3051544206359107, 0.2544177407707777, 0.2914351373838826, 0.34819109629141043, 0.322313210671033, 0.31205019187820515, 0.29930740503483233, 0.2798896771863789, 0.30196335814559416, 0.3508394222698962, 0.3140301612066745, 0.43448347877775007, 0.31152351112509, 0.4822700788895936, 0.295745228634567, 0.41434700397644364, 0.3067996467700176, 0.2865344852551581, 0.22261528836823086, 0.13001115799742313, 0.16039602128491992, 0.17286160124864858, 0.16464953115979153, 0.17704954285227192, 0.16738348611433318, 0.2028389814762802, 0.16403766794942987, 0.16461299431826226, 0.171537200805985, 0.16281081714095103, 0.1785218519657974, 0.1603019751947855, 0.15510448644827013, 0.1787508477776102, 0.18550742750753935, 0.168718202170406, 0.14513951792918434, 0.007718469519649052, 0.11542668484929908, 0.12472455177256614, 0.06283664309785231, 0.05351382166220919, 0.2174882124012364, 0.012167885268551282, 0.13078552251350006, 0.21374880954088926, 0.17069811456116135, 0.3455981238402276, 0.22725171391478272, 0.24269368187731177, 0.16220386637493334, 0.2572261284216545, 0.28914638072590493, 0.28122675639139927, 0.05173065183912151, 0.06654464814089589, 0.06413915603988785, 0.060659520032912195, 0.1243365067272505, 0.1009141585212956, 0.07493627036488337, 0.11646339654545368, 0.08317181323189615, 0.11044301435703308, 0.10759138594561213, 0.0949766205345437, 0.11222029919522225, 0.11422545395875205, 0.12263122593480946, 0.12593151835990213, 0.10934359330307908, 0.09680422655106269, 0.39204289835429174, 0.38613184844787485, 0.37017175635254773, 0.3927010442795892, 0.396580425713697, 0.3884224109486707, 0.40503055426982004, 0.40056928033710126, 0.38333513013286347, 0.11504119917506217, 0.11883874073700096, 0.12898543509362193, 0.10311671771358943, 0.11322759112592107, 0.1496509989393353, 0.10348538410420172, 0.1454526013256645, 0.11838764015090597, 0.26045605461423993, 0.16777089755122665, 0.152102950043284, 0.259142507092727, 0.25418275493271436, 0.2484141530006847, 0.2646763450312454, 0.24795252182693495, 0.23949240012421547, 0.27628673893301237, 0.27354588525006573, 0.2749604881142864, 0.26104134201672413, 0.2656717245065995, 0.26945567483384103, 0.2825590956495264, 0.2843322988842155, 0.27212349815928916, 0.21921286050327093, 0.21772277772685833, 0.2206938126675244, 0.22388998782421776, 0.2240934178640308, 0.22497561190514115, 0.22260728528725449, 0.20467321204769728, 0.22399171176506727, 0.20261906396879914, 0.2213927284931566, 0.2324305670590301, 0.2211895167034158, 0.21416639990640063, 0.19004756996389227, 0.20861193240214448, 0.23324581018430746, 0.21950054352434045, 0.20799307948443813, 0.27483800034147543, 0.19300750746782347, 0.20014212157201006, 0.23046135249517052, 0.20861821041785766, 0.1917532098830632, 0.18268908528556527, 0.19483865965018143, 0.16387127743881813, 0.5320829378922167, 0.5122084807432036, 0.18842754281866958, 0.1947002389239174, 0.17256123888894837, 0.5630859303905976, 0.61388621302701, 0.5750289432256945, 0.5409286688910647, 0.5243863087087054, 0.49047797915119895, 0.16102625006781002, 0.48929598377581873, 0.5560458919064188, 0.49885493925406876, 0.45765238697193056, 0.1121478184312158, 0.18059946289509665, 0.17875586916374464, 0.2004800794830961, 0.19329375599322052, 0.19332396340572944, 0.19301577548685134, 0.19779992871034702, 0.19209547368517255, 0.2120037819193441, 0.103424309776878, 0.1021839910884611, 0.08839315514447976, 0.08763787731709982, 0.08607287244713824, 0.09907999625111275, 0.09099254683759972, 0.08594447300882824, 0.10394917222051847]}, "mutation_prompt": null}
{"id": "0c4854a2-cfad-41e0-aab5-a70743781031", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "d0b20e84-ae51-4624-a809-d263f34c500b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "554ee990-f313-4c14-a03c-7072958c42c3", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "18ed2a64-807b-4528-a2a9-ec317520baca", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "9368a57b-938a-406f-9295-f8edcaf7774c", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "45bfdcad-22ef-4290-95c2-654c210ac3b2", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "7353cf3e-17df-4669-aab0-1554a2031989", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.initial_CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.initial_CR * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate to improve trial vector diversity and exploration.", "configspace": "", "generation": 79, "fitness": 0.25210968643209497, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4381871265267059, 0.4084641688826183, 0.41284859092566595, 0.4273450374875061, 0.404464023280665, 0.44649042868098043, 0.39544223581788174, 0.43723943370287865, 0.4266545801602991, 0.5111719794638341, 0.4970848195704449, 0.5017277407952141, 0.48688882876535444, 0.4886046383002426, 0.4952666741070818, 0.5066391977603732, 0.5201762477633017, 0.5126964876502973, 0.11891684510245215, 0.144067715340657, 0.13089170178044807, 0.13524353232581576, 0.12045658883440125, 0.1308467562886424, 0.11626866825743964, 0.16048017392238123, 0.17105354570803977, 0.11302058910575286, 0.12119961114890121, 0.1157414047093347, 0.1700151265074915, 0.11923200194374639, 0.10543980495323335, 0.12786241010490595, 0.17440991011028895, 0.1378599903654908, 0.9595960511777079, 0.9711008324306926, 0.9451959451642586, 0.9528116417687839, 0.9524418983952566, 0.9007888202569457, 0.945909697881637, 0.9569740212665158, 0.9671777986374052, 0.28830145236190685, 0.30142931523494687, 0.26752900348162933, 0.2706768755386897, 0.2636792858057194, 0.2862774152282338, 0.2472353876598261, 0.2592385274007941, 0.26442071498494113, 0.3094826631259442, 0.307753106915848, 0.4480601564036124, 0.32028326676039665, 0.3092376117888953, 0.33453262593488375, 0.3205976317698267, 0.32007931087943997, 0.29932889089821224, 0.18904897741247206, 0.1887736005122329, 0.16798723326683462, 0.159744487917454, 0.15418046658710516, 0.14732280287411215, 0.14290880671152206, 0.17713184842967888, 0.1576621789307332, 0.13739149196852762, 0.15507329803706593, 0.1523207748335953, 0.17690758908906867, 0.15164646322838848, 0.176463401739415, 0.1696719749150547, 0.1756630317345338, 0.157567524515144, 9.999999999998899e-05, 0.05622408866382356, 0.011011104934824156, 0.032272584944423977, 0.0630045262485126, 0.06638552372387951, 0.13796233234965238, 0.043576897933905956, 0.06204602961803263, 0.22996657720210056, 0.15647412671474958, 0.13230952743456215, 0.1870255102324524, 0.17140114722921607, 0.1402742189407974, 0.18685395346483025, 0.15060249551496396, 0.16355234798100826, 0.07046189106589029, 0.027289027311773628, 0.09323111604427703, 0.08375238194659473, 0.0417629463551501, 0.11553766886275718, 0.1418244616798665, 0.08442864496868008, 0.11843923039683835, 0.10333057961448355, 0.12379329223487079, 0.12135937216502535, 0.09378413733085422, 0.09871465052949824, 0.1201905890056485, 0.12133402584156772, 0.10905197848706916, 0.13280589569962142, 0.4017690754743618, 0.3953334448722413, 0.38465749402952376, 0.37814844731377806, 0.38272992752940804, 0.3833390778033966, 0.38485699373905013, 0.3790847592914842, 0.3839860474342469, 0.10806291745953223, 0.10659030153620519, 0.10428581070431298, 0.13018845557726633, 0.1405211354041105, 0.1145678836588131, 0.1306520443556145, 0.12788645137695875, 0.13781988949637325, 0.24518167229014243, 0.23018014574607681, 0.17665085328870123, 0.23756960816327455, 0.20890368656752534, 0.15806801766189094, 0.22357337828420487, 0.2535098644179503, 0.219630066696188, 0.2703303052281296, 0.27891238868556656, 0.2978765580098366, 0.26813572926883067, 0.2721061129562894, 0.26059779877454836, 0.28265467640879116, 0.2834419836375852, 0.2834230863559205, 0.2010152927144323, 0.21211922025000218, 0.2220269217583417, 0.21371299295396928, 0.23032666487662457, 0.21842178609952756, 0.2270338891396263, 0.24564894767879142, 0.22403094666378698, 0.20797536513550452, 0.2091159950424839, 0.2146473485519279, 0.22395187992181487, 0.21823990121968373, 0.23460064680913284, 0.25329685663844415, 0.21021698421675128, 0.21368510745073255, 0.19798968793556582, 0.24629036671878957, 0.20621142328661035, 0.21047961720533725, 0.23266690499520037, 0.20903732269744002, 0.19260544938188318, 0.1997687223495861, 0.18631389843442403, 0.5306007321562316, 0.13562607479504896, 0.1895412596633822, 0.17102555428356558, 0.1982566279975173, 0.1713130218669805, 0.1861766090744128, 0.15829114324937987, 0.6257771727031557, 0.5181877009136204, 0.2087228471840925, 0.20223526357942945, 0.49908308408928437, 0.6081234912311502, 0.5172060929821578, 0.10418863207002704, 0.10483067120269174, 0.4784967702088262, 0.1930801373917237, 0.21302049181048, 0.20593889382235864, 0.18465326226324774, 0.191413475869054, 0.18554074747145122, 0.20956400589238577, 0.182988011874205, 0.18409764370380288, 0.09295209649543101, 0.07446652568589052, 0.09293816938166799, 0.09534416453915806, 0.07903272386978111, 0.08940557779364322, 0.0882888991584534, 0.07598834375273278, 0.0925007190026923]}, "mutation_prompt": null}
{"id": "0a11b87b-3f54-4abb-b064-de52dd8d974a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                diversity = np.std(population, axis=0).mean()  # Calculate diversity\n                dynamic_CR = self.CR * (1 + (0.1 - diversity))  # Adjust CR based on diversity\n\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Dynamically adjust crossover rate based on diversity to enhance convergence speed.", "configspace": "", "generation": 80, "fitness": 0.17332569515790125, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.11.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.3670252869627423, 0.3348578967541549, 0.34466801994404794, 0.3809957763294114, 0.3688958959443015, 0.38346059208958827, 0.3516205127357602, 0.3620831783955777, 0.3339007652128263, 0.21725137395545102, 0.19756381797223632, 0.16438294270261633, 0.2524821578434089, 0.19238510879647164, 0.22092361051446419, 0.1993788899069897, 0.1983936743135808, 0.20103977479636415, 0.09722568931014319, 0.06527479179089135, 0.09506445420390863, 0.10304079978648972, 0.1040761764961271, 0.11239700672415909, 0.09876036064429494, 0.13799102351658699, 0.11499280059045158, 0.07396853908985646, 0.06218755614418492, 0.07574219447073993, 0.10922062826378154, 0.07711314091954191, 0.054517851150008734, 0.08743694095646393, 0.09809713047314983, 0.08585349969435685, 0.519654475421194, 0.3707191567293112, 0.5023902972448104, 0.4849151963684074, 0.4870357238892047, 0.516232239281859, 0.54118217514436, 0.47317260614172574, 0.4886139889758333, 0.2558808870603043, 0.20069809179717513, 0.1861993827797762, 0.24580151067696465, 0.20519332078071362, 0.20467089438309127, 0.20577625276027334, 0.16900219224946045, 0.260011214054752, 0.43329288579724434, 0.24579647206461241, 0.22415539622374203, 0.30094140592456076, 0.25795042379901545, 0.26083189794029304, 0.17861331995278218, 0.18003054052710066, 0.16056098557082532, 0.1669398915546595, 0.10084084015136541, 0.08804241393875023, 0.060909765460079535, 0.13019989408604282, 0.07769908818192928, 0.13641001928758945, 0.1410881497788805, 0.10937537290114341, 0.1232124142968194, 0.042727450764831865, 0.1020564479687861, 0.1093551365778892, 0.09373962686313553, 0.12220365422279134, 0.14792291753549236, 0.02395799202851412, 0.08497070331113521, 0.0037091099060662103, 9.999999999998899e-05, 0.0029157993067135957, 0.11229112281740561, 0.01435691953225271, 9.999999999998899e-05, 0.040622692130741433, 9.999999999998899e-05, 0.007848035086364336, 0.11237377115831093, 0.051523451599615355, 0.09257889102499961, 0.07813084201245679, 0.05862434301113206, 0.027123018402041454, 0.05435653058535883, 0.06072288676299997, 0.04353891408023314, 0.052828463561679695, 0.03963662924442146, 0.11766991388346981, 0.07686774224386062, 0.06287993135125836, 0.04314152413690353, 0.07856213846105908, 0.10947038822646804, 0.09556109444865646, 0.07889669165020408, 0.05266788779571818, 0.10710630620592798, 0.0782857658929188, 0.10430217778865303, 0.0991165066343952, 0.09982104052353791, 0.10153337371639659, 0.0713308976583037, 0.32387227030005994, 0.3591638042845786, 0.3433052768101176, 0.26173666636709714, 0.30511689632852224, 0.2852124475402408, 0.3676598670312705, 0.2696308776336208, 0.31707740839312215, 0.08285650549301138, 0.07507813394603036, 0.0841981618290567, 0.10112557779246922, 0.07021805306493611, 0.08501991665771924, 0.07272399884833725, 0.07667845837136722, 0.09966158161374206, 0.1642953419042995, 0.17489139424843192, 0.22006217126934047, 0.25623757942785375, 0.30792809206288974, 0.24148165249476483, 0.24300622170488995, 0.1464878631753409, 0.18771029972762054, 0.22112912418057817, 0.13546431366581624, 0.24641777671247045, 0.18847479231464714, 0.18848244075113418, 0.23587101085139905, 0.2419844875631374, 0.2655727468087957, 0.23344830919528137, 0.1413722703847976, 0.17722723560958586, 0.20249634423452867, 0.18034927989823735, 0.15931324976450545, 0.13913851759915907, 0.19994658141032673, 0.20060522820809146, 0.15021103385415135, 0.22429896917681857, 0.16110528225282383, 0.1727593488572895, 0.20700277863215055, 0.17436691118147596, 0.16980285680301566, 0.1984686448164753, 0.1852181286379645, 0.17988447294032306, 0.16358157430328357, 0.16218465339532262, 0.18149643200733523, 0.19685864953249532, 0.1501888433304932, 0.16826297260619594, 0.16049241880491305, 0.17235792664548644, 0.15259257151547967, 0.11800954973903732, 0.1232051832318104, 0.15082022568581865, 0.44295170707635867, 0.1937177707131098, 0.388291736000437, 0.1385495543223233, 0.1644595163010385, 0.17592992515498207, 0.40975001157280455, 0.19373653115803535, 0.07305145748970154, 0.3857709589046766, 0.1436324642862713, 0.12838006709771888, 0.09772684166351686, 0.09546119539817033, 0.26205105092597647, 0.1671733609343321, 0.1773812616639785, 0.17393762847130823, 0.1847825001105735, 0.1931626026474822, 0.17251737284705615, 0.17111523810716645, 0.17548157746271464, 0.1827098578119778, 0.06824302053588505, 0.039423897223367255, 0.06932798706257948, 0.05996986074070432, 0.06774410980172818, 0.05563848540826222, 0.07378890643139535, 0.06962457486466245, 0.0640280958081143]}, "mutation_prompt": null}
{"id": "d25cd5dd-4224-4c51-9d2f-38cffffa134d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "0818f1ca-f7a3-40c4-80a1-c4f6fce6421b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.16:  # Fine-tuned mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.985  # Slightly adjusted temperature decay rate\n\n        return best", "name": "HybridDE_SA", "description": "Enhanced exploration and exploitation by fine-tuning mutation probability and temperature decay rate.", "configspace": "", "generation": 82, "fitness": 0.270874979928634, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.425808231233503, 0.44813325072268306, 0.4416752570795065, 0.44036522254566046, 0.4194271728076092, 0.419377994552419, 0.43297738462316415, 0.44199334692524517, 0.43563171925619393, 0.4004232510870531, 0.36918680989318087, 0.48351202116879677, 0.3937580363547605, 0.4552076456830798, 0.4229762755109747, 0.5427877259046757, 0.42597112192198916, 0.41259520843097974, 0.13042668748688135, 0.11904563246894251, 0.10618956670700286, 0.14331148255610082, 0.12787968103360214, 0.12741302716092995, 0.11382498681029085, 0.15409930121287252, 0.13738592972110275, 0.1274442680328438, 0.11505810472684275, 0.10641996626372618, 0.11467878654795471, 0.10658977303407413, 0.09654160794846411, 0.11655628950813857, 0.09220154585793994, 0.10037461677895076, 0.9494416884123672, 0.9684198564663451, 0.9681313147906542, 0.9504912083794255, 0.9429377936948943, 0.9391954446195157, 0.9719454384297954, 0.9763569441897001, 0.9761240619559206, 0.3433848462026783, 0.30362225870893034, 0.30421243503499895, 0.33757866813723025, 0.32410797937628244, 0.32283715765566345, 0.2984763374126681, 0.29481734047065233, 0.3207942852399669, 0.33815181028124375, 0.34848370965297926, 0.35517056275115044, 0.3770710915520632, 0.3163306278532868, 0.44079345344864374, 0.31565387880442364, 0.4100772776072583, 0.43671460363175807, 0.1808032386685492, 0.21721166003694903, 0.1937455423909783, 0.1237801799005328, 0.16889408988554222, 0.18268208044309842, 0.14074783458027595, 0.19765197825894854, 0.15873167658828857, 0.17853537940360165, 0.11493723799653122, 0.15316605077005896, 0.1745084249576283, 0.1809755302423791, 0.26217890077398764, 0.20542601294240892, 0.13822645021063562, 0.19265294820454715, 0.30619331265609884, 0.19469157163664486, 0.08550217159301066, 0.1616510783179982, 0.16829998072229846, 0.12100348426740404, 0.38770942220406224, 0.19174659155355245, 0.1878297749984148, 0.30275179225803517, 0.3762694003791125, 0.30627811882855216, 0.23766922119859768, 0.1965327188980277, 0.2524263065482242, 0.34060497663053313, 0.26409456934057074, 0.30922736355892944, 0.10354056977078685, 0.08162527259276098, 0.20356359078643926, 0.18612832599962525, 0.15543396288650857, 0.2029107080064213, 0.1356536569207547, 0.08668847033254024, 0.05810139509781653, 0.1380743504918539, 0.13889292898841954, 0.13317923162555945, 0.14059500190209073, 0.1518237598751564, 0.12695074589111532, 0.10441906954559521, 0.11922801621013002, 0.12944874828273856, 0.39020179408512345, 0.4093925717597351, 0.40364446806950105, 0.39059162608700526, 0.4058550980085682, 0.3889940796545185, 0.3868269945799272, 0.3904426954321474, 0.38385408891053285, 0.11350296545711136, 0.11304687190274487, 0.1093738841247448, 0.1429604234172155, 0.12740190747229574, 0.09889315094744089, 0.12029480674585924, 0.10847168391958761, 0.11702106285279024, 0.2854834361956139, 0.2459731499092812, 0.22729463402270467, 0.26260460435987887, 0.22464603046885112, 0.25827502364249744, 0.297740982641424, 0.26822663570729577, 0.2881851087730968, 0.2616084855639891, 0.28120165380467577, 0.2952331549330923, 0.28493109843931086, 0.2797478817339354, 0.26287205255850554, 0.2966325846453408, 0.2766997835626177, 0.29101406158881915, 0.24092833239775513, 0.23332890220405067, 0.2162563285747483, 0.21495385220445606, 0.22195868504690353, 0.2201620466977272, 0.237364646539157, 0.2147182495425014, 0.24805632691429047, 0.22302921373422424, 0.21213798507305404, 0.19738645929795873, 0.21879212413964966, 0.21832210988714984, 0.21959109997577286, 0.2359904380710648, 0.199290150306618, 0.20765646866160636, 0.19545752722149923, 0.20679041123502473, 0.26665742308938656, 0.2885384502327769, 0.1954679880199256, 0.20748785438030126, 0.1813791817301702, 0.1916932156447596, 0.28320148661064803, 0.16939168760001866, 0.12654916347984324, 0.15328283653032337, 0.608378530373316, 0.19934427437201796, 0.5937938273435166, 0.18752650828870232, 0.18257641502413158, 0.640057844051711, 0.5753111233467314, 0.20999464051083083, 0.12478931177061992, 0.20614205786020967, 0.5962210841668605, 0.1474283562090113, 0.21016895762944698, 0.21045873161806183, 0.5359927712136536, 0.180050865767028, 0.19052341850254195, 0.20320232702104835, 0.18946077435654352, 0.22711614398040303, 0.20066622715163807, 0.2273064081213101, 0.18785424403095574, 0.19234134704580286, 0.08662294347018196, 0.09428727349545862, 0.09347992522240367, 0.11549082386965015, 0.08436594226194827, 0.08426148260367738, 0.08022954207475963, 0.08964418728210743, 0.08878029215755867]}, "mutation_prompt": null}
{"id": "df6d55db-b558-4f9f-879f-28791163dc8f", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "f11afe61-ce85-4771-817f-fabb67ebcfd6", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "0a299f64-a448-4ebb-b980-3418b2cd1eb6", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                dynamic_CR = self.CR * (0.5 + 0.5 * evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate to enhance diversity and exploration while maintaining convergence speed.", "configspace": "", "generation": 85, "fitness": 0.259041589608972, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.42316785018451586, 0.41000759925988317, 0.44093063867847526, 0.4420971264996586, 0.4220777845777709, 0.43563324113314605, 0.4124845460017105, 0.42927871789532923, 0.4143033755497175, 0.5132903149433352, 0.4850923738575882, 0.5141790126550404, 0.47214908943412526, 0.5132667559734481, 0.5277832696869287, 0.4742120870821307, 0.5057193059599843, 0.5224124575794458, 0.1295755028079808, 0.1383380497794151, 0.12750089334372527, 0.1471203960041988, 0.13130492856904608, 0.1208055582257499, 0.12147844206240466, 0.1443790707372551, 0.1890442736936968, 0.09947392763220819, 0.10659558463918672, 0.10562533300591037, 0.1402406451344963, 0.11237853587437219, 0.1297417909944023, 0.11882046006065705, 0.12101008128973423, 0.09946265682365207, 0.9581619416003896, 0.9102362988977493, 0.9018248089197848, 0.9242775953211774, 0.9347183047983316, 0.9132051537083972, 0.9511719837289823, 0.88750672619201, 0.8415181905299044, 0.3016407611885442, 0.2682562985230593, 0.301608688675428, 0.2886974263255605, 0.28344210450545415, 0.2876872946772865, 0.2844860331507205, 0.28526907867523355, 0.3184478475935688, 0.32126078113700063, 0.4223005441341757, 0.26805758113427924, 0.31400139459889664, 0.3015817386540053, 0.31930273175533286, 0.26794322509929, 0.30172179302483104, 0.31539722558534633, 0.1809925698474788, 0.13965103400615264, 0.1655555690438023, 0.14882314677050257, 0.19917031354051729, 0.17112621934046368, 0.16383182417378117, 0.16365291531485604, 0.16682872374523305, 0.14930383811901615, 0.12925062337959747, 0.1215516997518371, 0.17059784746389994, 0.16904275536051538, 0.1727355514789558, 0.18407804381426762, 0.16497810776826605, 0.14933740735167778, 0.05032260135635569, 9.999999999998899e-05, 0.029523916909934833, 0.05551962252077469, 0.04378040320869059, 0.03932113524105263, 0.027385243846164253, 0.03379544054931227, 0.15749287653507982, 0.1993091725246814, 0.16278906663093207, 0.14234175923353665, 0.10430995840101076, 0.13111365260596763, 0.12334458781897029, 0.1837221852732499, 0.19573148783266192, 0.10414715744380132, 0.17183646471097558, 0.03864147445159272, 0.09470734203336562, 0.05592502182424908, 0.04801207596815349, 0.10814624358328184, 0.15185624119144725, 0.06543732326357099, 0.06061276000331095, 0.09732581332203749, 0.08303926808018935, 0.1306485704138708, 0.08621314493587595, 0.12118475383037153, 0.12173270183956797, 0.10772868843834604, 0.09673034518234414, 0.11044438871877793, 0.3814073219604942, 0.37129414893480894, 0.3841983973149792, 0.3956773714774334, 0.3598922913021825, 0.38369672107571584, 0.3799007763938441, 0.39120368133603867, 0.3838330385635017, 0.10984545590436978, 0.10015582144386048, 0.1191417875306886, 0.11510844612467319, 0.12472620737539364, 0.1231330910323506, 0.10715520125670008, 0.11908017137282789, 0.17862201023195867, 0.25664551791063095, 0.25791003367061593, 0.24168351894969198, 0.2788143316806895, 0.26309976594418905, 0.2503996021036121, 0.24917782915814246, 0.2043076608163643, 0.2163269795529824, 0.27173716820278637, 0.2729873185315912, 0.2758544133570119, 0.2657662769167196, 0.2617985931588285, 0.2722371584282146, 0.27102993202950487, 0.2717006837479501, 0.2813675843082639, 0.20021930028786006, 0.20486938446493375, 0.22297801507893023, 0.21472672237823032, 0.18751665352115732, 0.22343372303435038, 0.20933240930201102, 0.22183020442210344, 0.21826773503670427, 0.20680146613088235, 0.19609746165681652, 0.23825662883201237, 0.19695928722158174, 0.21501318453967344, 0.20480615309759476, 0.24036945625893658, 0.2207638646385781, 0.23090660179563005, 0.1920065395208247, 0.21060371994643434, 0.19011901739496684, 0.2811424132284287, 0.18883140511281382, 0.2703263539606724, 0.2111682821986417, 0.22264841632857224, 0.1970644961407213, 0.15085067647193096, 0.19786762717166917, 0.1578287078701911, 0.5793518517285963, 0.19562380751409159, 0.5632090119807186, 0.14066508749300943, 0.5824703553473296, 0.6654262244444701, 0.5438902119961193, 0.4996886527358132, 0.5184343232649771, 0.5504466917886053, 0.47707141364079264, 0.4967753616015903, 0.5206910126494164, 0.5260527597466687, 0.3380207084415521, 0.18866575576893352, 0.19078922428737954, 0.17964642769121497, 0.19186757853397463, 0.17755330403998038, 0.2057581423851561, 0.18847955965366936, 0.1968525579359045, 0.18829373001246164, 0.08461583050955557, 0.09595053194094894, 0.08145365226705303, 0.08998766476889342, 0.07660397272665975, 0.08374811269045435, 0.08569811439261699, 0.08982307114717536, 0.08537012450931236]}, "mutation_prompt": null}
{"id": "a9904515-1add-47cb-9cef-b5a177ce44c2", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "27695f37-9490-4bff-a307-07f2ff274f8b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18: \n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.CR * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce diversity by applying dynamic crossover rates and replace poor solutions with better alternatives.", "configspace": "", "generation": 87, "fitness": 0.25210968643209497, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4381871265267059, 0.4084641688826183, 0.41284859092566595, 0.4273450374875061, 0.404464023280665, 0.44649042868098043, 0.39544223581788174, 0.43723943370287865, 0.4266545801602991, 0.5111719794638341, 0.4970848195704449, 0.5017277407952141, 0.48688882876535444, 0.4886046383002426, 0.4952666741070818, 0.5066391977603732, 0.5201762477633017, 0.5126964876502973, 0.11891684510245215, 0.144067715340657, 0.13089170178044807, 0.13524353232581576, 0.12045658883440125, 0.1308467562886424, 0.11626866825743964, 0.16048017392238123, 0.17105354570803977, 0.11302058910575286, 0.12119961114890121, 0.1157414047093347, 0.1700151265074915, 0.11923200194374639, 0.10543980495323335, 0.12786241010490595, 0.17440991011028895, 0.1378599903654908, 0.9595960511777079, 0.9711008324306926, 0.9451959451642586, 0.9528116417687839, 0.9524418983952566, 0.9007888202569457, 0.945909697881637, 0.9569740212665158, 0.9671777986374052, 0.28830145236190685, 0.30142931523494687, 0.26752900348162933, 0.2706768755386897, 0.2636792858057194, 0.2862774152282338, 0.2472353876598261, 0.2592385274007941, 0.26442071498494113, 0.3094826631259442, 0.307753106915848, 0.4480601564036124, 0.32028326676039665, 0.3092376117888953, 0.33453262593488375, 0.3205976317698267, 0.32007931087943997, 0.29932889089821224, 0.18904897741247206, 0.1887736005122329, 0.16798723326683462, 0.159744487917454, 0.15418046658710516, 0.14732280287411215, 0.14290880671152206, 0.17713184842967888, 0.1576621789307332, 0.13739149196852762, 0.15507329803706593, 0.1523207748335953, 0.17690758908906867, 0.15164646322838848, 0.176463401739415, 0.1696719749150547, 0.1756630317345338, 0.157567524515144, 9.999999999998899e-05, 0.05622408866382356, 0.011011104934824156, 0.032272584944423977, 0.0630045262485126, 0.06638552372387951, 0.13796233234965238, 0.043576897933905956, 0.06204602961803263, 0.22996657720210056, 0.15647412671474958, 0.13230952743456215, 0.1870255102324524, 0.17140114722921607, 0.1402742189407974, 0.18685395346483025, 0.15060249551496396, 0.16355234798100826, 0.07046189106589029, 0.027289027311773628, 0.09323111604427703, 0.08375238194659473, 0.0417629463551501, 0.11553766886275718, 0.1418244616798665, 0.08442864496868008, 0.11843923039683835, 0.10333057961448355, 0.12379329223487079, 0.12135937216502535, 0.09378413733085422, 0.09871465052949824, 0.1201905890056485, 0.12133402584156772, 0.10905197848706916, 0.13280589569962142, 0.4017690754743618, 0.3953334448722413, 0.38465749402952376, 0.37814844731377806, 0.38272992752940804, 0.3833390778033966, 0.38485699373905013, 0.3790847592914842, 0.3839860474342469, 0.10806291745953223, 0.10659030153620519, 0.10428581070431298, 0.13018845557726633, 0.1405211354041105, 0.1145678836588131, 0.1306520443556145, 0.12788645137695875, 0.13781988949637325, 0.24518167229014243, 0.23018014574607681, 0.17665085328870123, 0.23756960816327455, 0.20890368656752534, 0.15806801766189094, 0.22357337828420487, 0.2535098644179503, 0.219630066696188, 0.2703303052281296, 0.27891238868556656, 0.2978765580098366, 0.26813572926883067, 0.2721061129562894, 0.26059779877454836, 0.28265467640879116, 0.2834419836375852, 0.2834230863559205, 0.2010152927144323, 0.21211922025000218, 0.2220269217583417, 0.21371299295396928, 0.23032666487662457, 0.21842178609952756, 0.2270338891396263, 0.24564894767879142, 0.22403094666378698, 0.20797536513550452, 0.2091159950424839, 0.2146473485519279, 0.22395187992181487, 0.21823990121968373, 0.23460064680913284, 0.25329685663844415, 0.21021698421675128, 0.21368510745073255, 0.19798968793556582, 0.24629036671878957, 0.20621142328661035, 0.21047961720533725, 0.23266690499520037, 0.20903732269744002, 0.19260544938188318, 0.1997687223495861, 0.18631389843442403, 0.5306007321562316, 0.13562607479504896, 0.1895412596633822, 0.17102555428356558, 0.1982566279975173, 0.1713130218669805, 0.1861766090744128, 0.15829114324937987, 0.6257771727031557, 0.5181877009136204, 0.2087228471840925, 0.20223526357942945, 0.49908308408928437, 0.6081234912311502, 0.5172060929821578, 0.10418863207002704, 0.10483067120269174, 0.4784967702088262, 0.1930801373917237, 0.21302049181048, 0.20593889382235864, 0.18465326226324774, 0.191413475869054, 0.18554074747145122, 0.20956400589238577, 0.182988011874205, 0.18409764370380288, 0.09295209649543101, 0.07446652568589052, 0.09293816938166799, 0.09534416453915806, 0.07903272386978111, 0.08940557779364322, 0.0882888991584534, 0.07598834375273278, 0.0925007190026923]}, "mutation_prompt": null}
{"id": "69ecf331-9778-470c-b231-87fc0f359664", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "e7d57bda-c71b-47a1-8f3e-b10ec07f5edb", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9  # Initial crossover rate\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                dynamic_CR = self.CR * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate to improve exploitation capabilities.", "configspace": "", "generation": 89, "fitness": 0.25210968643209497, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4381871265267059, 0.4084641688826183, 0.41284859092566595, 0.4273450374875061, 0.404464023280665, 0.44649042868098043, 0.39544223581788174, 0.43723943370287865, 0.4266545801602991, 0.5111719794638341, 0.4970848195704449, 0.5017277407952141, 0.48688882876535444, 0.4886046383002426, 0.4952666741070818, 0.5066391977603732, 0.5201762477633017, 0.5126964876502973, 0.11891684510245215, 0.144067715340657, 0.13089170178044807, 0.13524353232581576, 0.12045658883440125, 0.1308467562886424, 0.11626866825743964, 0.16048017392238123, 0.17105354570803977, 0.11302058910575286, 0.12119961114890121, 0.1157414047093347, 0.1700151265074915, 0.11923200194374639, 0.10543980495323335, 0.12786241010490595, 0.17440991011028895, 0.1378599903654908, 0.9595960511777079, 0.9711008324306926, 0.9451959451642586, 0.9528116417687839, 0.9524418983952566, 0.9007888202569457, 0.945909697881637, 0.9569740212665158, 0.9671777986374052, 0.28830145236190685, 0.30142931523494687, 0.26752900348162933, 0.2706768755386897, 0.2636792858057194, 0.2862774152282338, 0.2472353876598261, 0.2592385274007941, 0.26442071498494113, 0.3094826631259442, 0.307753106915848, 0.4480601564036124, 0.32028326676039665, 0.3092376117888953, 0.33453262593488375, 0.3205976317698267, 0.32007931087943997, 0.29932889089821224, 0.18904897741247206, 0.1887736005122329, 0.16798723326683462, 0.159744487917454, 0.15418046658710516, 0.14732280287411215, 0.14290880671152206, 0.17713184842967888, 0.1576621789307332, 0.13739149196852762, 0.15507329803706593, 0.1523207748335953, 0.17690758908906867, 0.15164646322838848, 0.176463401739415, 0.1696719749150547, 0.1756630317345338, 0.157567524515144, 9.999999999998899e-05, 0.05622408866382356, 0.011011104934824156, 0.032272584944423977, 0.0630045262485126, 0.06638552372387951, 0.13796233234965238, 0.043576897933905956, 0.06204602961803263, 0.22996657720210056, 0.15647412671474958, 0.13230952743456215, 0.1870255102324524, 0.17140114722921607, 0.1402742189407974, 0.18685395346483025, 0.15060249551496396, 0.16355234798100826, 0.07046189106589029, 0.027289027311773628, 0.09323111604427703, 0.08375238194659473, 0.0417629463551501, 0.11553766886275718, 0.1418244616798665, 0.08442864496868008, 0.11843923039683835, 0.10333057961448355, 0.12379329223487079, 0.12135937216502535, 0.09378413733085422, 0.09871465052949824, 0.1201905890056485, 0.12133402584156772, 0.10905197848706916, 0.13280589569962142, 0.4017690754743618, 0.3953334448722413, 0.38465749402952376, 0.37814844731377806, 0.38272992752940804, 0.3833390778033966, 0.38485699373905013, 0.3790847592914842, 0.3839860474342469, 0.10806291745953223, 0.10659030153620519, 0.10428581070431298, 0.13018845557726633, 0.1405211354041105, 0.1145678836588131, 0.1306520443556145, 0.12788645137695875, 0.13781988949637325, 0.24518167229014243, 0.23018014574607681, 0.17665085328870123, 0.23756960816327455, 0.20890368656752534, 0.15806801766189094, 0.22357337828420487, 0.2535098644179503, 0.219630066696188, 0.2703303052281296, 0.27891238868556656, 0.2978765580098366, 0.26813572926883067, 0.2721061129562894, 0.26059779877454836, 0.28265467640879116, 0.2834419836375852, 0.2834230863559205, 0.2010152927144323, 0.21211922025000218, 0.2220269217583417, 0.21371299295396928, 0.23032666487662457, 0.21842178609952756, 0.2270338891396263, 0.24564894767879142, 0.22403094666378698, 0.20797536513550452, 0.2091159950424839, 0.2146473485519279, 0.22395187992181487, 0.21823990121968373, 0.23460064680913284, 0.25329685663844415, 0.21021698421675128, 0.21368510745073255, 0.19798968793556582, 0.24629036671878957, 0.20621142328661035, 0.21047961720533725, 0.23266690499520037, 0.20903732269744002, 0.19260544938188318, 0.1997687223495861, 0.18631389843442403, 0.5306007321562316, 0.13562607479504896, 0.1895412596633822, 0.17102555428356558, 0.1982566279975173, 0.1713130218669805, 0.1861766090744128, 0.15829114324937987, 0.6257771727031557, 0.5181877009136204, 0.2087228471840925, 0.20223526357942945, 0.49908308408928437, 0.6081234912311502, 0.5172060929821578, 0.10418863207002704, 0.10483067120269174, 0.4784967702088262, 0.1930801373917237, 0.21302049181048, 0.20593889382235864, 0.18465326226324774, 0.191413475869054, 0.18554074747145122, 0.20956400589238577, 0.182988011874205, 0.18409764370380288, 0.09295209649543101, 0.07446652568589052, 0.09293816938166799, 0.09534416453915806, 0.07903272386978111, 0.08940557779364322, 0.0882888991584534, 0.07598834375273278, 0.0925007190026923]}, "mutation_prompt": null}
{"id": "cfa2db26-1a19-4d12-aa3e-a7c55d36fecb", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "65f2cccb-102e-4b3a-b631-2410c80b3dbc", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            dynamic_CR = self.CR * (0.5 + 0.5 * np.sin(evaluations / self.budget * np.pi))\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Incorporate dynamic crossover probability and adaptive trial replacement to enhance convergence speed while maintaining overall stability.", "configspace": "", "generation": 91, "fitness": 0.2653340034449014, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4274610138681184, 0.3990854234402348, 0.45188132923137714, 0.4363295599706354, 0.4332581073029561, 0.42412636475353116, 0.40128405961174807, 0.41589119018830945, 0.402064265224941, 0.41189968716322023, 0.532786248188343, 0.5086411849979513, 0.48168880607561804, 0.48967615218255234, 0.4772217904921545, 0.3976466497038119, 0.4962108234954784, 0.5472370793814871, 0.13827423558468477, 0.12603444812064535, 0.1292992840706425, 0.13551804059890304, 0.11270250535041615, 0.18115030576145041, 0.12007445249963344, 0.13428818387097674, 0.14195785004096506, 0.13520184145986291, 0.10245170545261717, 0.10171430661044123, 0.12765122592672618, 0.11025675696939252, 0.09597412716530385, 0.11723474961848168, 0.10125423042839388, 0.12714261577779784, 0.9581305061211878, 0.9170191747197382, 0.9106447809435566, 0.9259179905242428, 0.9209971820080576, 0.9012140353218754, 0.9315671676178211, 0.9260939431633084, 0.9342290736655533, 0.30835868059244753, 0.26333142425434, 0.297517020753589, 0.3327177526910934, 0.2671847601831381, 0.298131516350838, 0.2975741349142229, 0.2640282928329659, 0.2918056869066028, 0.37654468416567977, 0.40712756037912756, 0.3923106476467447, 0.39154420017381664, 0.34307571916881374, 0.30293487774312367, 0.30859082061383847, 0.301734662562815, 0.2903201526131002, 0.2123887289195272, 0.20776314012005703, 0.20268787982865777, 0.17530314983354822, 0.11473056985687602, 0.1836765079010947, 0.16124284696980418, 0.16332611928553797, 0.16621979760344907, 0.16045899096558747, 0.16678801765067508, 0.15404353336300014, 0.1846655928317582, 0.17447790387501305, 0.16634872445075544, 0.19088517058265597, 0.17311786674907415, 0.16399697798338242, 0.1288539851868984, 0.001614823427195211, 0.14501617209357665, 0.028482672143823384, 0.06606314974686534, 0.22072529685972864, 0.06847143445628101, 0.13647982275486625, 0.2373003648947436, 0.1358420467936472, 0.170698114949547, 0.3455981238402276, 0.20541310076541863, 0.18438160529009195, 0.16220386637493334, 0.18922709698019158, 0.28914638072590493, 0.18997053959236054, 0.04135776204500985, 0.05405693845478776, 0.13135077463641487, 0.09710776467579396, 0.19580104879523785, 0.08790947579817643, 0.10388669125523808, 0.09955931409718233, 0.09887816472124977, 0.11825560746337838, 0.12616347579048215, 0.11334413680895306, 0.13409142358490755, 0.11904322781186727, 0.12833721649640606, 0.11119346887827486, 0.1485274551255148, 0.10464327174109767, 0.39227157989984685, 0.37832943080462034, 0.38677847144038224, 0.3961828862628637, 0.4054554120825946, 0.37685988052334585, 0.4005628519986216, 0.37941641090968137, 0.3742291986619468, 0.13271161419739586, 0.1324463448320805, 0.13342358603532944, 0.11448679219644964, 0.12773485791936523, 0.10564994495624491, 0.11960117158916361, 0.1227614807316102, 0.14039146805771086, 0.23539639790355482, 0.24854757889963353, 0.2618595280103232, 0.28299178479571974, 0.1858029389597976, 0.2570951436351132, 0.2694129492696872, 0.23242776308467172, 0.2100418511562313, 0.2782187293176528, 0.26755105435354476, 0.27806139760617565, 0.282576238605711, 0.2638725440471801, 0.2664741735575764, 0.27183896771582305, 0.28072220396358405, 0.27709293845407124, 0.2207619296961285, 0.20838100815939253, 0.222096884009218, 0.21375534887252712, 0.2074984706565436, 0.223380592174643, 0.21949153681540656, 0.2125461087595386, 0.23339258911429484, 0.2073898752240756, 0.20284801304068523, 0.19692371045797274, 0.20350359366921933, 0.21287482659598111, 0.20749231174125127, 0.22205273414587068, 0.22730998695755134, 0.20935441745610317, 0.20972078571813568, 0.2011335441307308, 0.20667315153412402, 0.19136574823951036, 0.26119654959058025, 0.2046914732654329, 0.19198896998101622, 0.18084666658891824, 0.19309651600761624, 0.1511043707673514, 0.1495869989814037, 0.5904655378075041, 0.18855549584842435, 0.19398312848696053, 0.576496801964987, 0.17117495853774667, 0.614056970293642, 0.590822751267166, 0.5375811876205141, 0.5424381123026853, 0.20314452686650497, 0.4761445211852874, 0.44784200351850645, 0.48058966761402766, 0.4564437210142036, 0.4902177622485109, 0.4905107477375382, 0.18970508158929578, 0.1922745881518395, 0.18550835228659346, 0.1942931313114804, 0.19347528732389851, 0.18350978558107567, 0.1907924112105679, 0.18276467126154816, 0.18629213895553864, 0.09443464404070712, 0.08819807613436914, 0.08905635755102481, 0.09285141873920166, 0.1116236508547005, 0.08669658617541987, 0.09004844984692262, 0.08632235185444892, 0.0877592050911622]}, "mutation_prompt": null}
{"id": "2f395f6c-91e9-460f-9cdb-4b74554da203", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                adaptive_CR = self.CR * (1 + 0.1 * (best_fitness - fitness[i]) / best_fitness)  # Adaptive CR\n                trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce adaptive crossover rate modulation based on evolution progress to enhance convergence speed.", "configspace": "", "generation": 92, "fitness": 0.2387673461870015, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4400945872503528, 0.45791451592604715, 0.4598976308332371, 0.4317536823593844, 0.43164977493060874, 0.4403293927454828, 0.43472481073539926, 0.4170110015223867, 0.42922476508624663, 0.28893001924635286, 0.19741356122486142, 0.05049251518493569, 0.2908678822000079, 0.07650315069399838, 0.1540655665379681, 0.28334928507202406, 0.3227119644848324, 0.3719334863497754, 0.12933874951898194, 0.11312030256230377, 0.11200189655808335, 0.13210421537122363, 0.1335731814783927, 0.1414419285051508, 0.13429083591601343, 0.12064444575655575, 0.13521082479729207, 0.10182649635565555, 0.09679814961520028, 0.12726891479546487, 0.11530623889970515, 0.0995173647402342, 0.0971157704410942, 0.10918249140337466, 0.11737909981458194, 0.12380537164662075, 0.9476149219990625, 0.9252485394670819, 0.9402279057923062, 0.943650515012401, 0.9585422848972219, 0.9505245294331088, 0.9401488894306954, 0.9253468707510776, 0.9760797878964651, 0.3038493986654819, 0.27810912291853884, 0.2687971116952228, 0.28133434785335143, 0.28298806574596524, 0.2726010384112003, 0.31441318698253995, 0.34324394248489043, 0.29947671413743426, 0.3921902604953118, 0.33175386052908873, 0.3030698431404668, 0.3117242416192314, 0.4405339272543797, 0.42470324943443116, 0.25879672737894865, 0.3560281115581403, 0.2911388503525454, 0.11402557715421557, 0.11327154840744547, 0.12869596609633427, 0.16164631724669398, 0.1570213517608463, 0.11353772887446989, 0.15347550782547636, 0.15856618801600741, 0.129034284151187, 0.1393284099591492, 0.10205799079828759, 0.17090230474591395, 0.17705807499154258, 0.15872196824120877, 0.1608671686375428, 0.13288960257790383, 0.0946538956738634, 0.13870353442438643, 9.999999999998899e-05, 0.0020612924200579252, 0.01408361301617278, 0.003835178059430455, 0.017769122742979926, 0.08027614324715182, 0.02226376831573562, 9.999999999998899e-05, 0.12535970344349967, 0.16076827806534333, 0.1855822735749596, 0.13319369284292482, 0.08052281155008001, 0.2605050484692998, 0.14209208135930818, 0.15255364717889264, 0.19400311505660217, 0.11848540077415459, 0.04834927386885013, 0.1538506298693213, 0.07574246292232079, 0.08350971540556307, 0.11454925563474538, 0.043519106437048816, 0.05914667615144731, 0.07135621829244665, 0.11629300865758219, 0.1151472905927916, 0.12211738708306163, 0.13618717805046632, 0.11752531735361194, 0.13560087314887237, 0.12577817116505263, 0.14383467947707063, 0.10790866894691553, 0.11912479711057145, 0.4043190027043523, 0.389447415364624, 0.40606202196765473, 0.386045267018461, 0.4009747432596692, 0.4151786841534928, 0.4116399995196952, 0.38958711695643056, 0.3866272414940628, 0.12939298676634792, 0.10926846541987922, 0.1251402143153285, 0.12525363227942365, 0.11263916135548935, 0.11624907615453428, 0.12478554239650963, 0.12443602078668792, 0.1173171164643132, 0.1814892657684255, 0.20449225879623167, 0.22271075985769562, 0.28135299671190983, 0.2080566595542327, 0.26938297399783007, 0.2762923931193031, 0.22736174631343642, 0.2648242115303815, 0.2852083346266938, 0.28705733528915844, 0.2960358467494698, 0.27265084689109775, 0.283719576998989, 0.29561051583133235, 0.27411807203844807, 0.29188440252011705, 0.2881064160450344, 0.2138818205964087, 0.19758970645403195, 0.23821565348767804, 0.21910645991704825, 0.22420051403373398, 0.2205372886440753, 0.22769114090652387, 0.22493275860406248, 0.22969126021609976, 0.22909774241377623, 0.23471306291380567, 0.20409271262554274, 0.2189918398153189, 0.2139299348941851, 0.18475872399965765, 0.21365456434659114, 0.21849640910902113, 0.19528185787587593, 0.18823224005968542, 0.19510187284588, 0.2001545581999199, 0.22066902986809056, 0.19949541583305963, 0.24231536989907043, 0.1890065892592755, 0.18302976137442206, 0.18691996232918628, 0.19907170924562123, 0.16182148515320882, 0.5875868866763017, 0.594808926619275, 0.19328101738241332, 0.17182971470666053, 0.18604104727552717, 0.6211957493080773, 0.6783006688865876, 0.5461469673823569, 0.2076512113466502, 0.20299174363032702, 0.16031201184223087, 0.5179886488586727, 0.1512778607639047, 0.09353886548200585, 0.10511842233055091, 0.15905713245191333, 0.1801865632909908, 0.1851926921275867, 0.17445122069021457, 0.18897835812295127, 0.18966852224224118, 0.18783875979214493, 0.18517318326575694, 0.2021740226854709, 0.1974401099825116, 0.08473631377256918, 0.08822336455411295, 0.08977136464003166, 0.09578120310188953, 0.07424088260149242, 0.0824488766065451, 0.08440890486294506, 0.07880621814908939, 0.09921615925949334]}, "mutation_prompt": null}
{"id": "da4c22d7-6e74-4063-94a4-c7b63011647d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "96e3718d-007b-447b-a803-439df87a416c", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            self.CR = 0.9 * (1 - evaluations / self.budget) + 0.1  # Dynamic CR modification\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce a dynamic crossover rate to enhance convergence by adapting to search progress.", "configspace": "", "generation": 94, "fitness": 0.25368942021465085, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.42541529776187026, 0.4192523012360412, 0.41837528576523186, 0.4127428555131526, 0.4285999270871975, 0.4039433273049857, 0.44116515590333005, 0.40125666490774536, 0.44470953863875184, 0.5080602199016233, 0.4934255814611903, 0.5431804874315551, 0.5191384042103901, 0.5179016337538969, 0.4763914108512398, 0.5227314753636281, 0.5112462563305863, 0.5004719905879719, 0.14920917348855744, 0.12613240189107544, 0.12872148019364282, 0.13512196544201138, 0.10214630877391295, 0.12098953923299105, 0.12257127157897485, 0.13957900149859614, 0.12101886178062782, 0.12057511133227561, 0.11244386836706022, 0.12118682526051927, 0.1339334672357314, 0.11676810566061491, 0.13646251413586474, 0.13455156455848205, 0.10166727003575193, 0.097521992956901, 0.9757334305635033, 0.9780727366866876, 0.9516967553210605, 0.9413317592254457, 0.9433312301015725, 0.9437084669700085, 0.9579772910382579, 0.9563853060630044, 0.9919064084324417, 0.3110378787532626, 0.31250554092368976, 0.29571979215710775, 0.2948947273608127, 0.2836078225255818, 0.28482514606697773, 0.2636205209838085, 0.32099053544745815, 0.2862722980500103, 0.3366766115540447, 0.761054201029419, 0.3160397709880455, 0.3051855700503606, 0.3292276243920934, 0.326720408503673, 0.30923843410472285, 0.2847761655570221, 0.5059495467729359, 0.17767377667503692, 0.13952591965768624, 0.13230376374671682, 0.16086491821834947, 0.18391437074373185, 0.16214072065268503, 0.14812109308960975, 0.17516850284387386, 0.16023936135391703, 0.15998987275391352, 0.1614764908686237, 0.17530764664680942, 0.1748985925194424, 0.15227737498943894, 0.16256526113721503, 0.15864342876898951, 0.10742258888140821, 0.14984758716421331, 0.18078407516018835, 0.04770998115314273, 0.06710099004175885, 0.07888144952922393, 0.08655014317262744, 0.05313997963750716, 0.008412813981030554, 0.10161606494487774, 0.09127389542080289, 0.20454452358980157, 0.13142148362661865, 0.2916733254463274, 0.23190283735485773, 0.11899853727455212, 0.1496014037993707, 0.27850753358430835, 0.26246639302756614, 0.19759386752260033, 0.04905621345627309, 0.029212014536494246, 0.07456007794045072, 0.10004146977914219, 0.06613616361553032, 0.06335847003369399, 0.14204896594384353, 0.05268852979565364, 0.13715550717662262, 0.13804052310586634, 0.10366267304318155, 0.08344802511842864, 0.08128651576250379, 0.12132943157457465, 0.11673752310922048, 0.12306615813380961, 0.10621475715104955, 0.13620894253435145, 0.3807313189665612, 0.3918511187313054, 0.40228946772152807, 0.3904822608290548, 0.38493225970066947, 0.4014899030025406, 0.40920208020257365, 0.3844648050050924, 0.39098842076696005, 0.17624132916315172, 0.14132342269480436, 0.1244663385678012, 0.12143522754789005, 0.11066854458629483, 0.10621061026662304, 0.11753945562007484, 0.12843282143355683, 0.1211162942681191, 0.23657464304327847, 0.2606349523523288, 0.16972064442360246, 0.24891490471300348, 0.20981580669924282, 0.2672879059425708, 0.22067371856551166, 0.24167433393188475, 0.2312876065200501, 0.2755080951344947, 0.2746996785258954, 0.28846740041682506, 0.2803408027650788, 0.2692415261411192, 0.2726072099880915, 0.26874921467476975, 0.2892474734509477, 0.27435392637086353, 0.21970593863369792, 0.22148736229694244, 0.22606090170832815, 0.2232033327614329, 0.21328284814844323, 0.22247343980763556, 0.21941173767609656, 0.22201169788176056, 0.2258998516184203, 0.19549790865431105, 0.20730035486690657, 0.20476574925774182, 0.20835942847837774, 0.20231859259899954, 0.2157505388037675, 0.20404969832704245, 0.20072103675614417, 0.1957540521021347, 0.21539304636338696, 0.21676490198180887, 0.19965089047150153, 0.2839853050714587, 0.19015189424809076, 0.25328030758742615, 0.1944515438961819, 0.2227434655711128, 0.21790794934729574, 0.18513189110303274, 0.16542868672797995, 0.17825554459732573, 0.17156515916663706, 0.19937798228546977, 0.19867634664276013, 0.1872879049453382, 0.5889535276531075, 0.6407900870332861, 0.5464481134751952, 0.20957365317375953, 0.11044603744170367, 0.20720177662433137, 0.16858504039624245, 0.5265816326846618, 0.09364000921712035, 0.10495343112979139, 0.1590902534632671, 0.17857701595557696, 0.20616186273480053, 0.19763266466306662, 0.19882491724559825, 0.18821725940045642, 0.19014783421829629, 0.19086481605323546, 0.19578886656125183, 0.1913098691374593, 0.0843961627252342, 0.08570696910807984, 0.0905953822349782, 0.08340398463514753, 0.08624083762400647, 0.0829985879463937, 0.08877836558167385, 0.09186503453477401, 0.11146091274643988]}, "mutation_prompt": null}
{"id": "a9ea4274-0602-48eb-b738-c532b7f4add4", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            new_population = np.copy(population)\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = new_population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                new_population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            population = new_population\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce elitism by preserving the best solution in each iteration, enhancing convergence speed.", "configspace": "", "generation": 95, "fitness": 0.268309901317469, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.19.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.41594366365780566, 0.4542274423478241, 0.4260171829194995, 0.4173117104480033, 0.43528113839872795, 0.4198272877313405, 0.4306990870075601, 0.4340156968186816, 0.4411785330792284, 0.3951887470952926, 0.4789712808706942, 0.4328253999878411, 0.4818510957755231, 0.5084519331838071, 0.37023158344336804, 0.35186863230136867, 0.45341797061293654, 0.385469241841653, 0.12185884947915804, 0.12383133014849645, 0.12536946212490618, 0.12524892448092073, 0.12273464319890681, 0.12527220237866643, 0.11257060299808286, 0.13933310950411493, 0.14079880260281674, 0.09255548277464787, 0.10056059176794097, 0.1103352953140797, 0.10805036704581594, 0.09233417882382833, 0.09960145303723877, 0.09667742369696353, 0.10825830755754873, 0.09026027744046605, 0.9395604361601694, 0.9766030855173123, 0.9379418687934695, 0.9535135617812841, 0.8996985898444646, 0.9535082371590247, 0.9656886192647335, 0.927997451504508, 0.9343419604864008, 0.2972542628926921, 0.3296367541054993, 0.2913058521428329, 0.28509961795763017, 0.3156037209517212, 0.31906967697717004, 0.29123640539436557, 0.28629363817917386, 0.32931761625246114, 0.6940244875950049, 0.43813932669657785, 0.37291537007947173, 0.31692111668723855, 0.48579313255230716, 0.3322518237469726, 0.32224793917735584, 0.328819512192714, 0.32810578754329056, 0.22563482019972148, 0.16907711868652509, 0.17022661168795405, 0.17443280858234889, 0.1682413627735717, 0.17716313116024052, 0.19515605815565762, 0.20021799663654816, 0.15636531624147576, 0.18104491291798264, 0.1672579396267101, 0.15626506450883138, 0.1719778800355809, 0.165224932364871, 0.1878412654324385, 0.19046834047413552, 0.09000764376563097, 0.19128627286053057, 0.09630311197755692, 0.1734577441479509, 0.11845538622112595, 0.18902525872409537, 0.24370704797737985, 0.07206012192081035, 0.22225524779513783, 0.10026074628884252, 0.28720777016359367, 0.31878594810777594, 0.2998018020583779, 0.3335738468494356, 0.31705948313617094, 0.23324661904910193, 0.3172042612861329, 0.2828406553385424, 0.4050029612061983, 0.4212574025624043, 0.08962792031738498, 0.06955865497710256, 0.18076329076474995, 0.08407942087393461, 0.0854506421778386, 0.1604777393099872, 0.16626852480409726, 0.13921394258014408, 0.1053554212739849, 0.12587719408257125, 0.11202636828284906, 0.12401164286702149, 0.13441712500338054, 0.11474090212071786, 0.12377215993016799, 0.12485992424193115, 0.1132973075707503, 0.11008528044163612, 0.39940442107393825, 0.38593754942045067, 0.3894594638704202, 0.3973902599177803, 0.3846467670787259, 0.393279470316953, 0.41262189616666023, 0.3856733826656005, 0.4036432690504361, 0.13802596410349655, 0.13184131623755835, 0.13252145577560992, 0.11258843301499377, 0.13828779444824235, 0.11114848475171568, 0.12358822302239691, 0.13653180344703741, 0.10529497020241219, 0.23311749944069493, 0.24361060962884573, 0.2194156159142635, 0.26706383999530403, 0.31088774331481406, 0.2666788876463344, 0.2239106265981844, 0.21290984884045439, 0.24399198467991412, 0.27846210376963887, 0.271726824452157, 0.2767256708654333, 0.2757040842087164, 0.2786948539928744, 0.27048736838969756, 0.2760577424310554, 0.2886907732248746, 0.2746240928973357, 0.22288903049515107, 0.2094478925357216, 0.21017422351562887, 0.22765160510095195, 0.2156124922491761, 0.21648036250891634, 0.23529632911318554, 0.2345339670614619, 0.23298779168690398, 0.21855682484800187, 0.20395227124424353, 0.2164112695457554, 0.23711449657994121, 0.20381663751978218, 0.20313996908949794, 0.233749075661019, 0.20932283996679757, 0.19727028814346192, 0.2062993396088597, 0.19463577967660084, 0.2576160899894411, 0.21534496815607962, 0.2063848130594994, 0.20329592519490292, 0.25870121647354527, 0.26926088398434456, 0.21391653461187699, 0.19874545123893428, 0.16393319413070873, 0.1510419287756558, 0.18526962383981194, 0.19685499495053138, 0.17222298465462138, 0.18647009456916763, 0.5614529519861384, 0.6808220919229173, 0.5462225754468778, 0.49864464405748976, 0.4750901068612263, 0.2024802835121311, 0.5444989443992454, 0.16606522336156904, 0.11066551793406376, 0.20829253079379595, 0.5172255120533508, 0.17913018954349935, 0.19157408636620765, 0.18312486843723041, 0.17683404333723374, 0.20786805516539408, 0.2039563301613504, 0.17859428249975917, 0.1790150380614235, 0.19010210187627907, 0.07967029090494615, 0.0903224538903249, 0.08379419486495376, 0.0890420983691469, 0.0939758578054134, 0.0912365388807429, 0.09133732121058635, 0.08996692366239256, 0.08629020649917274]}, "mutation_prompt": null}
{"id": "7b23c1d1-d13a-42c4-96a6-1a04101d4188", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "e5775457-fa71-4c4b-8d05-4bcb9619caff", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
{"id": "b39cb8ee-4520-49d5-a142-57d560bf05ec", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:\n                    mutant = best + np.random.normal(0, 0.5, self.dim)\n\n                # Dynamic CR adjustment based on population diversity\n                diversity = np.std(population, axis=0).mean()\n                dynamic_CR = self.CR * (1 - diversity / (self.upper_bound - self.lower_bound))\n\n                trial = np.where(np.random.rand(self.dim) < dynamic_CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Introduce dynamic crossover rate adjustment based on population diversity to improve convergence.", "configspace": "", "generation": 98, "fitness": 0.2658174873735201, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.18.", "error": "", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4306757631576422, 0.4241225619127099, 0.4267019950302188, 0.4389164928298047, 0.4483670046539068, 0.42744256739440756, 0.4278940357797484, 0.4310633308145999, 0.4240614197279954, 0.4914947627082562, 0.46855935158459894, 0.4258536825267225, 0.3956655275226767, 0.48008878715743575, 0.4384555886688075, 0.492579120273407, 0.4002313046473518, 0.44935164613854417, 0.13313193781412014, 0.09905890428424735, 0.10635066152972372, 0.11815453199263992, 0.11925471610299487, 0.11822127862067977, 0.17326695686944038, 0.13821840707643718, 0.11900390816578543, 0.11557233796457789, 0.11702539810092094, 0.09619243842668257, 0.12789837325549125, 0.11710618983676646, 0.12197826842621995, 0.13284509160110625, 0.12686234693075238, 0.10296981227237467, 0.910258902362034, 0.9421130270642634, 0.9588033986197523, 0.9743317723562864, 0.9390656433478142, 0.9368414880279647, 0.954099576393517, 0.9361056314701194, 0.9098722666268106, 0.32321154324782375, 0.2787472151725733, 0.3040059629205992, 0.3003583965128974, 0.3064242955607225, 0.3121972950986275, 0.2972964809967369, 0.30622311251872336, 0.32569318178607376, 0.3321389133249725, 0.5102679653757074, 0.4051676097474206, 0.3220745098000556, 0.32330118217690185, 0.5106321076783692, 0.2825593499057385, 0.3754117735227066, 0.4653413673889898, 0.18360710501147093, 0.20631954246154538, 0.17500624922627428, 0.16920924142740168, 0.17768221089444325, 0.14342344535277296, 0.1809305439240536, 0.18357938380255967, 0.15769473009802382, 0.1990870160873608, 0.16944564447775812, 0.1764368150637483, 0.18798573286827147, 0.1814052721707683, 0.15223790919012103, 0.16577852040608065, 0.15605790147871934, 0.18240243544155543, 0.1521811455740808, 0.10619595186287445, 0.11075127351519654, 0.14234316574661843, 0.11235706830230752, 0.09166419610522913, 0.22785440076145114, 0.05936716915220208, 0.19560320174184143, 0.29975907858481066, 0.20853634152851896, 0.2402399938814327, 0.19839004638692803, 0.2971576513663283, 0.21963879103094064, 0.2432521389822626, 0.2434711538820764, 0.24826288997697554, 0.13356807288277883, 0.08171637948714539, 0.09306756608815958, 0.12680836423738506, 0.07610352868052761, 0.11045392412506627, 0.09841359365052738, 0.13364071389807164, 0.08331365844545602, 0.12356183186228031, 0.1038678757247431, 0.13885902330025834, 0.1466980757713896, 0.12851628278474214, 0.11986293595348252, 0.14527400304865934, 0.13591556617506229, 0.13618720884292101, 0.39668346276861444, 0.3861214393518122, 0.3954282996967877, 0.384677694259542, 0.40805153489717927, 0.408826754107082, 0.395143158825785, 0.40014312433000443, 0.3924068580293194, 0.13624010507067796, 0.11928369022940244, 0.11811629772344334, 0.18480694560119426, 0.1223655150480647, 0.15617936767879614, 0.11799923511463073, 0.11426559285724847, 0.11481591523216506, 0.243291405074613, 0.24665152610696384, 0.24016499435786876, 0.2624162029434236, 0.2227442398507029, 0.2353172393719366, 0.26087586452920963, 0.18740106622392882, 0.270028496346008, 0.2812134952885641, 0.29216206582891835, 0.2938477562668651, 0.27267198768629153, 0.2768389576990844, 0.2827189097780233, 0.28702377206269525, 0.28758299831239176, 0.27690352454025535, 0.23197928647783972, 0.22786647910259283, 0.2229939174192166, 0.22053833031980308, 0.210927094842003, 0.2186983254706839, 0.20835423004923315, 0.21729781389710434, 0.22085111783006472, 0.22409984750652834, 0.2232106623867216, 0.1972427933182186, 0.22726025621573887, 0.2056031373066073, 0.20511258427868717, 0.22110601873084013, 0.2155299852374064, 0.21220141963561223, 0.2011213681782369, 0.2238074735174962, 0.2043524228646656, 0.2455981630605928, 0.19801646490982028, 0.2137051158557841, 0.2604711764610904, 0.2774402180565899, 0.21078426077150958, 0.6049480267408057, 0.5254957131562998, 0.14939241081412624, 0.1866632020850767, 0.19699377351154157, 0.1735872294858407, 0.18585387463308845, 0.16688221081632693, 0.6149238854779226, 0.6239964475651172, 0.4728462908754002, 0.16771100716464515, 0.20620536284656277, 0.5056143711448813, 0.4803378702260749, 0.2105840486637559, 0.19189275470524503, 0.1974713096908578, 0.20724606445825222, 0.19600426099010493, 0.18657716397170643, 0.20257397432433966, 0.1816815642265216, 0.19808827392482165, 0.19202987679608396, 0.19448986013341707, 0.19464669232115228, 0.12170459759302144, 0.08445366586705427, 0.09051390041255458, 0.08601498435957544, 0.09008103021279334, 0.08857935232738634, 0.08689952483359686, 0.11249950684093601, 0.11518929916561504]}, "mutation_prompt": null}
{"id": "265d5ddc-0912-4e4f-80ff-5ef396620b5d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 10 * dim)\n        self.F = 0.8\n        self.CR = 0.9\n        self.temperature = 100\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        evaluations = population_size\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F * (1 - evaluations / self.budget)\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.18:  # Slightly increased mutation probability\n                    mutant = best + np.random.normal(0, 0.5, self.dim)  # Broader distribution\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n            population_size = max(4, int(self.initial_population_size * (1 - evaluations / self.budget)))\n\n            for i in range(population_size):\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                acceptance_prob = np.exp(-(candidate_fitness - fitness[i]) / self.temperature)\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best = candidate\n                        best_fitness = candidate_fitness\n\n            worst_idx = np.argmax(fitness)\n            if fitness[worst_idx] > best_fitness:\n                population[worst_idx] = best\n                fitness[worst_idx] = best_fitness\n\n            self.temperature *= 0.99\n\n        return best", "name": "HybridDE_SA", "description": "Enhance exploration by introducing adaptive mutation scaling and a refined trial vector selection process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5144ed07-eda7-43c0-93f8-7110b4d72377", "metadata": {"aucs": [0.4284094612289254, 0.4330965227865943, 0.43548970361203077, 0.44075950662507835, 0.42048283752163806, 0.4201030284061722, 0.4291066610560521, 0.45531045582944185, 0.43595703191495383, 0.46268481730889877, 0.4694700275553684, 0.510642966604604, 0.4132782364070424, 0.5024503221361849, 0.40820367762099086, 0.45550981419130654, 0.4062091724151894, 0.5090443632789114, 0.1389694054918882, 0.1050820305184248, 0.10457931816379828, 0.13751608866079545, 0.12476252835539048, 0.14021704134962143, 0.10342672842346423, 0.1427028758535409, 0.12373828303923651, 0.11073814508240198, 0.100467063243178, 0.10961234837831346, 0.12840011699437603, 0.10635961583794107, 0.10119919741784433, 0.10564215235518493, 0.11160870434388326, 0.11025336871123836, 0.9579473788613049, 0.985187936444825, 0.9539450982058766, 0.943650515012401, 0.9564183348734652, 0.9397589235043844, 0.967940905575421, 0.9358339421230457, 0.9761240619559206, 0.3207302501200575, 0.3003610853591858, 0.30311802660402487, 0.3241592972485159, 0.3146998116366143, 0.3193729606746798, 0.31875620142005023, 0.32228781867537004, 0.2964400621541927, 0.48843594127020273, 0.33103378928477223, 0.4053839927633627, 0.485037092429083, 0.29400668122414886, 0.30983750457381753, 0.3219671438858528, 0.33051928151184806, 0.38059074985316055, 0.18480791216570058, 0.13986562539463376, 0.15361277299320986, 0.13799270569664623, 0.17310036617982572, 0.17082167697323147, 0.16876011861834772, 0.19577987140144149, 0.18994693319122558, 0.2123688833187234, 0.17633669487195525, 0.2193918757372899, 0.18521278897762772, 0.1986403046638252, 0.19921598081460912, 0.15957094909534275, 0.09836667300833946, 0.2014532130448119, 0.196905153682161, 0.20762927107581486, 0.08300609697277339, 0.24326246631143544, 0.2643793498717414, 0.2723172778152372, 0.2532864952935352, 0.15767752114864653, 0.3264403080215893, 0.20576084863858157, 0.20498262845729998, 0.34593358434668275, 0.36706693561980186, 0.21115330775287489, 0.16812982003376853, 0.3599141719737249, 0.3716993841120455, 0.3496075310088299, 0.1066073959686441, 0.07285175712345737, 0.11936844137029146, 0.22213202259332798, 0.08644371727673006, 0.21364549594215465, 0.14355793432333552, 0.13473086884048813, 0.15247880421396875, 0.12191050726346953, 0.14978288015328467, 0.12200779373310511, 0.1297440332555907, 0.13382724351159936, 0.12677519125448267, 0.10988782896027582, 0.1248117572626698, 0.13213990711224766, 0.38657948366740214, 0.38508096948777826, 0.4007164680313172, 0.4303495591601624, 0.40392704721271033, 0.4135933267608817, 0.4130437769249248, 0.38257291773075974, 0.42266196200664385, 0.12934624804947925, 0.11455032698694634, 0.12396684282108295, 0.11676321215384777, 0.11507038049452134, 0.1401949598752984, 0.12856357584685463, 0.12066362053865176, 0.10396620639569498, 0.2597112542960184, 0.25794114550293756, 0.17434985883787812, 0.2387031627650471, 0.22412147782441572, 0.22667720870831598, 0.2699498482789594, 0.22115025407065336, 0.26861624124654093, 0.2824259626381319, 0.2810915606670331, 0.2901386529028438, 0.27865144192535385, 0.2655326465922294, 0.2862443223456447, 0.27002640176473847, 0.2933343971975424, 0.2908648343922381, 0.2230511127280913, 0.24126579970047357, 0.21311936020741418, 0.2195019330567961, 0.2175455709847769, 0.2171485706361046, 0.23141034148701456, 0.22327516195317199, 0.24591360729107037, 0.22183164399504718, 0.21872240742972848, 0.20458965476910596, 0.20754709565992135, 0.20261050167057082, 0.2249825387260036, 0.2952623631005773, 0.22899473965341977, 0.20629802011103682, 0.21336971832123597, 0.20318862359039302, 0.21567177504782953, 0.21367873745334187, 0.20043319050222752, 0.19153572306515887, 0.21275844218150175, 0.20453331643299066, 0.25525065845791095, 0.19793359494295515, 0.6002548050993094, 0.6367033179168122, 0.6474811439213732, 0.19694811865230855, 0.6292589765821042, 0.1957213317852855, 0.18274475061272233, 0.6425085652246866, 0.6382299039492061, 0.20794602133964935, 0.12591678162317366, 0.10431753286384915, 0.6107665981777115, 0.5690534877911804, 0.5233964674676783, 0.10495987575701948, 0.577593110479194, 0.1994252585126326, 0.1895174248694661, 0.18030506129350177, 0.1871969409654305, 0.18408139797339707, 0.1930099257340364, 0.21081942201908332, 0.1914621241855936, 0.19663442859355995, 0.09200254423397913, 0.08634079506216807, 0.0881273453223057, 0.07881294813963213, 0.09690408634357628, 0.08586650023152742, 0.09781306784495014, 0.08624038413738855, 0.09252686304759083]}, "mutation_prompt": null}
