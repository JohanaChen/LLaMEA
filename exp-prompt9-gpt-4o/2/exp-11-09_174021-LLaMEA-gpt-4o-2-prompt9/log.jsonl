{"id": "1bdf2480-09d6-4712-9713-297ed6ce0c19", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "A hybrid algorithm combining Differential Evolution and Adaptive Covariance Matrix Estimation for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.10829843988256503, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.13037812086884437, 0.14931548675193484, 0.11754496416198124, 0.15444888225942255, 0.1588602652118274, 0.14818443218468236, 0.18109206814644008, 0.14302639855064714, 0.15036008345828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03696631230756375, 0.03119095014811324, 0.034249643000926144, 0.028326514757404442, 0.026506297610820906, 0.032473923910754765, 0.033647962801306, 0.023103683178264722, 0.02748795372175772, 0.004163142166448974, 0.01451160601236623, 0.00905152541083265, 0.014123827650352916, 0.012249730988483476, 0.016094081387535653, 0.007853232159737544, 0.006926121402496599, 0.005600328726168113, 0.9948899765241153, 0.9813282293010289, 0.9857347219679651, 0.9770866753523807, 0.9883474323637379, 0.9821326236873674, 0.9702015089471151, 0.9943153689304061, 0.9953423228549542, 0.05172658760433446, 0.04886848649577802, 0.03702035389077796, 0.07800740082927626, 0.04830878271184358, 0.047199334695214534, 0.07616571548609186, 0.07491885051765823, 0.05595836725179493, 0.10544122341721995, 0.0944377645797706, 0.06312756945044917, 0.09598310564505352, 0.09197116643721404, 0.07830832022293, 0.0945533713545117, 0.07493606147502774, 0.10375726941086649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011111727030466478, 0.009239883955699635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04213202894320833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03488913599305199, 0.01913933378037569, 0.035753043571999155, 0.06544673660269218, 0.011030965400204873, 0.050746734627222345, 0.044174120167141506, 0.03576024744434325, 0.03464353232861972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1680165871131265, 0.13551047083254397, 0.16762849186518503, 0.16755451657183806, 0.1621230880747111, 0.16655447445562022, 0.1502828262381547, 0.13474881378350823, 0.1717955119789647, 0.04032615033687581, 0.03156570912609602, 0.033734606964889835, 0.022238643133728364, 0.01646023752231829, 0.03534997554780095, 0.0253826862600407, 0.026397126796168013, 0.028533859696243002, 0.1280913968619185, 0.13283462439330962, 0.15400959816232207, 0.13990238425126322, 0.13719165378681542, 0.14958101088722764, 0.15962153248860889, 0.15269498586758, 0.1350788448360214, 0.13588112571419186, 0.13746095769471844, 0.13799678381427494, 0.14443851682497266, 0.15001466538728314, 0.1385932691940145, 0.15553183112218216, 0.15471849531836868, 0.15217677207294478, 0.08634826943491314, 0.075567512815507, 0.09109173148025984, 0.09656261962567714, 0.08803661422790177, 0.10072472712457692, 0.10709212858827744, 0.10212088336197633, 0.087310282964292, 0.13526536035693226, 0.12019783829843111, 0.11911421235969122, 0.14338896926676625, 0.12555690746846526, 0.1123209917687975, 0.12558375562878576, 0.10932808455539667, 0.12312800148901548, 0.09356564320569327, 9.999999999998899e-05, 0.1260434234498411, 0.08170222097508817, 9.999999999998899e-05, 0.047648824168847526, 0.13533858682704414, 9.999999999998899e-05, 0.07837003088829841, 0.1428920590850743, 0.12546724671372667, 0.165964626748471, 0.10540419961431402, 0.12033929487369188, 0.14785802415744453, 0.11941707251181966, 0.15775717309119008, 0.10975132257989695, 0.10678654247605424, 0.101331601379128, 0.11356757086824276, 0.13437749026457002, 0.08005816577650549, 0.0843044471206158, 0.18043933043707416, 0.18206372042376584, 0.1668993234628311, 0.1861395856578686, 0.18183843956574497, 0.18773880067467685, 0.20676253796459632, 0.19320353057460105, 0.17928838714688244, 0.173648926100196, 0.1844214551998975, 0.17786370507334048, 0.03074077148638865, 0.024143214592138196, 0.048129508882228, 0.0288851048933797, 0.02993759626435044, 0.03175212630070179, 0.04516757128373372, 0.031464601669573544, 0.027954474227718684]}, "mutation_prompt": null}
{"id": "03e4181d-a7b3-49a5-8fa9-e21b5b4b5fd2", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "A hybrid algorithm combining Differential Evolution and Adaptive Covariance Matrix Estimation for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1bdf2480-09d6-4712-9713-297ed6ce0c19", "metadata": {"aucs": [0.13037812086884437, 0.14931548675193484, 0.11754496416198124, 0.15444888225942255, 0.1588602652118274, 0.14818443218468236, 0.18109206814644008, 0.14302639855064714, 0.15036008345828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03696631230756375, 0.03119095014811324, 0.034249643000926144, 0.028326514757404442, 0.026506297610820906, 0.032473923910754765, 0.033647962801306, 0.023103683178264722, 0.02748795372175772, 0.004163142166448974, 0.01451160601236623, 0.00905152541083265, 0.014123827650352916, 0.012249730988483476, 0.016094081387535653, 0.007853232159737544, 0.006926121402496599, 0.005600328726168113, 0.9948899765241153, 0.9813282293010289, 0.9857347219679651, 0.9770866753523807, 0.9883474323637379, 0.9821326236873674, 0.9702015089471151, 0.9943153689304061, 0.9953423228549542, 0.05172658760433446, 0.04886848649577802, 0.03702035389077796, 0.07800740082927626, 0.04830878271184358, 0.047199334695214534, 0.07616571548609186, 0.07491885051765823, 0.05595836725179493, 0.10544122341721995, 0.0944377645797706, 0.06312756945044917, 0.09598310564505352, 0.09197116643721404, 0.07830832022293, 0.0945533713545117, 0.07493606147502774, 0.10375726941086649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011111727030466478, 0.009239883955699635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04213202894320833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03488913599305199, 0.01913933378037569, 0.035753043571999155, 0.06544673660269218, 0.011030965400204873, 0.050746734627222345, 0.044174120167141506, 0.03576024744434325, 0.03464353232861972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1680165871131265, 0.13551047083254397, 0.16762849186518503, 0.16755451657183806, 0.1621230880747111, 0.16655447445562022, 0.1502828262381547, 0.13474881378350823, 0.1717955119789647, 0.04032615033687581, 0.03156570912609602, 0.033734606964889835, 0.022238643133728364, 0.01646023752231829, 0.03534997554780095, 0.0253826862600407, 0.026397126796168013, 0.028533859696243002, 0.1280913968619185, 0.13283462439330962, 0.15400959816232207, 0.13990238425126322, 0.13719165378681542, 0.14958101088722764, 0.15962153248860889, 0.15269498586758, 0.1350788448360214, 0.13588112571419186, 0.13746095769471844, 0.13799678381427494, 0.14443851682497266, 0.15001466538728314, 0.1385932691940145, 0.15553183112218216, 0.15471849531836868, 0.15217677207294478, 0.08634826943491314, 0.075567512815507, 0.09109173148025984, 0.09656261962567714, 0.08803661422790177, 0.10072472712457692, 0.10709212858827744, 0.10212088336197633, 0.087310282964292, 0.13526536035693226, 0.12019783829843111, 0.11911421235969122, 0.14338896926676625, 0.12555690746846526, 0.1123209917687975, 0.12558375562878576, 0.10932808455539667, 0.12312800148901548, 0.09356564320569327, 9.999999999998899e-05, 0.1260434234498411, 0.08170222097508817, 9.999999999998899e-05, 0.047648824168847526, 0.13533858682704414, 9.999999999998899e-05, 0.07837003088829841, 0.1428920590850743, 0.12546724671372667, 0.165964626748471, 0.10540419961431402, 0.12033929487369188, 0.14785802415744453, 0.11941707251181966, 0.15775717309119008, 0.10975132257989695, 0.10678654247605424, 0.101331601379128, 0.11356757086824276, 0.13437749026457002, 0.08005816577650549, 0.0843044471206158, 0.18043933043707416, 0.18206372042376584, 0.1668993234628311, 0.1861395856578686, 0.18183843956574497, 0.18773880067467685, 0.20676253796459632, 0.19320353057460105, 0.17928838714688244, 0.173648926100196, 0.1844214551998975, 0.17786370507334048, 0.03074077148638865, 0.024143214592138196, 0.048129508882228, 0.0288851048933797, 0.02993759626435044, 0.03175212630070179, 0.04516757128373372, 0.031464601669573544, 0.027954474227718684]}, "mutation_prompt": null}
{"id": "6ea23e30-b943-47c6-87cb-5662608f0549", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))  # Dynamic crossover rate\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "A refined hybrid algorithm combining Differential Evolution and Adaptive Covariance Matrix Estimation with dynamic crossover rate adjustment for enhanced convergence speed.", "configspace": "", "generation": 2, "fitness": 0.12004996552075653, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "1bdf2480-09d6-4712-9713-297ed6ce0c19", "metadata": {"aucs": [0.18375273319944674, 0.15332149894799585, 0.1580670362505633, 0.19895650036279855, 0.1580299854836541, 0.17718010880021706, 0.1683622708532031, 0.15490351392715562, 0.16016149437761773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03959684415011322, 0.028370585637413903, 0.040454277314243114, 0.03246736792550442, 0.03309160885540896, 0.03462018097164543, 0.030240653999266343, 0.03532868385537602, 0.04777265163300415, 0.028983599106511382, 0.016706179097283114, 0.014145024678989482, 0.020429664189873242, 0.009588676116239148, 0.0216231634957752, 0.018613452477467818, 0.012755541261507242, 0.023907111130863856, 0.9877171040583419, 0.9910020439143701, 0.9790768825498021, 0.9819812973797686, 0.9867096126328742, 0.9834278361660236, 0.9789363252935359, 0.9901549284064662, 0.9933454111436536, 0.1318211223546938, 0.059218252385710546, 0.06280415715305843, 0.08432789467294766, 0.053967373050414214, 0.06861026212299781, 0.07305034414646583, 0.06228004220013572, 0.07664148758103662, 0.11279431070574641, 0.10110769837410993, 0.10941952251511067, 0.1494154183667873, 0.11934773642073582, 0.11985381540087636, 0.12076049171641245, 0.11057615978174784, 0.10932052053030716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03598795807993682, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030660116567294837, 9.999999999998899e-05, 9.999999999998899e-05, 0.008787922309023477, 0.015262587392398053, 0.01150233501910225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05337800335051257, 0.03698430081622939, 0.08504564241549228, 0.06742475971953521, 0.017767983510644236, 0.08346424432751032, 0.03256450248264542, 0.030586561642983012, 0.028797795407473625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004288604199862656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004708032858845024, 9.999999999998899e-05, 0.16066184452363796, 0.1753633207088644, 0.1828716736579391, 0.18434385262075836, 0.181474019814433, 0.18413513111045587, 0.15837605094025964, 0.16535249224767634, 0.15850622923791324, 0.04196360102293806, 0.048463493864794316, 0.06383501610866771, 0.04056696657329062, 0.030842011981301543, 0.035825121190978804, 0.041290841988261495, 0.03144973464507261, 0.04439765216943925, 0.13492400857014197, 0.15621343352863626, 0.13854884984089344, 0.1432813156293692, 0.15495353758054065, 0.14743594180479525, 0.14450628214728223, 0.14723756079004247, 0.1247073728045539, 0.15557557126612354, 0.15571931351135648, 0.17357993454143583, 0.15836394580197066, 0.15180251464700556, 0.14691396754986286, 0.16281648608475485, 0.1580882747088983, 0.14670632473069434, 0.09977024793071487, 0.10079447898139282, 0.09879633812627675, 0.09604269949964495, 0.08785780842441104, 0.10174345260667927, 0.0964119018113857, 0.10804940612233838, 0.11413471935261821, 0.17958885458775165, 0.1377415800327384, 0.1373731210313417, 0.16689694348392026, 0.13135368196171493, 0.13296622725745288, 0.12956043320828992, 0.13378668465328614, 0.1404853203185008, 0.12613719378470578, 0.0812295423870868, 0.12547822452430724, 0.12744720770567475, 0.1257438857022224, 0.11046915311052585, 0.10780296021324465, 0.15532281751730792, 0.12547495936484043, 0.14070757512265442, 0.17308853358520193, 0.157750062611971, 0.15875390550745305, 0.14082227965758665, 0.13423077597462196, 0.13900698974609627, 0.1466910913474716, 0.13668709268010426, 0.1702125424029255, 0.11728445936022058, 0.16137106867001005, 0.11282127692573485, 0.13351336767328303, 0.32695150106773696, 0.17204961074850778, 0.18164428267497912, 0.1768456347501568, 0.185314186378996, 0.19932886085400392, 0.18312519745286604, 0.17544977045504584, 0.1887068958213547, 0.19278472893899234, 0.1814802706078451, 0.1781705586983786, 0.1756543542968909, 0.05056801766156427, 0.05172650344577856, 0.03589368887207833, 0.033460770352888525, 0.03372538224937327, 0.031348241003317345, 0.039576376645544586, 0.043191558945017805, 0.03788590133914882]}, "mutation_prompt": null}
{"id": "66449c15-85ca-42b6-b582-b7dbe80537a0", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))  # Dynamic crossover rate\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "A refined hybrid algorithm combining Differential Evolution and Adaptive Covariance Matrix Estimation with dynamic crossover rate adjustment for enhanced convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ea23e30-b943-47c6-87cb-5662608f0549", "metadata": {"aucs": [0.18375273319944674, 0.15332149894799585, 0.1580670362505633, 0.19895650036279855, 0.1580299854836541, 0.17718010880021706, 0.1683622708532031, 0.15490351392715562, 0.16016149437761773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03959684415011322, 0.028370585637413903, 0.040454277314243114, 0.03246736792550442, 0.03309160885540896, 0.03462018097164543, 0.030240653999266343, 0.03532868385537602, 0.04777265163300415, 0.028983599106511382, 0.016706179097283114, 0.014145024678989482, 0.020429664189873242, 0.009588676116239148, 0.0216231634957752, 0.018613452477467818, 0.012755541261507242, 0.023907111130863856, 0.9877171040583419, 0.9910020439143701, 0.9790768825498021, 0.9819812973797686, 0.9867096126328742, 0.9834278361660236, 0.9789363252935359, 0.9901549284064662, 0.9933454111436536, 0.1318211223546938, 0.059218252385710546, 0.06280415715305843, 0.08432789467294766, 0.053967373050414214, 0.06861026212299781, 0.07305034414646583, 0.06228004220013572, 0.07664148758103662, 0.11279431070574641, 0.10110769837410993, 0.10941952251511067, 0.1494154183667873, 0.11934773642073582, 0.11985381540087636, 0.12076049171641245, 0.11057615978174784, 0.10932052053030716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03598795807993682, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030660116567294837, 9.999999999998899e-05, 9.999999999998899e-05, 0.008787922309023477, 0.015262587392398053, 0.01150233501910225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05337800335051257, 0.03698430081622939, 0.08504564241549228, 0.06742475971953521, 0.017767983510644236, 0.08346424432751032, 0.03256450248264542, 0.030586561642983012, 0.028797795407473625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004288604199862656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004708032858845024, 9.999999999998899e-05, 0.16066184452363796, 0.1753633207088644, 0.1828716736579391, 0.18434385262075836, 0.181474019814433, 0.18413513111045587, 0.15837605094025964, 0.16535249224767634, 0.15850622923791324, 0.04196360102293806, 0.048463493864794316, 0.06383501610866771, 0.04056696657329062, 0.030842011981301543, 0.035825121190978804, 0.041290841988261495, 0.03144973464507261, 0.04439765216943925, 0.13492400857014197, 0.15621343352863626, 0.13854884984089344, 0.1432813156293692, 0.15495353758054065, 0.14743594180479525, 0.14450628214728223, 0.14723756079004247, 0.1247073728045539, 0.15557557126612354, 0.15571931351135648, 0.17357993454143583, 0.15836394580197066, 0.15180251464700556, 0.14691396754986286, 0.16281648608475485, 0.1580882747088983, 0.14670632473069434, 0.09977024793071487, 0.10079447898139282, 0.09879633812627675, 0.09604269949964495, 0.08785780842441104, 0.10174345260667927, 0.0964119018113857, 0.10804940612233838, 0.11413471935261821, 0.17958885458775165, 0.1377415800327384, 0.1373731210313417, 0.16689694348392026, 0.13135368196171493, 0.13296622725745288, 0.12956043320828992, 0.13378668465328614, 0.1404853203185008, 0.12613719378470578, 0.0812295423870868, 0.12547822452430724, 0.12744720770567475, 0.1257438857022224, 0.11046915311052585, 0.10780296021324465, 0.15532281751730792, 0.12547495936484043, 0.14070757512265442, 0.17308853358520193, 0.157750062611971, 0.15875390550745305, 0.14082227965758665, 0.13423077597462196, 0.13900698974609627, 0.1466910913474716, 0.13668709268010426, 0.1702125424029255, 0.11728445936022058, 0.16137106867001005, 0.11282127692573485, 0.13351336767328303, 0.32695150106773696, 0.17204961074850778, 0.18164428267497912, 0.1768456347501568, 0.185314186378996, 0.19932886085400392, 0.18312519745286604, 0.17544977045504584, 0.1887068958213547, 0.19278472893899234, 0.1814802706078451, 0.1781705586983786, 0.1756543542968909, 0.05056801766156427, 0.05172650344577856, 0.03589368887207833, 0.033460770352888525, 0.03372538224937327, 0.031348241003317345, 0.039576376645544586, 0.043191558945017805, 0.03788590133914882]}, "mutation_prompt": null}
{"id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 4, "fitness": 0.12076436272461837, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6ea23e30-b943-47c6-87cb-5662608f0549", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "e57d30c3-f0ec-4971-9241-0b1925e73086", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "f79624cc-66ec-455f-a5a3-153258defc61", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "7c22994a-3864-4fcb-9988-fcde5dd58922", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "3274107d-b229-437d-9791-f4607852530b", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.9  # Adjusted to 0.9 for adaptive exploration\n        self.crossover_probability = 0.85  # Adjusted to 0.85 for better solution diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        population_diversity = np.std(self.population, axis=0).mean()\n        current_crossover_probability = self.crossover_probability * (1 - population_diversity / 10.0)\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "A refined hybrid algorithm with adaptive mutation factor and crossover probability to enhance convergence efficiency.", "configspace": "", "generation": 8, "fitness": 0.11287720839387402, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.1290010882593282, 0.13093011871860638, 0.1730484860057694, 0.1778876453395336, 0.15967329495501303, 0.1642725591739711, 0.14235000008652476, 0.15618001908644896, 0.14366871481710364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05386866988337391, 0.03147501251801821, 0.033056706868562324, 0.02742032060873023, 0.034308825999505244, 0.03929772349091987, 0.038848826163891736, 0.04612628826085874, 0.03894271504306035, 0.04334800745926204, 0.01816121581422525, 0.011064385271877142, 0.022216545584961334, 0.02972078544468082, 0.016645176552318675, 0.04307313489255338, 0.007729251280827354, 0.03866106320291707, 0.980740571599862, 0.9902685964758867, 0.9852937555958651, 0.991390478980422, 0.9723628529907026, 0.9885120264396228, 0.9815788822206264, 0.9924265182652499, 0.9924837262218236, 0.056457244570120246, 0.048220887024670644, 0.057913410676741495, 0.05373461171046734, 0.04098379961428378, 0.058966869761911456, 0.06868819169030504, 0.08799678399723565, 0.07378277962855295, 0.09696333690908265, 0.12139253581892862, 0.0972239738985361, 0.10556333874456358, 0.0993478597427695, 0.09029881502082449, 0.11774225679617178, 0.0947846101417017, 0.10028683967749408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05638058125388512, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167833413261233, 0.00928188311413325, 0.008381359476369976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028833127458287366, 0.02866570764064469, 0.0383182392998922, 0.052570080034957556, 0.03936462537591345, 0.027694663398275643, 0.009509858353210943, 0.015478708232766647, 0.024939460839581762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014982582731184135, 9.999999999998899e-05, 0.14611141931493132, 0.14782533320115943, 0.15308961721172787, 0.16676961490006592, 0.1806288609225385, 0.17838297228685607, 0.16029878416019727, 0.13751630229524092, 0.16298958769566396, 0.04034576135696499, 0.029904484246058738, 0.03956671568882286, 0.02733054908476129, 0.0225812794467245, 0.028007367430295416, 0.026779187819519712, 0.021782313727618408, 0.03320284273857488, 0.13351228232988432, 0.18059788332081428, 0.12482318771593692, 0.14246973488129056, 0.15085140346539339, 0.13555082472101532, 0.1314738195037426, 0.1415595543207523, 0.13249339789034853, 0.14869317826474748, 0.13865875033365505, 0.15500224286666475, 0.13554682079922697, 0.1461070399494152, 0.13647509901577082, 0.15941146820896301, 0.15230589805383477, 0.1661719103728092, 0.08181501470602437, 0.07899743274066573, 0.1033198772355316, 0.09960153293651097, 0.10530286241844622, 0.09882141099217812, 0.11756570806604105, 0.09537938296179072, 0.10372019924659925, 0.13299306570042269, 0.12598578809343486, 0.13755514509958588, 0.13797211345405902, 0.1167552083892055, 0.14435205636999093, 0.1292933091773386, 0.16369253840451214, 0.1421572814772618, 0.0005969637495359947, 0.038977061652682776, 0.04373580140911104, 0.1197150160104058, 0.11630658987773312, 0.10605868022143827, 0.01714544905068416, 0.04461987636635145, 0.07934081890110722, 0.1568123839300124, 0.1592581795943523, 0.1957509673426705, 0.14387465896770357, 0.116868745947879, 0.15052032726436682, 0.1249640542771705, 0.13637458743687914, 0.11235302427764637, 0.1508173501591873, 0.14844593547581175, 0.11823728362175223, 0.10824541116055075, 0.19015659905460225, 0.1181689259147719, 0.183041459941785, 0.16778832766246, 0.1693753003280779, 0.19078924860894808, 0.19840963134871015, 0.21329270916016918, 0.19288002994915576, 0.19759211919105968, 0.19725173317663758, 0.18482618087745606, 0.1845313599222267, 0.1917279333667361, 0.03127105633263405, 0.028133857634774384, 0.04697038107976492, 0.03275539547059236, 0.03559114538750652, 0.03505066876043017, 0.03339942361571324, 0.027728530632112225, 0.03426706561486881]}, "mutation_prompt": null}
{"id": "0b2b1da4-fabc-41ea-ba5b-9c90db37b72c", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "b4fdf846-0bf2-4cd7-8650-545897c55841", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "32f34566-b483-4161-a671-99a16975aba7", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "2d3bbd1a-1443-4dfb-98d2-5d5a176da4c0", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "0c13cbed-0a31-4e7f-aa58-8255a3c901e3", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        adaptive_scaling = 1.0 + (self.best_fitness / (np.mean(self.fitness) + 1e-9)) * 0.1  # Adaptive scaling factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * adaptive_scaling * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introduced an adaptive scaling factor for the mutation vector in the Differential Evolution step for better exploration-exploitation balance.", "configspace": "", "generation": 13, "fitness": 0.11859188924854674, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.18450768226429315, 0.16203863673535412, 0.15578069442582188, 0.19166290892551363, 0.16652149589569176, 0.16938056957453262, 0.15608746989833855, 0.16241289074195542, 0.16688020646345136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03640953789322099, 0.03477629906204216, 0.03232881025243228, 0.03314023880698247, 0.03624321289581278, 0.04389801721111575, 0.03148115283162989, 0.04733794553941584, 0.04441495275519558, 0.02538777055464092, 0.02921623465751233, 0.023515615284347424, 0.022756804701035027, 0.016621951947449864, 0.024022175203398, 0.018686150029665227, 0.024686752908219978, 0.02284266110648603, 0.990296623502979, 0.9891615038909022, 0.9841235653571602, 0.988117011509579, 0.9924427696989753, 0.9897420234503983, 0.9822170538730657, 0.9836780021725088, 0.9890484675170814, 0.060441642852789634, 0.0464569457860714, 0.053983899844925354, 0.08942685584310262, 0.05891570935193269, 0.0809276757013686, 0.06453164839084058, 0.06759190242170532, 0.08334952925071681, 0.122760386840016, 0.07790018494224038, 0.12059795912146287, 0.11580793477684004, 0.11367879635338851, 0.11708626234670994, 0.10483555719933668, 0.11412226048299401, 0.11566867580404983, 0.0, 0.0, 0.0, 0.010795516566853403, 0.0, 0.001795164781008718, 0.03198730618783574, 0.0, 0.0, 0.007650222880212665, 0.013068099526131527, 0.007709977381980426, 0.0, 0.0024347917031863897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04373621589701726, 0.04513762587027703, 0.045098555165899556, 0.051920930527245446, 0.0029449826674333712, 0.05457433507957232, 0.022085257393322566, 0.02816129452025562, 0.05338918355328437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5662765518231758e-05, 0.17392507628027976, 0.1583768830997282, 0.17852853594031826, 0.19259591962507605, 0.1956995972105675, 0.17621826161039877, 0.20994951430486686, 0.16345739498669465, 0.1630838676241365, 0.04599969387568803, 0.07342656944870107, 0.0450708788366736, 0.03903672974339534, 0.03235389299632552, 0.03184833513181362, 0.05219287381894211, 0.03373868026690929, 0.03142130578315849, 0.11242467160781233, 0.19084168830790582, 0.14152083338473442, 0.12351693359334948, 0.14538741965253033, 0.16280595714708213, 0.16227570804349067, 0.1333219558687666, 0.1465757601292389, 0.154869011121748, 0.1438225328453886, 0.16642887352287794, 0.1515965286427432, 0.14789636006611495, 0.1526730585994195, 0.15526302169498774, 0.15075081559317005, 0.18026773484934855, 0.11884192540631633, 0.08678763354403873, 0.10030163521044233, 0.09028908843416683, 0.08795372888300712, 0.09017775796296901, 0.1009749781514312, 0.09721425623316804, 0.10378835421691635, 0.12157279210353811, 0.1712574198684963, 0.15100734187921372, 0.1380921120188312, 0.15182099788170744, 0.1335089512768649, 0.14045507365885024, 0.13544875669303325, 0.15238925281267968, 0.1036743927321857, 0.1431747081436091, 0.12787131451003386, 0.1085921371885521, 0.08072039709562306, 0.12817771936340538, 0.10434399966681718, 0.11341457846768899, 0.14071450791460105, 0.1637594043051347, 0.1383638968945453, 0.15110669907591312, 0.12994818191131485, 0.14710578323889856, 0.15408428367307403, 0.16153472252293355, 0.2536900100626329, 0.15912228793873817, 0.14075109922397333, 0.13981859480419556, 0.14354053296322455, 0.10806526753931411, 0.10881322445903518, 0.109586594798455, 0.17800971636779417, 0.11482704850775538, 0.15153813659778292, 0.18963050320486963, 0.1902095227999494, 0.1872532220254416, 0.18055314557365687, 0.18461480706404576, 0.1810454504064518, 0.17832499362726828, 0.18084038350122156, 0.18015099465203166, 0.03880419187961792, 0.03501335423826746, 0.040807940449383406, 0.045134957731367886, 0.04229296567882834, 0.045351392420393655, 0.05223900024813177, 0.030736782959004838, 0.05499548845314861]}, "mutation_prompt": null}
{"id": "b82f78e4-e255-4546-9d2d-5af03ae04d08", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "88336948-dec2-4dc9-b5f1-9ac3aefe63e9", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "fa72b0a1-1d2a-477d-a884-d4d800a62a02", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "f7905077-22e1-429e-8c6e-4e52ac8e49c1", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "de4e99b3-34d3-4e08-92cc-9c3a6174ac61", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "655ee1b4-0841-45fe-8694-ab9f63622f88", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "303d6acc-7b20-427d-9376-33aad069f6e8", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "8727449c-8c22-4885-8bde-331050252459", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "858ec83a-55e4-40cd-b31f-252c5ed20fbe", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.current_population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.current_population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.current_population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        self.current_population_size = max(10, int(self.initial_population_size * (self.budget / (self.budget + self.initial_population_size))))\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introducing a dynamic population size scaling based on budget consumption for improved exploration and exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.11682444201590185, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.17399991700101747, 0.15550999134199883, 0.15913373883595172, 0.15488645325885353, 0.1612340010297033, 0.16835476667977478, 0.16155304320978647, 0.16039836243153238, 0.14582358675727536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296755600566026, 0.03640934617912228, 0.032573696634692895, 0.03382788462592601, 0.03856650391283545, 0.03660143273796057, 0.03146145402498535, 0.03739376063673261, 0.034716106317499884, 0.015044659977525021, 0.01412481628749429, 0.014135585312084697, 0.019528418337472986, 0.03155743847669179, 0.02769476675160787, 0.019220509116641415, 0.017645258920077178, 0.02168372790081685, 0.9860178334198431, 0.9855177228480901, 0.9891363303065035, 0.9867182853217353, 0.9864636077567144, 0.9870828862006596, 0.982595242960852, 0.9845482043070727, 0.988606205183144, 0.05492234801374851, 0.08002430347480405, 0.06525228056045107, 0.06646666580024851, 0.08396837091687359, 0.0697657490768101, 0.06901587732243386, 0.06867272626752641, 0.07656906387070972, 0.135137315498297, 0.08946278873514146, 0.1148114972809593, 0.11348794642118587, 0.11761352346479703, 0.1173096251875606, 0.10855906221978062, 0.1154792572264216, 0.11038393393785395, 0.0019709014483531018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001961690855225573, 9.999999999998899e-05, 9.999999999998899e-05, 0.008278253740594432, 0.009247694507871218, 0.00927889906150281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001871067451863162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403184357229072, 0.03440024261997765, 0.05209410691993599, 0.01591333923331817, 0.0553949351996722, 0.025393898300553497, 0.0423967766886848, 0.03502406325778229, 0.04234812729197768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00412021384220862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1596261386965847, 0.1787814303021409, 0.16778877872566877, 0.18359986861835986, 0.1734665457554504, 0.176683265871577, 0.16787734799073184, 0.17134299129511232, 0.17229934057445206, 0.04882959790766528, 0.04555497630385985, 0.05469899731435468, 0.04140896871049482, 0.04478695845907554, 0.02502193944207265, 0.04590563508030232, 0.03338337374903311, 0.030065576644595193, 0.143437321486665, 0.12872615074812543, 0.13602595526435257, 0.1333740410674985, 0.1636695014772357, 0.16345677680809534, 0.13677080035855782, 0.11306586827998177, 0.15597015982430618, 0.15109996311818008, 0.1409691730240813, 0.15109105662697253, 0.14516409863191004, 0.13936844626327838, 0.14740903320886756, 0.14555961342870705, 0.19313527551842646, 0.15654064187012395, 0.09999247330003969, 0.09379586609678314, 0.11058870879578697, 0.10399843837754119, 0.0925214402709591, 0.10964140704871861, 0.10679229619407393, 0.14561945881077332, 0.09490166035374681, 0.1309458339419476, 0.13642132272694363, 0.14075591889833872, 0.13700233508455362, 0.15014519360753253, 0.14101617956524826, 0.1416410176687397, 0.14120750464766263, 0.13334967082549665, 0.11582403832592592, 0.13092303807782046, 0.13858007575124542, 0.11904728315050128, 0.09829108568957967, 0.054043715380249324, 0.1451529590488888, 0.13147761351877763, 0.10979252784893301, 0.13796086165010424, 0.1394733680277248, 0.15219517280414552, 0.12456269794097097, 0.11435039014868764, 0.12777687903056067, 0.16326859844256358, 0.1299169358995632, 0.15559033015052914, 0.11744952533869146, 0.21218737485288797, 0.1164918158241317, 0.11114611313206457, 0.09267263461847919, 0.10623293612287144, 0.18273862391109452, 0.1355309138948989, 0.17992350711922778, 0.19209059287552877, 0.19886848665603107, 0.17787829763578245, 0.1796383242181906, 0.20343557322979022, 0.1777657362631757, 0.18950454804818762, 0.1918584914424145, 0.17863160455884375, 0.04539607614850971, 0.05057103141877828, 0.033863606570280314, 0.04061836031414656, 0.032999221194857764, 0.048213456727370985, 0.04099370190461249, 0.03407596844716576, 0.052487078914184915]}, "mutation_prompt": null}
{"id": "9b6c8a84-7951-46ef-b518-af3f2def8e4b", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        # Introduce adaptive tuning for mutation factor and crossover probability\n        current_mutation_factor = self.mutation_factor * (1 + np.random.rand() * 0.1)\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1)) * (1 + np.random.rand() * 0.1)\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + current_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introducing adaptive parameter tuning to the mutation factor and crossover probability for improved search efficiency.", "configspace": "", "generation": 23, "fitness": 0.11726240000740437, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.16483761277975006, 0.1472498491700358, 0.13709517044539477, 0.16218722022343024, 0.16282845165866933, 0.16400003173146038, 0.15780912543764203, 0.17251234428331386, 0.15730056768865108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037800888941947774, 0.03764106073743245, 0.03333718427103871, 0.03603448783504648, 0.04108472318210876, 0.03726978206581821, 0.03619539086082513, 0.030547333908968355, 0.031449720420334226, 0.024295769317493998, 0.019312459882494526, 0.015576249985337798, 0.022257668832773025, 0.0258337957203163, 0.019483613639754926, 0.019680868615914893, 0.015632805433670738, 0.019424140773910636, 0.9913251376747627, 0.9911183119413172, 0.9892096695198205, 0.9779395520047298, 0.9855966303595445, 0.979902184624378, 0.9837568960821841, 0.9843485204785041, 0.993361437062609, 0.07356741059663907, 0.08421140949230776, 0.057359661756677616, 0.09741457701253242, 0.07801743503985692, 0.05724684220074705, 0.08502073362308149, 0.06740684067469371, 0.0818760085180229, 0.11515521204043488, 0.1495487183960753, 0.10754263432088451, 0.14699265397437156, 0.13463561423518988, 0.10604654507568845, 0.11617718680706945, 0.10441542689036798, 0.1381728248768257, 0.0032285617354893548, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007606656673926349, 9.999999999998899e-05, 0.02381732011812332, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005701974120565501, 0.007677840370476807, 0.007300309001238792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035888525957772366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034863859721190105, 0.019892101081753544, 0.046316221878410446, 0.016803659081881417, 0.03917251749677575, 0.02677599976948275, 0.03947823457865618, 0.02796313813617035, 0.01781135732591943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001493653065141043, 0.00020026265519412778, 9.999999999998899e-05, 0.18592688981715055, 0.16512496174884328, 0.15267569034714212, 0.2080432064387574, 0.17512685866272748, 0.1778522259221581, 0.17805807738405743, 0.14404457537436688, 0.20524183620162717, 0.046245242915623375, 0.06110749369961954, 0.041051544621260816, 0.045884085975026245, 0.03287583021285079, 0.03534848922102285, 0.03800990217021294, 0.03425286255267401, 0.041640175037966354, 0.14898886075090179, 0.14506291707462027, 0.12438210059993393, 0.14055751934401195, 0.14491356960448942, 0.130802472803503, 0.12346376656433022, 0.12587997988169664, 0.13772704555575999, 0.17111802031224232, 0.1505755495986607, 0.1509891924297192, 0.14696787110503884, 0.15965879593688148, 0.1675596363317785, 0.16865963603583622, 0.15393306171987864, 0.15354977865985897, 0.10250740813837023, 0.09291625234169554, 0.09834335640697922, 0.09305424940368834, 0.09527436138537382, 0.10239730641121692, 0.1065555064127095, 0.09005827979557457, 0.10278149339851583, 0.15430574975442835, 0.12925519446468647, 0.15858187169246052, 0.14099204399262977, 0.14434358256584456, 0.14831277249547603, 0.14031485384478748, 0.1303886826348042, 0.1361730986341254, 0.1604690312184186, 0.1105763388087676, 0.11839960550223783, 0.14705655331923695, 0.07227817693766758, 0.09314607005162656, 0.09532682211704069, 0.14475223478726107, 0.09396894889322616, 0.13787693340810436, 0.16652880990732533, 0.15288396214522526, 0.13984241128516273, 0.1328590299603546, 0.1348654441885796, 0.1346861609945572, 0.14437773401780052, 0.12929584200699284, 0.12143044646864132, 0.1648466081348524, 0.12939274421558822, 0.10654900389045963, 0.10727285062277592, 0.13285487387596273, 0.16849874320301061, 0.17723899067543314, 0.15270667699984786, 0.19574184269000738, 0.18576468489161957, 0.18142576984760683, 0.17807897760664404, 0.2108070090351324, 0.1812706819698684, 0.19208621942781312, 0.1860806202400329, 0.18117042234898573, 0.038050442957981434, 0.03776661884420174, 0.045246747007877786, 0.046319563371378214, 0.03489259882063178, 0.03623085709515139, 0.04504345791070086, 0.035830761383377596, 0.03498765836471662]}, "mutation_prompt": null}
{"id": "a14a4c22-03e1-4611-ab1d-070358375157", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "0c53e27b-5867-45b4-9418-eb88c05f1c4e", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * (1 - self.budget / (self.budget + 1))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0  # Volatility-adjusted mutation factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An enhanced hybrid algorithm incorporating a volatility-adjusted mutation factor for improved convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.17876913802225503, 0.1755079156511421, 0.18583723263523377, 0.16256877393850389, 0.16548497992465294, 0.16213218039485733, 0.16015077172314685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04148368987185591, 0.04118454062741561, 0.042025993313836274, 0.04813630711703076, 0.03276470997474157, 0.031486072861819814, 0.03781414210775236, 0.039191625532875696, 0.022129198331889754, 0.024840570571359022, 0.027189522282288325, 0.02727604307735343, 0.01707266339014646, 0.01906142459142024, 0.02181524673444024, 0.01901077011685426, 0.9906549689718989, 0.9872002104216312, 0.9875659615264092, 0.9690533386220713, 0.988578691296319, 0.9836944405472585, 0.9793866140633731, 0.9812145513953632, 0.994598754201655, 0.07369605161183079, 0.06239394271302445, 0.1482486430640063, 0.061611378695349384, 0.07421852958948039, 0.07033545384505613, 0.08316180482590951, 0.07878908881951541, 0.07843011928353005, 0.14677043267655443, 0.14039814547415352, 0.10312566534512502, 0.1123277752236167, 0.10503311717613584, 0.12079577519262041, 0.11482223035365169, 0.11833364159500326, 0.11655102584671273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0060206480468890655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.0038281241890623097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.03855786480318968, 0.05659605271753754, 0.07896960742499848, 0.08469256673969316, 0.11214777368666584, 0.01704478347372429, 0.025513723666881427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.2057116240137964, 0.19753954834630993, 0.20615791771009995, 0.18037190189912344, 0.21755809839258378, 0.1694968465741673, 0.1806551855689833, 0.0497423063036454, 0.052486898151336, 0.05131657002717771, 0.04588623607581099, 0.048071783282709446, 0.026739583031597958, 0.033293168895588865, 0.032045089835446405, 0.04658966777015483, 0.17730356309213202, 0.14254549309522335, 0.13489627388832526, 0.1733566983997724, 0.14041756883327472, 0.13921228265215668, 0.15771675483531689, 0.15241710793085117, 0.12814585702801795, 0.16259154748195104, 0.14752843069174038, 0.15797210186672694, 0.14862420709036872, 0.15227375975773227, 0.1490286359227615, 0.15980425340978965, 0.1596739001831171, 0.16065718211410218, 0.09447315321370642, 0.11214781760534731, 0.10105722367209258, 0.0930628396206239, 0.11127782333020608, 0.08423273781965657, 0.09745187088883356, 0.12287422749691468, 0.10250176710516712, 0.14508203536549058, 0.1338484622195294, 0.14630319794874558, 0.13742213591943364, 0.13856933996575482, 0.13234246114777348, 0.14089120344000317, 0.1342521009587896, 0.15651497379519663, 0.0978932969062023, 0.044521628933850144, 0.1423381837380906, 0.14264194807189212, 0.08027624748170292, 0.14610950566912617, 0.1329324756741822, 0.1447542423705125, 0.12962611628373288, 0.12268463048748912, 0.1672112238472433, 0.1626334414507733, 0.12788542619972176, 0.12464679751788443, 0.14188232621018282, 0.22206396723822408, 0.12995256513811415, 0.1351147027348648, 0.1265597278919609, 0.14730832524040127, 0.14615202501749536, 0.1335454399409608, 0.10711479029607784, 0.13032633320547649, 0.17309264372456967, 0.18255671178988164, 0.16359013896892538, 0.184597429755053, 0.18300844814268846, 0.2027643460362557, 0.1961016620182503, 0.2036393388274691, 0.17283392190421032, 0.18190472865962626, 0.18325552715304916, 0.18440227281240162, 0.04411478245120237, 0.034633726852321356, 0.051355098077170314, 0.047848707041516, 0.04729109662780251, 0.04160260458660692, 0.04981199573154316, 0.042944978797482825, 0.036438689649188616]}, "mutation_prompt": null}
{"id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 26, "fitness": 0.1207970985985515, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "de4e4c20-0f68-4036-84a8-26cb24d28851", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "8cf3fc7c-cb65-441a-96d7-601c18c7aee4", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "3dbab584-0cdc-42db-80b3-9cd487475ecf", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "07e0ad90-5fd2-43d5-9ade-68cf62bae2e0", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "924a372d-0882-40ea-9ecc-e4b6212a3bd8", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "7bc6e833-74b6-4904-aa0f-d52b69af7a09", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "5ebfef39-2255-4338-a502-57ef4eeebbe1", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "84c3e997-2eea-430a-93f7-bccefb9d64b1", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "bcd33072-8875-40f4-8e98-8ca0f44157b9", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "76093903-a6b1-4203-a48d-c531bf2e11d9", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "7db600ac-d6d1-48c9-89d8-d40cd2e49c8c", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "915cec59-a81f-46b1-9251-0fb7ce0865fc", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        diversity_factor = np.std(self.population, axis=0).sum() / (self.dim * self.upper_bound)  # Dynamic scaling\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * diversity_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introduced a dynamic mutation scaling based on population diversity to enhance convergence adaptability.", "configspace": "", "generation": 37, "fitness": 0.12079709859853545, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.044016923706700406, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658201, 0.05659605271753754, 0.07896960742499848, 0.04591766318143653, 0.11214777368666584, 0.01704478347372429, 0.008286841031389991, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.13710504345160857, 0.1733566983997724, 0.14041756883327472, 0.15315413623720686, 0.15771675483531689, 0.15241710793085117, 0.13241055354980058, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.15163023843360446, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847030128, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.134570989515447, 0.13742213591943364, 0.13856933996575482, 0.14325241359295282, 0.14089120344000317, 0.1342521009587896, 0.15069646858554164, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856813902, 0.1961016620182503, 0.2036393388274691, 0.2027663716599739, 0.18190472865962626, 0.18325552715304916, 0.1920361181052701, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "db08b892-ad83-4b13-969f-48f1d16dd479", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "19a02d47-5a16-4f9b-b394-cd87ba06a0a9", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "cdcd9436-5d70-4ef3-905f-1d0cacc89d1a", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "8711903e-1174-4aec-8d8c-1a2bbe4f6509", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "72445577-118f-4be8-94fd-60b419f0bae0", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "0ec42510-21ef-4f2d-95b7-0b540e30d569", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "e00a8c58-49f7-4996-985f-38cb87205b25", "solution": "import numpy as np\n\nclass HybridDE_ACME_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.85  # Slightly increased mutation factor\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 4.5  # Adjusted volatility factor\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals)) * 0.9  # Enhanced scaling of step size\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME_Refined", "description": "A refined hybrid algorithm using an adaptive mutation strategy and enhanced covariance scaling for improved convergence.", "configspace": "", "generation": 44, "fitness": 0.12062996981595166, "feedback": "The algorithm HybridDE_ACME_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.16166429581565445, 0.15073637774871362, 0.14132873577589766, 0.21807150778116924, 0.15982272420272003, 0.17456660672777147, 0.1586673142942001, 0.16207185407467772, 0.1480751208947586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03649904124460246, 0.05119924156131184, 0.02936310800528741, 0.030780428044842156, 0.04847078348384637, 0.049622832363433345, 0.042706134405131935, 0.03532686277361863, 0.03925805713632469, 0.03016245838930187, 0.02966023641424176, 0.018843728083115074, 0.032047065695745336, 0.022277179659724644, 0.020612643220581428, 0.021822535792247022, 0.03282643960943765, 0.016860888716447753, 0.9870450769665705, 0.9831625518273451, 0.9903840216240579, 0.9691189891633964, 0.9809322364198625, 0.9339055860710683, 0.9793869969078833, 0.982858707266001, 0.9945951840217039, 0.09351848884408487, 0.08940583171038052, 0.076448781471248, 0.09108473345159696, 0.05657354875515885, 0.0675512477205964, 0.08125849541012298, 0.08069503888496088, 0.06775130241801086, 0.13802434342578618, 0.14383356483891496, 0.117099799056825, 0.12375803241830985, 0.10639416017198744, 0.11541837801767085, 0.11014917796353452, 0.10637706538560998, 0.10562943325548335, 9.999999999998899e-05, 0.007147126331825127, 0.011422265140766275, 0.02147043211618549, 0.045889939268745183, 0.03654280733826254, 0.001252720465938939, 9.999999999998899e-05, 9.999999999998899e-05, 0.004095059058643158, 0.03157432196689114, 0.00890696338876773, 9.999999999998899e-05, 0.0037143083438213598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034197220799776384, 0.029513320800443554, 0.0398338040630386, 0.06428513557752191, 0.029435580419155838, 0.06195840562473076, 0.048214924148720084, 0.018629452006704517, 0.03798967641665363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008915713456662533, 9.999999999998899e-05, 0.19602747019712252, 0.1541459188431401, 0.18382342059415802, 0.20193255421645817, 0.19534296213237856, 0.17752882903772882, 0.182321917552412, 0.15327591951172814, 0.19523007706869366, 0.03978023144820586, 0.04098072362886884, 0.04840876195807409, 0.0478861661091734, 0.03824029467636081, 0.05819090932427118, 0.039559772960485184, 0.046790941685640575, 0.04389768478619194, 0.1311366093717805, 0.15026361321767456, 0.12670940383163032, 0.13133721969030399, 0.14026235753025407, 0.13862405577669157, 0.13487330779477247, 0.14135256790147888, 0.1533693196027196, 0.1648542782896073, 0.16184354575226934, 0.15544528346315223, 0.162796166418664, 0.14558669786923406, 0.14356539541794067, 0.15400469212211243, 0.15856741352482573, 0.16615990879145415, 0.11389012109937613, 0.10660666931965679, 0.10851441019167685, 0.09730885878220907, 0.10328511392585638, 0.09647847271379528, 0.10441265316400261, 0.0981073707279535, 0.10035567402899326, 0.14063151727864465, 0.15025133474492047, 0.14892737442592896, 0.17350338778941055, 0.1749447414624159, 0.13526876925235798, 0.1544168640278636, 0.1524442613429945, 0.1499588966094869, 0.1366145591751432, 0.1337162051917048, 0.09926989394972208, 0.1414534844244486, 0.08073560177403394, 0.13292714172672804, 0.1396920245957739, 0.1387747246003973, 0.09519139230182505, 0.12209602434412004, 0.16333980118914404, 0.15342106043678594, 0.13845527758810117, 0.14342420560763025, 0.13018279252357556, 0.21055032876901625, 0.12160820402611738, 0.1192028775813293, 0.1499974158203511, 0.12072295654913212, 0.12359254395944042, 0.16266139020969217, 0.15005002977389958, 0.11656080017510417, 0.17431449436200652, 0.17336254061473688, 0.17930664895240112, 0.18903536217282813, 0.18672561808001487, 0.1913704556734549, 0.20448772221189404, 0.1907127034693783, 0.1955182071842263, 0.19638681138013625, 0.18637755108245413, 0.19289753889807149, 0.041779683428871284, 0.0387936459772773, 0.038418239036353996, 0.039970728891970286, 0.045457401638040795, 0.041575127689914004, 0.04098922559549978, 0.039769787786710586, 0.04616621472466764]}, "mutation_prompt": null}
{"id": "09ce80ac-a7db-41d5-8524-08e9af54063c", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "77bef02d-d730-4de0-aa71-46710c41a4db", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "939c4d3e-6337-4dbb-ab92-1ea073980aed", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.85  # Adjusted mutation factor\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 20))  # Dynamic crossover update\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introducing a tuned mutation factor and dynamic crossover update to enhance convergence speed.", "configspace": "", "generation": 47, "fitness": 0.11892585708030289, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15438269734494403, 0.14363350701488964, 0.14242780319204207, 0.21287655754578172, 0.16262562842523198, 0.222119673546747, 0.16785056150594768, 0.19914277597517138, 0.1861305145870108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03260120670124633, 0.03692991364508469, 0.039697220184500503, 0.03461733635393627, 0.036794759653926645, 0.03711706013543081, 0.03162540028748173, 0.041293421189154134, 0.03448611724103812, 0.04893661753175982, 0.01864100370289179, 0.023446068845941914, 0.02795863691283995, 0.030747376605038568, 0.023198347364571936, 0.02945277709647731, 0.01230040581353864, 0.032852295050257774, 0.9906440845586428, 0.9868613135434345, 0.9876182766682602, 0.9684639372280234, 0.9906044621391186, 0.9800751611951621, 0.9793822257686646, 0.9849251082349579, 0.9924504931193329, 0.07299850562389076, 0.06072893516209754, 0.057056297621407626, 0.07305463878010765, 0.055854357872563876, 0.06925724054934523, 0.07822235640100894, 0.07981520968334532, 0.07422344372040313, 0.14388961833056624, 0.14039658200881056, 0.10166854250471535, 0.1255507284756575, 0.09343382965341296, 0.12669098716900884, 0.10981058740120497, 0.11387858403394602, 0.12125055102851989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025255754656748675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005578786700051186, 0.009278833465160785, 0.0169791429775209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02499919340178003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06147814224367265, 0.037014425421089125, 0.03754178459286828, 0.05243318780922712, 0.04452378031654802, 0.04175923643020485, 0.04406510499530181, 0.04009026187907716, 0.017855782489277994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014953723605006797, 0.004694297388457058, 9.999999999998899e-05, 0.19272250958732895, 0.153553508900938, 0.1871119046471874, 0.18136951582365723, 0.19629156821447857, 0.17693830998839544, 0.21269658416111714, 0.16654914625170425, 0.16936385735199277, 0.05123623613774342, 0.05452884489664789, 0.040727313169433565, 0.03697431949185814, 0.038466639410440484, 0.03311508011360498, 0.03193877197151884, 0.028037607632884876, 0.03426246143028644, 0.14425841620133173, 0.124608383739511, 0.14793824080955797, 0.14378362905868203, 0.13220972664940656, 0.11668417141374432, 0.14573910958680814, 0.12786676048277423, 0.14303956001173623, 0.148078532023721, 0.1451106907503643, 0.160925464163021, 0.15369058249555745, 0.18247297408873353, 0.1421650139492192, 0.15552619022422953, 0.16345092294071273, 0.1614869933804246, 0.11643662497710883, 0.10858713373363194, 0.097094459476056, 0.10064816338322213, 0.09434100548420643, 0.10029892281519315, 0.10648355697689826, 0.10305494255078407, 0.11240347834358799, 0.12312444534967182, 0.14117562197482025, 0.15095328534996244, 0.1399870563280292, 0.12458905952238075, 0.1465155245239519, 0.1380308053384549, 0.14350771917891247, 0.16702473813957674, 0.03595727721338593, 0.08095597026677748, 0.14341815225104837, 0.1460657920667625, 0.10115956855805253, 0.11294167477434003, 0.12697834180740464, 0.14272966117215669, 0.12811515079588331, 0.12439925497334947, 0.12782213944663234, 0.15178871217750023, 0.14228779322284302, 0.11738374666353135, 0.16384207829541797, 0.1546822402689031, 0.1631168179388467, 0.1479993514915361, 0.1190268087689983, 0.12090053400884859, 0.1501989051463919, 0.09850065189998825, 0.12434291152647625, 0.15251390908645301, 0.17134873469719292, 0.18058054937459533, 0.1845039666076791, 0.18009444066496016, 0.19107059275761584, 0.17676041508231122, 0.18173638841215733, 0.18956790595341477, 0.18439656032192797, 0.18053691482329126, 0.18043340233331506, 0.1902579876032774, 0.04637630950198923, 0.03443389083938908, 0.04123625780769602, 0.04033208530193899, 0.03977332389459354, 0.04211742606144031, 0.04458847051751613, 0.04254532249906151, 0.056555826815352206]}, "mutation_prompt": null}
{"id": "d6b949db-747e-4415-99d7-7dd4f3cb676e", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "d21d41e7-af7a-460f-9621-2d1ad6451041", "solution": "import numpy as np\n\nclass HybridDE_ACME_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        adaptive_mutation_factor = self.mutation_factor * (1.0 - self.budget / (2.0 * self.budget))\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + adaptive_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME_Improved", "description": "Enhanced hybrid algorithm integrating adaptive crossover and dynamic scaling of the mutation factor for improved convergence.", "configspace": "", "generation": 49, "fitness": 0.11931417636666633, "feedback": "The algorithm HybridDE_ACME_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.1673699843756098, 0.14077314522496764, 0.14937889262026294, 0.17101316487105067, 0.18104809337203087, 0.1781147648028495, 0.17857247787941033, 0.15908894227901837, 0.15982011874247615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03568224421316535, 0.04309249665860948, 0.03718721905453026, 0.038324505156920874, 0.045021430532246276, 0.03826282822839622, 0.04482688783520805, 0.0278068501283818, 0.031339817666492076, 0.022503261539866037, 0.01493657166233675, 0.02503959255620325, 0.017100401520327435, 0.020834819402735905, 0.022713987242274913, 0.028504013367214642, 0.02098749804278688, 0.02117116019431864, 0.9873786894945548, 0.9907755857862443, 0.9888704689939458, 0.9860277425331988, 0.9827889307668363, 0.9741782046212374, 0.9828522500255705, 0.9845390877427689, 0.9911102107569479, 0.0713150642590561, 0.060940168281832685, 0.07402280225005875, 0.12500491063552877, 0.0600892661462985, 0.08745806208672224, 0.0803900220767475, 0.0713831189182963, 0.07957815500882859, 0.1345402285313645, 0.13390452518191853, 0.13176559545427646, 0.12095255799422899, 0.10985233965830399, 0.12131083193063519, 0.11938180408860843, 0.10958376765667677, 0.14098003434969797, 0.00913272283109623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005936178749425203, 0.007588439740725539, 9.999999999998899e-05, 9.999999999998899e-05, 0.00973706298068433, 0.02229020586197117, 0.006421089501017607, 9.999999999998899e-05, 0.001276868066521275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03537183486507689, 0.034243071767103506, 0.013931749663271487, 0.006068788068069764, 0.004803655046993316, 0.04566443331550896, 0.032758791333337256, 0.05643391512285556, 0.01310507634263447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008602382189861757, 0.0035671434756413545, 0.1588235191881897, 0.17600810350546958, 0.19756683820475018, 0.1836301446630011, 0.1695992280126789, 0.1732763342143051, 0.17768340991809806, 0.1921301250855053, 0.17991710827197016, 0.046251441930220794, 0.04941386126307645, 0.05074658155849687, 0.04458475738805623, 0.036638287179483475, 0.04129129838454626, 0.03563958495637054, 0.04773252144794282, 0.044379785279712314, 0.15104567987611006, 0.15291990543612188, 0.1859469964822028, 0.1300790383442305, 0.15148350468320115, 0.148919160524546, 0.14381095622754914, 0.12812745184872443, 0.13977996450387942, 0.15060729202944312, 0.14655046295690333, 0.15326109760007645, 0.16200337635051343, 0.1505884028490373, 0.14559968895355957, 0.18198063156212285, 0.16397512699764427, 0.14929565111936993, 0.09247196263004065, 0.10012986150273828, 0.10782791579551143, 0.09523382409292358, 0.10003731576309527, 0.09723350587661261, 0.09542861544544867, 0.10129115745447148, 0.11157155177885703, 0.13785845723780532, 0.13546915554124428, 0.16425794248560555, 0.13906996752543022, 0.13193025773422506, 0.1608291069292671, 0.14898159413453071, 0.13793799732956413, 0.13146557894552446, 0.13853610674516093, 0.0953585336642584, 0.08024078692263614, 0.03942233273450857, 0.13380630196123489, 0.12529102726504715, 0.13703633010928695, 0.1520687908955135, 0.13903406381182903, 0.14536788617775365, 0.13886309446400646, 0.1578926437661332, 0.16816464870774617, 0.13984292141088972, 0.1265021852737207, 0.12428734601169777, 0.13909980323567328, 0.14342178141811746, 0.12442369959822097, 0.1600390838810214, 0.1567794035893949, 0.1593902554661044, 0.10417949296217666, 0.1559149322070501, 0.18215485906178375, 0.17465345600848536, 0.22723012891743233, 0.18956916742418162, 0.18965334786452104, 0.20310774700540035, 0.17279280959962562, 0.17766742655769263, 0.18622482745393387, 0.1740145497978749, 0.1900621426021748, 0.17748873937510412, 0.03651258078789965, 0.03926739600036422, 0.03900296455201735, 0.0460268789014362, 0.03262731237366823, 0.046961085352639875, 0.05035795912858665, 0.041175952090493406, 0.04485336571442877]}, "mutation_prompt": null}
{"id": "418bb708-0583-456e-98c2-09fc6bb03c36", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "43742bad-dd0d-4840-99b8-a98810895fe6", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "2b42668c-5f15-41bd-b8cf-bf545067a5bf", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "cc41f379-973a-4fa9-84d2-cb6ff40d2daa", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "ed8a0c71-46bd-455f-a94e-252536480b35", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "5547ef29-b26d-4f61-bda8-eb5c35e8c29a", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "6b5e7833-b2dc-4e1b-a223-68c8a59f1e63", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            adaptive_mutation_factor = self.mutation_factor * (1 + 0.1 * np.tanh(self.best_fitness))\n            mutant = np.clip(a + adaptive_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        adaptive_step_size = np.sqrt(np.max(eigvals)) * (1 + 0.1 * np.tanh(self.best_fitness))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, adaptive_step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Enhanced adaptation in mutation factor and step size to improve exploration and convergence.", "configspace": "", "generation": 56, "fitness": 0.11979455344751642, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.14481804612685778, 0.16130804804653598, 0.13006968792655116, 0.16201159934766873, 0.17215694971926865, 0.17549022623012966, 0.1674962208760642, 0.17825270941571159, 0.1552580702574774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04030832571134102, 0.05534628414597842, 0.040692591079895646, 0.04359895274527115, 0.036913275172441695, 0.03187714173158873, 0.03145632310972446, 0.045991146748007306, 0.03618865364490209, 0.0287668171450971, 0.014885565320088556, 0.03659836123950588, 0.024651270425037897, 0.023936727581497674, 0.020940003338945412, 0.015979019147126072, 0.022162032759516115, 0.03795017117823429, 0.9906500942237813, 0.9848837328071601, 0.9904701600176031, 0.9686454935972503, 0.9904310214847003, 0.946523282179714, 0.9794376249412963, 0.9854299765581668, 0.9945997939145871, 0.05508602487832981, 0.06515752275739817, 0.06398026539414237, 0.06772121347269588, 0.047439625818652575, 0.061794669459703466, 0.07471626610623283, 0.0809127328105651, 0.07094505044533106, 0.13935166467350368, 0.14383356483891496, 0.1052647409134081, 0.11812449083116694, 0.10171524297700818, 0.1289374821923286, 0.10286776796658048, 0.10580592709375392, 0.11772208447562682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048112550382967134, 0.014677879773431268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0039680089685755204, 0.007959895182435117, 0.011663094371393012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012795222157936714, 0.04578582463712233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305212816027305, 0.041530576547815, 0.03527423403312768, 0.05785659163978485, 0.04823401359773105, 0.06401398253259272, 0.05135083450871547, 0.001580556189428317, 0.039101929940667635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016164510664179454, 0.19624485332455854, 0.15641862746290047, 0.18856862663412421, 0.18782034453412788, 0.18044971905778862, 0.18689071935912038, 0.15255071926920538, 0.15793988336409692, 0.1826226262301609, 0.045906094732581226, 0.048270871132281123, 0.04486552415719802, 0.03276581060712036, 0.0533281427277712, 0.05363908577483523, 0.05901417954944299, 0.033275190957967604, 0.04028331232525284, 0.13075145471883953, 0.16350135118551368, 0.15011379900250832, 0.22755723299725683, 0.1777057070165261, 0.1393241323902057, 0.158043735184499, 0.15449894629204408, 0.1559933170076362, 0.15600632212757304, 0.15873158252856723, 0.14840886900763084, 0.159867942659091, 0.1533496358833385, 0.15306867730452045, 0.15876003035057296, 0.15288376496699296, 0.15836055556628859, 0.09555048305195146, 0.0950161910271492, 0.10217726911190261, 0.11979441147796022, 0.08333069826029682, 0.10039231871006504, 0.102595489095334, 0.09821185745821126, 0.09942476451533289, 0.13241276287544712, 0.1512828001653399, 0.1541741725716369, 0.15516517058181578, 0.13309318518202162, 0.13290320505914566, 0.16406928001124232, 0.16075094221980035, 0.1284477646094434, 0.019348061404020345, 0.02114909378888641, 0.11588626575777528, 0.1492866626522802, 0.13686389347958505, 0.1400565000371058, 0.1245158451384466, 0.14136071829769958, 0.08254940126189836, 0.21247567047520854, 0.1639429351599765, 0.19069976917391562, 0.13742661361697028, 0.14348039655454015, 0.15545872674116978, 0.13625816638090404, 0.1380457914391816, 0.15817565830196867, 0.14496280976438936, 0.1185514043443684, 0.15696348892997503, 0.09924208960803316, 0.14281775349796444, 0.10889736852331566, 0.17389910924661867, 0.18372145316106603, 0.17007023094998808, 0.19827779657506317, 0.19782404231194195, 0.1964229638245527, 0.1871966087797593, 0.17742246586339316, 0.18444690137048403, 0.18859150265355207, 0.18030212551027813, 0.1879925074916986, 0.05806322762355143, 0.03666950118529022, 0.04264814110983184, 0.046428224346854785, 0.03225421706355014, 0.05437164410710049, 0.0357165500169393, 0.03844352239668747, 0.039146060681050976]}, "mutation_prompt": null}
{"id": "062c88a7-34ed-4f5d-971f-8f934b05262b", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "5681cf76-e70f-482c-81e6-f141d631c319", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "ab980647-d619-49e3-9736-88c24740d949", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "e4e53568-8f68-4ac3-be6d-0ea651e11717", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "6bf8cc2f-e4d3-4035-ad4e-bafacda959d1", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "1270f9d4-751d-4762-8114-e9397ebd6f2d", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "0489bac2-703a-455e-a473-469038c32156", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "0450acc9-d9c0-4569-b811-4e5a343e1f69", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "3e477643-a6da-43e2-8520-9cb72ec50c6f", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.initial_mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        mutation_factor = self.initial_mutation_factor * (1 - self.budget / (self.budget + 10))\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introducing a dynamic mutation factor in HybridDE_ACME to enhance exploration capabilities and improve convergence speed.", "configspace": "", "generation": 65, "fitness": 0.11965816349010285, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.14635868080094838, 0.14164644869636067, 0.14089601665953666, 0.17353596377583758, 0.1686719409405849, 0.16406755574391918, 0.17073153132079932, 0.15178338110770817, 0.17598538317614654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034685654052984294, 0.023958940444285703, 0.03725487378759773, 0.04569172613940242, 0.038859840924690636, 0.03519696303532527, 0.03418038201877538, 0.02781372544816496, 0.03442064996728045, 0.014211193470886285, 0.019514160556679205, 0.0288688246982991, 0.05524340709911413, 0.016669842179161787, 0.03623934411332452, 0.022361462357908257, 0.026294006090680666, 0.014172721605879457, 0.9907878669976347, 0.9787656819118877, 0.9918191763500381, 0.9625311554315654, 0.9862997625413658, 0.9684748109125099, 0.9826111805925198, 0.9902287966763833, 0.9910042555861961, 0.07366245761929169, 0.04702490133487902, 0.07038613398119375, 0.09780643200453432, 0.07010271173892468, 0.09536976079158466, 0.08631341866899056, 0.08576365132318975, 0.08267986957192985, 0.12137138881724152, 0.12967367143327724, 0.13928611578083905, 0.10930455944921957, 0.1098047146515686, 0.11598427695544256, 0.11808892385801573, 0.1330472546733228, 0.10709824039657068, 0.048273972274756716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004663997970813072, 0.0073243469487568325, 0.0022364169161146474, 0.00037226213090812976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042555863819147666, 0.030940210889154884, 0.01644195736555576, 0.020321603525381593, 0.008586036439550693, 0.04614750936692957, 0.02879360221225402, 0.021716574488159335, 0.03317993244843387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011942826659347983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18155674095112395, 0.15263958037632874, 0.19940420205517384, 0.1979212396213046, 0.1750969127605374, 0.20716417442254098, 0.17036752127572197, 0.16728415953604459, 0.18997713544125727, 0.045966529902628284, 0.05714108429759179, 0.043491849651333125, 0.0566777696522468, 0.05085499141833483, 0.0470499034968036, 0.04138187885780442, 0.02718656070453307, 0.04040123787699501, 0.14014307089241607, 0.13759689481825133, 0.1453164461658194, 0.1537052844328649, 0.14669884705212843, 0.14353462833938357, 0.13196659140241573, 0.18996034799423311, 0.15979732902142185, 0.1510603429209898, 0.15108980020545026, 0.1620700337227169, 0.16320176201287284, 0.1398336096386763, 0.16236822509450888, 0.1656168889559816, 0.15422537984239404, 0.15055376036084034, 0.10861741662638436, 0.10393206701026025, 0.09964004140090932, 0.10821997637533642, 0.11203090161056783, 0.09922020205493154, 0.09556358067232629, 0.1076447757482627, 0.10174346208693208, 0.13671982001821603, 0.13930841984758913, 0.13435362587040123, 0.14427972667732192, 0.138126458883703, 0.14249959281149926, 0.15077471195215963, 0.13927118741195987, 0.1407355268241297, 0.15235541879100634, 0.1463908206890715, 0.08942049818821796, 0.13078424627882634, 0.12469204256854138, 0.1344996983406509, 0.09063273165639296, 0.13744645686715617, 0.1342030625029278, 0.15068585007991786, 0.11918892062780029, 0.13966981349439234, 0.1334224952894668, 0.1323420689870065, 0.14747048047230527, 0.1574789119196741, 0.11057209255091349, 0.18779122539283888, 0.14796877262903907, 0.1151381000384668, 0.16688423280080444, 0.16588910894196396, 0.12080392680859553, 0.17870667219440495, 0.14779161924420203, 0.1788039922125908, 0.20415375217471, 0.2037620323201017, 0.17993301474735368, 0.17595222309331726, 0.1898814172285137, 0.18544655397482146, 0.17543368061987163, 0.1719909846573604, 0.1845746278059709, 0.19153602055720154, 0.04182665290852672, 0.03486087329188303, 0.06147037239788844, 0.04319913861102409, 0.034883408852122155, 0.054269720867015314, 0.056019965055168375, 0.03733169114944268, 0.043465355203936684]}, "mutation_prompt": null}
{"id": "9052675e-6be6-40e0-9b00-ab1a5134dfcc", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "f4c89663-f5de-45ab-9d75-ca40ae50308a", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        mutation_adaptation = 1 + (np.mean(self.fitness) - self.best_fitness) / (1e-9 + np.abs(self.best_fitness))\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * mutation_adaptation * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Enhanced mutation strategy with dynamic adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 67, "fitness": 0.11859188924854674, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.18450768226429315, 0.16203863673535412, 0.15578069442582188, 0.19166290892551363, 0.16652149589569176, 0.16938056957453262, 0.15608746989833855, 0.16241289074195542, 0.16688020646345136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03640953789322099, 0.03477629906204216, 0.03232881025243228, 0.03314023880698247, 0.03624321289581278, 0.04389801721111575, 0.03148115283162989, 0.04733794553941584, 0.04441495275519558, 0.02538777055464092, 0.02921623465751233, 0.023515615284347424, 0.022756804701035027, 0.016621951947449864, 0.024022175203398, 0.018686150029665227, 0.024686752908219978, 0.02284266110648603, 0.990296623502979, 0.9891615038909022, 0.9841235653571602, 0.988117011509579, 0.9924427696989753, 0.9897420234503983, 0.9822170538730657, 0.9836780021725088, 0.9890484675170814, 0.060441642852789634, 0.0464569457860714, 0.053983899844925354, 0.08942685584310262, 0.05891570935193269, 0.0809276757013686, 0.06453164839084058, 0.06759190242170532, 0.08334952925071681, 0.122760386840016, 0.07790018494224038, 0.12059795912146287, 0.11580793477684004, 0.11367879635338851, 0.11708626234670994, 0.10483555719933668, 0.11412226048299401, 0.11566867580404983, 0.0, 0.0, 0.0, 0.010795516566853403, 0.0, 0.001795164781008718, 0.03198730618783574, 0.0, 0.0, 0.007650222880212665, 0.013068099526131527, 0.007709977381980426, 0.0, 0.0024347917031863897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04373621589701726, 0.04513762587027703, 0.045098555165899556, 0.051920930527245446, 0.0029449826674333712, 0.05457433507957232, 0.022085257393322566, 0.02816129452025562, 0.05338918355328437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5662765518231758e-05, 0.17392507628027976, 0.1583768830997282, 0.17852853594031826, 0.19259591962507605, 0.1956995972105675, 0.17621826161039877, 0.20994951430486686, 0.16345739498669465, 0.1630838676241365, 0.04599969387568803, 0.07342656944870107, 0.0450708788366736, 0.03903672974339534, 0.03235389299632552, 0.03184833513181362, 0.05219287381894211, 0.03373868026690929, 0.03142130578315849, 0.11242467160781233, 0.19084168830790582, 0.14152083338473442, 0.12351693359334948, 0.14538741965253033, 0.16280595714708213, 0.16227570804349067, 0.1333219558687666, 0.1465757601292389, 0.154869011121748, 0.1438225328453886, 0.16642887352287794, 0.1515965286427432, 0.14789636006611495, 0.1526730585994195, 0.15526302169498774, 0.15075081559317005, 0.18026773484934855, 0.11884192540631633, 0.08678763354403873, 0.10030163521044233, 0.09028908843416683, 0.08795372888300712, 0.09017775796296901, 0.1009749781514312, 0.09721425623316804, 0.10378835421691635, 0.12157279210353811, 0.1712574198684963, 0.15100734187921372, 0.1380921120188312, 0.15182099788170744, 0.1335089512768649, 0.14045507365885024, 0.13544875669303325, 0.15238925281267968, 0.1036743927321857, 0.1431747081436091, 0.12787131451003386, 0.1085921371885521, 0.08072039709562306, 0.12817771936340538, 0.10434399966681718, 0.11341457846768899, 0.14071450791460105, 0.1637594043051347, 0.1383638968945453, 0.15110669907591312, 0.12994818191131485, 0.14710578323889856, 0.15408428367307403, 0.16153472252293355, 0.2536900100626329, 0.15912228793873817, 0.14075109922397333, 0.13981859480419556, 0.14354053296322455, 0.10806526753931411, 0.10881322445903518, 0.109586594798455, 0.17800971636779417, 0.11482704850775538, 0.15153813659778292, 0.18963050320486963, 0.1902095227999494, 0.1872532220254416, 0.18055314557365687, 0.18461480706404576, 0.1810454504064518, 0.17832499362726828, 0.18084038350122156, 0.18015099465203166, 0.03880419187961792, 0.03501335423826746, 0.040807940449383406, 0.045134957731367886, 0.04229296567882834, 0.045351392420393655, 0.05223900024813177, 0.030736782959004838, 0.05499548845314861]}, "mutation_prompt": null}
{"id": "4101e5cd-4449-46a7-8d4a-586ec57bcff4", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "e1256abe-bbb4-4a61-819d-06b6df557b5c", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.generation = 0\n\n    def differential_evolution_step(self, func):\n        adaptive_mutation_factor = self.mutation_factor * (1 - self.generation / (self.budget / self.population_size + 1))\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + adaptive_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n            self.generation += 1\n            if self.generation % 10 == 0:  # Periodic reinitialization\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introduced adaptive mutation scaling and periodic reinitialization for enhanced exploration and convergence.", "configspace": "", "generation": 69, "fitness": 0.1207970985985515, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "4a4b4bb7-93d3-4d61-bac6-67f2f18b566b", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "cd6ecc69-4145-46b2-bc83-1b6afbd5af20", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "b109a02c-d5f4-4533-87a3-02bebfecd506", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "f7b31b29-1a70-4e21-baca-c99511464726", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "81b133f2-fd84-4a63-a823-000392199c3d", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        dynamic_mutation_factor = self.mutation_factor * (1 + 0.1 * np.sqrt(1 - self.budget / (self.budget + self.population_size)))\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + dynamic_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "A refined hybrid approach that includes dynamic mutation scaling in differential evolution for better exploration and convergence.", "configspace": "", "generation": 74, "fitness": 0.119571241899977, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15557366629318525, 0.15039508749109265, 0.20277339911247616, 0.17541354659146824, 0.1729939942860057, 0.1913205187029493, 0.16572021362176748, 0.19488807982353407, 0.27181538601997834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0347390139593321, 0.04221273742786702, 0.04745802812314637, 0.041050569681266635, 0.03971785987171983, 0.03621487136518475, 0.03423779727761789, 0.037031540729941304, 0.0483485242527768, 0.03641225733229114, 0.020282776946470626, 0.028922113154155937, 0.022278512295218156, 0.027040735453613296, 0.02706479972950293, 0.02886134003393126, 0.019074522462557253, 0.028765346928111613, 0.990653740294838, 0.9871437055071687, 0.9780526097984348, 0.9690530623351992, 0.9886208333455523, 0.9775825499490526, 0.9793843566045575, 0.9812972963123482, 0.9873225654534663, 0.07417644482025754, 0.06297371291074993, 0.05936137119565432, 0.0620444538290289, 0.07426180017753481, 0.07105600695188152, 0.0829163106880011, 0.0811974077904617, 0.08569759637417029, 0.14666160359066782, 0.14039814547415352, 0.13417665924162303, 0.11255268890909265, 0.10475208907481226, 0.09967159301282758, 0.11487744033346847, 0.10411223390499547, 0.12973028246882545, 9.999999999998899e-05, 0.004632354121202886, 9.999999999998899e-05, 0.002358332268431851, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004399622266527348, 0.008089403783905214, 0.00924343453572496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013050129576493208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036495186911720934, 0.016446413585604613, 0.014471559400740852, 0.04055503892916479, 0.023598596280760664, 0.05012239729791057, 0.023064560889793362, 0.028242552028731382, 0.018992204653555222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005427557432670427, 9.999999999998899e-05, 0.19248304176105036, 0.15253927881313434, 0.17218684582731292, 0.1975336705854659, 0.20521972661260535, 0.1871583666517549, 0.21826663254320788, 0.16919435326624332, 0.17835537935126355, 0.0491759497976314, 0.04822362876916597, 0.042785984789878606, 0.04603083863531632, 0.05457579118143985, 0.03794223548580844, 0.03298813436615733, 0.031552905884657645, 0.055851965271724646, 0.17177713215558976, 0.12991453409415066, 0.13568387814566574, 0.12761095223781216, 0.1766644471555464, 0.1326733480825789, 0.15744309248255106, 0.13429406527746612, 0.1389204198682079, 0.15012518540674535, 0.1465464183634656, 0.1641674331699221, 0.1472399022378249, 0.15282128076286317, 0.15066756821880156, 0.16202670297031896, 0.16391135777512444, 0.16441019593307393, 0.09610890627130775, 0.09887627039588787, 0.10941907836134124, 0.09748156185036683, 0.10991381819074653, 0.08566418374847418, 0.11129687647376763, 0.10504950611336861, 0.10074779155235025, 0.1374214860479568, 0.13820134395089623, 0.14415271553989473, 0.14775552636058087, 0.1309909295771784, 0.1526806314261676, 0.15571053037157911, 0.12599128661165382, 0.16055142426810887, 0.09863787993901874, 0.04492441123587432, 0.14193030803356865, 0.1419999035666467, 0.08227744193062514, 0.09206851282989015, 0.1341726648039685, 0.14440546204643911, 0.10143259521126291, 0.122233975720894, 0.1672450240913177, 0.16330605518040153, 0.12816633542480027, 0.12442525508766211, 0.1282879479838661, 0.2227038920157699, 0.13166677668363502, 0.11721721606524005, 0.12489609654217415, 0.13703159018165156, 0.13246211251657591, 0.13325136867845444, 0.10853408535073827, 0.1526599268278942, 0.1719025598477698, 0.18231380147471887, 0.1962304068245062, 0.18187046324551615, 0.2030494937445928, 0.19163024552329244, 0.18600144894973036, 0.1782739414688127, 0.18132552218865183, 0.17870151897835473, 0.18580589839566497, 0.1863024719911357, 0.03871434608230773, 0.034632054028806314, 0.04574210708144999, 0.037840921837989705, 0.04032414669349382, 0.039970756299989585, 0.03957801160116359, 0.05309149320909201, 0.046948148657543265]}, "mutation_prompt": null}
{"id": "976899e1-3ed6-42d3-ad89-426660c0cd76", "solution": "import numpy as np\n\nclass HybridDE_ACME_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        adaptive_mutation_factor = self.mutation_factor * (1 + np.random.uniform(-0.1, 0.1))\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + adaptive_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n        if self.budget < self.initial_population_size // 2:\n            self.population_size = max(4, self.population_size // 2)\n            self.population = self.population[:self.population_size]\n            self.fitness = self.fitness[:self.population_size]\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME_Improved", "description": "Introducing dynamic population resizing and adaptive mutation rate adjustment to enhance convergence speed.", "configspace": "", "generation": 75, "fitness": 0.11898477835018578, "feedback": "The algorithm HybridDE_ACME_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.1717939632605161, 0.15118311607716373, 0.14214594821041537, 0.2067719323607341, 0.19586270422511476, 0.16527470238714437, 0.16204154250355152, 0.18021015847875022, 0.14154242559814356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037474493821215815, 0.03266707021016846, 0.04009412217020669, 0.0424481431747421, 0.041022339533854035, 0.032542310987556444, 0.029617303809135964, 0.030833252396886723, 0.05441689072345457, 0.02828009414577992, 0.03199430897632771, 0.028374999817782576, 0.03029365428457753, 0.020111118459611665, 0.02115549665763139, 0.01718786330745603, 0.019758796026331016, 0.017190377447115268, 0.9874349586297915, 0.9909410981480072, 0.9801436232229703, 0.9778674968493438, 0.9820833750683775, 0.987119949554972, 0.9848801764194332, 0.980930049095069, 0.9825096386152979, 0.06484616353947825, 0.06072084081854079, 0.07768392031593119, 0.08516089321134546, 0.07059270055211475, 0.06593820512879833, 0.06943909228562117, 0.06455342196368674, 0.07401605523019916, 0.10481139402355999, 0.14040919462154, 0.09074813126255521, 0.11958730919900484, 0.1303804178042901, 0.10180706324437816, 0.10937225919532956, 0.10097814013555817, 0.11010473707539281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006995480129813325, 9.999999999998899e-05, 0.017316628742095053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01022331200232729, 0.003998127705189147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042002505798988565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035434436351198584, 0.03870957586804358, 0.023068653727729038, 0.024015887547179426, 0.024997783442746724, 0.02725637354033239, 0.049883173713689, 0.011958568692207017, 0.02516751077315038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001714119870297126, 0.0012564723375555475, 0.16893024286014546, 0.18539841789112266, 0.16711715311382724, 0.17731921327676248, 0.1979865564894605, 0.19516182961934536, 0.22969831448812006, 0.1643160389001227, 0.1715738291170954, 0.04426035014762586, 0.041330550847649694, 0.0494976635912564, 0.03828675997448194, 0.02518767686439094, 0.035685937819102787, 0.04147695561997511, 0.02926513494454408, 0.04562060539273405, 0.13466842515409694, 0.14735787614899076, 0.14810236293159218, 0.13874735598263177, 0.1368644708643929, 0.12757507738742857, 0.1349503122479826, 0.13037693366042435, 0.1970113049153609, 0.15412567540682343, 0.15009761081524342, 0.16189040272571387, 0.1651503529926156, 0.13902030892369255, 0.16703176777469397, 0.1593364258435731, 0.15600196253868204, 0.15211782170725274, 0.10856569362687529, 0.08658809432705816, 0.10148804637589359, 0.10603271222277, 0.1097163345723764, 0.08928388399681275, 0.09887248415934902, 0.10088179786011064, 0.09550049186142806, 0.16155623400911479, 0.13442752900423127, 0.16866604644513572, 0.16942092337477466, 0.1791880624474328, 0.15237863902230364, 0.13577923560144523, 0.12876205459341494, 0.13459753806230856, 0.12854533540713997, 0.03371156945983944, 0.0987409809038039, 0.15360671267237735, 0.11340047230416661, 0.13028500761148187, 0.10489535223124258, 0.15019705557252128, 0.06750187064477264, 0.1461153392295198, 0.1485109426435094, 0.15504018085433968, 0.16447628290156313, 0.1367831851396475, 0.16823473715187287, 0.14009180633992036, 0.13673437337002925, 0.1292797254597281, 0.1334540680731845, 0.11254197923225251, 0.2211892530980173, 0.12899536369953857, 0.1068591182048444, 0.1523903877941999, 0.22481383349492112, 0.1814475024203117, 0.17045560685476335, 0.18049013332682573, 0.18513318611608243, 0.18473684763927023, 0.190910172854588, 0.1957137726596787, 0.17997856907489362, 0.17744080674656848, 0.17988682755590857, 0.19390695157014648, 0.03733802748275228, 0.04662750229053514, 0.05764633541765252, 0.05462796616129739, 0.03844497587506246, 0.045140559005529046, 0.0411703531556159, 0.037726108852022655, 0.05549739215673799]}, "mutation_prompt": null}
{"id": "eaa0f5bf-05d1-4966-aa1c-4ecb613f07f2", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "aa199d6d-ef0b-4207-822a-c6ab63c81a0b", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "f967e8fd-3e2a-4e2d-befc-51b4983c0470", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "37ed1c26-0121-4c0d-ad62-9633439a5813", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "dcd6290a-b506-4c3e-8bf9-0d0cd71132e3", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            # Dynamic mutation factor adjustment\n            fitness_improvement_rate = max(0.1, (self.best_fitness / max(self.fitness[i], 1e-8)) ** 0.5)\n            dynamic_mutation_factor = self.mutation_factor * fitness_improvement_rate\n            mutant = np.clip(a + dynamic_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Introducing a dynamic mutation factor adjustment based on fitness improvement rate to enhance convergence speed.", "configspace": "", "generation": 80, "fitness": 0.11972982828842087, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.1475378337640919, 0.143989998766327, 0.1409436401739005, 0.16464039032260824, 0.1687831299528687, 0.16805211738184533, 0.16949820116852565, 0.14243602962223667, 0.17425652235971012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038939924891113864, 0.029752674209307717, 0.0477108947018674, 0.042644589402008215, 0.04323204188721175, 0.04013715027699105, 0.0425986932465614, 0.03453860996293767, 0.04075753323598952, 0.03328034373104127, 0.02559249852247647, 0.028437168314746852, 0.025582106531897963, 0.022296828720976603, 0.012852823932975488, 0.03569481846197908, 0.026955820401657005, 0.020890325075746063, 0.9863233424638093, 0.9842852946543273, 0.9918040846784799, 0.975981168607788, 0.9876061870110394, 0.9684065764654993, 0.9874924240778459, 0.9841160764285489, 0.9879156920357286, 0.07703032500581908, 0.05888572285684146, 0.11080531494921286, 0.06298345878266087, 0.06575481905466862, 0.06715197040860277, 0.07688904107403383, 0.06929627359678647, 0.079061576466115, 0.11858690429763141, 0.13015888855628832, 0.13460578625444664, 0.13923950432726373, 0.09903470969671158, 0.1120132636546608, 0.14217331757056673, 0.10197489657927183, 0.11836716417396698, 9.999999999998899e-05, 0.0022055681016650563, 9.999999999998899e-05, 9.999999999998899e-05, 0.006373968314245193, 9.999999999998899e-05, 0.015522641747945487, 9.999999999998899e-05, 9.999999999998899e-05, 0.004177957304005719, 0.009437949417728353, 0.005386580729102364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436077710887388, 0.026301712191626025, 0.03213995149890558, 0.03580742287168781, 0.029611170862894554, 0.008707651085623547, 0.03307893836362963, 0.044784912991379544, 0.026628755649716784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004648951754365749, 9.999999999998899e-05, 9.999999999998899e-05, 0.16018081261212813, 0.17611682767363523, 0.19896373100430886, 0.18783091484134107, 0.17499211393835634, 0.20161364327532827, 0.21125523696292348, 0.1655434823947335, 0.18861881402601577, 0.0672023045288308, 0.07134280562299178, 0.038476129834015826, 0.049442299051415506, 0.03388312124053283, 0.04051694192110589, 0.04198414325548361, 0.04047937912709554, 0.0517964404343535, 0.1627257139147268, 0.13134376638695688, 0.16763781700671532, 0.1405226758826168, 0.13452708115755652, 0.1353247930393363, 0.1402979422068713, 0.14702951600927028, 0.129402030968381, 0.15314060355878412, 0.15038310512413622, 0.15923698952296728, 0.13477769983858745, 0.15524077751912368, 0.1391747549437512, 0.15899206646158837, 0.15331678419885608, 0.15290169773658402, 0.10472397721197335, 0.09124592608163928, 0.0968104147363309, 0.09585369887714545, 0.0882392402433192, 0.08499807763678835, 0.10504952727420491, 0.09789936276159461, 0.1027315785998093, 0.13031516208240845, 0.1452123277024422, 0.16409546794676755, 0.15319621783088389, 0.1365757278700055, 0.15929214441734907, 0.1779692589372549, 0.15309647185691178, 0.15304555038840606, 0.1568252402049124, 0.14060617119860797, 0.08784751603935914, 0.128484255112284, 0.07082663663384992, 0.13481061717984344, 0.1269327679035519, 0.14451163241739307, 0.144727549282761, 0.1440292230264838, 0.1540081774672719, 0.14461697519019612, 0.14740019904048696, 0.1220301170550172, 0.161109094000764, 0.14181059609030433, 0.12457290437297086, 0.19732158862562066, 0.15160716025177334, 0.11920582897796306, 0.11988349874678295, 0.11680049717488561, 0.1075221557271856, 0.1784346677789208, 0.18916692020662573, 0.17332686766206662, 0.21829284957380746, 0.18855169358367696, 0.183807566864728, 0.1929072982555845, 0.18727599369883563, 0.18404359445353247, 0.1738442297545082, 0.20287854962327145, 0.1735851235307173, 0.18629934945762283, 0.0418761175685437, 0.03358869345114324, 0.041009887988248894, 0.04825090044135705, 0.03704200526974766, 0.03890927622350204, 0.06059378753386713, 0.03441370795273502, 0.045636935287346914]}, "mutation_prompt": null}
{"id": "e9094b89-1b0f-415a-97b1-a793fe0eaafd", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "bd219c0b-ffe4-41da-8a62-f86b33ddf8e0", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "ccc7bcec-7a3c-4227-a895-9b3d815d3ce8", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "0de1c978-6297-4ec0-b0bb-0f3b6c6ec3d1", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "5ac4a033-d87c-4883-8bde-b7bc61d4e338", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.85  # Adjusted mutation factor\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c) + 0.1 * (self.best_solution - a), self.lower_bound, self.upper_bound)  # Introduced best solution attraction\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Enhanced mutation strategy in the HybridDE_ACME algorithm to optimize exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {}, "mutation_prompt": null}
{"id": "53ebf2b9-90fc-4e4e-94ab-ee4059a1e01f", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "d1e7d0bd-fcba-44ee-84f8-356ff8b8d810", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "de393a03-cc0d-48be-aa75-1c0d7a7d107d", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "236346ae-6e65-4ccb-9aaf-41b6d0280a37", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "26541c89-6be5-4050-912d-5d872f16c1f0", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "3d66360b-ec59-4087-8c5f-6ce523be5341", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "a6f6e259-a72f-478c-a6a4-cb85f6567d9b", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "5e3978ea-68c2-4b63-bde8-9101813866fb", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "ad4cfb53-a876-40af-8cd7-c3a0104f9985", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.prev_best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        fitness_improvement = max(0, (self.prev_best_fitness - self.best_fitness) / abs(self.prev_best_fitness))\n        dynamic_mutation_factor = self.mutation_factor + 0.1 * fitness_improvement\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + dynamic_mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.prev_best_fitness = self.best_fitness\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.prev_best_fitness = self.best_fitness\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "A hybrid algorithm enhancing convergence by incorporating dynamic mutation factor adjustment based on fitness improvement rate.", "configspace": "", "generation": 94, "fitness": 0.1207970985985515, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "bec551c5-dbca-401a-a1e0-2ae5af506c19", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "3e594f97-b05d-4529-bcb7-22b6874825ca", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "fa5fcce1-99f2-4acc-8276-51e494b82d5b", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
{"id": "d4bca877-10c0-451d-8716-f5d3c1aff43e", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        adaptive_mutation = self.mutation_factor * (1 + np.log1p(self.budget))\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + adaptive_mutation * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T, bias=True)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "Optimize convergence by introducing dynamic mutation factor scaling and refining covariance matrix adaptation.", "configspace": "", "generation": 98, "fitness": 0.11229440742993248, "feedback": "The algorithm HybridDE_ACME got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.1463535600055027, 0.13997159460264197, 0.14749731672471333, 0.19542180916760843, 0.15394701964546076, 0.1578654973290411, 0.1444750684470013, 0.14345260202846544, 0.1425276189075223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026496330317708816, 0.026075936465906446, 0.03533937545583066, 0.03872328903957567, 0.031069186876207855, 0.02761263410971626, 0.04400282396319377, 0.02983004307641879, 0.03345529927685875, 0.01874799446601738, 0.011753031709171413, 0.020922395071603983, 0.023898556613142552, 0.024473964154845484, 0.00799832236495912, 0.020190392143640046, 0.005184432041628995, 0.01451511681701212, 0.9869220976226877, 0.994060415268378, 0.9891806983736628, 0.990897298310084, 0.9874231612052289, 0.9864521788807181, 0.9777124531312841, 0.9909166406060399, 0.9913057464872043, 0.05797917493894533, 0.07158468845725308, 0.052246231488299655, 0.055530430387773055, 0.0504048591539924, 0.05711093576753734, 0.09922801472283826, 0.07486017952655455, 0.066170066449461, 0.10556263526223664, 0.09804250632855915, 0.11888931886767862, 0.10972202460790725, 0.12314719706099353, 0.09572981936023262, 0.10526353694470802, 0.09193273876756192, 0.1099166063578566, 0.019440801568164856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0087218558165707, 0.008129988541992539, 0.010475102178055584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022107593864136965, 0.025158935435546703, 0.024538428911149768, 0.03982190404662178, 0.012951811016129078, 0.03356871250712412, 0.00458784888346031, 0.03441966950742803, 0.0374010627247362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007663381348407272, 9.999999999998899e-05, 9.999999999998899e-05, 0.16027965837259595, 0.1541562117582176, 0.17077521866892276, 0.17612024736686327, 0.16606906417273148, 0.1637153951584911, 0.15902000871713184, 0.153683579612097, 0.15339205796478672, 0.05104491313404469, 0.0416744527348164, 0.04881239916592417, 0.032205523144791526, 0.034370532933171494, 0.03497787486821746, 0.03672992596226177, 0.0366785126952236, 0.030157053402361966, 0.13019289786051869, 0.1412637685059862, 0.12346853496783372, 0.1394129659854476, 0.1323271047161947, 0.1429544397881629, 0.1276391651881641, 0.1330381714543697, 0.14212905928595576, 0.15100571037781552, 0.15527350541073448, 0.14341606332573664, 0.14414003706321676, 0.1466647893643207, 0.14026735967676018, 0.15522567134706955, 0.1542121388522557, 0.1426269352319618, 0.08759814271062549, 0.08890928143870991, 0.08476372855529457, 0.1115120186620645, 0.09295720120937512, 0.09747300023845351, 0.0864186843913507, 0.09656482370979247, 0.09238261185929919, 0.1292069263478487, 0.1312957047719988, 0.13835878800001733, 0.15426453352562763, 0.1285489562434855, 0.1410147416468197, 0.13196666004362378, 0.1409403054172642, 0.13156393655438403, 0.12244078819462845, 0.13119409892074796, 0.008655446735746364, 0.10214290148243765, 9.999999999998899e-05, 0.12571959234214025, 0.12010901231784787, 0.12232546088234719, 0.06667378475634067, 0.13749185249744655, 0.12976306017654793, 0.12333878398080911, 0.16257593410794602, 0.13877613316873116, 0.15976229093513283, 0.1549607439041485, 0.14524854240961171, 0.11089224887921378, 0.14839866542493274, 0.11132907505483358, 0.15461596043913484, 0.10485506147981227, 0.10713772174651182, 0.1024365767707901, 0.17580880142231414, 0.16469729417757573, 0.143711784717232, 0.18357412105577664, 0.1937776863003272, 0.18124265744183388, 0.21488760348337177, 0.17777263633425244, 0.18581056852800526, 0.18160123187028, 0.18636299651844457, 0.18973987029509065, 0.053234873156162044, 0.036037685379712414, 0.04180151318552039, 0.04274610575465454, 0.028161162233570347, 0.03530318616341577, 0.03196441492127744, 0.029774291888899684, 0.03479387157564029]}, "mutation_prompt": null}
{"id": "06df28be-d955-4064-9acb-6d6ce266d76d", "solution": "import numpy as np\n\nclass HybridDE_ACME:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def differential_evolution_step(self, func):\n        current_crossover_probability = self.crossover_probability * np.tanh(1 - self.budget / (self.budget + 10))\n        volatility_factor = np.std(self.population, axis=0).mean() / 5.0\n        for i in range(self.population_size):\n            if self.budget <= 0:\n                break\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            a, b, c = self.population[indices]\n            mutant = np.clip(a + self.mutation_factor * volatility_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < current_crossover_probability\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.budget -= 1\n            if trial_fitness < self.fitness[i]:\n                self.fitness[i] = trial_fitness\n                self.population[i] = trial\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n    def adaptive_cma_step(self, func):\n        if self.best_solution is None:\n            self.best_solution = np.mean(self.population, axis=0)\n        covariance_matrix = np.cov(self.population.T)\n        eigvals, eigvecs = np.linalg.eigh(covariance_matrix)\n        step_size = np.sqrt(np.max(eigvals))\n        while self.budget > 0:\n            samples = np.random.multivariate_normal(self.best_solution, step_size * covariance_matrix, self.population_size)\n            samples = np.clip(samples, self.lower_bound, self.upper_bound)\n            for sample in samples:\n                if self.budget <= 0:\n                    break\n                sample_fitness = func(sample)\n                self.budget -= 1\n                if sample_fitness < self.best_fitness:\n                    self.best_fitness = sample_fitness\n                    self.best_solution = sample\n\n    def __call__(self, func):\n        while self.budget > 0:\n            self.differential_evolution_step(func)\n            if self.budget > self.population_size // 2:  # Selective CMA-ES\n                self.adaptive_cma_step(func)\n        return self.best_solution", "name": "HybridDE_ACME", "description": "An improved hybrid algorithm integrating an adaptive crossover mechanism and a selective covariance matrix adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0bec8f69-6245-47b8-923f-112b6fd0540c", "metadata": {"aucs": [0.15571950753718233, 0.15093649413082766, 0.20260790288209263, 0.1755079156511421, 0.18583723263523377, 0.1922864327730499, 0.16548497992465294, 0.16213218039485733, 0.2709141689826565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036548730000685814, 0.040548765459541336, 0.04482510765109615, 0.04118454062741561, 0.042025993313836274, 0.03752446632330453, 0.03276470997474157, 0.031486072861819814, 0.04401692370667609, 0.039191625532875696, 0.022129198331889754, 0.0287889733622827, 0.027189522282288325, 0.02727604307735343, 0.026796105183159113, 0.01906142459142024, 0.02181524673444024, 0.026913710340355057, 0.9906549689718989, 0.9872002104216312, 0.9780675623710345, 0.9690533386220713, 0.988578691296319, 0.9775607071064609, 0.9793866140633731, 0.9812145513953632, 0.9873411240262118, 0.07369605161183079, 0.06239394271302445, 0.05948536653757641, 0.061611378695349384, 0.07421852958948039, 0.06442621272397353, 0.08316180482590951, 0.07878908881951541, 0.08386349561841577, 0.14677043267655443, 0.14039814547415352, 0.11601110670694958, 0.1123277752236167, 0.10503311717613584, 0.1290009362126111, 0.11482223035365169, 0.11833364159500326, 0.1311120743675569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002328189540745207, 9.999999999998899e-05, 0.0024966461719022615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004372826614955527, 0.007281041831645019, 0.009616092855661895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011655640810077417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029860730595348106, 0.0472869327334382, 0.05925901600658812, 0.05659605271753754, 0.07896960742499848, 0.04591766318135648, 0.11214777368666584, 0.01704478347372429, 0.008286841031099224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641945798364745, 9.999999999998899e-05, 0.19244934042067963, 0.15237956030677502, 0.17238929627169342, 0.19753954834630993, 0.20615791771009995, 0.18705072913092935, 0.21755809839258378, 0.1694968465741673, 0.17885643760661152, 0.0497423063036454, 0.052486898151336, 0.03967917233572715, 0.04588623607581099, 0.048071783282709446, 0.0531236613909547, 0.033293168895588865, 0.032045089835446405, 0.056989522348956934, 0.17730356309213202, 0.14254549309522335, 0.1371050434515928, 0.1733566983997724, 0.14041756883327472, 0.1531541362371729, 0.15771675483531689, 0.15241710793085117, 0.13241055354990972, 0.16259154748195104, 0.14752843069174038, 0.16278130660179813, 0.14862420709036872, 0.15227375975773227, 0.1516302384335939, 0.15980425340978965, 0.1596739001831171, 0.1489516159563642, 0.09447315321370642, 0.11214781760534731, 0.09380739847027564, 0.0930628396206239, 0.11127782333020608, 0.0934152383767094, 0.09745187088883356, 0.12287422749691468, 0.09425426229172207, 0.14508203536549058, 0.1338484622195294, 0.13457098951522983, 0.13742213591943364, 0.13856933996575482, 0.1432524135938391, 0.14089120344000317, 0.1342521009587896, 0.15069646858826913, 0.0978932969062023, 0.044521628933850144, 0.14174917057825565, 0.14264194807189212, 0.08027624748170292, 0.09066522738405469, 0.1329324756741822, 0.1447542423705125, 0.10416039684577516, 0.12268463048748912, 0.1672112238472433, 0.16541438739041603, 0.12788542619972176, 0.12464679751788443, 0.14996910321210288, 0.22206396723822408, 0.12995256513811415, 0.11953784641722309, 0.1265597278919609, 0.14730832524040127, 0.1390451903312434, 0.1335454399409608, 0.10711479029607784, 0.15052832022014495, 0.17309264372456967, 0.18255671178988164, 0.1429841306216325, 0.184597429755053, 0.18300844814268846, 0.18138368856853115, 0.1961016620182503, 0.2036393388274691, 0.20276637166000933, 0.18190472865962626, 0.18325552715304916, 0.1920361181052831, 0.04411478245120237, 0.034633726852321356, 0.04304974962387709, 0.047848707041516, 0.04729109662780251, 0.05100957323298061, 0.04981199573154316, 0.042944978797482825, 0.04475908107765847]}, "mutation_prompt": null}
